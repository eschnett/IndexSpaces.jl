// PTX CompilerJob of frb(CuDeviceVector{Int16x2, 1}, CuDeviceVector{Float16x2, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Float16x2, 1}, CuDeviceVector{Int32, 1}) in world 33557 for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 7.1
.target sm_86
.address_size 64

	// .globl	_Z15julia_frb_1030913CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE // -- Begin function _Z15julia_frb_1030913CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[8]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z15julia_frb_1030913CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.visible .entry _Z15julia_frb_1030913CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE(
	.param .align 8 .b8 _Z15julia_frb_1030913CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0[8],
	.param .align 8 .b8 _Z15julia_frb_1030913CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z15julia_frb_1030913CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z15julia_frb_1030913CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z15julia_frb_1030913CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z15julia_frb_1030913CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<143>;
	.reg .b16 	%rs<283>;
	.reg .b32 	%r<3506>;
	.reg .f32 	%f<402>;
	.reg .b64 	%rd<287>;

// %bb.0:                               // %conversion
	// begin inline asm
	mov.u32 %r290, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r290, 76895;
	@%p1 bra 	LBB0_96;
	bra.uni 	LBB0_1;
LBB0_96:                                // %L10
	ld.param.u64 	%rd14, [_Z15julia_frb_1030913CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5];
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r291, %r2, 5;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r292, %r1, 768, %r291;
	or.b32  	%r293, %r292, %r3;
	mul.wide.u32 	%rd20, %r293, 4;
	add.s64 	%rd5, %rd14, %rd20;
	mov.u32 	%r294, 1;
	st.global.u32 	[%rd5], %r294;
	and.b32  	%r4, %r3, 3;
	shr.u32 	%r5, %r3, 2;
	mul.lo.s32 	%r295, %r4, %r5;
	and.b32  	%r296, %r295, 7;
	cvt.rn.f32.u32 	%f102, %r296;
	mov.f32 	%f103, 0f40800000;
	div.approx.f32 	%f1, %f102, %f103;
	abs.f32 	%f400, %f1;
	setp.lt.f32 	%p2, %f400, 0f40000000;
	@%p2 bra 	LBB0_108;
// %bb.97:
	setp.gtu.f32 	%p3, %f400, 0f4B800000;
	@%p3 bra 	LBB0_104;
	bra.uni 	LBB0_98;
LBB0_104:
	mov.b32 	%r221, %f400;
	and.b32  	%r297, %r221, 8388607;
	or.b32  	%r3504, %r297, 1065353216;
	mov.b32 	%f399, %r3504;
	add.s32 	%r298, %r221, -1073741824;
	and.b32  	%r3505, %r298, -8388608;
	setp.eq.s32 	%p9, %r3505, 0;
	@%p9 bra 	LBB0_107;
// %bb.105:                             // %__nv_fmaf_rn.exit4.i.i.i1407.preheader
	mov.f32 	%f113, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f112,%f113;
	// end inline asm
LBB0_106:                               // %__nv_fmaf_rn.exit4.i.i.i1407
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r299, %r3505, 192937984;
	add.s32 	%r300, %r299, %r3504;
	mov.b32 	%f114, %r300;
	mul.f32 	%f115, %f112, %f114;
	sub.f32 	%f116, %f114, %f115;
	fma.rn.f32 	%f117, %f116, %f112, %f115;
	sub.f32 	%f118, %f114, %f117;
	fma.rz.f32 	%f119, %f118, %f112, %f117;
	cvt.rzi.f32.f32 	%f120, %f119;
	sub.f32 	%f399, %f114, %f120;
	sub.s32 	%r3505, %r3505, %r299;
	mov.b32 	%r3504, %f399;
	setp.ne.s32 	%p10, %r3505, 0;
	setp.ne.s32 	%p11, %r3504, 0;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	LBB0_106;
LBB0_107:                               // %__internal_fmodf_slowpath_mod.exit.i.i1409
	setp.gt.u32 	%p13, %r221, 2139095039;
	selp.f32 	%f121, 0f7FFFFFFF, 0f4B800000, %p13;
	mul.f32 	%f122, %f399, 0f34000000;
	mul.f32 	%f400, %f121, %f122;
	bra.uni 	LBB0_108;
LBB0_98:                                // %__nv_fast_fdividef.exit.i.i.i1379
	mov.f32 	%f104, 0f40000000;
	div.approx.f32 	%f105, %f400, %f104;
	cvt.rzi.f32.f32 	%f398, %f105;
	fma.rn.f32 	%f88, %f398, 0fC0000000, %f400;
	mov.b32 	%r220, %f88;
	setp.lt.u32 	%p4, %r220, 1073741824;
	@%p4 bra 	LBB0_103;
// %bb.99:
	setp.lt.u32 	%p5, %r220, -2147483647;
	@%p5 bra 	LBB0_101;
// %bb.100:
	add.f32 	%f110, %f398, 0fBF800000;
	setp.lt.f32 	%p8, %f88, 0fC0000000;
	add.f32 	%f111, %f110, 0fBF800000;
	selp.f32 	%f398, %f111, %f110, %p8;
	bra.uni 	LBB0_103;
LBB0_101:
	add.f32 	%f398, %f398, 0f3F800000;
	setp.ltu.f32 	%p6, %f88, 0f40800000;
	@%p6 bra 	LBB0_103;
// %bb.102:                             // %__nv_fmaf_rn.exit.i.i.i1384
	add.f32 	%f106, %f398, 0f3F800000;
	fma.rn.f32 	%f108, %f104, 0fC0400000, %f88;
	setp.ge.f32 	%p7, %f108, 0f00000000;
	add.f32 	%f109, %f106, 0f3F800000;
	selp.f32 	%f398, %f109, %f106, %p7;
LBB0_103:                               // %__internal_fmodf_fastpath_quot.exit.i.i1388
	fma.rn.f32 	%f400, %f398, 0fC0000000, %f400;
LBB0_108:                               // %__internal_fmodf_kernel.exit.i1413
	abs.f32 	%f123, %f400;
	setp.gtu.f32 	%p14, %f123, 0f7F800000;
	@%p14 bra 	LBB0_110;
// %bb.109:
	mov.b32 	%r301, %f1;
	and.b32  	%r302, %r301, -2147483648;
	mov.b32 	%r303, %f400;
	or.b32  	%r304, %r302, %r303;
	mov.b32 	%f400, %r304;
LBB0_110:                               // %__nv_fmodf.exit1414
	add.f32 	%f125, %f400, %f400;
	mov.b32 	%r311, %f125;
	and.b32  	%r312, %r311, -2147483648;
	or.b32  	%r313, %r312, 1056964608;
	mov.b32 	%f126, %r313;
	add.f32 	%f127, %f125, %f126;
	cvt.rzi.f32.f32 	%f128, %f127;
	abs.f32 	%f129, %f125;
	setp.gt.f32 	%p15, %f129, 0f4B000000;
	selp.f32 	%f130, %f125, %f128, %p15;
	cvt.rzi.f32.f32 	%f131, %f125;
	setp.lt.f32 	%p16, %f129, 0f3F000000;
	selp.f32 	%f132, %f131, %f130, %p16;
	cvt.rzi.s32.f32 	%r314, %f132;
	fma.rn.f32 	%f133, %f132, 0fBF000000, %f400;
	mul.f32 	%f134, %f133, 0f34222169;
	fma.rn.f32 	%f135, %f133, 0f40490FDA, %f134;
	mul.f32 	%f136, %f135, %f135;
	fma.rn.f32 	%f137, %f136, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f138, %f137, %f136, 0f3D2AAABB;
	fma.rn.f32 	%f139, %f138, %f136, 0fBEFFFFFF;
	fma.rn.f32 	%f140, %f139, %f136, 0f3F800000;
	fma.rn.f32 	%f141, %f136, %f135, 0f00000000;
	fma.rn.f32 	%f142, %f136, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f143, %f142, %f136, 0fBE2AAAA8;
	fma.rn.f32 	%f144, %f143, %f141, %f135;
	and.b32  	%r315, %r314, 1;
	setp.eq.b32 	%p17, %r315, 1;
	selp.f32 	%f145, %f140, %f144, %p17;
	selp.f32 	%f146, %f144, %f140, %p17;
	and.b32  	%r316, %r314, 2;
	setp.eq.s32 	%p18, %r316, 0;
	neg.f32 	%f147, %f145;
	selp.f32 	%f148, %f145, %f147, %p18;
	add.s32 	%r317, %r314, 1;
	and.b32  	%r318, %r317, 2;
	mov.f32 	%f396, 0f00000000;
	cvt.rzi.f32.f32 	%f151, %f400;
	setp.eq.f32 	%p20, %f151, %f400;
	mul.f32 	%f152, %f400, 0f00000000;
	shl.b32 	%r230, %r3, 1;
	and.b32  	%r231, %r230, 6;
	or.b32  	%r232, %r231, 1;
	setp.eq.s32 	%p22, %r231, 6;
	mov.f32 	%f372, 0f41C00000;
	mul.lo.s32 	%r3404, %r231, %r5;
	mov.f32 	%f378, %f396;
	mov.f32 	%f379, %f396;
	@%p22 bra 	LBB0_17;
// %bb.2:                               // %L206
	cvt.u16.u32 	%rs3, %r3404;
	and.b16  	%rs4, %rs3, 255;
	mul.lo.s16 	%rs5, %rs4, 171;
	shr.u16 	%rs6, %rs5, 13;
	mul.lo.s16 	%rs7, %rs6, 48;
	sub.s16 	%rs8, %rs3, %rs7;
	and.b16  	%rs9, %rs8, 255;
	cvt.rn.f32.u16 	%f157, %rs9;
	div.approx.f32 	%f3, %f157, %f372;
	abs.f32 	%f376, %f3;
	setp.lt.f32 	%p23, %f376, 0f40000000;
	@%p23 bra 	LBB0_14;
// %bb.3:
	setp.gtu.f32 	%p24, %f376, 0f4B800000;
	@%p24 bra 	LBB0_10;
	bra.uni 	LBB0_4;
LBB0_10:
	mov.b32 	%r7, %f376;
	and.b32  	%r320, %r7, 8388607;
	or.b32  	%r3409, %r320, 1065353216;
	mov.b32 	%f375, %r3409;
	add.s32 	%r321, %r7, -1073741824;
	and.b32  	%r3410, %r321, -8388608;
	setp.eq.s32 	%p30, %r3410, 0;
	@%p30 bra 	LBB0_13;
// %bb.11:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f168, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f167,%f168;
	// end inline asm
LBB0_12:                                // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r322, %r3410, 192937984;
	add.s32 	%r323, %r322, %r3409;
	mov.b32 	%f169, %r323;
	mul.f32 	%f170, %f167, %f169;
	sub.f32 	%f171, %f169, %f170;
	fma.rn.f32 	%f172, %f171, %f167, %f170;
	sub.f32 	%f173, %f169, %f172;
	fma.rz.f32 	%f174, %f173, %f167, %f172;
	cvt.rzi.f32.f32 	%f175, %f174;
	sub.f32 	%f375, %f169, %f175;
	sub.s32 	%r3410, %r3410, %r322;
	mov.b32 	%r3409, %f375;
	setp.ne.s32 	%p31, %r3410, 0;
	setp.ne.s32 	%p32, %r3409, 0;
	and.pred  	%p33, %p31, %p32;
	@%p33 bra 	LBB0_12;
LBB0_13:                                // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p34, %r7, 2139095039;
	selp.f32 	%f176, 0f7FFFFFFF, 0f4B800000, %p34;
	mul.f32 	%f177, %f375, 0f34000000;
	mul.f32 	%f376, %f176, %f177;
	bra.uni 	LBB0_14;
LBB0_4:                                 // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f159, 0f40000000;
	div.approx.f32 	%f160, %f376, %f159;
	cvt.rzi.f32.f32 	%f374, %f160;
	fma.rn.f32 	%f6, %f374, 0fC0000000, %f376;
	mov.b32 	%r6, %f6;
	setp.lt.u32 	%p25, %r6, 1073741824;
	@%p25 bra 	LBB0_9;
// %bb.5:
	setp.lt.u32 	%p26, %r6, -2147483647;
	@%p26 bra 	LBB0_7;
// %bb.6:
	add.f32 	%f165, %f374, 0fBF800000;
	setp.lt.f32 	%p29, %f6, 0fC0000000;
	add.f32 	%f166, %f165, 0fBF800000;
	selp.f32 	%f374, %f166, %f165, %p29;
	bra.uni 	LBB0_9;
LBB0_7:
	add.f32 	%f374, %f374, 0f3F800000;
	setp.ltu.f32 	%p27, %f6, 0f40800000;
	@%p27 bra 	LBB0_9;
// %bb.8:                               // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f161, %f374, 0f3F800000;
	fma.rn.f32 	%f163, %f159, 0fC0400000, %f6;
	setp.ge.f32 	%p28, %f163, 0f00000000;
	add.f32 	%f164, %f161, 0f3F800000;
	selp.f32 	%f374, %f164, %f161, %p28;
LBB0_9:                                 // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f376, %f374, 0fC0000000, %f376;
LBB0_14:                                // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f178, %f376;
	setp.gtu.f32 	%p35, %f178, 0f7F800000;
	@%p35 bra 	LBB0_16;
// %bb.15:
	mov.b32 	%r324, %f3;
	and.b32  	%r325, %r324, -2147483648;
	mov.b32 	%r326, %f376;
	or.b32  	%r327, %r325, %r326;
	mov.b32 	%f376, %r327;
LBB0_16:                                // %__nv_fmodf.exit
	add.f32 	%f179, %f376, %f376;
	mov.b32 	%r328, %f179;
	and.b32  	%r329, %r328, -2147483648;
	or.b32  	%r330, %r329, 1056964608;
	mov.b32 	%f180, %r330;
	add.f32 	%f181, %f179, %f180;
	cvt.rzi.f32.f32 	%f182, %f181;
	abs.f32 	%f183, %f179;
	setp.gt.f32 	%p36, %f183, 0f4B000000;
	selp.f32 	%f184, %f179, %f182, %p36;
	cvt.rzi.f32.f32 	%f185, %f179;
	setp.lt.f32 	%p37, %f183, 0f3F000000;
	selp.f32 	%f186, %f185, %f184, %p37;
	cvt.rzi.s32.f32 	%r331, %f186;
	fma.rn.f32 	%f187, %f186, 0fBF000000, %f376;
	mul.f32 	%f188, %f187, 0f34222169;
	fma.rn.f32 	%f189, %f187, 0f40490FDA, %f188;
	mul.f32 	%f190, %f189, %f189;
	fma.rn.f32 	%f191, %f190, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f192, %f191, %f190, 0f3D2AAABB;
	fma.rn.f32 	%f193, %f192, %f190, 0fBEFFFFFF;
	fma.rn.f32 	%f194, %f193, %f190, 0f3F800000;
	fma.rn.f32 	%f195, %f190, %f189, 0f00000000;
	fma.rn.f32 	%f196, %f190, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f197, %f196, %f190, 0fBE2AAAA8;
	fma.rn.f32 	%f198, %f197, %f195, %f189;
	and.b32  	%r332, %r331, 1;
	setp.eq.b32 	%p38, %r332, 1;
	selp.f32 	%f199, %f194, %f198, %p38;
	selp.f32 	%f200, %f198, %f194, %p38;
	and.b32  	%r333, %r331, 2;
	setp.eq.s32 	%p39, %r333, 0;
	neg.f32 	%f201, %f199;
	selp.f32 	%f202, %f199, %f201, %p39;
	add.s32 	%r334, %r331, 1;
	and.b32  	%r335, %r334, 2;
	setp.eq.s32 	%p40, %r335, 0;
	mov.f32 	%f203, 0f00000000;
	sub.f32 	%f204, %f203, %f200;
	selp.f32 	%f205, %f200, %f204, %p40;
	cvt.rzi.f32.f32 	%f206, %f376;
	setp.eq.f32 	%p41, %f206, %f376;
	mul.f32 	%f207, %f376, 0f00000000;
	selp.f32 	%f379, %f207, %f202, %p41;
	abs.f32 	%f208, %f376;
	setp.gt.f32 	%p42, %f208, 0f4B800000;
	add.f32 	%f209, %f379, 0f3F800000;
	selp.f32 	%f378, %f209, %f205, %p42;
LBB0_17:                                // %L222
	setp.eq.s32 	%p19, %r318, 0;
	sub.f32 	%f149, %f396, %f146;
	selp.f32 	%f153, %f152, %f148, %p20;
	abs.f32 	%f154, %f400;
	setp.gt.u32 	%p43, %r232, 5;
	mul.lo.s32 	%r3405, %r232, %r5;
	mov.f32 	%f384, %f396;
	mov.f32 	%f385, %f396;
	@%p43 bra 	LBB0_33;
// %bb.18:                              // %L226
	mul.hi.u32 	%r337, %r3405, -1431655765;
	shr.u32 	%r338, %r337, 5;
	mul.lo.s32 	%r339, %r338, 48;
	sub.s32 	%r340, %r3405, %r339;
	cvt.rn.f32.s32 	%f211, %r340;
	div.approx.f32 	%f24, %f211, %f372;
	abs.f32 	%f382, %f24;
	setp.lt.f32 	%p44, %f382, 0f40000000;
	@%p44 bra 	LBB0_30;
// %bb.19:
	setp.gtu.f32 	%p45, %f382, 0f4B800000;
	@%p45 bra 	LBB0_26;
	bra.uni 	LBB0_20;
LBB0_26:
	mov.b32 	%r15, %f382;
	and.b32  	%r341, %r15, 8388607;
	or.b32  	%r3411, %r341, 1065353216;
	mov.b32 	%f381, %r3411;
	add.s32 	%r342, %r15, -1073741824;
	and.b32  	%r3412, %r342, -8388608;
	setp.eq.s32 	%p51, %r3412, 0;
	@%p51 bra 	LBB0_29;
// %bb.27:                              // %__nv_fmaf_rn.exit4.i.i.i1269.preheader
	mov.f32 	%f222, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f221,%f222;
	// end inline asm
LBB0_28:                                // %__nv_fmaf_rn.exit4.i.i.i1269
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r343, %r3412, 192937984;
	add.s32 	%r344, %r343, %r3411;
	mov.b32 	%f223, %r344;
	mul.f32 	%f224, %f221, %f223;
	sub.f32 	%f225, %f223, %f224;
	fma.rn.f32 	%f226, %f225, %f221, %f224;
	sub.f32 	%f227, %f223, %f226;
	fma.rz.f32 	%f228, %f227, %f221, %f226;
	cvt.rzi.f32.f32 	%f229, %f228;
	sub.f32 	%f381, %f223, %f229;
	sub.s32 	%r3412, %r3412, %r343;
	mov.b32 	%r3411, %f381;
	setp.ne.s32 	%p52, %r3412, 0;
	setp.ne.s32 	%p53, %r3411, 0;
	and.pred  	%p54, %p52, %p53;
	@%p54 bra 	LBB0_28;
LBB0_29:                                // %__internal_fmodf_slowpath_mod.exit.i.i1271
	setp.gt.u32 	%p55, %r15, 2139095039;
	selp.f32 	%f230, 0f7FFFFFFF, 0f4B800000, %p55;
	mul.f32 	%f231, %f381, 0f34000000;
	mul.f32 	%f382, %f230, %f231;
	bra.uni 	LBB0_30;
LBB0_20:                                // %__nv_fast_fdividef.exit.i.i.i1241
	mov.f32 	%f213, 0f40000000;
	div.approx.f32 	%f214, %f382, %f213;
	cvt.rzi.f32.f32 	%f380, %f214;
	fma.rn.f32 	%f27, %f380, 0fC0000000, %f382;
	mov.b32 	%r14, %f27;
	setp.lt.u32 	%p46, %r14, 1073741824;
	@%p46 bra 	LBB0_25;
// %bb.21:
	setp.lt.u32 	%p47, %r14, -2147483647;
	@%p47 bra 	LBB0_23;
// %bb.22:
	add.f32 	%f219, %f380, 0fBF800000;
	setp.lt.f32 	%p50, %f27, 0fC0000000;
	add.f32 	%f220, %f219, 0fBF800000;
	selp.f32 	%f380, %f220, %f219, %p50;
	bra.uni 	LBB0_25;
LBB0_23:
	add.f32 	%f380, %f380, 0f3F800000;
	setp.ltu.f32 	%p48, %f27, 0f40800000;
	@%p48 bra 	LBB0_25;
// %bb.24:                              // %__nv_fmaf_rn.exit.i.i.i1246
	add.f32 	%f215, %f380, 0f3F800000;
	fma.rn.f32 	%f217, %f213, 0fC0400000, %f27;
	setp.ge.f32 	%p49, %f217, 0f00000000;
	add.f32 	%f218, %f215, 0f3F800000;
	selp.f32 	%f380, %f218, %f215, %p49;
LBB0_25:                                // %__internal_fmodf_fastpath_quot.exit.i.i1250
	fma.rn.f32 	%f382, %f380, 0fC0000000, %f382;
LBB0_30:                                // %__internal_fmodf_kernel.exit.i1275
	abs.f32 	%f232, %f382;
	setp.gtu.f32 	%p56, %f232, 0f7F800000;
	@%p56 bra 	LBB0_32;
// %bb.31:
	mov.b32 	%r345, %f24;
	and.b32  	%r346, %r345, -2147483648;
	mov.b32 	%r347, %f382;
	or.b32  	%r348, %r346, %r347;
	mov.b32 	%f382, %r348;
LBB0_32:                                // %__nv_fmodf.exit1276
	add.f32 	%f233, %f382, %f382;
	mov.b32 	%r349, %f233;
	and.b32  	%r350, %r349, -2147483648;
	or.b32  	%r351, %r350, 1056964608;
	mov.b32 	%f234, %r351;
	add.f32 	%f235, %f233, %f234;
	cvt.rzi.f32.f32 	%f236, %f235;
	abs.f32 	%f237, %f233;
	setp.gt.f32 	%p57, %f237, 0f4B000000;
	selp.f32 	%f238, %f233, %f236, %p57;
	cvt.rzi.f32.f32 	%f239, %f233;
	setp.lt.f32 	%p58, %f237, 0f3F000000;
	selp.f32 	%f240, %f239, %f238, %p58;
	cvt.rzi.s32.f32 	%r352, %f240;
	fma.rn.f32 	%f241, %f240, 0fBF000000, %f382;
	mul.f32 	%f242, %f241, 0f34222169;
	fma.rn.f32 	%f243, %f241, 0f40490FDA, %f242;
	mul.f32 	%f244, %f243, %f243;
	fma.rn.f32 	%f245, %f244, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f246, %f245, %f244, 0f3D2AAABB;
	fma.rn.f32 	%f247, %f246, %f244, 0fBEFFFFFF;
	fma.rn.f32 	%f248, %f247, %f244, 0f3F800000;
	fma.rn.f32 	%f249, %f244, %f243, 0f00000000;
	fma.rn.f32 	%f250, %f244, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f251, %f250, %f244, 0fBE2AAAA8;
	fma.rn.f32 	%f252, %f251, %f249, %f243;
	and.b32  	%r353, %r352, 1;
	setp.eq.b32 	%p59, %r353, 1;
	selp.f32 	%f253, %f248, %f252, %p59;
	selp.f32 	%f254, %f252, %f248, %p59;
	and.b32  	%r354, %r352, 2;
	setp.eq.s32 	%p60, %r354, 0;
	neg.f32 	%f255, %f253;
	selp.f32 	%f256, %f253, %f255, %p60;
	add.s32 	%r355, %r352, 1;
	and.b32  	%r356, %r355, 2;
	setp.eq.s32 	%p61, %r356, 0;
	mov.f32 	%f257, 0f00000000;
	sub.f32 	%f258, %f257, %f254;
	selp.f32 	%f259, %f254, %f258, %p61;
	cvt.rzi.f32.f32 	%f260, %f382;
	setp.eq.f32 	%p62, %f260, %f382;
	mul.f32 	%f261, %f382, 0f00000000;
	selp.f32 	%f385, %f261, %f256, %p62;
	abs.f32 	%f262, %f382;
	setp.gt.f32 	%p63, %f262, 0f4B800000;
	add.f32 	%f263, %f385, 0f3F800000;
	selp.f32 	%f384, %f263, %f259, %p63;
LBB0_33:                                // %L242
	selp.f32 	%f150, %f146, %f149, %p19;
	setp.gt.f32 	%p21, %f154, 0f4B800000;
	add.f32 	%f155, %f153, 0f3F800000;
	setp.gt.u32 	%p65, %r3, 23;
	or.pred  	%p66, %p22, %p65;
	mov.f32 	%f373, 0f40400000;
	mov.f32 	%f390, %f396;
	mov.f32 	%f391, %f396;
	@%p66 bra 	LBB0_49;
// %bb.34:                              // %L279
	cvt.u16.u32 	%rs10, %r3404;
	and.b16  	%rs11, %rs10, 255;
	mul.lo.s16 	%rs12, %rs11, 171;
	shr.u16 	%rs13, %rs12, 10;
	mul.lo.s16 	%rs14, %rs13, 6;
	sub.s16 	%rs15, %rs10, %rs14;
	and.b16  	%rs16, %rs15, 255;
	cvt.rn.f32.u16 	%f265, %rs16;
	div.approx.f32 	%f45, %f265, %f373;
	abs.f32 	%f388, %f45;
	setp.lt.f32 	%p67, %f388, 0f40000000;
	@%p67 bra 	LBB0_46;
// %bb.35:
	setp.gtu.f32 	%p68, %f388, 0f4B800000;
	@%p68 bra 	LBB0_42;
	bra.uni 	LBB0_36;
LBB0_42:
	mov.b32 	%r25, %f388;
	and.b32  	%r364, %r25, 8388607;
	or.b32  	%r3413, %r364, 1065353216;
	mov.b32 	%f387, %r3413;
	add.s32 	%r365, %r25, -1073741824;
	and.b32  	%r3414, %r365, -8388608;
	setp.eq.s32 	%p74, %r3414, 0;
	@%p74 bra 	LBB0_45;
// %bb.43:                              // %__nv_fmaf_rn.exit4.i.i.i1315.preheader
	mov.f32 	%f276, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f275,%f276;
	// end inline asm
LBB0_44:                                // %__nv_fmaf_rn.exit4.i.i.i1315
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r366, %r3414, 192937984;
	add.s32 	%r367, %r366, %r3413;
	mov.b32 	%f277, %r367;
	mul.f32 	%f278, %f275, %f277;
	sub.f32 	%f279, %f277, %f278;
	fma.rn.f32 	%f280, %f279, %f275, %f278;
	sub.f32 	%f281, %f277, %f280;
	fma.rz.f32 	%f282, %f281, %f275, %f280;
	cvt.rzi.f32.f32 	%f283, %f282;
	sub.f32 	%f387, %f277, %f283;
	sub.s32 	%r3414, %r3414, %r366;
	mov.b32 	%r3413, %f387;
	setp.ne.s32 	%p75, %r3414, 0;
	setp.ne.s32 	%p76, %r3413, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	LBB0_44;
LBB0_45:                                // %__internal_fmodf_slowpath_mod.exit.i.i1317
	setp.gt.u32 	%p78, %r25, 2139095039;
	selp.f32 	%f284, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f285, %f387, 0f34000000;
	mul.f32 	%f388, %f284, %f285;
	bra.uni 	LBB0_46;
LBB0_36:                                // %__nv_fast_fdividef.exit.i.i.i1287
	mov.f32 	%f267, 0f40000000;
	div.approx.f32 	%f268, %f388, %f267;
	cvt.rzi.f32.f32 	%f386, %f268;
	fma.rn.f32 	%f48, %f386, 0fC0000000, %f388;
	mov.b32 	%r24, %f48;
	setp.lt.u32 	%p69, %r24, 1073741824;
	@%p69 bra 	LBB0_41;
// %bb.37:
	setp.lt.u32 	%p70, %r24, -2147483647;
	@%p70 bra 	LBB0_39;
// %bb.38:
	add.f32 	%f273, %f386, 0fBF800000;
	setp.lt.f32 	%p73, %f48, 0fC0000000;
	add.f32 	%f274, %f273, 0fBF800000;
	selp.f32 	%f386, %f274, %f273, %p73;
	bra.uni 	LBB0_41;
LBB0_39:
	add.f32 	%f386, %f386, 0f3F800000;
	setp.ltu.f32 	%p71, %f48, 0f40800000;
	@%p71 bra 	LBB0_41;
// %bb.40:                              // %__nv_fmaf_rn.exit.i.i.i1292
	add.f32 	%f269, %f386, 0f3F800000;
	fma.rn.f32 	%f271, %f267, 0fC0400000, %f48;
	setp.ge.f32 	%p72, %f271, 0f00000000;
	add.f32 	%f272, %f269, 0f3F800000;
	selp.f32 	%f386, %f272, %f269, %p72;
LBB0_41:                                // %__internal_fmodf_fastpath_quot.exit.i.i1296
	fma.rn.f32 	%f388, %f386, 0fC0000000, %f388;
LBB0_46:                                // %__internal_fmodf_kernel.exit.i1321
	abs.f32 	%f286, %f388;
	setp.gtu.f32 	%p79, %f286, 0f7F800000;
	@%p79 bra 	LBB0_48;
// %bb.47:
	mov.b32 	%r368, %f45;
	and.b32  	%r369, %r368, -2147483648;
	mov.b32 	%r370, %f388;
	or.b32  	%r371, %r369, %r370;
	mov.b32 	%f388, %r371;
LBB0_48:                                // %__nv_fmodf.exit1322
	add.f32 	%f287, %f388, %f388;
	mov.b32 	%r372, %f287;
	and.b32  	%r373, %r372, -2147483648;
	or.b32  	%r374, %r373, 1056964608;
	mov.b32 	%f288, %r374;
	add.f32 	%f289, %f287, %f288;
	cvt.rzi.f32.f32 	%f290, %f289;
	abs.f32 	%f291, %f287;
	setp.gt.f32 	%p80, %f291, 0f4B000000;
	selp.f32 	%f292, %f287, %f290, %p80;
	cvt.rzi.f32.f32 	%f293, %f287;
	setp.lt.f32 	%p81, %f291, 0f3F000000;
	selp.f32 	%f294, %f293, %f292, %p81;
	cvt.rzi.s32.f32 	%r375, %f294;
	fma.rn.f32 	%f295, %f294, 0fBF000000, %f388;
	mul.f32 	%f296, %f295, 0f34222169;
	fma.rn.f32 	%f297, %f295, 0f40490FDA, %f296;
	mul.f32 	%f298, %f297, %f297;
	fma.rn.f32 	%f299, %f298, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f300, %f299, %f298, 0f3D2AAABB;
	fma.rn.f32 	%f301, %f300, %f298, 0fBEFFFFFF;
	fma.rn.f32 	%f302, %f301, %f298, 0f3F800000;
	fma.rn.f32 	%f303, %f298, %f297, 0f00000000;
	fma.rn.f32 	%f304, %f298, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f305, %f304, %f298, 0fBE2AAAA8;
	fma.rn.f32 	%f306, %f305, %f303, %f297;
	and.b32  	%r376, %r375, 1;
	setp.eq.b32 	%p82, %r376, 1;
	selp.f32 	%f307, %f302, %f306, %p82;
	selp.f32 	%f308, %f306, %f302, %p82;
	and.b32  	%r377, %r375, 2;
	setp.eq.s32 	%p83, %r377, 0;
	neg.f32 	%f309, %f307;
	selp.f32 	%f310, %f307, %f309, %p83;
	add.s32 	%r378, %r375, 1;
	and.b32  	%r379, %r378, 2;
	setp.eq.s32 	%p84, %r379, 0;
	mov.f32 	%f311, 0f00000000;
	sub.f32 	%f312, %f311, %f308;
	selp.f32 	%f313, %f308, %f312, %p84;
	cvt.rzi.f32.f32 	%f314, %f388;
	setp.eq.f32 	%p85, %f314, %f388;
	mul.f32 	%f315, %f388, 0f00000000;
	selp.f32 	%f391, %f315, %f310, %p85;
	abs.f32 	%f316, %f388;
	setp.gt.f32 	%p86, %f316, 0f4B800000;
	add.f32 	%f317, %f391, 0f3F800000;
	selp.f32 	%f390, %f317, %f313, %p86;
LBB0_49:                                // %L295
	selp.f32 	%f156, %f155, %f150, %p21;
	or.pred  	%p89, %p43, %p65;
	mov.f32 	%f397, %f396;
	@%p89 bra 	LBB0_65;
// %bb.50:                              // %L303
	mul.hi.u32 	%r381, %r3405, -1431655765;
	shr.u32 	%r382, %r381, 2;
	mul.lo.s32 	%r383, %r382, 6;
	sub.s32 	%r384, %r3405, %r383;
	cvt.rn.f32.s32 	%f319, %r384;
	div.approx.f32 	%f66, %f319, %f373;
	abs.f32 	%f394, %f66;
	setp.lt.f32 	%p90, %f394, 0f40000000;
	@%p90 bra 	LBB0_62;
// %bb.51:
	setp.gtu.f32 	%p91, %f394, 0f4B800000;
	@%p91 bra 	LBB0_58;
	bra.uni 	LBB0_52;
LBB0_58:
	mov.b32 	%r33, %f394;
	and.b32  	%r385, %r33, 8388607;
	or.b32  	%r3415, %r385, 1065353216;
	mov.b32 	%f393, %r3415;
	add.s32 	%r386, %r33, -1073741824;
	and.b32  	%r3416, %r386, -8388608;
	setp.eq.s32 	%p97, %r3416, 0;
	@%p97 bra 	LBB0_61;
// %bb.59:                              // %__nv_fmaf_rn.exit4.i.i.i1361.preheader
	mov.f32 	%f330, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f329,%f330;
	// end inline asm
LBB0_60:                                // %__nv_fmaf_rn.exit4.i.i.i1361
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r387, %r3416, 192937984;
	add.s32 	%r388, %r387, %r3415;
	mov.b32 	%f331, %r388;
	mul.f32 	%f332, %f329, %f331;
	sub.f32 	%f333, %f331, %f332;
	fma.rn.f32 	%f334, %f333, %f329, %f332;
	sub.f32 	%f335, %f331, %f334;
	fma.rz.f32 	%f336, %f335, %f329, %f334;
	cvt.rzi.f32.f32 	%f337, %f336;
	sub.f32 	%f393, %f331, %f337;
	sub.s32 	%r3416, %r3416, %r387;
	mov.b32 	%r3415, %f393;
	setp.ne.s32 	%p98, %r3416, 0;
	setp.ne.s32 	%p99, %r3415, 0;
	and.pred  	%p100, %p98, %p99;
	@%p100 bra 	LBB0_60;
LBB0_61:                                // %__internal_fmodf_slowpath_mod.exit.i.i1363
	setp.gt.u32 	%p101, %r33, 2139095039;
	selp.f32 	%f338, 0f7FFFFFFF, 0f4B800000, %p101;
	mul.f32 	%f339, %f393, 0f34000000;
	mul.f32 	%f394, %f338, %f339;
	bra.uni 	LBB0_62;
LBB0_52:                                // %__nv_fast_fdividef.exit.i.i.i1333
	mov.f32 	%f321, 0f40000000;
	div.approx.f32 	%f322, %f394, %f321;
	cvt.rzi.f32.f32 	%f392, %f322;
	fma.rn.f32 	%f69, %f392, 0fC0000000, %f394;
	mov.b32 	%r32, %f69;
	setp.lt.u32 	%p92, %r32, 1073741824;
	@%p92 bra 	LBB0_57;
// %bb.53:
	setp.lt.u32 	%p93, %r32, -2147483647;
	@%p93 bra 	LBB0_55;
// %bb.54:
	add.f32 	%f327, %f392, 0fBF800000;
	setp.lt.f32 	%p96, %f69, 0fC0000000;
	add.f32 	%f328, %f327, 0fBF800000;
	selp.f32 	%f392, %f328, %f327, %p96;
	bra.uni 	LBB0_57;
LBB0_55:
	add.f32 	%f392, %f392, 0f3F800000;
	setp.ltu.f32 	%p94, %f69, 0f40800000;
	@%p94 bra 	LBB0_57;
// %bb.56:                              // %__nv_fmaf_rn.exit.i.i.i1338
	add.f32 	%f323, %f392, 0f3F800000;
	fma.rn.f32 	%f325, %f321, 0fC0400000, %f69;
	setp.ge.f32 	%p95, %f325, 0f00000000;
	add.f32 	%f326, %f323, 0f3F800000;
	selp.f32 	%f392, %f326, %f323, %p95;
LBB0_57:                                // %__internal_fmodf_fastpath_quot.exit.i.i1342
	fma.rn.f32 	%f394, %f392, 0fC0000000, %f394;
LBB0_62:                                // %__internal_fmodf_kernel.exit.i1367
	abs.f32 	%f340, %f394;
	setp.gtu.f32 	%p102, %f340, 0f7F800000;
	@%p102 bra 	LBB0_64;
// %bb.63:
	mov.b32 	%r389, %f66;
	and.b32  	%r390, %r389, -2147483648;
	mov.b32 	%r391, %f394;
	or.b32  	%r392, %r390, %r391;
	mov.b32 	%f394, %r392;
LBB0_64:                                // %__nv_fmodf.exit1368
	add.f32 	%f341, %f394, %f394;
	mov.b32 	%r393, %f341;
	and.b32  	%r394, %r393, -2147483648;
	or.b32  	%r395, %r394, 1056964608;
	mov.b32 	%f342, %r395;
	add.f32 	%f343, %f341, %f342;
	cvt.rzi.f32.f32 	%f344, %f343;
	abs.f32 	%f345, %f341;
	setp.gt.f32 	%p103, %f345, 0f4B000000;
	selp.f32 	%f346, %f341, %f344, %p103;
	cvt.rzi.f32.f32 	%f347, %f341;
	setp.lt.f32 	%p104, %f345, 0f3F000000;
	selp.f32 	%f348, %f347, %f346, %p104;
	cvt.rzi.s32.f32 	%r396, %f348;
	fma.rn.f32 	%f349, %f348, 0fBF000000, %f394;
	mul.f32 	%f350, %f349, 0f34222169;
	fma.rn.f32 	%f351, %f349, 0f40490FDA, %f350;
	mul.f32 	%f352, %f351, %f351;
	fma.rn.f32 	%f353, %f352, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f354, %f353, %f352, 0f3D2AAABB;
	fma.rn.f32 	%f355, %f354, %f352, 0fBEFFFFFF;
	fma.rn.f32 	%f356, %f355, %f352, 0f3F800000;
	fma.rn.f32 	%f357, %f352, %f351, 0f00000000;
	fma.rn.f32 	%f358, %f352, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f359, %f358, %f352, 0fBE2AAAA8;
	fma.rn.f32 	%f360, %f359, %f357, %f351;
	and.b32  	%r397, %r396, 1;
	setp.eq.b32 	%p105, %r397, 1;
	selp.f32 	%f361, %f356, %f360, %p105;
	selp.f32 	%f362, %f360, %f356, %p105;
	and.b32  	%r398, %r396, 2;
	setp.eq.s32 	%p106, %r398, 0;
	neg.f32 	%f363, %f361;
	selp.f32 	%f364, %f361, %f363, %p106;
	add.s32 	%r399, %r396, 1;
	and.b32  	%r400, %r399, 2;
	setp.eq.s32 	%p107, %r400, 0;
	mov.f32 	%f365, 0f00000000;
	sub.f32 	%f366, %f365, %f362;
	selp.f32 	%f367, %f362, %f366, %p107;
	cvt.rzi.f32.f32 	%f368, %f394;
	setp.eq.f32 	%p108, %f368, %f394;
	mul.f32 	%f369, %f394, 0f00000000;
	selp.f32 	%f397, %f369, %f364, %p108;
	abs.f32 	%f370, %f394;
	setp.gt.f32 	%p109, %f370, 0f4B800000;
	add.f32 	%f371, %f397, 0f3F800000;
	selp.f32 	%f396, %f371, %f367, %p109;
LBB0_65:                                // %L319
	mov.b32 	%r307, %f156;
	mov.b32 	%r310, %f153;
	mov.b32 	%r402, %f390;
	mov.b32 	%r403, %f396;
	mov.b32 	%r408, %f391;
	mov.b32 	%r409, %f397;
	mov.u32 	%r3417, 999999999;
	cvt.u16.u32 	%rs281, %r3;
	@%p65 bra 	LBB0_67;
// %bb.66:                              // %L355
	ld.param.u64 	%rd1, [_Z15julia_frb_1030913CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1];
	and.b16  	%rs18, %rs281, 255;
	mul.lo.s16 	%rs19, %rs18, 171;
	shr.u16 	%rs20, %rs19, 12;
	mul.lo.s16 	%rs21, %rs20, 24;
	sub.s16 	%rs22, %rs281, %rs21;
	cvt.u32.u16 	%r414, %rs22;
	and.b32  	%r415, %r414, 255;
	mad.lo.s32 	%r416, %r415, 24, %r2;
	cvt.u16.u32 	%rs23, %r416;
	mul.hi.u16 	%rs24, %rs23, -7281;
	shr.u16 	%rs25, %rs24, 9;
	mul.lo.s16 	%rs26, %rs25, 576;
	sub.s16 	%rs27, %rs23, %rs26;
	cvt.u32.u16 	%r417, %rs27;
	mul.wide.u32 	%rd21, %r417, 4;
	add.s64 	%rd22, %rd1, %rd21;
	ld.global.u32 	%r418, [%rd22];
	cvt.s32.s16 	%r419, %r418;
	shr.s32 	%r420, %r418, 16;
	mul.lo.s32 	%r421, %r420, 801;
	mad.lo.s32 	%r3417, %r419, 33, %r421;
LBB0_67:                                // %L433
	xor.b32  	%r306, %r310, -2147483648;
	mov.b32 	%r358, %f378;
	mov.b32 	%r359, %f384;
	mov.b32 	%r361, %f379;
	mov.b32 	%r362, %f385;
	xor.b32  	%r405, %r408, -2147483648;
	xor.b32  	%r406, %r409, -2147483648;
	and.b32  	%r46, %r3, 24;
	setp.ne.s32 	%p111, %r46, 24;
	cvt.u16.u32 	%rs28, %r2;
	and.b16  	%rs29, %rs28, 255;
	mul.lo.s16 	%rs30, %rs29, 171;
	shr.u16 	%rs1, %rs30, 10;
	mul.lo.s16 	%rs31, %rs1, -6;
	add.s16 	%rs32, %rs31, %rs28;
	cvt.u32.u16 	%r422, %rs32;
	and.b32  	%r48, %r422, 255;
	cvt.u32.u16 	%r3420, %rs1;
	cvt.u16.u32 	%rs282, %r5;
	mul.wide.u16 	%r3418, %rs1, 6;
	@%p111 bra 	LBB0_69;
// %bb.68:                              // %L433.L740_crit_edge
	mul.lo.s16 	%rs40, %rs282, 171;
	shr.u16 	%rs41, %rs40, 10;
	mul.lo.s16 	%rs42, %rs41, 6;
	sub.s16 	%rs43, %rs282, %rs42;
	cvt.u32.u16 	%r435, %rs43;
	and.b32  	%r3419, %r435, 255;
	mov.u32 	%r3421, 0;
	mov.u32 	%r3422, %r3421;
	bra.uni 	LBB0_70;
LBB0_69:                                // %L459
	ld.param.u64 	%rd2, [_Z15julia_frb_1030913CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2];
	mul.lo.s16 	%rs34, %rs282, 171;
	shr.u16 	%rs35, %rs34, 10;
	mul.lo.s16 	%rs36, %rs35, 6;
	sub.s16 	%rs37, %rs282, %rs36;
	cvt.u32.u16 	%r423, %rs37;
	and.b32  	%r3419, %r423, 255;
	and.b16  	%rs38, %rs37, 255;
	mul.wide.u16 	%r424, %rs38, 24;
	mul.lo.s32 	%r425, %r1, 576;
	mad.lo.s32 	%r426, %r4, 144, %r425;
	or.b32  	%r427, %r426, %r48;
	add.s32 	%r428, %r427, %r3418;
	add.s32 	%r429, %r428, %r424;
	mul.wide.u32 	%rd23, %r429, 4;
	add.s64 	%rd24, %rd2, %rd23;
	ld.global.u32 	%r3421, [%rd24];
	add.s32 	%r430, %r426, 147456;
	or.b32  	%r431, %r430, %r48;
	add.s32 	%r432, %r431, %r3418;
	add.s32 	%r433, %r432, %r424;
	mul.wide.s32 	%rd25, %r433, 4;
	add.s64 	%rd26, %rd2, %rd25;
	ld.global.u32 	%r3422, [%rd26];
LBB0_70:                                // %L740
	ld.param.u64 	%rd3, [_Z15julia_frb_1030913CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z15julia_frb_1030913CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4];
	// begin inline asm
	cvt.rn.f16x2.f32 %r305, %r307, %r306;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r308, %r310, %r307;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r357, %r359, %r358;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r360, %r362, %r361;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r401, %r403, %r402;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r404, %r406, %r405;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r407, %r409, %r408;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r410, %r403, %r402;
	// end inline asm
	mov.u32 	%r3408, 0;
	shl.b32 	%r437, %r3, 2;
	and.b32  	%r62, %r437, 60;
	shl.b32 	%r438, %r3, 11;
	and.b32  	%r63, %r438, 32768;
	shl.b32 	%r64, %r1, 7;
	or.b32  	%r65, %r437, 64;
	add.s32 	%r66, %r2, 24;
	and.b16  	%rs2, %rs281, 16;
	shr.u32 	%r439, %r3, 4;
	and.b32  	%r440, %r230, 30;
	or.b32  	%r441, %r440, %r439;
	mul.lo.s32 	%r67, %r441, 257;
	or.b32  	%r442, %r230, %r439;
	or.b32  	%r443, %r442, 32;
	mul.lo.s32 	%r68, %r443, 257;
	and.b16  	%rs45, %rs281, 255;
	mul.lo.s16 	%rs46, %rs45, 171;
	shr.u16 	%rs47, %rs46, 12;
	mul.lo.s16 	%rs48, %rs47, 24;
	sub.s16 	%rs49, %rs281, %rs48;
	cvt.u32.u16 	%r444, %rs49;
	and.b32  	%r69, %r444, 255;
	and.b32  	%r446, %r291, 224;
	shr.u32 	%r447, %r2, 3;
	mad.lo.s32 	%r70, %r447, 257, %r446;
	shr.u32 	%r448, %r66, 3;
	mad.lo.s32 	%r71, %r448, 257, %r446;
	add.s32 	%r449, %r2, 48;
	shr.u32 	%r450, %r449, 3;
	mad.lo.s32 	%r72, %r450, 257, %r446;
	add.s32 	%r451, %r2, 72;
	shr.u32 	%r452, %r451, 3;
	mad.lo.s32 	%r73, %r452, 257, %r446;
	or.b32  	%r453, %r447, 12;
	mad.lo.s32 	%r74, %r453, 257, %r446;
	add.s32 	%r454, %r2, 120;
	shr.u32 	%r455, %r454, 3;
	mad.lo.s32 	%r75, %r455, 257, %r446;
	add.s32 	%r456, %r2, 144;
	shr.u32 	%r457, %r456, 3;
	mad.lo.s32 	%r76, %r457, 257, %r446;
	add.s32 	%r458, %r2, 168;
	shr.u32 	%r459, %r458, 3;
	mad.lo.s32 	%r77, %r459, 257, %r446;
	or.b32  	%r460, %r447, 24;
	mad.lo.s32 	%r78, %r460, 257, %r446;
	add.s32 	%r461, %r2, 216;
	shr.u32 	%r462, %r461, 3;
	mad.lo.s32 	%r79, %r462, 257, %r446;
	add.s32 	%r463, %r2, 240;
	shr.u32 	%r464, %r463, 3;
	mad.lo.s32 	%r80, %r464, 257, %r446;
	add.s32 	%r465, %r2, 264;
	shr.u32 	%r466, %r465, 3;
	mad.lo.s32 	%r81, %r466, 257, %r446;
	or.b32  	%r467, %r447, 36;
	mad.lo.s32 	%r82, %r467, 257, %r446;
	add.s32 	%r468, %r2, 312;
	shr.u32 	%r469, %r468, 3;
	mad.lo.s32 	%r83, %r469, 257, %r446;
	add.s32 	%r470, %r2, 336;
	shr.u32 	%r471, %r470, 3;
	mad.lo.s32 	%r84, %r471, 257, %r446;
	add.s32 	%r472, %r2, 360;
	shr.u32 	%r473, %r472, 3;
	mad.lo.s32 	%r85, %r473, 257, %r446;
	or.b32  	%r474, %r447, 48;
	mad.lo.s32 	%r86, %r474, 257, %r446;
	add.s32 	%r475, %r2, 408;
	shr.u32 	%r476, %r475, 3;
	mad.lo.s32 	%r87, %r476, 257, %r446;
	add.s32 	%r477, %r2, 432;
	shr.u32 	%r478, %r477, 3;
	mad.lo.s32 	%r88, %r478, 257, %r446;
	add.s32 	%r479, %r2, 456;
	shr.u32 	%r480, %r479, 3;
	mad.lo.s32 	%r89, %r480, 257, %r446;
	or.b32  	%r481, %r447, 60;
	mad.lo.s32 	%r90, %r481, 257, %r446;
	add.s32 	%r482, %r2, 504;
	bfe.u32 	%r483, %r482, 3, 6;
	mad.lo.s32 	%r91, %r483, 257, %r446;
	mul.lo.s32 	%r484, %r4, 4806;
	mad.lo.s32 	%r485, %r3420, 198, %r484;
	mad.lo.s32 	%r486, %r48, 33, %r485;
	mad.lo.s32 	%r487, %r3419, 801, %r486;
	bfe.u32 	%r488, %r3, 1, 1;
	mul.lo.s32 	%r489, %r488, 2056;
	bfe.u32 	%r490, %r3, 3, 1;
	mul.lo.s32 	%r491, %r490, 514;
	and.b32  	%r492, %r5, 1;
	mul.lo.s32 	%r493, %r492, 1028;
	and.b32  	%r494, %r3, 1;
	mul.lo.s32 	%r495, %r494, 4112;
	mul.lo.s32 	%r496, %r439, 257;
	add.s32 	%r497, %r496, %r495;
	add.s32 	%r498, %r497, %r491;
	add.s32 	%r499, %r498, %r489;
	add.s32 	%r500, %r499, %r493;
	add.s32 	%r501, %r500, %r48;
	add.s32 	%r92, %r501, %r3418;
	mul.wide.u32 	%rd27, %r92, 4;
	mov.u64 	%rd28, shmem;
	add.s64 	%rd6, %rd28, %rd27;
	add.s32 	%r93, %r92, 8256;
	cvt.u64.u32 	%rd29, %r3418;
	cvt.u64.u32 	%rd30, %r48;
	cvt.u64.u32 	%rd31, %r493;
	cvt.u64.u32 	%rd32, %r489;
	cvt.u64.u32 	%rd33, %r491;
	cvt.u64.u32 	%rd34, %r496;
	cvt.u64.u32 	%rd35, %r495;
	add.s64 	%rd36, %rd35, %rd34;
	add.s64 	%rd37, %rd36, %rd33;
	add.s64 	%rd38, %rd37, %rd32;
	add.s64 	%rd39, %rd38, %rd31;
	add.s64 	%rd40, %rd39, %rd30;
	add.s64 	%rd41, %rd40, %rd29;
	shl.b64 	%rd42, %rd41, 2;
	add.s64 	%rd7, %rd28, %rd42;
	add.s32 	%r94, %r92, 32;
	add.s32 	%r95, %r92, 8288;
	bfe.u32 	%r502, %r2, 1, 1;
	bfe.u32 	%r503, %r2, 3, 1;
	bfe.u32 	%r504, %r2, 2, 1;
	and.b32  	%r505, %r2, 1;
	mul.lo.s32 	%r506, %r505, 4112;
	shr.u32 	%r507, %r2, 4;
	mad.lo.s32 	%r508, %r507, 257, %r506;
	mad.lo.s32 	%r509, %r4, 6, %r508;
	mad.lo.s32 	%r510, %r503, 514, %r509;
	mad.lo.s32 	%r511, %r502, 2056, %r510;
	mad.lo.s32 	%r512, %r504, 1028, %r511;
	add.s32 	%r96, %r512, %r3419;
	mul.wide.u32 	%rd43, %r96, 4;
	add.s64 	%rd8, %rd28, %rd43;
	add.s32 	%r97, %r96, 8256;
	mul.wide.u32 	%rd44, %r97, 4;
	add.s64 	%rd9, %rd28, %rd44;
	add.s32 	%r98, %r96, 32;
	mul.wide.u32 	%rd45, %r98, 4;
	add.s64 	%rd10, %rd28, %rd45;
	add.s32 	%r99, %r96, 8288;
	mul.wide.u32 	%rd46, %r99, 4;
	add.s64 	%rd11, %rd28, %rd46;
	shl.b16 	%rs51, %rs28, 1;
	and.b16  	%rs52, %rs51, 254;
	mul.lo.s16 	%rs53, %rs52, 171;
	shr.u16 	%rs54, %rs53, 13;
	mul.lo.s16 	%rs55, %rs54, 48;
	sub.s16 	%rs56, %rs51, %rs55;
	cvt.u32.u16 	%r513, %rs56;
	and.b32  	%r514, %r513, 254;
	mul.lo.s32 	%r515, %r1, 59904;
	or.b32  	%r516, %r515, %r69;
	mad.lo.s32 	%r100, %r514, 24, %r516;
	or.b16  	%rs57, %rs51, 1;
	and.b16  	%rs58, %rs57, 255;
	mul.lo.s16 	%rs59, %rs58, 171;
	shr.u16 	%rs60, %rs59, 13;
	mul.lo.s16 	%rs61, %rs60, 48;
	sub.s16 	%rs62, %rs57, %rs61;
	cvt.u32.u16 	%r517, %rs62;
	and.b32  	%r518, %r517, 255;
	mad.lo.s32 	%r101, %r518, 24, %r516;
	mul.wide.u32 	%rd47, %r487, 4;
	add.s64 	%rd12, %rd28, %rd47;
	setp.gt.u32 	%p112, %r2, 7;
	setp.eq.s16 	%p113, %rs2, 0;
	setp.lt.u32 	%p115, %r3, 24;
	mov.u32 	%r3423, %r3408;
	mov.u32 	%r3454, %r3408;
	mov.u32 	%r3455, %r3408;
	mov.u32 	%r3456, %r3408;
	mov.u32 	%r3457, %r3408;
	bra.uni 	LBB0_71;
LBB0_92:                                // %guard_pass14622
                                        //   in Loop: Header=BB0_71 Depth=1
	add.s32 	%r289, %r3423, 48;
	setp.ne.s32 	%p141, %r3423, 2016;
	mov.u32 	%r3423, %r289;
	@%p141 bra 	LBB0_71;
	bra.uni 	LBB0_93;
LBB0_71:                                // %L743
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_73 Depth 2
                                        //     Child Loop BB0_83 Depth 2
	mul.hi.u32 	%r712, %r3423, -1431655765;
	shr.u32 	%r713, %r712, 5;
	mul.lo.s32 	%r107, %r713, 48;
	add.s32 	%r714, %r107, %r2;
	cvt.u16.u32 	%rs63, %r714;
	mul.hi.s16 	%rs64, %rs63, 16257;
	shr.u16 	%rs65, %rs64, 15;
	shr.s16 	%rs66, %rs64, 9;
	add.s16 	%rs67, %rs66, %rs65;
	mul.lo.s16 	%rs68, %rs67, 2064;
	sub.s16 	%rs69, %rs63, %rs68;
	cvt.u32.u16 	%r715, %rs69;
	shl.b32 	%r716, %r715, 16;
	or.b32  	%r717, %r716, %r62;
	or.b32  	%r718, %r717, %r63;
	or.b32  	%r719, %r718, %r64;
	mul.wide.s32 	%rd48, %r719, 4;
	add.s64 	%rd49, %rd3, %rd48;
	ld.global.v4.u32 	{%r720, %r721, %r722, %r723}, [%rd49];
	or.b32  	%r724, %r716, %r65;
	or.b32  	%r725, %r724, %r63;
	or.b32  	%r726, %r725, %r64;
	mul.wide.s32 	%rd50, %r726, 4;
	add.s64 	%rd51, %rd3, %rd50;
	ld.global.v4.u32 	{%r727, %r728, %r729, %r730}, [%rd51];
	add.s32 	%r731, %r66, %r107;
	cvt.u16.u32 	%rs70, %r731;
	mul.hi.s16 	%rs71, %rs70, 16257;
	shr.u16 	%rs72, %rs71, 15;
	shr.s16 	%rs73, %rs71, 9;
	add.s16 	%rs74, %rs73, %rs72;
	mul.lo.s16 	%rs75, %rs74, 2064;
	sub.s16 	%rs76, %rs70, %rs75;
	cvt.u32.u16 	%r732, %rs76;
	shl.b32 	%r733, %r732, 16;
	or.b32  	%r734, %r733, %r62;
	or.b32  	%r735, %r734, %r63;
	or.b32  	%r736, %r735, %r64;
	mul.wide.s32 	%rd52, %r736, 4;
	add.s64 	%rd53, %rd3, %rd52;
	ld.global.v4.u32 	{%r737, %r738, %r739, %r740}, [%rd53];
	or.b32  	%r741, %r733, %r65;
	or.b32  	%r742, %r741, %r63;
	or.b32  	%r743, %r742, %r64;
	mul.wide.s32 	%rd54, %r743, 4;
	add.s64 	%rd55, %rd3, %rd54;
	ld.global.v4.u32 	{%r744, %r745, %r746, %r747}, [%rd55];
	selp.b32 	%r748, %r722, %r720, %p113;
	shfl.sync.bfly.b32	%r749, %r748, 16, 31, -1;
	selp.b32 	%r521, %r720, %r749, %p113;
	selp.b32 	%r526, %r749, %r722, %p113;
	selp.b32 	%r750, %r723, %r721, %p113;
	shfl.sync.bfly.b32	%r751, %r750, 16, 31, -1;
	selp.b32 	%r529, %r721, %r751, %p113;
	selp.b32 	%r534, %r751, %r723, %p113;
	selp.b32 	%r752, %r729, %r727, %p113;
	shfl.sync.bfly.b32	%r753, %r752, 16, 31, -1;
	selp.b32 	%r537, %r727, %r753, %p113;
	selp.b32 	%r542, %r753, %r729, %p113;
	selp.b32 	%r754, %r730, %r728, %p113;
	shfl.sync.bfly.b32	%r755, %r754, 16, 31, -1;
	selp.b32 	%r545, %r728, %r755, %p113;
	selp.b32 	%r550, %r755, %r730, %p113;
	selp.b32 	%r756, %r739, %r737, %p113;
	shfl.sync.bfly.b32	%r757, %r756, 16, 31, -1;
	selp.b32 	%r553, %r737, %r757, %p113;
	selp.b32 	%r558, %r757, %r739, %p113;
	selp.b32 	%r758, %r740, %r738, %p113;
	shfl.sync.bfly.b32	%r759, %r758, 16, 31, -1;
	selp.b32 	%r561, %r738, %r759, %p113;
	selp.b32 	%r566, %r759, %r740, %p113;
	selp.b32 	%r760, %r746, %r744, %p113;
	shfl.sync.bfly.b32	%r761, %r760, 16, 31, -1;
	selp.b32 	%r569, %r744, %r761, %p113;
	selp.b32 	%r574, %r761, %r746, %p113;
	selp.b32 	%r762, %r747, %r745, %p113;
	shfl.sync.bfly.b32	%r763, %r762, 16, 31, -1;
	selp.b32 	%r577, %r745, %r763, %p113;
	selp.b32 	%r582, %r763, %r747, %p113;
	shl.b32 	%r522, %r526, 4;
	mov.u32 	%r520, 252645135;
	// begin inline asm
	lop3.b32 %r584, %r520, %r521, %r522, 202;
	// end inline asm
	shr.u32 	%r525, %r521, 4;
	// begin inline asm
	lop3.b32 %r600, %r520, %r525, %r526, 202;
	// end inline asm
	shl.b32 	%r530, %r534, 4;
	// begin inline asm
	lop3.b32 %r592, %r520, %r529, %r530, 202;
	// end inline asm
	shr.u32 	%r533, %r529, 4;
	// begin inline asm
	lop3.b32 %r608, %r520, %r533, %r534, 202;
	// end inline asm
	shl.b32 	%r538, %r542, 4;
	// begin inline asm
	lop3.b32 %r616, %r520, %r537, %r538, 202;
	// end inline asm
	shr.u32 	%r541, %r537, 4;
	// begin inline asm
	lop3.b32 %r632, %r520, %r541, %r542, 202;
	// end inline asm
	shl.b32 	%r546, %r550, 4;
	// begin inline asm
	lop3.b32 %r624, %r520, %r545, %r546, 202;
	// end inline asm
	shr.u32 	%r549, %r545, 4;
	// begin inline asm
	lop3.b32 %r640, %r520, %r549, %r550, 202;
	// end inline asm
	shl.b32 	%r554, %r558, 4;
	// begin inline asm
	lop3.b32 %r585, %r520, %r553, %r554, 202;
	// end inline asm
	shr.u32 	%r557, %r553, 4;
	// begin inline asm
	lop3.b32 %r601, %r520, %r557, %r558, 202;
	// end inline asm
	shl.b32 	%r562, %r566, 4;
	// begin inline asm
	lop3.b32 %r593, %r520, %r561, %r562, 202;
	// end inline asm
	shr.u32 	%r565, %r561, 4;
	// begin inline asm
	lop3.b32 %r609, %r520, %r565, %r566, 202;
	// end inline asm
	shl.b32 	%r570, %r574, 4;
	// begin inline asm
	lop3.b32 %r617, %r520, %r569, %r570, 202;
	// end inline asm
	shr.u32 	%r573, %r569, 4;
	// begin inline asm
	lop3.b32 %r633, %r520, %r573, %r574, 202;
	// end inline asm
	shl.b32 	%r578, %r582, 4;
	// begin inline asm
	lop3.b32 %r625, %r520, %r577, %r578, 202;
	// end inline asm
	shr.u32 	%r581, %r577, 4;
	// begin inline asm
	lop3.b32 %r641, %r520, %r581, %r582, 202;
	// end inline asm
	mov.u32 	%r586, 25152;
	// begin inline asm
	prmt.b32 %r648, %r584, %r585, %r586;
	// end inline asm
	mov.u32 	%r590, 29521;
	// begin inline asm
	prmt.b32 %r680, %r584, %r585, %r590;
	// end inline asm
	// begin inline asm
	prmt.b32 %r656, %r592, %r593, %r586;
	// end inline asm
	// begin inline asm
	prmt.b32 %r688, %r592, %r593, %r590;
	// end inline asm
	// begin inline asm
	prmt.b32 %r649, %r600, %r601, %r586;
	// end inline asm
	// begin inline asm
	prmt.b32 %r681, %r600, %r601, %r590;
	// end inline asm
	// begin inline asm
	prmt.b32 %r657, %r608, %r609, %r586;
	// end inline asm
	// begin inline asm
	prmt.b32 %r689, %r608, %r609, %r590;
	// end inline asm
	// begin inline asm
	prmt.b32 %r664, %r616, %r617, %r586;
	// end inline asm
	// begin inline asm
	prmt.b32 %r696, %r616, %r617, %r590;
	// end inline asm
	// begin inline asm
	prmt.b32 %r672, %r624, %r625, %r586;
	// end inline asm
	// begin inline asm
	prmt.b32 %r704, %r624, %r625, %r590;
	// end inline asm
	// begin inline asm
	prmt.b32 %r665, %r632, %r633, %r586;
	// end inline asm
	// begin inline asm
	prmt.b32 %r697, %r632, %r633, %r590;
	// end inline asm
	// begin inline asm
	prmt.b32 %r673, %r640, %r641, %r586;
	// end inline asm
	// begin inline asm
	prmt.b32 %r705, %r640, %r641, %r590;
	// end inline asm
	mov.u32 	%r706, 21520;
	// begin inline asm
	prmt.b32 %r647, %r648, %r649, %r706;
	// end inline asm
	mov.u32 	%r710, 30258;
	// begin inline asm
	prmt.b32 %r651, %r648, %r649, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r655, %r656, %r657, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r659, %r656, %r657, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r663, %r664, %r665, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r667, %r664, %r665, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r671, %r672, %r673, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r675, %r672, %r673, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r679, %r680, %r681, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r683, %r680, %r681, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r687, %r688, %r689, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r691, %r688, %r689, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r695, %r696, %r697, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r699, %r696, %r697, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r703, %r704, %r705, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r707, %r704, %r705, %r710;
	// end inline asm
	mul.hi.s16 	%rs77, %rs63, 10923;
	shr.u16 	%rs78, %rs77, 15;
	shr.s16 	%rs79, %rs77, 2;
	add.s16 	%rs80, %rs79, %rs78;
	mul.lo.s16 	%rs81, %rs80, 24;
	sub.s16 	%rs82, %rs63, %rs81;
	cvt.s32.s16 	%r764, %rs82;
	add.s32 	%r765, %r67, %r764;
	mul.wide.s32 	%rd56, %r765, 4;
	add.s64 	%rd58, %rd28, %rd56;
	st.shared.u32 	[%rd58], %r647;
	st.shared.u32 	[%rd58+512], %r655;
	st.shared.u32 	[%rd58+256], %r651;
	st.shared.u32 	[%rd58+768], %r659;
	add.s32 	%r766, %r68, %r764;
	mul.wide.s32 	%rd59, %r766, 4;
	add.s64 	%rd60, %rd28, %rd59;
	st.shared.u32 	[%rd60], %r663;
	st.shared.u32 	[%rd60+512], %r671;
	st.shared.u32 	[%rd60+256], %r667;
	st.shared.u32 	[%rd60+768], %r675;
	st.shared.u32 	[%rd58+128], %r679;
	st.shared.u32 	[%rd58+640], %r687;
	st.shared.u32 	[%rd58+384], %r683;
	st.shared.u32 	[%rd58+896], %r691;
	st.shared.u32 	[%rd60+128], %r695;
	st.shared.u32 	[%rd60+640], %r703;
	st.shared.u32 	[%rd60+384], %r699;
	st.shared.u32 	[%rd60+896], %r707;
	bar.sync 	0;
	add.s32 	%r767, %r107, %r69;
	cvt.u16.u32 	%rs83, %r767;
	mul.hi.s16 	%rs84, %rs83, 10923;
	shr.u16 	%rs85, %rs84, 15;
	shr.s16 	%rs86, %rs84, 2;
	add.s16 	%rs87, %rs86, %rs85;
	mul.lo.s16 	%rs88, %rs87, 24;
	sub.s16 	%rs89, %rs83, %rs88;
	cvt.s32.s16 	%r768, %rs89;
	add.s32 	%r769, %r70, %r768;
	mul.wide.s32 	%rd61, %r769, 4;
	add.s64 	%rd62, %rd28, %rd61;
	ld.shared.u32 	%r770, [%rd62];
	add.s32 	%r771, %r71, %r768;
	mul.wide.u32 	%rd63, %r771, 4;
	add.s64 	%rd64, %rd28, %rd63;
	ld.shared.u32 	%r772, [%rd64];
	add.s32 	%r773, %r72, %r768;
	mul.wide.u32 	%rd65, %r773, 4;
	add.s64 	%rd66, %rd28, %rd65;
	ld.shared.u32 	%r774, [%rd66];
	add.s32 	%r775, %r73, %r768;
	mul.wide.u32 	%rd67, %r775, 4;
	add.s64 	%rd68, %rd28, %rd67;
	ld.shared.u32 	%r776, [%rd68];
	add.s32 	%r777, %r74, %r768;
	mul.wide.s32 	%rd69, %r777, 4;
	add.s64 	%rd70, %rd28, %rd69;
	ld.shared.u32 	%r778, [%rd70];
	add.s32 	%r779, %r75, %r768;
	mul.wide.u32 	%rd71, %r779, 4;
	add.s64 	%rd72, %rd28, %rd71;
	ld.shared.u32 	%r780, [%rd72];
	add.s32 	%r781, %r76, %r768;
	mul.wide.u32 	%rd73, %r781, 4;
	add.s64 	%rd74, %rd28, %rd73;
	ld.shared.u32 	%r782, [%rd74];
	add.s32 	%r783, %r77, %r768;
	mul.wide.u32 	%rd75, %r783, 4;
	add.s64 	%rd76, %rd28, %rd75;
	ld.shared.u32 	%r784, [%rd76];
	add.s32 	%r785, %r78, %r768;
	mul.wide.s32 	%rd77, %r785, 4;
	add.s64 	%rd78, %rd28, %rd77;
	ld.shared.u32 	%r786, [%rd78];
	add.s32 	%r787, %r79, %r768;
	mul.wide.u32 	%rd79, %r787, 4;
	add.s64 	%rd80, %rd28, %rd79;
	ld.shared.u32 	%r788, [%rd80];
	add.s32 	%r789, %r80, %r768;
	mul.wide.u32 	%rd81, %r789, 4;
	add.s64 	%rd82, %rd28, %rd81;
	ld.shared.u32 	%r790, [%rd82];
	add.s32 	%r791, %r81, %r768;
	mul.wide.u32 	%rd83, %r791, 4;
	add.s64 	%rd84, %rd28, %rd83;
	ld.shared.u32 	%r792, [%rd84];
	add.s32 	%r793, %r82, %r768;
	mul.wide.s32 	%rd85, %r793, 4;
	add.s64 	%rd86, %rd28, %rd85;
	ld.shared.u32 	%r794, [%rd86];
	add.s32 	%r795, %r83, %r768;
	mul.wide.u32 	%rd87, %r795, 4;
	add.s64 	%rd88, %rd28, %rd87;
	ld.shared.u32 	%r796, [%rd88];
	add.s32 	%r797, %r84, %r768;
	mul.wide.u32 	%rd89, %r797, 4;
	add.s64 	%rd90, %rd28, %rd89;
	ld.shared.u32 	%r798, [%rd90];
	add.s32 	%r799, %r85, %r768;
	mul.wide.u32 	%rd91, %r799, 4;
	add.s64 	%rd92, %rd28, %rd91;
	ld.shared.u32 	%r800, [%rd92];
	add.s32 	%r801, %r86, %r768;
	mul.wide.s32 	%rd93, %r801, 4;
	add.s64 	%rd94, %rd28, %rd93;
	ld.shared.u32 	%r802, [%rd94];
	add.s32 	%r803, %r87, %r768;
	mul.wide.u32 	%rd95, %r803, 4;
	add.s64 	%rd96, %rd28, %rd95;
	ld.shared.u32 	%r804, [%rd96];
	add.s32 	%r805, %r88, %r768;
	mul.wide.u32 	%rd97, %r805, 4;
	add.s64 	%rd98, %rd28, %rd97;
	ld.shared.u32 	%r806, [%rd98];
	add.s32 	%r807, %r89, %r768;
	mul.wide.u32 	%rd99, %r807, 4;
	add.s64 	%rd100, %rd28, %rd99;
	ld.shared.u32 	%r808, [%rd100];
	add.s32 	%r809, %r90, %r768;
	mul.wide.s32 	%rd101, %r809, 4;
	add.s64 	%rd102, %rd28, %rd101;
	ld.shared.u32 	%r810, [%rd102];
	add.s32 	%r811, %r91, %r768;
	mul.wide.s32 	%rd103, %r811, 4;
	add.s64 	%rd104, %rd28, %rd103;
	ld.shared.u32 	%r812, [%rd104];
	bar.sync 	0;
	shfl.sync.idx.b32	%r813, %r3417, 0, 31, -1;
	shfl.sync.idx.b32	%r814, %r3417, 1, 31, -1;
	shfl.sync.idx.b32	%r815, %r3417, 2, 31, -1;
	shfl.sync.idx.b32	%r816, %r3417, 3, 31, -1;
	shfl.sync.idx.b32	%r817, %r3417, 4, 31, -1;
	shfl.sync.idx.b32	%r818, %r3417, 5, 31, -1;
	shfl.sync.idx.b32	%r819, %r3417, 6, 31, -1;
	shfl.sync.idx.b32	%r820, %r3417, 7, 31, -1;
	shfl.sync.idx.b32	%r821, %r3417, 8, 31, -1;
	shfl.sync.idx.b32	%r822, %r3417, 9, 31, -1;
	shfl.sync.idx.b32	%r823, %r3417, 10, 31, -1;
	shfl.sync.idx.b32	%r824, %r3417, 11, 31, -1;
	shfl.sync.idx.b32	%r825, %r3417, 12, 31, -1;
	shfl.sync.idx.b32	%r826, %r3417, 13, 31, -1;
	shfl.sync.idx.b32	%r827, %r3417, 14, 31, -1;
	shfl.sync.idx.b32	%r828, %r3417, 15, 31, -1;
	shfl.sync.idx.b32	%r829, %r3417, 16, 31, -1;
	shfl.sync.idx.b32	%r830, %r3417, 17, 31, -1;
	shfl.sync.idx.b32	%r831, %r3417, 18, 31, -1;
	shfl.sync.idx.b32	%r832, %r3417, 19, 31, -1;
	shfl.sync.idx.b32	%r833, %r3417, 20, 31, -1;
	shfl.sync.idx.b32	%r834, %r3417, 21, 31, -1;
	shfl.sync.idx.b32	%r835, %r3417, 22, 31, -1;
	shfl.sync.idx.b32	%r836, %r3417, 23, 31, -1;
	add.s32 	%r837, %r813, %r768;
	mul.wide.s32 	%rd105, %r837, 4;
	add.s64 	%rd106, %rd28, %rd105;
	st.shared.u32 	[%rd106], %r770;
	add.s32 	%r838, %r814, %r768;
	mul.wide.s32 	%rd107, %r838, 4;
	add.s64 	%rd108, %rd28, %rd107;
	st.shared.u32 	[%rd108], %r772;
	add.s32 	%r839, %r815, %r768;
	mul.wide.s32 	%rd109, %r839, 4;
	add.s64 	%rd110, %rd28, %rd109;
	st.shared.u32 	[%rd110], %r774;
	add.s32 	%r840, %r816, %r768;
	mul.wide.s32 	%rd111, %r840, 4;
	add.s64 	%rd112, %rd28, %rd111;
	st.shared.u32 	[%rd112], %r776;
	add.s32 	%r841, %r817, %r768;
	mul.wide.s32 	%rd113, %r841, 4;
	add.s64 	%rd114, %rd28, %rd113;
	st.shared.u32 	[%rd114], %r778;
	add.s32 	%r842, %r818, %r768;
	mul.wide.s32 	%rd115, %r842, 4;
	add.s64 	%rd116, %rd28, %rd115;
	st.shared.u32 	[%rd116], %r780;
	add.s32 	%r843, %r819, %r768;
	mul.wide.s32 	%rd117, %r843, 4;
	add.s64 	%rd118, %rd28, %rd117;
	st.shared.u32 	[%rd118], %r782;
	add.s32 	%r844, %r820, %r768;
	mul.wide.s32 	%rd119, %r844, 4;
	add.s64 	%rd120, %rd28, %rd119;
	st.shared.u32 	[%rd120], %r784;
	add.s32 	%r845, %r821, %r768;
	mul.wide.s32 	%rd121, %r845, 4;
	add.s64 	%rd122, %rd28, %rd121;
	st.shared.u32 	[%rd122], %r786;
	add.s32 	%r846, %r822, %r768;
	mul.wide.s32 	%rd123, %r846, 4;
	add.s64 	%rd124, %rd28, %rd123;
	st.shared.u32 	[%rd124], %r788;
	add.s32 	%r847, %r823, %r768;
	mul.wide.s32 	%rd125, %r847, 4;
	add.s64 	%rd126, %rd28, %rd125;
	st.shared.u32 	[%rd126], %r790;
	add.s32 	%r848, %r824, %r768;
	mul.wide.s32 	%rd127, %r848, 4;
	add.s64 	%rd128, %rd28, %rd127;
	st.shared.u32 	[%rd128], %r792;
	add.s32 	%r849, %r825, %r768;
	mul.wide.s32 	%rd129, %r849, 4;
	add.s64 	%rd130, %rd28, %rd129;
	st.shared.u32 	[%rd130], %r794;
	add.s32 	%r850, %r826, %r768;
	mul.wide.s32 	%rd131, %r850, 4;
	add.s64 	%rd132, %rd28, %rd131;
	st.shared.u32 	[%rd132], %r796;
	add.s32 	%r851, %r827, %r768;
	mul.wide.s32 	%rd133, %r851, 4;
	add.s64 	%rd134, %rd28, %rd133;
	st.shared.u32 	[%rd134], %r798;
	add.s32 	%r852, %r828, %r768;
	mul.wide.s32 	%rd135, %r852, 4;
	add.s64 	%rd136, %rd28, %rd135;
	st.shared.u32 	[%rd136], %r800;
	add.s32 	%r853, %r829, %r768;
	mul.wide.s32 	%rd137, %r853, 4;
	add.s64 	%rd138, %rd28, %rd137;
	st.shared.u32 	[%rd138], %r802;
	add.s32 	%r854, %r830, %r768;
	mul.wide.s32 	%rd139, %r854, 4;
	add.s64 	%rd140, %rd28, %rd139;
	st.shared.u32 	[%rd140], %r804;
	add.s32 	%r855, %r831, %r768;
	mul.wide.s32 	%rd141, %r855, 4;
	add.s64 	%rd142, %rd28, %rd141;
	st.shared.u32 	[%rd142], %r806;
	add.s32 	%r856, %r832, %r768;
	mul.wide.s32 	%rd143, %r856, 4;
	add.s64 	%rd144, %rd28, %rd143;
	st.shared.u32 	[%rd144], %r808;
	add.s32 	%r857, %r833, %r768;
	mul.wide.s32 	%rd145, %r857, 4;
	add.s64 	%rd146, %rd28, %rd145;
	st.shared.u32 	[%rd146], %r810;
	selp.b32 	%r858, 0, %r812, %p112;
	add.s32 	%r859, %r834, %r768;
	mul.wide.s32 	%rd147, %r859, 4;
	add.s64 	%rd148, %rd28, %rd147;
	st.shared.u32 	[%rd148], %r858;
	add.s32 	%r860, %r835, %r768;
	mul.wide.s32 	%rd149, %r860, 4;
	add.s64 	%rd150, %rd28, %rd149;
	st.shared.u32 	[%rd150], %r3408;
	add.s32 	%r861, %r836, %r768;
	mul.wide.s32 	%rd151, %r861, 4;
	add.s64 	%rd152, %rd28, %rd151;
	st.shared.u32 	[%rd152], %r3408;
	bar.sync 	0;
	mov.u32 	%r3428, %r3408;
	mov.u32 	%r3429, %r3408;
	mov.u32 	%r3430, %r3408;
	mov.u32 	%r3431, %r3408;
	mov.u32 	%r3432, %r3408;
	mov.u32 	%r3433, %r3408;
	mov.u32 	%r3434, %r3408;
	mov.u32 	%r3435, %r3408;
	mov.u32 	%r3436, %r3408;
	mov.u32 	%r3437, %r3408;
	mov.u32 	%r3438, %r3408;
	mov.u32 	%r3439, %r3408;
	mov.u32 	%r3440, %r3408;
	mov.u32 	%r3441, %r3408;
	mov.u32 	%r3442, %r3408;
	mov.u32 	%r3443, %r3408;
	mov.u32 	%r3444, %r3408;
	mov.u32 	%r3445, %r3408;
	mov.u32 	%r3446, %r3408;
	mov.u32 	%r3447, %r3408;
	mov.u32 	%r3448, %r3408;
	mov.u32 	%r3449, %r3408;
	mov.u32 	%r3450, %r3408;
	mov.u32 	%r3451, %r3408;
	@%p111 bra 	LBB0_111;
	bra.uni 	LBB0_72;
LBB0_111:                               // %oksrem3271
                                        //   in Loop: Header=BB0_71 Depth=1
	cvt.u16.u32 	%rs90, %r107;
	mul.hi.s16 	%rs91, %rs90, 10923;
	shr.u16 	%rs92, %rs91, 15;
	shr.s16 	%rs93, %rs91, 2;
	add.s16 	%rs94, %rs93, %rs92;
	mul.lo.s16 	%rs95, %rs94, 24;
	sub.s16 	%rs96, %rs90, %rs95;
	cvt.s32.s16 	%r862, %rs96;
	mul.wide.s32 	%rd153, %r862, 4;
	add.s64 	%rd154, %rd12, %rd153;
	ld.shared.u32 	%r3428, [%rd154];
	ld.shared.u32 	%r3429, [%rd12+4];
	ld.shared.u32 	%r3430, [%rd12+8];
	ld.shared.u32 	%r3431, [%rd12+12];
	ld.shared.u32 	%r3432, [%rd12+16];
	ld.shared.u32 	%r3433, [%rd12+20];
	ld.shared.u32 	%r3434, [%rd12+24];
	ld.shared.u32 	%r3435, [%rd12+28];
	ld.shared.u32 	%r3436, [%rd12+32];
	ld.shared.u32 	%r3437, [%rd12+36];
	ld.shared.u32 	%r3438, [%rd12+40];
	ld.shared.u32 	%r3439, [%rd12+44];
	ld.shared.u32 	%r3440, [%rd12+48];
	ld.shared.u32 	%r3441, [%rd12+52];
	ld.shared.u32 	%r3442, [%rd12+56];
	ld.shared.u32 	%r3443, [%rd12+60];
	add.s16 	%rs97, %rs90, 16;
	mul.hi.s16 	%rs98, %rs97, 10923;
	shr.u16 	%rs99, %rs98, 15;
	shr.s16 	%rs100, %rs98, 2;
	add.s16 	%rs101, %rs100, %rs99;
	mul.lo.s16 	%rs102, %rs101, 24;
	sub.s16 	%rs103, %rs97, %rs102;
	cvt.s32.s16 	%r863, %rs103;
	mul.wide.s32 	%rd155, %r863, 4;
	add.s64 	%rd156, %rd12, %rd155;
	ld.shared.u32 	%r3444, [%rd156];
	add.s16 	%rs104, %rs90, 17;
	mul.hi.s16 	%rs105, %rs104, 10923;
	shr.u16 	%rs106, %rs105, 15;
	shr.s16 	%rs107, %rs105, 2;
	add.s16 	%rs108, %rs107, %rs106;
	mul.lo.s16 	%rs109, %rs108, 24;
	sub.s16 	%rs110, %rs104, %rs109;
	cvt.s32.s16 	%r864, %rs110;
	mul.wide.s32 	%rd157, %r864, 4;
	add.s64 	%rd158, %rd12, %rd157;
	ld.shared.u32 	%r3445, [%rd158];
	add.s16 	%rs111, %rs90, 18;
	mul.hi.s16 	%rs112, %rs111, 10923;
	shr.u16 	%rs113, %rs112, 15;
	shr.s16 	%rs114, %rs112, 2;
	add.s16 	%rs115, %rs114, %rs113;
	mul.lo.s16 	%rs116, %rs115, 24;
	sub.s16 	%rs117, %rs111, %rs116;
	cvt.s32.s16 	%r865, %rs117;
	mul.wide.s32 	%rd159, %r865, 4;
	add.s64 	%rd160, %rd12, %rd159;
	ld.shared.u32 	%r3446, [%rd160];
	add.s16 	%rs118, %rs90, 19;
	mul.hi.s16 	%rs119, %rs118, 10923;
	shr.u16 	%rs120, %rs119, 15;
	shr.s16 	%rs121, %rs119, 2;
	add.s16 	%rs122, %rs121, %rs120;
	mul.lo.s16 	%rs123, %rs122, 24;
	sub.s16 	%rs124, %rs118, %rs123;
	cvt.s32.s16 	%r866, %rs124;
	mul.wide.s32 	%rd161, %r866, 4;
	add.s64 	%rd162, %rd12, %rd161;
	ld.shared.u32 	%r3447, [%rd162];
	add.s16 	%rs125, %rs90, 20;
	mul.hi.s16 	%rs126, %rs125, 10923;
	shr.u16 	%rs127, %rs126, 15;
	shr.s16 	%rs128, %rs126, 2;
	add.s16 	%rs129, %rs128, %rs127;
	mul.lo.s16 	%rs130, %rs129, 24;
	sub.s16 	%rs131, %rs125, %rs130;
	cvt.s32.s16 	%r867, %rs131;
	mul.wide.s32 	%rd163, %r867, 4;
	add.s64 	%rd164, %rd12, %rd163;
	ld.shared.u32 	%r3448, [%rd164];
	add.s16 	%rs132, %rs90, 21;
	mul.hi.s16 	%rs133, %rs132, 10923;
	shr.u16 	%rs134, %rs133, 15;
	shr.s16 	%rs135, %rs133, 2;
	add.s16 	%rs136, %rs135, %rs134;
	mul.lo.s16 	%rs137, %rs136, 24;
	sub.s16 	%rs138, %rs132, %rs137;
	cvt.s32.s16 	%r868, %rs138;
	mul.wide.s32 	%rd165, %r868, 4;
	add.s64 	%rd166, %rd12, %rd165;
	ld.shared.u32 	%r3449, [%rd166];
	add.s16 	%rs139, %rs90, 22;
	mul.hi.s16 	%rs140, %rs139, 10923;
	shr.u16 	%rs141, %rs140, 15;
	shr.s16 	%rs142, %rs140, 2;
	add.s16 	%rs143, %rs142, %rs141;
	mul.lo.s16 	%rs144, %rs143, 24;
	sub.s16 	%rs145, %rs139, %rs144;
	cvt.s32.s16 	%r869, %rs145;
	mul.wide.s32 	%rd167, %r869, 4;
	add.s64 	%rd168, %rd12, %rd167;
	ld.shared.u32 	%r3450, [%rd168];
	add.s16 	%rs146, %rs90, 23;
	mul.hi.s16 	%rs147, %rs146, 10923;
	shr.u16 	%rs148, %rs147, 15;
	shr.s16 	%rs149, %rs147, 2;
	add.s16 	%rs150, %rs149, %rs148;
	mul.lo.s16 	%rs151, %rs150, 24;
	sub.s16 	%rs152, %rs146, %rs151;
	cvt.s32.s16 	%r870, %rs152;
	mul.wide.s32 	%rd169, %r870, 4;
	add.s64 	%rd170, %rd12, %rd169;
	ld.shared.u32 	%r3451, [%rd170];
LBB0_72:                                // %L11396
                                        //   in Loop: Header=BB0_71 Depth=1
	bar.sync 	0;
	add.s32 	%r132, %r107, 1;
	add.s32 	%r133, %r107, 2;
	add.s32 	%r134, %r107, 3;
	mov.u32 	%r3452, 12;
	mov.u32 	%r3453, %r3408;
	bra.uni 	LBB0_73;
LBB0_80:                                // %L21413
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r3455, %r3455, 1;
	mov.u32 	%r3454, 0;
	mov.u32 	%r3456, %r3454;
	mov.u32 	%r3457, %r3454;
LBB0_81:                                // %L21414
                                        //   in Loop: Header=BB0_73 Depth=2
	bar.sync 	0;
	add.s32 	%r3453, %r3453, 1;
	add.s32 	%r3452, %r3452, -4;
	setp.ne.s32 	%p127, %r3452, -12;
	@%p127 bra 	LBB0_73;
	bra.uni 	LBB0_82;
LBB0_73:                                // %L11422
                                        //   Parent Loop BB0_71 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p116, %r3452, 12;
	selp.b32 	%r1410, %r3428, 0, %p116;
	setp.eq.s32 	%p117, %r3452, 8;
	selp.b32 	%r1411, %r3432, %r1410, %p117;
	setp.eq.s32 	%p118, %r3452, 4;
	selp.b32 	%r1412, %r3436, %r1411, %p118;
	setp.eq.s32 	%p119, %r3452, 0;
	selp.b32 	%r1413, %r3440, %r1412, %p119;
	setp.eq.s32 	%p120, %r3452, -4;
	selp.b32 	%r1414, %r3444, %r1413, %p120;
	setp.eq.s32 	%p121, %r3452, -8;
	selp.b32 	%r1415, %r3448, %r1414, %p121;
	selp.b32 	%r1416, %r3429, 0, %p116;
	selp.b32 	%r1417, %r3433, %r1416, %p117;
	selp.b32 	%r1418, %r3437, %r1417, %p118;
	selp.b32 	%r1419, %r3441, %r1418, %p119;
	selp.b32 	%r1420, %r3445, %r1419, %p120;
	selp.b32 	%r1421, %r3449, %r1420, %p121;
	selp.b32 	%r1422, %r3430, 0, %p116;
	selp.b32 	%r1423, %r3434, %r1422, %p117;
	selp.b32 	%r1424, %r3438, %r1423, %p118;
	selp.b32 	%r1425, %r3442, %r1424, %p119;
	selp.b32 	%r1426, %r3446, %r1425, %p120;
	selp.b32 	%r1427, %r3450, %r1426, %p121;
	selp.b32 	%r1428, %r3431, 0, %p116;
	selp.b32 	%r1429, %r3435, %r1428, %p117;
	selp.b32 	%r1430, %r3439, %r1429, %p118;
	selp.b32 	%r1431, %r3443, %r1430, %p119;
	selp.b32 	%r1432, %r3447, %r1431, %p120;
	selp.b32 	%r1433, %r3451, %r1432, %p121;
	mov.u16 	%rs190, 25600;
	// begin inline asm
	mov.b32 %r878, {%rs190, %rs190};
	// end inline asm
	mov.u16 	%rs192, 21504;
	// begin inline asm
	mov.b32 %r889, {%rs192, %rs192};
	// end inline asm
	xor.b32  	%r877, %r1415, -2004318072;
	mov.u32 	%r1014, 983055;
	// begin inline asm
	lop3.b32 %r875, %r1014, %r877, %r878, 202;
	// end inline asm
	mov.u16 	%rs196, 18432;
	// begin inline asm
	mov.b32 %r879, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r880, %r878, %r879;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r883, %r875, %r880;
	// end inline asm
	mov.u32 	%r1025, 15728880;
	// begin inline asm
	lop3.b32 %r886, %r1025, %r877, %r889, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r890, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r891, %r889, %r890;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r894, %r886, %r891;
	// end inline asm
	// begin inline asm
	mov.b32 %r924, {%rs190, %rs190};
	// end inline asm
	// begin inline asm
	mov.b32 %r935, {%rs192, %rs192};
	// end inline asm
	xor.b32  	%r923, %r1421, -2004318072;
	// begin inline asm
	lop3.b32 %r921, %r1014, %r923, %r924, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r925, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r926, %r924, %r925;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r929, %r921, %r926;
	// end inline asm
	// begin inline asm
	lop3.b32 %r932, %r1025, %r923, %r935, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r936, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r937, %r935, %r936;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r940, %r932, %r937;
	// end inline asm
	// begin inline asm
	mov.b32 %r970, {%rs190, %rs190};
	// end inline asm
	// begin inline asm
	mov.b32 %r981, {%rs192, %rs192};
	// end inline asm
	xor.b32  	%r969, %r1427, -2004318072;
	// begin inline asm
	lop3.b32 %r967, %r1014, %r969, %r970, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r971, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r972, %r970, %r971;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r975, %r967, %r972;
	// end inline asm
	// begin inline asm
	lop3.b32 %r978, %r1025, %r969, %r981, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r982, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r983, %r981, %r982;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r986, %r978, %r983;
	// end inline asm
	// begin inline asm
	mov.b32 %r1016, {%rs190, %rs190};
	// end inline asm
	// begin inline asm
	mov.b32 %r1027, {%rs192, %rs192};
	// end inline asm
	xor.b32  	%r1015, %r1433, -2004318072;
	// begin inline asm
	lop3.b32 %r1013, %r1014, %r1015, %r1016, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1017, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1018, %r1016, %r1017;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1021, %r1013, %r1018;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1024, %r1025, %r1015, %r1027, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1028, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1029, %r1027, %r1028;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1032, %r1024, %r1029;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3421;
    mov.b32 {%r2re, %r2im}, %r883;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1057, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3422;
    mov.b32 {%r2re, %r2im}, %r894;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1060, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3421;
    mov.b32 {%r2re, %r2im}, %r929;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1063, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3422;
    mov.b32 {%r2re, %r2im}, %r940;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1066, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3421;
    mov.b32 {%r2re, %r2im}, %r975;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1069, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3422;
    mov.b32 {%r2re, %r2im}, %r986;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1072, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3421;
    mov.b32 {%r2re, %r2im}, %r1021;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1075, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3422;
    mov.b32 {%r2re, %r2im}, %r1032;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1078, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1144, %r1141}, {%r305, %r308}, {%r1057}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1153, %r1150}, {%r305, %r308}, {%r1060}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1162, %r1159}, {%r305, %r308}, {%r1063}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1171, %r1168}, {%r305, %r308}, {%r1066}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1180, %r1177}, {%r305, %r308}, {%r1069}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1189, %r1186}, {%r305, %r308}, {%r1072}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1198, %r1195}, {%r305, %r308}, {%r1075}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1207, %r1204}, {%r305, %r308}, {%r1078}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1137, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1139, %r1137, %r1141;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1142, %r357, %r1144, %r1139;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1146, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1148, %r1146, %r1150;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1151, %r357, %r1153, %r1148;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1155, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1157, %r1155, %r1159;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1160, %r357, %r1162, %r1157;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1164, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1166, %r1164, %r1168;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1169, %r357, %r1171, %r1166;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1173, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1175, %r1173, %r1177;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1178, %r357, %r1180, %r1175;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1182, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1184, %r1182, %r1186;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1187, %r357, %r1189, %r1184;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1191, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1193, %r1191, %r1195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1196, %r357, %r1198, %r1193;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1200, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1202, %r1200, %r1204;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1205, %r357, %r1207, %r1202;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1209, %r360, %r1144;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1212, %r357, %r1141, %r1209;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1216, %r360, %r1153;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1219, %r357, %r1150, %r1216;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1223, %r360, %r1162;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1226, %r357, %r1159, %r1223;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1230, %r360, %r1171;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1233, %r357, %r1168, %r1230;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1237, %r360, %r1180;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1240, %r357, %r1177, %r1237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1244, %r360, %r1189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1247, %r357, %r1186, %r1244;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1251, %r360, %r1198;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1254, %r357, %r1195, %r1251;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1258, %r360, %r1207;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1261, %r357, %r1204, %r1258;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1346, %r1347}, {%r401, %r407, %r404, %r410}, {%r1142, %r1212}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1354, %r1355}, {%r401, %r407, %r404, %r410}, {%r1151, %r1219}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1362, %r1363}, {%r401, %r407, %r404, %r410}, {%r1160, %r1226}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1370, %r1371}, {%r401, %r407, %r404, %r410}, {%r1169, %r1233}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1378, %r1379}, {%r401, %r407, %r404, %r410}, {%r1178, %r1240}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1386, %r1387}, {%r401, %r407, %r404, %r410}, {%r1187, %r1247}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1394, %r1395}, {%r401, %r407, %r404, %r410}, {%r1196, %r1254}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1402, %r1403}, {%r401, %r407, %r404, %r410}, {%r1205, %r1261}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	prmt.b32 %r1345, %r1346, %r1347, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1349, %r1346, %r1347, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1353, %r1354, %r1355, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1357, %r1354, %r1355, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1361, %r1362, %r1363, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1365, %r1362, %r1363, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1369, %r1370, %r1371, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1373, %r1370, %r1371, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1377, %r1378, %r1379, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1381, %r1378, %r1379, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1385, %r1386, %r1387, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1389, %r1386, %r1387, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1393, %r1394, %r1395, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1397, %r1394, %r1395, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1401, %r1402, %r1403, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1405, %r1402, %r1403, %r710;
	// end inline asm
	st.shared.u32 	[%rd6], %r1345;
	st.shared.u32 	[%rd7+33024], %r1349;
	st.shared.u32 	[%rd7+128], %r1353;
	st.shared.u32 	[%rd7+33152], %r1357;
	cvt.u16.u32 	%rs201, %r3453;
	and.b16  	%rs202, %rs201, 255;
	mul.lo.s16 	%rs203, %rs202, 171;
	shr.u16 	%rs204, %rs203, 10;
	mul.lo.s16 	%rs205, %rs204, 6;
	sub.s16 	%rs206, %rs201, %rs205;
	shl.b16 	%rs207, %rs206, 2;
	cvt.u32.u16 	%r1434, %rs207;
	and.b32  	%r1435, %r1434, 252;
	add.s32 	%r1436, %r132, %r1435;
	shr.s32 	%r1437, %r1436, 31;
	shr.u32 	%r1438, %r1437, 30;
	add.s32 	%r1439, %r1436, %r1438;
	and.b32  	%r1440, %r1439, 67108860;
	sub.s32 	%r1441, %r1436, %r1440;
	shl.b32 	%r141, %r1441, 6;
	add.s32 	%r1442, %r92, %r141;
	mul.wide.s32 	%rd171, %r1442, 4;
	add.s64 	%rd173, %rd28, %rd171;
	st.shared.u32 	[%rd173], %r1361;
	add.s32 	%r1443, %r93, %r141;
	mul.wide.u32 	%rd174, %r1443, 4;
	add.s64 	%rd175, %rd28, %rd174;
	st.shared.u32 	[%rd175], %r1365;
	add.s32 	%r1444, %r94, %r141;
	mul.wide.s32 	%rd176, %r1444, 4;
	add.s64 	%rd177, %rd28, %rd176;
	st.shared.u32 	[%rd177], %r1369;
	add.s32 	%r1445, %r95, %r141;
	mul.wide.u32 	%rd178, %r1445, 4;
	add.s64 	%rd179, %rd28, %rd178;
	st.shared.u32 	[%rd179], %r1373;
	add.s32 	%r1446, %r133, %r1435;
	shr.s32 	%r1447, %r1446, 31;
	shr.u32 	%r1448, %r1447, 30;
	add.s32 	%r1449, %r1446, %r1448;
	and.b32  	%r1450, %r1449, 67108860;
	sub.s32 	%r1451, %r1446, %r1450;
	shl.b32 	%r142, %r1451, 6;
	add.s32 	%r1452, %r92, %r142;
	mul.wide.s32 	%rd180, %r1452, 4;
	add.s64 	%rd181, %rd28, %rd180;
	st.shared.u32 	[%rd181], %r1377;
	add.s32 	%r1453, %r93, %r142;
	mul.wide.u32 	%rd182, %r1453, 4;
	add.s64 	%rd183, %rd28, %rd182;
	st.shared.u32 	[%rd183], %r1381;
	add.s32 	%r1454, %r94, %r142;
	mul.wide.s32 	%rd184, %r1454, 4;
	add.s64 	%rd185, %rd28, %rd184;
	st.shared.u32 	[%rd185], %r1385;
	add.s32 	%r1455, %r95, %r142;
	mul.wide.u32 	%rd186, %r1455, 4;
	add.s64 	%rd187, %rd28, %rd186;
	st.shared.u32 	[%rd187], %r1389;
	add.s32 	%r1456, %r134, %r1435;
	shr.s32 	%r1457, %r1456, 31;
	shr.u32 	%r1458, %r1457, 30;
	add.s32 	%r1459, %r1456, %r1458;
	and.b32  	%r1460, %r1459, 67108860;
	sub.s32 	%r1461, %r1456, %r1460;
	shl.b32 	%r143, %r1461, 6;
	add.s32 	%r1462, %r92, %r143;
	mul.wide.s32 	%rd188, %r1462, 4;
	add.s64 	%rd189, %rd28, %rd188;
	st.shared.u32 	[%rd189], %r1393;
	add.s32 	%r1463, %r93, %r143;
	mul.wide.u32 	%rd190, %r1463, 4;
	add.s64 	%rd191, %rd28, %rd190;
	st.shared.u32 	[%rd191], %r1397;
	add.s32 	%r1464, %r94, %r143;
	mul.wide.s32 	%rd192, %r1464, 4;
	add.s64 	%rd193, %rd28, %rd192;
	st.shared.u32 	[%rd193], %r1401;
	add.s32 	%r1465, %r95, %r143;
	mul.wide.u32 	%rd194, %r1465, 4;
	add.s64 	%rd195, %rd28, %rd194;
	st.shared.u32 	[%rd195], %r1405;
	bar.sync 	0;
	mov.u32 	%r3458, %r3408;
	mov.u32 	%r3459, %r3408;
	mov.u32 	%r3460, %r3408;
	mov.u32 	%r3461, %r3408;
	@%p115 bra 	LBB0_112;
	bra.uni 	LBB0_74;
LBB0_112:                               // %oksrem7092
                                        //   in Loop: Header=BB0_73 Depth=2
	ld.shared.u32 	%r3458, [%rd8];
	ld.shared.u32 	%r3459, [%rd9];
	ld.shared.u32 	%r3460, [%rd10];
	ld.shared.u32 	%r3461, [%rd11];
LBB0_74:                                // %L17301
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1501, %r1498}, {%r305, %r308}, {%r3458}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1510, %r1507}, {%r305, %r308}, {%r3459}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1519, %r1516}, {%r305, %r308}, {%r3460}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1528, %r1525}, {%r305, %r308}, {%r3461}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1494, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1496, %r1494, %r1498;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1499, %r357, %r1501, %r1496;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1503, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1505, %r1503, %r1507;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1508, %r357, %r1510, %r1505;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1512, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1514, %r1512, %r1516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1517, %r357, %r1519, %r1514;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1521, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1523, %r1521, %r1525;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1526, %r357, %r1528, %r1523;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1530, %r360, %r1501;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1533, %r357, %r1498, %r1530;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1537, %r360, %r1510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1540, %r357, %r1507, %r1537;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1544, %r360, %r1519;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1547, %r357, %r1516, %r1544;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1551, %r360, %r1528;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1554, %r357, %r1525, %r1551;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1599, %r1603}, {%r401, %r407, %r404, %r410}, {%r1499, %r1533}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1615, %r1619}, {%r401, %r407, %r404, %r410}, {%r1508, %r1540}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1607, %r1611}, {%r401, %r407, %r404, %r410}, {%r1517, %r1547}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1623, %r1627}, {%r401, %r407, %r404, %r410}, {%r1526, %r1554}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1598, %r1599, %r1599, %r3457;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1602, %r1603, %r1603, %r1598;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1606, %r1607, %r1607, %r1602;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1610, %r1611, %r1611, %r1606;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1614, %r1615, %r1615, %r3456;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1618, %r1619, %r1619, %r1614;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1622, %r1623, %r1623, %r1618;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1626, %r1627, %r1627, %r1622;
	// end inline asm
	mov.u32 	%r3462, %r3408;
	mov.u32 	%r3463, %r3408;
	mov.u32 	%r3464, %r3408;
	mov.u32 	%r3465, %r3408;
	@%p115 bra 	LBB0_113;
	bra.uni 	LBB0_75;
LBB0_113:                               // %oksrem7627
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r1631, %r96, %r141;
	mul.wide.s32 	%rd196, %r1631, 4;
	add.s64 	%rd198, %rd28, %rd196;
	ld.shared.u32 	%r3462, [%rd198];
	add.s32 	%r1632, %r97, %r141;
	mul.wide.u32 	%rd199, %r1632, 4;
	add.s64 	%rd200, %rd28, %rd199;
	ld.shared.u32 	%r3463, [%rd200];
	add.s32 	%r1633, %r98, %r141;
	mul.wide.s32 	%rd201, %r1633, 4;
	add.s64 	%rd202, %rd28, %rd201;
	ld.shared.u32 	%r3464, [%rd202];
	add.s32 	%r1634, %r99, %r141;
	mul.wide.u32 	%rd203, %r1634, 4;
	add.s64 	%rd204, %rd28, %rd203;
	ld.shared.u32 	%r3465, [%rd204];
LBB0_75:                                // %L18526
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1670, %r1667}, {%r305, %r308}, {%r3462}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1679, %r1676}, {%r305, %r308}, {%r3463}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1688, %r1685}, {%r305, %r308}, {%r3464}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1697, %r1694}, {%r305, %r308}, {%r3465}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1663, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1665, %r1663, %r1667;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1668, %r357, %r1670, %r1665;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1672, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1674, %r1672, %r1676;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1677, %r357, %r1679, %r1674;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1681, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1683, %r1681, %r1685;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1686, %r357, %r1688, %r1683;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1690, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1692, %r1690, %r1694;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1695, %r357, %r1697, %r1692;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1699, %r360, %r1670;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1702, %r357, %r1667, %r1699;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1706, %r360, %r1679;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1709, %r357, %r1676, %r1706;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1713, %r360, %r1688;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1716, %r357, %r1685, %r1713;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1720, %r360, %r1697;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1723, %r357, %r1694, %r1720;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1768, %r1772}, {%r401, %r407, %r404, %r410}, {%r1668, %r1702}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1784, %r1788}, {%r401, %r407, %r404, %r410}, {%r1677, %r1709}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1776, %r1780}, {%r401, %r407, %r404, %r410}, {%r1686, %r1716}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1792, %r1796}, {%r401, %r407, %r404, %r410}, {%r1695, %r1723}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1767, %r1768, %r1768, %r1610;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1771, %r1772, %r1772, %r1767;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1775, %r1776, %r1776, %r1771;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1779, %r1780, %r1780, %r1775;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1783, %r1784, %r1784, %r1626;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1787, %r1788, %r1788, %r1783;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1791, %r1792, %r1792, %r1787;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1795, %r1796, %r1796, %r1791;
	// end inline asm
	mov.u32 	%r3466, %r3408;
	mov.u32 	%r3467, %r3408;
	mov.u32 	%r3468, %r3408;
	mov.u32 	%r3469, %r3408;
	@%p115 bra 	LBB0_114;
	bra.uni 	LBB0_76;
LBB0_114:                               // %oksrem8162
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r1800, %r96, %r142;
	mul.wide.s32 	%rd205, %r1800, 4;
	add.s64 	%rd207, %rd28, %rd205;
	ld.shared.u32 	%r3466, [%rd207];
	add.s32 	%r1801, %r97, %r142;
	mul.wide.u32 	%rd208, %r1801, 4;
	add.s64 	%rd209, %rd28, %rd208;
	ld.shared.u32 	%r3467, [%rd209];
	add.s32 	%r1802, %r98, %r142;
	mul.wide.s32 	%rd210, %r1802, 4;
	add.s64 	%rd211, %rd28, %rd210;
	ld.shared.u32 	%r3468, [%rd211];
	add.s32 	%r1803, %r99, %r142;
	mul.wide.u32 	%rd212, %r1803, 4;
	add.s64 	%rd213, %rd28, %rd212;
	ld.shared.u32 	%r3469, [%rd213];
LBB0_76:                                // %L19751
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1839, %r1836}, {%r305, %r308}, {%r3466}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1848, %r1845}, {%r305, %r308}, {%r3467}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1857, %r1854}, {%r305, %r308}, {%r3468}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1866, %r1863}, {%r305, %r308}, {%r3469}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1832, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1834, %r1832, %r1836;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1837, %r357, %r1839, %r1834;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1841, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1843, %r1841, %r1845;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1846, %r357, %r1848, %r1843;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1850, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1852, %r1850, %r1854;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1855, %r357, %r1857, %r1852;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1859, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1861, %r1859, %r1863;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1864, %r357, %r1866, %r1861;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1868, %r360, %r1839;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1871, %r357, %r1836, %r1868;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1875, %r360, %r1848;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1878, %r357, %r1845, %r1875;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1882, %r360, %r1857;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1885, %r357, %r1854, %r1882;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1889, %r360, %r1866;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1892, %r357, %r1863, %r1889;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1937, %r1941}, {%r401, %r407, %r404, %r410}, {%r1837, %r1871}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1953, %r1957}, {%r401, %r407, %r404, %r410}, {%r1846, %r1878}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1945, %r1949}, {%r401, %r407, %r404, %r410}, {%r1855, %r1885}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1961, %r1965}, {%r401, %r407, %r404, %r410}, {%r1864, %r1892}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1936, %r1937, %r1937, %r1779;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1940, %r1941, %r1941, %r1936;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1944, %r1945, %r1945, %r1940;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1948, %r1949, %r1949, %r1944;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1952, %r1953, %r1953, %r1795;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1956, %r1957, %r1957, %r1952;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1960, %r1961, %r1961, %r1956;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1964, %r1965, %r1965, %r1960;
	// end inline asm
	mov.u32 	%r3470, %r3408;
	mov.u32 	%r3471, %r3408;
	mov.u32 	%r3472, %r3408;
	mov.u32 	%r3473, %r3408;
	@%p115 bra 	LBB0_115;
	bra.uni 	LBB0_77;
LBB0_115:                               // %oksrem8697
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r1969, %r96, %r143;
	mul.wide.s32 	%rd214, %r1969, 4;
	add.s64 	%rd216, %rd28, %rd214;
	ld.shared.u32 	%r3470, [%rd216];
	add.s32 	%r1970, %r97, %r143;
	mul.wide.u32 	%rd217, %r1970, 4;
	add.s64 	%rd218, %rd28, %rd217;
	ld.shared.u32 	%r3471, [%rd218];
	add.s32 	%r1971, %r98, %r143;
	mul.wide.s32 	%rd219, %r1971, 4;
	add.s64 	%rd220, %rd28, %rd219;
	ld.shared.u32 	%r3472, [%rd220];
	add.s32 	%r1972, %r99, %r143;
	mul.wide.u32 	%rd221, %r1972, 4;
	add.s64 	%rd222, %rd28, %rd221;
	ld.shared.u32 	%r3473, [%rd222];
LBB0_77:                                // %L20976
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2008, %r2005}, {%r305, %r308}, {%r3470}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2017, %r2014}, {%r305, %r308}, {%r3471}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2026, %r2023}, {%r305, %r308}, {%r3472}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2035, %r2032}, {%r305, %r308}, {%r3473}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2001, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2003, %r2001, %r2005;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2006, %r357, %r2008, %r2003;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2010, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2012, %r2010, %r2014;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2015, %r357, %r2017, %r2012;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2019, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2021, %r2019, %r2023;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2024, %r357, %r2026, %r2021;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2028, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2030, %r2028, %r2032;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2033, %r357, %r2035, %r2030;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2037, %r360, %r2008;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2040, %r357, %r2005, %r2037;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2044, %r360, %r2017;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2047, %r357, %r2014, %r2044;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2051, %r360, %r2026;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2054, %r357, %r2023, %r2051;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2058, %r360, %r2035;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2061, %r357, %r2032, %r2058;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2106, %r2110}, {%r401, %r407, %r404, %r410}, {%r2006, %r2040}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2122, %r2126}, {%r401, %r407, %r404, %r410}, {%r2015, %r2047}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2114, %r2118}, {%r401, %r407, %r404, %r410}, {%r2024, %r2054}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2130, %r2134}, {%r401, %r407, %r404, %r410}, {%r2033, %r2061}, {%r3408, %r3408};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2105, %r2106, %r2106, %r1948;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2109, %r2110, %r2110, %r2105;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2113, %r2114, %r2114, %r2109;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3457, %r2118, %r2118, %r2113;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2121, %r2122, %r2122, %r1964;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2125, %r2126, %r2126, %r2121;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2129, %r2130, %r2130, %r2125;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3456, %r2134, %r2134, %r2129;
	// end inline asm
	add.s32 	%r3454, %r3454, 4;
	setp.ne.s32 	%p125, %r3454, 40;
	@%p125 bra 	LBB0_81;
// %bb.78:                              // %L21122
                                        //   in Loop: Header=BB0_73 Depth=2
	@%p65 bra 	LBB0_80;
// %bb.79:                              // %L21181
                                        //   in Loop: Header=BB0_73 Depth=2
	mul.lo.s32 	%r2137, %r3455, 1152;
	add.s32 	%r2138, %r100, %r2137;
	mul.wide.u32 	%rd223, %r2138, 4;
	add.s64 	%rd224, %rd4, %rd223;
	st.global.u32 	[%rd224], %r3457;
	add.s32 	%r2139, %r101, %r2137;
	mul.wide.u32 	%rd225, %r2139, 4;
	add.s64 	%rd226, %rd4, %rd225;
	st.global.u32 	[%rd226], %r3456;
	bra.uni 	LBB0_80;
LBB0_82:                                // %L21443.preheader
                                        //   in Loop: Header=BB0_71 Depth=1
	add.s32 	%r176, %r107, 25;
	add.s32 	%r177, %r107, 26;
	add.s32 	%r178, %r107, 27;
	mov.u32 	%r2142, 0;
	mov.u32 	%r3478, 12;
	mov.u32 	%r3479, %r2142;
	bra.uni 	LBB0_83;
LBB0_90:                                // %L31434
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r3455, %r3455, 1;
	mov.u32 	%r3456, 0;
	mov.u32 	%r3457, %r3456;
	mov.u32 	%r3454, %r3456;
LBB0_91:                                // %L31435
                                        //   in Loop: Header=BB0_83 Depth=2
	bar.sync 	0;
	add.s32 	%r3479, %r3479, 1;
	add.s32 	%r3478, %r3478, -4;
	setp.eq.s32 	%p140, %r3478, -12;
	@%p140 bra 	LBB0_92;
LBB0_83:                                // %L21443
                                        //   Parent Loop BB0_71 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p129, %r3478, 12;
	selp.b32 	%r2680, %r3428, 0, %p129;
	setp.eq.s32 	%p130, %r3478, 8;
	selp.b32 	%r2681, %r3432, %r2680, %p130;
	setp.eq.s32 	%p131, %r3478, 4;
	selp.b32 	%r2682, %r3436, %r2681, %p131;
	setp.eq.s32 	%p132, %r3478, 0;
	selp.b32 	%r2683, %r3440, %r2682, %p132;
	setp.eq.s32 	%p133, %r3478, -4;
	selp.b32 	%r2684, %r3444, %r2683, %p133;
	setp.eq.s32 	%p134, %r3478, -8;
	selp.b32 	%r2685, %r3448, %r2684, %p134;
	selp.b32 	%r2686, %r3429, 0, %p129;
	selp.b32 	%r2687, %r3433, %r2686, %p130;
	selp.b32 	%r2688, %r3437, %r2687, %p131;
	selp.b32 	%r2689, %r3441, %r2688, %p132;
	selp.b32 	%r2690, %r3445, %r2689, %p133;
	selp.b32 	%r2691, %r3449, %r2690, %p134;
	selp.b32 	%r2692, %r3430, 0, %p129;
	selp.b32 	%r2693, %r3434, %r2692, %p130;
	selp.b32 	%r2694, %r3438, %r2693, %p131;
	selp.b32 	%r2695, %r3442, %r2694, %p132;
	selp.b32 	%r2696, %r3446, %r2695, %p133;
	selp.b32 	%r2697, %r3450, %r2696, %p134;
	selp.b32 	%r2698, %r3431, 0, %p129;
	selp.b32 	%r2699, %r3435, %r2698, %p130;
	selp.b32 	%r2700, %r3439, %r2699, %p131;
	selp.b32 	%r2701, %r3443, %r2700, %p132;
	selp.b32 	%r2702, %r3447, %r2701, %p133;
	selp.b32 	%r2703, %r3451, %r2702, %p134;
	// begin inline asm
	mov.b32 %r2170, {%rs190, %rs190};
	// end inline asm
	// begin inline asm
	mov.b32 %r2181, {%rs192, %rs192};
	// end inline asm
	shr.u32 	%r2704, %r2685, 8;
	xor.b32  	%r2180, %r2704, 8947848;
	// begin inline asm
	lop3.b32 %r2167, %r1014, %r2180, %r2170, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2171, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2172, %r2170, %r2171;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2175, %r2167, %r2172;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2178, %r1025, %r2180, %r2181, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2182, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2183, %r2181, %r2182;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2186, %r2178, %r2183;
	// end inline asm
	// begin inline asm
	mov.b32 %r2216, {%rs190, %rs190};
	// end inline asm
	// begin inline asm
	mov.b32 %r2227, {%rs192, %rs192};
	// end inline asm
	shr.u32 	%r2705, %r2691, 8;
	xor.b32  	%r2226, %r2705, 8947848;
	// begin inline asm
	lop3.b32 %r2213, %r1014, %r2226, %r2216, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2217, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2218, %r2216, %r2217;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2221, %r2213, %r2218;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2224, %r1025, %r2226, %r2227, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2228, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2229, %r2227, %r2228;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2232, %r2224, %r2229;
	// end inline asm
	// begin inline asm
	mov.b32 %r2262, {%rs190, %rs190};
	// end inline asm
	// begin inline asm
	mov.b32 %r2273, {%rs192, %rs192};
	// end inline asm
	shr.u32 	%r2706, %r2697, 8;
	xor.b32  	%r2272, %r2706, 8947848;
	// begin inline asm
	lop3.b32 %r2259, %r1014, %r2272, %r2262, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2263, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2264, %r2262, %r2263;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2267, %r2259, %r2264;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2270, %r1025, %r2272, %r2273, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2274, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2275, %r2273, %r2274;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2278, %r2270, %r2275;
	// end inline asm
	// begin inline asm
	mov.b32 %r2308, {%rs190, %rs190};
	// end inline asm
	// begin inline asm
	mov.b32 %r2319, {%rs192, %rs192};
	// end inline asm
	shr.u32 	%r2707, %r2703, 8;
	xor.b32  	%r2318, %r2707, 8947848;
	// begin inline asm
	lop3.b32 %r2305, %r1014, %r2318, %r2308, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2309, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2310, %r2308, %r2309;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2313, %r2305, %r2310;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2316, %r1025, %r2318, %r2319, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2320, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2321, %r2319, %r2320;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2324, %r2316, %r2321;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3421;
    mov.b32 {%r2re, %r2im}, %r2175;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2327, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3422;
    mov.b32 {%r2re, %r2im}, %r2186;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2330, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3421;
    mov.b32 {%r2re, %r2im}, %r2221;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2333, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3422;
    mov.b32 {%r2re, %r2im}, %r2232;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2336, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3421;
    mov.b32 {%r2re, %r2im}, %r2267;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2339, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3422;
    mov.b32 {%r2re, %r2im}, %r2278;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2342, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3421;
    mov.b32 {%r2re, %r2im}, %r2313;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2345, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3422;
    mov.b32 {%r2re, %r2im}, %r2324;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2348, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2414, %r2411}, {%r305, %r308}, {%r2327}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2423, %r2420}, {%r305, %r308}, {%r2330}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2432, %r2429}, {%r305, %r308}, {%r2333}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2441, %r2438}, {%r305, %r308}, {%r2336}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2450, %r2447}, {%r305, %r308}, {%r2339}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2459, %r2456}, {%r305, %r308}, {%r2342}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2468, %r2465}, {%r305, %r308}, {%r2345}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2477, %r2474}, {%r305, %r308}, {%r2348}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2407, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2409, %r2407, %r2411;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2412, %r357, %r2414, %r2409;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2416, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2418, %r2416, %r2420;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2421, %r357, %r2423, %r2418;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2425, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2427, %r2425, %r2429;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2430, %r357, %r2432, %r2427;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2434, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2436, %r2434, %r2438;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2439, %r357, %r2441, %r2436;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2443, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2445, %r2443, %r2447;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2448, %r357, %r2450, %r2445;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2452, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2454, %r2452, %r2456;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2457, %r357, %r2459, %r2454;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2461, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2463, %r2461, %r2465;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2466, %r357, %r2468, %r2463;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2470, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2472, %r2470, %r2474;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2475, %r357, %r2477, %r2472;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2479, %r360, %r2414;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2482, %r357, %r2411, %r2479;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2486, %r360, %r2423;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2489, %r357, %r2420, %r2486;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2493, %r360, %r2432;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2496, %r357, %r2429, %r2493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2500, %r360, %r2441;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2503, %r357, %r2438, %r2500;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2507, %r360, %r2450;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2510, %r357, %r2447, %r2507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2514, %r360, %r2459;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2517, %r357, %r2456, %r2514;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2521, %r360, %r2468;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2524, %r357, %r2465, %r2521;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2528, %r360, %r2477;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2531, %r357, %r2474, %r2528;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2616, %r2617}, {%r401, %r407, %r404, %r410}, {%r2412, %r2482}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2624, %r2625}, {%r401, %r407, %r404, %r410}, {%r2421, %r2489}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2632, %r2633}, {%r401, %r407, %r404, %r410}, {%r2430, %r2496}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2640, %r2641}, {%r401, %r407, %r404, %r410}, {%r2439, %r2503}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2648, %r2649}, {%r401, %r407, %r404, %r410}, {%r2448, %r2510}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2656, %r2657}, {%r401, %r407, %r404, %r410}, {%r2457, %r2517}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2664, %r2665}, {%r401, %r407, %r404, %r410}, {%r2466, %r2524}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2672, %r2673}, {%r401, %r407, %r404, %r410}, {%r2475, %r2531}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	prmt.b32 %r2615, %r2616, %r2617, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2619, %r2616, %r2617, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2623, %r2624, %r2625, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2627, %r2624, %r2625, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2631, %r2632, %r2633, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2635, %r2632, %r2633, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2639, %r2640, %r2641, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2643, %r2640, %r2641, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2647, %r2648, %r2649, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2651, %r2648, %r2649, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2655, %r2656, %r2657, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2659, %r2656, %r2657, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2663, %r2664, %r2665, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2667, %r2664, %r2665, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2671, %r2672, %r2673, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2675, %r2672, %r2673, %r710;
	// end inline asm
	st.shared.u32 	[%rd6], %r2615;
	st.shared.u32 	[%rd7+33024], %r2619;
	st.shared.u32 	[%rd7+128], %r2623;
	st.shared.u32 	[%rd7+33152], %r2627;
	cvt.u16.u32 	%rs256, %r3479;
	and.b16  	%rs257, %rs256, 255;
	mul.lo.s16 	%rs258, %rs257, 171;
	shr.u16 	%rs259, %rs258, 10;
	mul.lo.s16 	%rs260, %rs259, 6;
	sub.s16 	%rs261, %rs256, %rs260;
	shl.b16 	%rs262, %rs261, 2;
	cvt.u32.u16 	%r2708, %rs262;
	and.b32  	%r2709, %r2708, 252;
	add.s32 	%r2710, %r176, %r2709;
	cvt.u16.u32 	%rs263, %r2710;
	shr.s16 	%rs264, %rs263, 15;
	shr.u16 	%rs265, %rs264, 14;
	add.s16 	%rs266, %rs263, %rs265;
	and.b16  	%rs267, %rs266, -4;
	sub.s16 	%rs268, %rs263, %rs267;
	mul.wide.s16 	%r185, %rs268, 64;
	add.s32 	%r2711, %r92, %r185;
	mul.wide.s32 	%rd227, %r2711, 4;
	add.s64 	%rd229, %rd28, %rd227;
	st.shared.u32 	[%rd229], %r2631;
	add.s32 	%r2712, %r93, %r185;
	mul.wide.u32 	%rd230, %r2712, 4;
	add.s64 	%rd231, %rd28, %rd230;
	st.shared.u32 	[%rd231], %r2635;
	add.s32 	%r2713, %r94, %r185;
	mul.wide.s32 	%rd232, %r2713, 4;
	add.s64 	%rd233, %rd28, %rd232;
	st.shared.u32 	[%rd233], %r2639;
	add.s32 	%r2714, %r95, %r185;
	mul.wide.u32 	%rd234, %r2714, 4;
	add.s64 	%rd235, %rd28, %rd234;
	st.shared.u32 	[%rd235], %r2643;
	add.s32 	%r2715, %r177, %r2709;
	cvt.u16.u32 	%rs269, %r2715;
	shr.s16 	%rs270, %rs269, 15;
	shr.u16 	%rs271, %rs270, 14;
	add.s16 	%rs272, %rs269, %rs271;
	and.b16  	%rs273, %rs272, -4;
	sub.s16 	%rs274, %rs269, %rs273;
	mul.wide.s16 	%r186, %rs274, 64;
	add.s32 	%r2716, %r92, %r186;
	mul.wide.s32 	%rd236, %r2716, 4;
	add.s64 	%rd237, %rd28, %rd236;
	st.shared.u32 	[%rd237], %r2647;
	add.s32 	%r2717, %r93, %r186;
	mul.wide.u32 	%rd238, %r2717, 4;
	add.s64 	%rd239, %rd28, %rd238;
	st.shared.u32 	[%rd239], %r2651;
	add.s32 	%r2718, %r94, %r186;
	mul.wide.s32 	%rd240, %r2718, 4;
	add.s64 	%rd241, %rd28, %rd240;
	st.shared.u32 	[%rd241], %r2655;
	add.s32 	%r2719, %r95, %r186;
	mul.wide.u32 	%rd242, %r2719, 4;
	add.s64 	%rd243, %rd28, %rd242;
	st.shared.u32 	[%rd243], %r2659;
	add.s32 	%r2720, %r178, %r2709;
	cvt.u16.u32 	%rs275, %r2720;
	shr.s16 	%rs276, %rs275, 15;
	shr.u16 	%rs277, %rs276, 14;
	add.s16 	%rs278, %rs275, %rs277;
	and.b16  	%rs279, %rs278, -4;
	sub.s16 	%rs280, %rs275, %rs279;
	mul.wide.s16 	%r187, %rs280, 64;
	add.s32 	%r2721, %r92, %r187;
	mul.wide.s32 	%rd244, %r2721, 4;
	add.s64 	%rd245, %rd28, %rd244;
	st.shared.u32 	[%rd245], %r2663;
	add.s32 	%r2722, %r93, %r187;
	mul.wide.u32 	%rd246, %r2722, 4;
	add.s64 	%rd247, %rd28, %rd246;
	st.shared.u32 	[%rd247], %r2667;
	add.s32 	%r2723, %r94, %r187;
	mul.wide.s32 	%rd248, %r2723, 4;
	add.s64 	%rd249, %rd28, %rd248;
	st.shared.u32 	[%rd249], %r2671;
	add.s32 	%r2724, %r95, %r187;
	mul.wide.u32 	%rd250, %r2724, 4;
	add.s64 	%rd251, %rd28, %rd250;
	st.shared.u32 	[%rd251], %r2675;
	bar.sync 	0;
	mov.u32 	%r3484, %r2142;
	mov.u32 	%r3485, %r2142;
	mov.u32 	%r3486, %r2142;
	mov.u32 	%r3487, %r2142;
	@%p115 bra 	LBB0_116;
	bra.uni 	LBB0_84;
LBB0_116:                               // %oksrem11490
                                        //   in Loop: Header=BB0_83 Depth=2
	ld.shared.u32 	%r3487, [%rd8];
	ld.shared.u32 	%r3486, [%rd9];
	ld.shared.u32 	%r3485, [%rd10];
	ld.shared.u32 	%r3484, [%rd11];
LBB0_84:                                // %L27322
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2760, %r2757}, {%r305, %r308}, {%r3487}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2769, %r2766}, {%r305, %r308}, {%r3486}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2778, %r2775}, {%r305, %r308}, {%r3485}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2787, %r2784}, {%r305, %r308}, {%r3484}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2753, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2755, %r2753, %r2757;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2758, %r357, %r2760, %r2755;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2762, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2764, %r2762, %r2766;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2767, %r357, %r2769, %r2764;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2771, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2773, %r2771, %r2775;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2776, %r357, %r2778, %r2773;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2780, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2782, %r2780, %r2784;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2785, %r357, %r2787, %r2782;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2789, %r360, %r2760;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2792, %r357, %r2757, %r2789;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2796, %r360, %r2769;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2799, %r357, %r2766, %r2796;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2803, %r360, %r2778;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2806, %r357, %r2775, %r2803;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2810, %r360, %r2787;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2813, %r357, %r2784, %r2810;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2858, %r2862}, {%r401, %r407, %r404, %r410}, {%r2758, %r2792}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2874, %r2878}, {%r401, %r407, %r404, %r410}, {%r2767, %r2799}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2866, %r2870}, {%r401, %r407, %r404, %r410}, {%r2776, %r2806}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2882, %r2886}, {%r401, %r407, %r404, %r410}, {%r2785, %r2813}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2857, %r2858, %r2858, %r3457;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2861, %r2862, %r2862, %r2857;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2865, %r2866, %r2866, %r2861;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2869, %r2870, %r2870, %r2865;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2873, %r2874, %r2874, %r3456;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2877, %r2878, %r2878, %r2873;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2881, %r2882, %r2882, %r2877;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2885, %r2886, %r2886, %r2881;
	// end inline asm
	mov.u32 	%r3488, %r2142;
	mov.u32 	%r3489, %r2142;
	mov.u32 	%r3490, %r2142;
	mov.u32 	%r3491, %r2142;
	@%p115 bra 	LBB0_117;
	bra.uni 	LBB0_85;
LBB0_117:                               // %oksrem12025
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r2890, %r96, %r185;
	mul.wide.s32 	%rd252, %r2890, 4;
	add.s64 	%rd254, %rd28, %rd252;
	ld.shared.u32 	%r3491, [%rd254];
	add.s32 	%r2891, %r97, %r185;
	mul.wide.u32 	%rd255, %r2891, 4;
	add.s64 	%rd256, %rd28, %rd255;
	ld.shared.u32 	%r3490, [%rd256];
	add.s32 	%r2892, %r98, %r185;
	mul.wide.s32 	%rd257, %r2892, 4;
	add.s64 	%rd258, %rd28, %rd257;
	ld.shared.u32 	%r3489, [%rd258];
	add.s32 	%r2893, %r99, %r185;
	mul.wide.u32 	%rd259, %r2893, 4;
	add.s64 	%rd260, %rd28, %rd259;
	ld.shared.u32 	%r3488, [%rd260];
LBB0_85:                                // %L28547
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2929, %r2926}, {%r305, %r308}, {%r3491}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2938, %r2935}, {%r305, %r308}, {%r3490}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2947, %r2944}, {%r305, %r308}, {%r3489}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2956, %r2953}, {%r305, %r308}, {%r3488}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2922, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2924, %r2922, %r2926;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2927, %r357, %r2929, %r2924;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2931, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2933, %r2931, %r2935;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2936, %r357, %r2938, %r2933;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2940, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2942, %r2940, %r2944;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2945, %r357, %r2947, %r2942;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2949, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2951, %r2949, %r2953;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2954, %r357, %r2956, %r2951;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2958, %r360, %r2929;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2961, %r357, %r2926, %r2958;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2965, %r360, %r2938;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2968, %r357, %r2935, %r2965;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2972, %r360, %r2947;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2975, %r357, %r2944, %r2972;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2979, %r360, %r2956;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2982, %r357, %r2953, %r2979;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3027, %r3031}, {%r401, %r407, %r404, %r410}, {%r2927, %r2961}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3043, %r3047}, {%r401, %r407, %r404, %r410}, {%r2936, %r2968}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3035, %r3039}, {%r401, %r407, %r404, %r410}, {%r2945, %r2975}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3051, %r3055}, {%r401, %r407, %r404, %r410}, {%r2954, %r2982}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3026, %r3027, %r3027, %r2869;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3030, %r3031, %r3031, %r3026;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3034, %r3035, %r3035, %r3030;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3038, %r3039, %r3039, %r3034;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3042, %r3043, %r3043, %r2885;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3046, %r3047, %r3047, %r3042;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3050, %r3051, %r3051, %r3046;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3054, %r3055, %r3055, %r3050;
	// end inline asm
	mov.u32 	%r3492, %r2142;
	mov.u32 	%r3493, %r2142;
	mov.u32 	%r3494, %r2142;
	mov.u32 	%r3495, %r2142;
	@%p115 bra 	LBB0_118;
	bra.uni 	LBB0_86;
LBB0_118:                               // %oksrem12560
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r3059, %r96, %r186;
	mul.wide.s32 	%rd261, %r3059, 4;
	add.s64 	%rd263, %rd28, %rd261;
	ld.shared.u32 	%r3495, [%rd263];
	add.s32 	%r3060, %r97, %r186;
	mul.wide.u32 	%rd264, %r3060, 4;
	add.s64 	%rd265, %rd28, %rd264;
	ld.shared.u32 	%r3494, [%rd265];
	add.s32 	%r3061, %r98, %r186;
	mul.wide.s32 	%rd266, %r3061, 4;
	add.s64 	%rd267, %rd28, %rd266;
	ld.shared.u32 	%r3493, [%rd267];
	add.s32 	%r3062, %r99, %r186;
	mul.wide.u32 	%rd268, %r3062, 4;
	add.s64 	%rd269, %rd28, %rd268;
	ld.shared.u32 	%r3492, [%rd269];
LBB0_86:                                // %L29772
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3098, %r3095}, {%r305, %r308}, {%r3495}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3107, %r3104}, {%r305, %r308}, {%r3494}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3116, %r3113}, {%r305, %r308}, {%r3493}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3125, %r3122}, {%r305, %r308}, {%r3492}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3091, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3093, %r3091, %r3095;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3096, %r357, %r3098, %r3093;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3100, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3102, %r3100, %r3104;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3105, %r357, %r3107, %r3102;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3109, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3111, %r3109, %r3113;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3114, %r357, %r3116, %r3111;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3118, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3120, %r3118, %r3122;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3123, %r357, %r3125, %r3120;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3127, %r360, %r3098;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3130, %r357, %r3095, %r3127;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3134, %r360, %r3107;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3137, %r357, %r3104, %r3134;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3141, %r360, %r3116;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3144, %r357, %r3113, %r3141;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3148, %r360, %r3125;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3151, %r357, %r3122, %r3148;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3196, %r3200}, {%r401, %r407, %r404, %r410}, {%r3096, %r3130}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3212, %r3216}, {%r401, %r407, %r404, %r410}, {%r3105, %r3137}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3204, %r3208}, {%r401, %r407, %r404, %r410}, {%r3114, %r3144}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3220, %r3224}, {%r401, %r407, %r404, %r410}, {%r3123, %r3151}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3195, %r3196, %r3196, %r3038;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3199, %r3200, %r3200, %r3195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3203, %r3204, %r3204, %r3199;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3207, %r3208, %r3208, %r3203;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3211, %r3212, %r3212, %r3054;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3215, %r3216, %r3216, %r3211;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3219, %r3220, %r3220, %r3215;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3223, %r3224, %r3224, %r3219;
	// end inline asm
	mov.u32 	%r3496, %r2142;
	mov.u32 	%r3497, %r2142;
	mov.u32 	%r3498, %r2142;
	mov.u32 	%r3499, %r2142;
	@%p115 bra 	LBB0_119;
	bra.uni 	LBB0_87;
LBB0_119:                               // %oksrem13095
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r3228, %r96, %r187;
	mul.wide.s32 	%rd270, %r3228, 4;
	add.s64 	%rd272, %rd28, %rd270;
	ld.shared.u32 	%r3499, [%rd272];
	add.s32 	%r3229, %r97, %r187;
	mul.wide.u32 	%rd273, %r3229, 4;
	add.s64 	%rd274, %rd28, %rd273;
	ld.shared.u32 	%r3498, [%rd274];
	add.s32 	%r3230, %r98, %r187;
	mul.wide.s32 	%rd275, %r3230, 4;
	add.s64 	%rd276, %rd28, %rd275;
	ld.shared.u32 	%r3497, [%rd276];
	add.s32 	%r3231, %r99, %r187;
	mul.wide.u32 	%rd277, %r3231, 4;
	add.s64 	%rd278, %rd28, %rd277;
	ld.shared.u32 	%r3496, [%rd278];
LBB0_87:                                // %L30997
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3267, %r3264}, {%r305, %r308}, {%r3499}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3276, %r3273}, {%r305, %r308}, {%r3498}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3285, %r3282}, {%r305, %r308}, {%r3497}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3294, %r3291}, {%r305, %r308}, {%r3496}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3260, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3262, %r3260, %r3264;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3265, %r357, %r3267, %r3262;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3269, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3271, %r3269, %r3273;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3274, %r357, %r3276, %r3271;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3278, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3280, %r3278, %r3282;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3283, %r357, %r3285, %r3280;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3287, %r360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3289, %r3287, %r3291;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3292, %r357, %r3294, %r3289;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3296, %r360, %r3267;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3299, %r357, %r3264, %r3296;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3303, %r360, %r3276;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3306, %r357, %r3273, %r3303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3310, %r360, %r3285;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3313, %r357, %r3282, %r3310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3317, %r360, %r3294;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3320, %r357, %r3291, %r3317;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3365, %r3369}, {%r401, %r407, %r404, %r410}, {%r3265, %r3299}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3381, %r3385}, {%r401, %r407, %r404, %r410}, {%r3274, %r3306}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3373, %r3377}, {%r401, %r407, %r404, %r410}, {%r3283, %r3313}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3389, %r3393}, {%r401, %r407, %r404, %r410}, {%r3292, %r3320}, {%r2142, %r2142};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3364, %r3365, %r3365, %r3207;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3368, %r3369, %r3369, %r3364;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3372, %r3373, %r3373, %r3368;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3457, %r3377, %r3377, %r3372;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3380, %r3381, %r3381, %r3223;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3384, %r3385, %r3385, %r3380;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3388, %r3389, %r3389, %r3384;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3456, %r3393, %r3393, %r3388;
	// end inline asm
	add.s32 	%r3454, %r3454, 4;
	setp.ne.s32 	%p138, %r3454, 40;
	@%p138 bra 	LBB0_91;
// %bb.88:                              // %L31143
                                        //   in Loop: Header=BB0_83 Depth=2
	@%p65 bra 	LBB0_90;
// %bb.89:                              // %L31202
                                        //   in Loop: Header=BB0_83 Depth=2
	mul.lo.s32 	%r3396, %r3455, 1152;
	add.s32 	%r3397, %r100, %r3396;
	mul.wide.u32 	%rd279, %r3397, 4;
	add.s64 	%rd280, %rd4, %rd279;
	st.global.u32 	[%rd280], %r3457;
	add.s32 	%r3398, %r101, %r3396;
	mul.wide.u32 	%rd281, %r3398, 4;
	add.s64 	%rd282, %rd4, %rd281;
	st.global.u32 	[%rd282], %r3456;
	bra.uni 	LBB0_90;
LBB0_93:                                // %guard_pass14638
	@%p65 bra 	LBB0_95;
// %bb.94:                              // %L31536
	mul.lo.s32 	%r3400, %r3455, 1152;
	add.s32 	%r3401, %r100, %r3400;
	mul.wide.u32 	%rd283, %r3401, 4;
	add.s64 	%rd284, %rd4, %rd283;
	st.global.u32 	[%rd284], %r3457;
	add.s32 	%r3402, %r101, %r3400;
	mul.wide.u32 	%rd285, %r3402, 4;
	add.s64 	%rd286, %rd4, %rd285;
	st.global.u32 	[%rd286], %r3456;
LBB0_95:                                // %L31768
	mov.u32 	%r3403, 0;
	st.global.u32 	[%rd5], %r3403;
	ret;
LBB0_1:                                 // %L8
	ld.param.u64 	%rd13, [_Z15julia_frb_1030913CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0];
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd13;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
