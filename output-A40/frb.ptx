// PTX CompilerJob of frb(CuDeviceVector{Int16x2, 1}, CuDeviceVector{Float16x2, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Float16x2, 1}, CuDeviceVector{Int32, 1}) in world 33557 for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 7.1
.target sm_86
.address_size 64

	// .globl	_Z15julia_frb_1026813CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE // -- Begin function _Z15julia_frb_1026813CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[8]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z15julia_frb_1026813CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.visible .entry _Z15julia_frb_1026813CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE(
	.param .align 8 .b8 _Z15julia_frb_1026813CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0[8],
	.param .align 8 .b8 _Z15julia_frb_1026813CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z15julia_frb_1026813CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z15julia_frb_1026813CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z15julia_frb_1026813CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z15julia_frb_1026813CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<143>;
	.reg .b16 	%rs<271>;
	.reg .b32 	%r<3516>;
	.reg .f32 	%f<402>;
	.reg .b64 	%rd<287>;

// %bb.0:                               // %conversion
	// begin inline asm
	mov.u32 %r285, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r285, 76895;
	@%p1 bra 	LBB0_96;
	bra.uni 	LBB0_1;
LBB0_96:                                // %L10
	ld.param.u64 	%rd14, [_Z15julia_frb_1026813CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5];
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %tid.x;
	mad.lo.s32 	%r286, %r1, 768, %r3;
	or.b32  	%r287, %r286, %r4;
	mul.wide.u32 	%rd20, %r287, 4;
	add.s64 	%rd5, %rd14, %rd20;
	mov.u32 	%r288, 1;
	st.global.u32 	[%rd5], %r288;
	and.b32  	%r5, %r4, 3;
	shr.u32 	%r6, %r4, 2;
	mul.lo.s32 	%r289, %r5, %r6;
	and.b32  	%r290, %r289, 7;
	cvt.rn.f32.u32 	%f102, %r290;
	mov.f32 	%f103, 0f40800000;
	div.approx.f32 	%f1, %f102, %f103;
	abs.f32 	%f400, %f1;
	setp.lt.f32 	%p2, %f400, 0f40000000;
	@%p2 bra 	LBB0_108;
// %bb.97:
	setp.gtu.f32 	%p3, %f400, 0f4B800000;
	@%p3 bra 	LBB0_104;
	bra.uni 	LBB0_98;
LBB0_104:
	mov.b32 	%r216, %f400;
	and.b32  	%r291, %r216, 8388607;
	or.b32  	%r3514, %r291, 1065353216;
	mov.b32 	%f399, %r3514;
	add.s32 	%r292, %r216, -1073741824;
	and.b32  	%r3515, %r292, -8388608;
	setp.eq.s32 	%p9, %r3515, 0;
	@%p9 bra 	LBB0_107;
// %bb.105:                             // %__nv_fmaf_rn.exit4.i.i.i1407.preheader
	mov.f32 	%f113, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f112,%f113;
	// end inline asm
LBB0_106:                               // %__nv_fmaf_rn.exit4.i.i.i1407
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r293, %r3515, 192937984;
	add.s32 	%r294, %r293, %r3514;
	mov.b32 	%f114, %r294;
	mul.f32 	%f115, %f112, %f114;
	sub.f32 	%f116, %f114, %f115;
	fma.rn.f32 	%f117, %f116, %f112, %f115;
	sub.f32 	%f118, %f114, %f117;
	fma.rz.f32 	%f119, %f118, %f112, %f117;
	cvt.rzi.f32.f32 	%f120, %f119;
	sub.f32 	%f399, %f114, %f120;
	sub.s32 	%r3515, %r3515, %r293;
	mov.b32 	%r3514, %f399;
	setp.ne.s32 	%p10, %r3515, 0;
	setp.ne.s32 	%p11, %r3514, 0;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	LBB0_106;
LBB0_107:                               // %__internal_fmodf_slowpath_mod.exit.i.i1409
	setp.gt.u32 	%p13, %r216, 2139095039;
	selp.f32 	%f121, 0f7FFFFFFF, 0f4B800000, %p13;
	mul.f32 	%f122, %f399, 0f34000000;
	mul.f32 	%f400, %f121, %f122;
	bra.uni 	LBB0_108;
LBB0_98:                                // %__nv_fast_fdividef.exit.i.i.i1379
	mov.f32 	%f104, 0f40000000;
	div.approx.f32 	%f105, %f400, %f104;
	cvt.rzi.f32.f32 	%f398, %f105;
	fma.rn.f32 	%f88, %f398, 0fC0000000, %f400;
	mov.b32 	%r215, %f88;
	setp.lt.u32 	%p4, %r215, 1073741824;
	@%p4 bra 	LBB0_103;
// %bb.99:
	setp.lt.u32 	%p5, %r215, -2147483647;
	@%p5 bra 	LBB0_101;
// %bb.100:
	add.f32 	%f110, %f398, 0fBF800000;
	setp.lt.f32 	%p8, %f88, 0fC0000000;
	add.f32 	%f111, %f110, 0fBF800000;
	selp.f32 	%f398, %f111, %f110, %p8;
	bra.uni 	LBB0_103;
LBB0_101:
	add.f32 	%f398, %f398, 0f3F800000;
	setp.ltu.f32 	%p6, %f88, 0f40800000;
	@%p6 bra 	LBB0_103;
// %bb.102:                             // %__nv_fmaf_rn.exit.i.i.i1384
	add.f32 	%f106, %f398, 0f3F800000;
	fma.rn.f32 	%f108, %f104, 0fC0400000, %f88;
	setp.ge.f32 	%p7, %f108, 0f00000000;
	add.f32 	%f109, %f106, 0f3F800000;
	selp.f32 	%f398, %f109, %f106, %p7;
LBB0_103:                               // %__internal_fmodf_fastpath_quot.exit.i.i1388
	fma.rn.f32 	%f400, %f398, 0fC0000000, %f400;
LBB0_108:                               // %__internal_fmodf_kernel.exit.i1413
	abs.f32 	%f123, %f400;
	setp.gtu.f32 	%p14, %f123, 0f7F800000;
	@%p14 bra 	LBB0_110;
// %bb.109:
	mov.b32 	%r295, %f1;
	and.b32  	%r296, %r295, -2147483648;
	mov.b32 	%r297, %f400;
	or.b32  	%r298, %r296, %r297;
	mov.b32 	%f400, %r298;
LBB0_110:                               // %__nv_fmodf.exit1414
	add.f32 	%f125, %f400, %f400;
	mov.b32 	%r305, %f125;
	and.b32  	%r306, %r305, -2147483648;
	or.b32  	%r307, %r306, 1056964608;
	mov.b32 	%f126, %r307;
	add.f32 	%f127, %f125, %f126;
	cvt.rzi.f32.f32 	%f128, %f127;
	abs.f32 	%f129, %f125;
	setp.gt.f32 	%p15, %f129, 0f4B000000;
	selp.f32 	%f130, %f125, %f128, %p15;
	cvt.rzi.f32.f32 	%f131, %f125;
	setp.lt.f32 	%p16, %f129, 0f3F000000;
	selp.f32 	%f132, %f131, %f130, %p16;
	cvt.rzi.s32.f32 	%r308, %f132;
	fma.rn.f32 	%f133, %f132, 0fBF000000, %f400;
	mul.f32 	%f134, %f133, 0f34222169;
	fma.rn.f32 	%f135, %f133, 0f40490FDA, %f134;
	mul.f32 	%f136, %f135, %f135;
	fma.rn.f32 	%f137, %f136, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f138, %f137, %f136, 0f3D2AAABB;
	fma.rn.f32 	%f139, %f138, %f136, 0fBEFFFFFF;
	fma.rn.f32 	%f140, %f139, %f136, 0f3F800000;
	fma.rn.f32 	%f141, %f136, %f135, 0f00000000;
	fma.rn.f32 	%f142, %f136, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f143, %f142, %f136, 0fBE2AAAA8;
	fma.rn.f32 	%f144, %f143, %f141, %f135;
	and.b32  	%r309, %r308, 1;
	setp.eq.b32 	%p17, %r309, 1;
	selp.f32 	%f145, %f140, %f144, %p17;
	selp.f32 	%f146, %f144, %f140, %p17;
	and.b32  	%r310, %r308, 2;
	setp.eq.s32 	%p18, %r310, 0;
	neg.f32 	%f147, %f145;
	selp.f32 	%f148, %f145, %f147, %p18;
	add.s32 	%r311, %r308, 1;
	and.b32  	%r312, %r311, 2;
	mov.f32 	%f396, 0f00000000;
	cvt.rzi.f32.f32 	%f151, %f400;
	setp.eq.f32 	%p20, %f151, %f400;
	mul.f32 	%f152, %f400, 0f00000000;
	shl.b32 	%r225, %r4, 1;
	and.b32  	%r226, %r225, 6;
	or.b32  	%r227, %r226, 1;
	setp.eq.s32 	%p22, %r226, 6;
	mov.f32 	%f372, 0f41C00000;
	mul.lo.s32 	%r3415, %r226, %r6;
	mov.f32 	%f378, %f396;
	mov.f32 	%f379, %f396;
	@%p22 bra 	LBB0_17;
// %bb.2:                               // %L206
	cvt.u16.u32 	%rs3, %r3415;
	and.b16  	%rs4, %rs3, 255;
	mul.lo.s16 	%rs5, %rs4, 171;
	shr.u16 	%rs6, %rs5, 13;
	mul.lo.s16 	%rs7, %rs6, 48;
	sub.s16 	%rs8, %rs3, %rs7;
	and.b16  	%rs9, %rs8, 255;
	cvt.rn.f32.u16 	%f157, %rs9;
	div.approx.f32 	%f3, %f157, %f372;
	abs.f32 	%f376, %f3;
	setp.lt.f32 	%p23, %f376, 0f40000000;
	@%p23 bra 	LBB0_14;
// %bb.3:
	setp.gtu.f32 	%p24, %f376, 0f4B800000;
	@%p24 bra 	LBB0_10;
	bra.uni 	LBB0_4;
LBB0_10:
	mov.b32 	%r8, %f376;
	and.b32  	%r314, %r8, 8388607;
	or.b32  	%r3418, %r314, 1065353216;
	mov.b32 	%f375, %r3418;
	add.s32 	%r315, %r8, -1073741824;
	and.b32  	%r3419, %r315, -8388608;
	setp.eq.s32 	%p30, %r3419, 0;
	@%p30 bra 	LBB0_13;
// %bb.11:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f168, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f167,%f168;
	// end inline asm
LBB0_12:                                // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r316, %r3419, 192937984;
	add.s32 	%r317, %r316, %r3418;
	mov.b32 	%f169, %r317;
	mul.f32 	%f170, %f167, %f169;
	sub.f32 	%f171, %f169, %f170;
	fma.rn.f32 	%f172, %f171, %f167, %f170;
	sub.f32 	%f173, %f169, %f172;
	fma.rz.f32 	%f174, %f173, %f167, %f172;
	cvt.rzi.f32.f32 	%f175, %f174;
	sub.f32 	%f375, %f169, %f175;
	sub.s32 	%r3419, %r3419, %r316;
	mov.b32 	%r3418, %f375;
	setp.ne.s32 	%p31, %r3419, 0;
	setp.ne.s32 	%p32, %r3418, 0;
	and.pred  	%p33, %p31, %p32;
	@%p33 bra 	LBB0_12;
LBB0_13:                                // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p34, %r8, 2139095039;
	selp.f32 	%f176, 0f7FFFFFFF, 0f4B800000, %p34;
	mul.f32 	%f177, %f375, 0f34000000;
	mul.f32 	%f376, %f176, %f177;
	bra.uni 	LBB0_14;
LBB0_4:                                 // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f159, 0f40000000;
	div.approx.f32 	%f160, %f376, %f159;
	cvt.rzi.f32.f32 	%f374, %f160;
	fma.rn.f32 	%f6, %f374, 0fC0000000, %f376;
	mov.b32 	%r7, %f6;
	setp.lt.u32 	%p25, %r7, 1073741824;
	@%p25 bra 	LBB0_9;
// %bb.5:
	setp.lt.u32 	%p26, %r7, -2147483647;
	@%p26 bra 	LBB0_7;
// %bb.6:
	add.f32 	%f165, %f374, 0fBF800000;
	setp.lt.f32 	%p29, %f6, 0fC0000000;
	add.f32 	%f166, %f165, 0fBF800000;
	selp.f32 	%f374, %f166, %f165, %p29;
	bra.uni 	LBB0_9;
LBB0_7:
	add.f32 	%f374, %f374, 0f3F800000;
	setp.ltu.f32 	%p27, %f6, 0f40800000;
	@%p27 bra 	LBB0_9;
// %bb.8:                               // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f161, %f374, 0f3F800000;
	fma.rn.f32 	%f163, %f159, 0fC0400000, %f6;
	setp.ge.f32 	%p28, %f163, 0f00000000;
	add.f32 	%f164, %f161, 0f3F800000;
	selp.f32 	%f374, %f164, %f161, %p28;
LBB0_9:                                 // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f376, %f374, 0fC0000000, %f376;
LBB0_14:                                // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f178, %f376;
	setp.gtu.f32 	%p35, %f178, 0f7F800000;
	@%p35 bra 	LBB0_16;
// %bb.15:
	mov.b32 	%r318, %f3;
	and.b32  	%r319, %r318, -2147483648;
	mov.b32 	%r320, %f376;
	or.b32  	%r321, %r319, %r320;
	mov.b32 	%f376, %r321;
LBB0_16:                                // %__nv_fmodf.exit
	add.f32 	%f179, %f376, %f376;
	mov.b32 	%r322, %f179;
	and.b32  	%r323, %r322, -2147483648;
	or.b32  	%r324, %r323, 1056964608;
	mov.b32 	%f180, %r324;
	add.f32 	%f181, %f179, %f180;
	cvt.rzi.f32.f32 	%f182, %f181;
	abs.f32 	%f183, %f179;
	setp.gt.f32 	%p36, %f183, 0f4B000000;
	selp.f32 	%f184, %f179, %f182, %p36;
	cvt.rzi.f32.f32 	%f185, %f179;
	setp.lt.f32 	%p37, %f183, 0f3F000000;
	selp.f32 	%f186, %f185, %f184, %p37;
	cvt.rzi.s32.f32 	%r325, %f186;
	fma.rn.f32 	%f187, %f186, 0fBF000000, %f376;
	mul.f32 	%f188, %f187, 0f34222169;
	fma.rn.f32 	%f189, %f187, 0f40490FDA, %f188;
	mul.f32 	%f190, %f189, %f189;
	fma.rn.f32 	%f191, %f190, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f192, %f191, %f190, 0f3D2AAABB;
	fma.rn.f32 	%f193, %f192, %f190, 0fBEFFFFFF;
	fma.rn.f32 	%f194, %f193, %f190, 0f3F800000;
	fma.rn.f32 	%f195, %f190, %f189, 0f00000000;
	fma.rn.f32 	%f196, %f190, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f197, %f196, %f190, 0fBE2AAAA8;
	fma.rn.f32 	%f198, %f197, %f195, %f189;
	and.b32  	%r326, %r325, 1;
	setp.eq.b32 	%p38, %r326, 1;
	selp.f32 	%f199, %f194, %f198, %p38;
	selp.f32 	%f200, %f198, %f194, %p38;
	and.b32  	%r327, %r325, 2;
	setp.eq.s32 	%p39, %r327, 0;
	neg.f32 	%f201, %f199;
	selp.f32 	%f202, %f199, %f201, %p39;
	add.s32 	%r328, %r325, 1;
	and.b32  	%r329, %r328, 2;
	setp.eq.s32 	%p40, %r329, 0;
	mov.f32 	%f203, 0f00000000;
	sub.f32 	%f204, %f203, %f200;
	selp.f32 	%f205, %f200, %f204, %p40;
	cvt.rzi.f32.f32 	%f206, %f376;
	setp.eq.f32 	%p41, %f206, %f376;
	mul.f32 	%f207, %f376, 0f00000000;
	selp.f32 	%f379, %f207, %f202, %p41;
	abs.f32 	%f208, %f376;
	setp.gt.f32 	%p42, %f208, 0f4B800000;
	add.f32 	%f209, %f379, 0f3F800000;
	selp.f32 	%f378, %f209, %f205, %p42;
LBB0_17:                                // %L222
	setp.eq.s32 	%p19, %r312, 0;
	sub.f32 	%f149, %f396, %f146;
	selp.f32 	%f153, %f152, %f148, %p20;
	abs.f32 	%f154, %f400;
	setp.gt.u32 	%p43, %r227, 5;
	mul.lo.s32 	%r3416, %r227, %r6;
	mov.f32 	%f384, %f396;
	mov.f32 	%f385, %f396;
	@%p43 bra 	LBB0_33;
// %bb.18:                              // %L226
	mul.hi.u32 	%r331, %r3416, -1431655765;
	shr.u32 	%r332, %r331, 5;
	mul.lo.s32 	%r333, %r332, 48;
	sub.s32 	%r334, %r3416, %r333;
	cvt.rn.f32.s32 	%f211, %r334;
	div.approx.f32 	%f24, %f211, %f372;
	abs.f32 	%f382, %f24;
	setp.lt.f32 	%p44, %f382, 0f40000000;
	@%p44 bra 	LBB0_30;
// %bb.19:
	setp.gtu.f32 	%p45, %f382, 0f4B800000;
	@%p45 bra 	LBB0_26;
	bra.uni 	LBB0_20;
LBB0_26:
	mov.b32 	%r16, %f382;
	and.b32  	%r335, %r16, 8388607;
	or.b32  	%r3420, %r335, 1065353216;
	mov.b32 	%f381, %r3420;
	add.s32 	%r336, %r16, -1073741824;
	and.b32  	%r3421, %r336, -8388608;
	setp.eq.s32 	%p51, %r3421, 0;
	@%p51 bra 	LBB0_29;
// %bb.27:                              // %__nv_fmaf_rn.exit4.i.i.i1269.preheader
	mov.f32 	%f222, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f221,%f222;
	// end inline asm
LBB0_28:                                // %__nv_fmaf_rn.exit4.i.i.i1269
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r337, %r3421, 192937984;
	add.s32 	%r338, %r337, %r3420;
	mov.b32 	%f223, %r338;
	mul.f32 	%f224, %f221, %f223;
	sub.f32 	%f225, %f223, %f224;
	fma.rn.f32 	%f226, %f225, %f221, %f224;
	sub.f32 	%f227, %f223, %f226;
	fma.rz.f32 	%f228, %f227, %f221, %f226;
	cvt.rzi.f32.f32 	%f229, %f228;
	sub.f32 	%f381, %f223, %f229;
	sub.s32 	%r3421, %r3421, %r337;
	mov.b32 	%r3420, %f381;
	setp.ne.s32 	%p52, %r3421, 0;
	setp.ne.s32 	%p53, %r3420, 0;
	and.pred  	%p54, %p52, %p53;
	@%p54 bra 	LBB0_28;
LBB0_29:                                // %__internal_fmodf_slowpath_mod.exit.i.i1271
	setp.gt.u32 	%p55, %r16, 2139095039;
	selp.f32 	%f230, 0f7FFFFFFF, 0f4B800000, %p55;
	mul.f32 	%f231, %f381, 0f34000000;
	mul.f32 	%f382, %f230, %f231;
	bra.uni 	LBB0_30;
LBB0_20:                                // %__nv_fast_fdividef.exit.i.i.i1241
	mov.f32 	%f213, 0f40000000;
	div.approx.f32 	%f214, %f382, %f213;
	cvt.rzi.f32.f32 	%f380, %f214;
	fma.rn.f32 	%f27, %f380, 0fC0000000, %f382;
	mov.b32 	%r15, %f27;
	setp.lt.u32 	%p46, %r15, 1073741824;
	@%p46 bra 	LBB0_25;
// %bb.21:
	setp.lt.u32 	%p47, %r15, -2147483647;
	@%p47 bra 	LBB0_23;
// %bb.22:
	add.f32 	%f219, %f380, 0fBF800000;
	setp.lt.f32 	%p50, %f27, 0fC0000000;
	add.f32 	%f220, %f219, 0fBF800000;
	selp.f32 	%f380, %f220, %f219, %p50;
	bra.uni 	LBB0_25;
LBB0_23:
	add.f32 	%f380, %f380, 0f3F800000;
	setp.ltu.f32 	%p48, %f27, 0f40800000;
	@%p48 bra 	LBB0_25;
// %bb.24:                              // %__nv_fmaf_rn.exit.i.i.i1246
	add.f32 	%f215, %f380, 0f3F800000;
	fma.rn.f32 	%f217, %f213, 0fC0400000, %f27;
	setp.ge.f32 	%p49, %f217, 0f00000000;
	add.f32 	%f218, %f215, 0f3F800000;
	selp.f32 	%f380, %f218, %f215, %p49;
LBB0_25:                                // %__internal_fmodf_fastpath_quot.exit.i.i1250
	fma.rn.f32 	%f382, %f380, 0fC0000000, %f382;
LBB0_30:                                // %__internal_fmodf_kernel.exit.i1275
	abs.f32 	%f232, %f382;
	setp.gtu.f32 	%p56, %f232, 0f7F800000;
	@%p56 bra 	LBB0_32;
// %bb.31:
	mov.b32 	%r339, %f24;
	and.b32  	%r340, %r339, -2147483648;
	mov.b32 	%r341, %f382;
	or.b32  	%r342, %r340, %r341;
	mov.b32 	%f382, %r342;
LBB0_32:                                // %__nv_fmodf.exit1276
	add.f32 	%f233, %f382, %f382;
	mov.b32 	%r343, %f233;
	and.b32  	%r344, %r343, -2147483648;
	or.b32  	%r345, %r344, 1056964608;
	mov.b32 	%f234, %r345;
	add.f32 	%f235, %f233, %f234;
	cvt.rzi.f32.f32 	%f236, %f235;
	abs.f32 	%f237, %f233;
	setp.gt.f32 	%p57, %f237, 0f4B000000;
	selp.f32 	%f238, %f233, %f236, %p57;
	cvt.rzi.f32.f32 	%f239, %f233;
	setp.lt.f32 	%p58, %f237, 0f3F000000;
	selp.f32 	%f240, %f239, %f238, %p58;
	cvt.rzi.s32.f32 	%r346, %f240;
	fma.rn.f32 	%f241, %f240, 0fBF000000, %f382;
	mul.f32 	%f242, %f241, 0f34222169;
	fma.rn.f32 	%f243, %f241, 0f40490FDA, %f242;
	mul.f32 	%f244, %f243, %f243;
	fma.rn.f32 	%f245, %f244, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f246, %f245, %f244, 0f3D2AAABB;
	fma.rn.f32 	%f247, %f246, %f244, 0fBEFFFFFF;
	fma.rn.f32 	%f248, %f247, %f244, 0f3F800000;
	fma.rn.f32 	%f249, %f244, %f243, 0f00000000;
	fma.rn.f32 	%f250, %f244, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f251, %f250, %f244, 0fBE2AAAA8;
	fma.rn.f32 	%f252, %f251, %f249, %f243;
	and.b32  	%r347, %r346, 1;
	setp.eq.b32 	%p59, %r347, 1;
	selp.f32 	%f253, %f248, %f252, %p59;
	selp.f32 	%f254, %f252, %f248, %p59;
	and.b32  	%r348, %r346, 2;
	setp.eq.s32 	%p60, %r348, 0;
	neg.f32 	%f255, %f253;
	selp.f32 	%f256, %f253, %f255, %p60;
	add.s32 	%r349, %r346, 1;
	and.b32  	%r350, %r349, 2;
	setp.eq.s32 	%p61, %r350, 0;
	mov.f32 	%f257, 0f00000000;
	sub.f32 	%f258, %f257, %f254;
	selp.f32 	%f259, %f254, %f258, %p61;
	cvt.rzi.f32.f32 	%f260, %f382;
	setp.eq.f32 	%p62, %f260, %f382;
	mul.f32 	%f261, %f382, 0f00000000;
	selp.f32 	%f385, %f261, %f256, %p62;
	abs.f32 	%f262, %f382;
	setp.gt.f32 	%p63, %f262, 0f4B800000;
	add.f32 	%f263, %f385, 0f3F800000;
	selp.f32 	%f384, %f263, %f259, %p63;
LBB0_33:                                // %L242
	selp.f32 	%f150, %f146, %f149, %p19;
	setp.gt.f32 	%p21, %f154, 0f4B800000;
	add.f32 	%f155, %f153, 0f3F800000;
	setp.gt.u32 	%p65, %r4, 23;
	or.pred  	%p66, %p22, %p65;
	mov.f32 	%f373, 0f40400000;
	mov.f32 	%f390, %f396;
	mov.f32 	%f391, %f396;
	@%p66 bra 	LBB0_49;
// %bb.34:                              // %L279
	cvt.u16.u32 	%rs10, %r3415;
	and.b16  	%rs11, %rs10, 255;
	mul.lo.s16 	%rs12, %rs11, 171;
	shr.u16 	%rs13, %rs12, 10;
	mul.lo.s16 	%rs14, %rs13, 6;
	sub.s16 	%rs15, %rs10, %rs14;
	and.b16  	%rs16, %rs15, 255;
	cvt.rn.f32.u16 	%f265, %rs16;
	div.approx.f32 	%f45, %f265, %f373;
	abs.f32 	%f388, %f45;
	setp.lt.f32 	%p67, %f388, 0f40000000;
	@%p67 bra 	LBB0_46;
// %bb.35:
	setp.gtu.f32 	%p68, %f388, 0f4B800000;
	@%p68 bra 	LBB0_42;
	bra.uni 	LBB0_36;
LBB0_42:
	mov.b32 	%r26, %f388;
	and.b32  	%r358, %r26, 8388607;
	or.b32  	%r3422, %r358, 1065353216;
	mov.b32 	%f387, %r3422;
	add.s32 	%r359, %r26, -1073741824;
	and.b32  	%r3423, %r359, -8388608;
	setp.eq.s32 	%p74, %r3423, 0;
	@%p74 bra 	LBB0_45;
// %bb.43:                              // %__nv_fmaf_rn.exit4.i.i.i1315.preheader
	mov.f32 	%f276, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f275,%f276;
	// end inline asm
LBB0_44:                                // %__nv_fmaf_rn.exit4.i.i.i1315
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r360, %r3423, 192937984;
	add.s32 	%r361, %r360, %r3422;
	mov.b32 	%f277, %r361;
	mul.f32 	%f278, %f275, %f277;
	sub.f32 	%f279, %f277, %f278;
	fma.rn.f32 	%f280, %f279, %f275, %f278;
	sub.f32 	%f281, %f277, %f280;
	fma.rz.f32 	%f282, %f281, %f275, %f280;
	cvt.rzi.f32.f32 	%f283, %f282;
	sub.f32 	%f387, %f277, %f283;
	sub.s32 	%r3423, %r3423, %r360;
	mov.b32 	%r3422, %f387;
	setp.ne.s32 	%p75, %r3423, 0;
	setp.ne.s32 	%p76, %r3422, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	LBB0_44;
LBB0_45:                                // %__internal_fmodf_slowpath_mod.exit.i.i1317
	setp.gt.u32 	%p78, %r26, 2139095039;
	selp.f32 	%f284, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f285, %f387, 0f34000000;
	mul.f32 	%f388, %f284, %f285;
	bra.uni 	LBB0_46;
LBB0_36:                                // %__nv_fast_fdividef.exit.i.i.i1287
	mov.f32 	%f267, 0f40000000;
	div.approx.f32 	%f268, %f388, %f267;
	cvt.rzi.f32.f32 	%f386, %f268;
	fma.rn.f32 	%f48, %f386, 0fC0000000, %f388;
	mov.b32 	%r25, %f48;
	setp.lt.u32 	%p69, %r25, 1073741824;
	@%p69 bra 	LBB0_41;
// %bb.37:
	setp.lt.u32 	%p70, %r25, -2147483647;
	@%p70 bra 	LBB0_39;
// %bb.38:
	add.f32 	%f273, %f386, 0fBF800000;
	setp.lt.f32 	%p73, %f48, 0fC0000000;
	add.f32 	%f274, %f273, 0fBF800000;
	selp.f32 	%f386, %f274, %f273, %p73;
	bra.uni 	LBB0_41;
LBB0_39:
	add.f32 	%f386, %f386, 0f3F800000;
	setp.ltu.f32 	%p71, %f48, 0f40800000;
	@%p71 bra 	LBB0_41;
// %bb.40:                              // %__nv_fmaf_rn.exit.i.i.i1292
	add.f32 	%f269, %f386, 0f3F800000;
	fma.rn.f32 	%f271, %f267, 0fC0400000, %f48;
	setp.ge.f32 	%p72, %f271, 0f00000000;
	add.f32 	%f272, %f269, 0f3F800000;
	selp.f32 	%f386, %f272, %f269, %p72;
LBB0_41:                                // %__internal_fmodf_fastpath_quot.exit.i.i1296
	fma.rn.f32 	%f388, %f386, 0fC0000000, %f388;
LBB0_46:                                // %__internal_fmodf_kernel.exit.i1321
	abs.f32 	%f286, %f388;
	setp.gtu.f32 	%p79, %f286, 0f7F800000;
	@%p79 bra 	LBB0_48;
// %bb.47:
	mov.b32 	%r362, %f45;
	and.b32  	%r363, %r362, -2147483648;
	mov.b32 	%r364, %f388;
	or.b32  	%r365, %r363, %r364;
	mov.b32 	%f388, %r365;
LBB0_48:                                // %__nv_fmodf.exit1322
	add.f32 	%f287, %f388, %f388;
	mov.b32 	%r366, %f287;
	and.b32  	%r367, %r366, -2147483648;
	or.b32  	%r368, %r367, 1056964608;
	mov.b32 	%f288, %r368;
	add.f32 	%f289, %f287, %f288;
	cvt.rzi.f32.f32 	%f290, %f289;
	abs.f32 	%f291, %f287;
	setp.gt.f32 	%p80, %f291, 0f4B000000;
	selp.f32 	%f292, %f287, %f290, %p80;
	cvt.rzi.f32.f32 	%f293, %f287;
	setp.lt.f32 	%p81, %f291, 0f3F000000;
	selp.f32 	%f294, %f293, %f292, %p81;
	cvt.rzi.s32.f32 	%r369, %f294;
	fma.rn.f32 	%f295, %f294, 0fBF000000, %f388;
	mul.f32 	%f296, %f295, 0f34222169;
	fma.rn.f32 	%f297, %f295, 0f40490FDA, %f296;
	mul.f32 	%f298, %f297, %f297;
	fma.rn.f32 	%f299, %f298, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f300, %f299, %f298, 0f3D2AAABB;
	fma.rn.f32 	%f301, %f300, %f298, 0fBEFFFFFF;
	fma.rn.f32 	%f302, %f301, %f298, 0f3F800000;
	fma.rn.f32 	%f303, %f298, %f297, 0f00000000;
	fma.rn.f32 	%f304, %f298, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f305, %f304, %f298, 0fBE2AAAA8;
	fma.rn.f32 	%f306, %f305, %f303, %f297;
	and.b32  	%r370, %r369, 1;
	setp.eq.b32 	%p82, %r370, 1;
	selp.f32 	%f307, %f302, %f306, %p82;
	selp.f32 	%f308, %f306, %f302, %p82;
	and.b32  	%r371, %r369, 2;
	setp.eq.s32 	%p83, %r371, 0;
	neg.f32 	%f309, %f307;
	selp.f32 	%f310, %f307, %f309, %p83;
	add.s32 	%r372, %r369, 1;
	and.b32  	%r373, %r372, 2;
	setp.eq.s32 	%p84, %r373, 0;
	mov.f32 	%f311, 0f00000000;
	sub.f32 	%f312, %f311, %f308;
	selp.f32 	%f313, %f308, %f312, %p84;
	cvt.rzi.f32.f32 	%f314, %f388;
	setp.eq.f32 	%p85, %f314, %f388;
	mul.f32 	%f315, %f388, 0f00000000;
	selp.f32 	%f391, %f315, %f310, %p85;
	abs.f32 	%f316, %f388;
	setp.gt.f32 	%p86, %f316, 0f4B800000;
	add.f32 	%f317, %f391, 0f3F800000;
	selp.f32 	%f390, %f317, %f313, %p86;
LBB0_49:                                // %L295
	selp.f32 	%f156, %f155, %f150, %p21;
	or.pred  	%p89, %p43, %p65;
	mov.f32 	%f397, %f396;
	@%p89 bra 	LBB0_65;
// %bb.50:                              // %L303
	mul.hi.u32 	%r375, %r3416, -1431655765;
	shr.u32 	%r376, %r375, 2;
	mul.lo.s32 	%r377, %r376, 6;
	sub.s32 	%r378, %r3416, %r377;
	cvt.rn.f32.s32 	%f319, %r378;
	div.approx.f32 	%f66, %f319, %f373;
	abs.f32 	%f394, %f66;
	setp.lt.f32 	%p90, %f394, 0f40000000;
	@%p90 bra 	LBB0_62;
// %bb.51:
	setp.gtu.f32 	%p91, %f394, 0f4B800000;
	@%p91 bra 	LBB0_58;
	bra.uni 	LBB0_52;
LBB0_58:
	mov.b32 	%r34, %f394;
	and.b32  	%r379, %r34, 8388607;
	or.b32  	%r3424, %r379, 1065353216;
	mov.b32 	%f393, %r3424;
	add.s32 	%r380, %r34, -1073741824;
	and.b32  	%r3425, %r380, -8388608;
	setp.eq.s32 	%p97, %r3425, 0;
	@%p97 bra 	LBB0_61;
// %bb.59:                              // %__nv_fmaf_rn.exit4.i.i.i1361.preheader
	mov.f32 	%f330, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f329,%f330;
	// end inline asm
LBB0_60:                                // %__nv_fmaf_rn.exit4.i.i.i1361
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r381, %r3425, 192937984;
	add.s32 	%r382, %r381, %r3424;
	mov.b32 	%f331, %r382;
	mul.f32 	%f332, %f329, %f331;
	sub.f32 	%f333, %f331, %f332;
	fma.rn.f32 	%f334, %f333, %f329, %f332;
	sub.f32 	%f335, %f331, %f334;
	fma.rz.f32 	%f336, %f335, %f329, %f334;
	cvt.rzi.f32.f32 	%f337, %f336;
	sub.f32 	%f393, %f331, %f337;
	sub.s32 	%r3425, %r3425, %r381;
	mov.b32 	%r3424, %f393;
	setp.ne.s32 	%p98, %r3425, 0;
	setp.ne.s32 	%p99, %r3424, 0;
	and.pred  	%p100, %p98, %p99;
	@%p100 bra 	LBB0_60;
LBB0_61:                                // %__internal_fmodf_slowpath_mod.exit.i.i1363
	setp.gt.u32 	%p101, %r34, 2139095039;
	selp.f32 	%f338, 0f7FFFFFFF, 0f4B800000, %p101;
	mul.f32 	%f339, %f393, 0f34000000;
	mul.f32 	%f394, %f338, %f339;
	bra.uni 	LBB0_62;
LBB0_52:                                // %__nv_fast_fdividef.exit.i.i.i1333
	mov.f32 	%f321, 0f40000000;
	div.approx.f32 	%f322, %f394, %f321;
	cvt.rzi.f32.f32 	%f392, %f322;
	fma.rn.f32 	%f69, %f392, 0fC0000000, %f394;
	mov.b32 	%r33, %f69;
	setp.lt.u32 	%p92, %r33, 1073741824;
	@%p92 bra 	LBB0_57;
// %bb.53:
	setp.lt.u32 	%p93, %r33, -2147483647;
	@%p93 bra 	LBB0_55;
// %bb.54:
	add.f32 	%f327, %f392, 0fBF800000;
	setp.lt.f32 	%p96, %f69, 0fC0000000;
	add.f32 	%f328, %f327, 0fBF800000;
	selp.f32 	%f392, %f328, %f327, %p96;
	bra.uni 	LBB0_57;
LBB0_55:
	add.f32 	%f392, %f392, 0f3F800000;
	setp.ltu.f32 	%p94, %f69, 0f40800000;
	@%p94 bra 	LBB0_57;
// %bb.56:                              // %__nv_fmaf_rn.exit.i.i.i1338
	add.f32 	%f323, %f392, 0f3F800000;
	fma.rn.f32 	%f325, %f321, 0fC0400000, %f69;
	setp.ge.f32 	%p95, %f325, 0f00000000;
	add.f32 	%f326, %f323, 0f3F800000;
	selp.f32 	%f392, %f326, %f323, %p95;
LBB0_57:                                // %__internal_fmodf_fastpath_quot.exit.i.i1342
	fma.rn.f32 	%f394, %f392, 0fC0000000, %f394;
LBB0_62:                                // %__internal_fmodf_kernel.exit.i1367
	abs.f32 	%f340, %f394;
	setp.gtu.f32 	%p102, %f340, 0f7F800000;
	@%p102 bra 	LBB0_64;
// %bb.63:
	mov.b32 	%r383, %f66;
	and.b32  	%r384, %r383, -2147483648;
	mov.b32 	%r385, %f394;
	or.b32  	%r386, %r384, %r385;
	mov.b32 	%f394, %r386;
LBB0_64:                                // %__nv_fmodf.exit1368
	add.f32 	%f341, %f394, %f394;
	mov.b32 	%r387, %f341;
	and.b32  	%r388, %r387, -2147483648;
	or.b32  	%r389, %r388, 1056964608;
	mov.b32 	%f342, %r389;
	add.f32 	%f343, %f341, %f342;
	cvt.rzi.f32.f32 	%f344, %f343;
	abs.f32 	%f345, %f341;
	setp.gt.f32 	%p103, %f345, 0f4B000000;
	selp.f32 	%f346, %f341, %f344, %p103;
	cvt.rzi.f32.f32 	%f347, %f341;
	setp.lt.f32 	%p104, %f345, 0f3F000000;
	selp.f32 	%f348, %f347, %f346, %p104;
	cvt.rzi.s32.f32 	%r390, %f348;
	fma.rn.f32 	%f349, %f348, 0fBF000000, %f394;
	mul.f32 	%f350, %f349, 0f34222169;
	fma.rn.f32 	%f351, %f349, 0f40490FDA, %f350;
	mul.f32 	%f352, %f351, %f351;
	fma.rn.f32 	%f353, %f352, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f354, %f353, %f352, 0f3D2AAABB;
	fma.rn.f32 	%f355, %f354, %f352, 0fBEFFFFFF;
	fma.rn.f32 	%f356, %f355, %f352, 0f3F800000;
	fma.rn.f32 	%f357, %f352, %f351, 0f00000000;
	fma.rn.f32 	%f358, %f352, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f359, %f358, %f352, 0fBE2AAAA8;
	fma.rn.f32 	%f360, %f359, %f357, %f351;
	and.b32  	%r391, %r390, 1;
	setp.eq.b32 	%p105, %r391, 1;
	selp.f32 	%f361, %f356, %f360, %p105;
	selp.f32 	%f362, %f360, %f356, %p105;
	and.b32  	%r392, %r390, 2;
	setp.eq.s32 	%p106, %r392, 0;
	neg.f32 	%f363, %f361;
	selp.f32 	%f364, %f361, %f363, %p106;
	add.s32 	%r393, %r390, 1;
	and.b32  	%r394, %r393, 2;
	setp.eq.s32 	%p107, %r394, 0;
	mov.f32 	%f365, 0f00000000;
	sub.f32 	%f366, %f365, %f362;
	selp.f32 	%f367, %f362, %f366, %p107;
	cvt.rzi.f32.f32 	%f368, %f394;
	setp.eq.f32 	%p108, %f368, %f394;
	mul.f32 	%f369, %f394, 0f00000000;
	selp.f32 	%f397, %f369, %f364, %p108;
	abs.f32 	%f370, %f394;
	setp.gt.f32 	%p109, %f370, 0f4B800000;
	add.f32 	%f371, %f397, 0f3F800000;
	selp.f32 	%f396, %f371, %f367, %p109;
LBB0_65:                                // %L319
	mov.b32 	%r301, %f156;
	mov.b32 	%r304, %f153;
	mov.b32 	%r396, %f390;
	mov.b32 	%r397, %f396;
	mov.b32 	%r402, %f391;
	mov.b32 	%r403, %f397;
	mov.u32 	%r3426, 999999999;
	cvt.u16.u32 	%rs269, %r4;
	@%p65 bra 	LBB0_67;
// %bb.66:                              // %L355
	ld.param.u64 	%rd1, [_Z15julia_frb_1026813CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1];
	and.b16  	%rs18, %rs269, 255;
	mul.lo.s16 	%rs19, %rs18, 171;
	shr.u16 	%rs20, %rs19, 12;
	mul.lo.s16 	%rs21, %rs20, 24;
	sub.s16 	%rs22, %rs269, %rs21;
	cvt.u32.u16 	%r408, %rs22;
	and.b32  	%r409, %r408, 255;
	mad.lo.s32 	%r410, %r409, 24, %r2;
	cvt.u16.u32 	%rs23, %r410;
	mul.hi.u16 	%rs24, %rs23, -7281;
	shr.u16 	%rs25, %rs24, 9;
	mul.lo.s16 	%rs26, %rs25, 576;
	sub.s16 	%rs27, %rs23, %rs26;
	cvt.u32.u16 	%r411, %rs27;
	mul.wide.u32 	%rd21, %r411, 4;
	add.s64 	%rd22, %rd1, %rd21;
	ld.global.u32 	%r412, [%rd22];
	cvt.s32.s16 	%r413, %r412;
	shr.s32 	%r414, %r412, 16;
	mul.lo.s32 	%r415, %r414, 801;
	mad.lo.s32 	%r3426, %r413, 33, %r415;
LBB0_67:                                // %L433
	xor.b32  	%r300, %r304, -2147483648;
	mov.b32 	%r352, %f378;
	mov.b32 	%r353, %f384;
	mov.b32 	%r355, %f379;
	mov.b32 	%r356, %f385;
	xor.b32  	%r399, %r402, -2147483648;
	xor.b32  	%r400, %r403, -2147483648;
	and.b32  	%r47, %r4, 24;
	setp.ne.s32 	%p111, %r47, 24;
	cvt.u16.u32 	%rs1, %r2;
	cvt.u16.u32 	%rs270, %r6;
	@%p111 bra 	LBB0_69;
// %bb.68:                              // %L433.L740_crit_edge
	and.b16  	%rs40, %rs1, 255;
	mul.lo.s16 	%rs41, %rs40, 171;
	shr.u16 	%rs42, %rs41, 10;
	mul.lo.s16 	%rs43, %rs42, 6;
	sub.s16 	%rs44, %rs1, %rs43;
	cvt.u32.u16 	%r429, %rs44;
	and.b32  	%r3430, %r429, 255;
	cvt.u32.u16 	%r3429, %rs42;
	mul.lo.s16 	%rs46, %rs270, 171;
	shr.u16 	%rs47, %rs46, 10;
	mul.lo.s16 	%rs48, %rs47, 6;
	sub.s16 	%rs49, %rs270, %rs48;
	cvt.u32.u16 	%r430, %rs49;
	and.b32  	%r3428, %r430, 255;
	mul.wide.u16 	%r3427, %rs42, 6;
	mov.u32 	%r3431, 0;
	mov.u32 	%r3432, %r3431;
	bra.uni 	LBB0_70;
LBB0_69:                                // %L459
	ld.param.u64 	%rd2, [_Z15julia_frb_1026813CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2];
	and.b16  	%rs29, %rs1, 255;
	mul.lo.s16 	%rs30, %rs29, 171;
	shr.u16 	%rs31, %rs30, 10;
	cvt.u32.u16 	%r3429, %rs31;
	mul.wide.u16 	%r3427, %rs31, 6;
	mul.lo.s16 	%rs33, %rs270, 171;
	shr.u16 	%rs34, %rs33, 10;
	mul.lo.s16 	%rs35, %rs34, 6;
	sub.s16 	%rs36, %rs270, %rs35;
	cvt.u32.u16 	%r416, %rs36;
	and.b32  	%r3428, %r416, 255;
	and.b16  	%rs37, %rs36, 255;
	mul.wide.u16 	%r417, %rs37, 24;
	mul.lo.s32 	%r418, %r1, 576;
	mul.lo.s16 	%rs38, %rs31, -6;
	add.s16 	%rs39, %rs38, %rs1;
	cvt.u32.u16 	%r419, %rs39;
	and.b32  	%r3430, %r419, 255;
	mad.lo.s32 	%r420, %r5, 144, %r418;
	or.b32  	%r421, %r420, %r3430;
	add.s32 	%r422, %r421, %r3427;
	add.s32 	%r423, %r422, %r417;
	mul.wide.u32 	%rd23, %r423, 4;
	add.s64 	%rd24, %rd2, %rd23;
	ld.global.u32 	%r3431, [%rd24];
	add.s32 	%r424, %r420, 147456;
	or.b32  	%r425, %r424, %r3430;
	add.s32 	%r426, %r425, %r3427;
	add.s32 	%r427, %r426, %r417;
	mul.wide.s32 	%rd25, %r427, 4;
	add.s64 	%rd26, %rd2, %rd25;
	ld.global.u32 	%r3432, [%rd26];
LBB0_70:                                // %L740
	ld.param.u64 	%rd3, [_Z15julia_frb_1026813CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z15julia_frb_1026813CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4];
	// begin inline asm
	cvt.rn.f16x2.f32 %r299, %r301, %r300;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r302, %r304, %r301;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r351, %r353, %r352;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r354, %r356, %r355;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r395, %r397, %r396;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r398, %r400, %r399;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r401, %r403, %r402;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r404, %r397, %r396;
	// end inline asm
	mov.u32 	%r3417, 0;
	shl.b32 	%r432, %r4, 2;
	and.b32  	%r433, %r432, 60;
	shl.b32 	%r434, %r1, 7;
	shl.b32 	%r435, %r4, 11;
	and.b32  	%r436, %r435, 32768;
	or.b32  	%r437, %r433, %r434;
	or.b32  	%r64, %r437, %r436;
	or.b32  	%r438, %r434, %r432;
	or.b32  	%r439, %r438, %r436;
	or.b32  	%r65, %r439, 65;
	add.s32 	%r66, %r2, 24;
	and.b16  	%rs2, %rs269, 16;
	and.b32  	%r440, %r225, 30;
	shr.u32 	%r441, %r4, 4;
	or.b32  	%r442, %r440, %r441;
	mul.lo.s32 	%r67, %r442, 257;
	or.b32  	%r443, %r441, %r225;
	or.b32  	%r444, %r443, 32;
	mul.lo.s32 	%r68, %r444, 257;
	and.b32  	%r445, %r3, 224;
	and.b16  	%rs51, %rs269, 255;
	mul.lo.s16 	%rs52, %rs51, 171;
	shr.u16 	%rs53, %rs52, 12;
	mul.lo.s16 	%rs54, %rs53, 24;
	sub.s16 	%rs55, %rs269, %rs54;
	cvt.u32.u16 	%r446, %rs55;
	and.b32  	%r69, %r446, 255;
	shr.u32 	%r447, %r2, 3;
	mad.lo.s32 	%r70, %r447, 257, %r445;
	shr.u32 	%r448, %r66, 3;
	mad.lo.s32 	%r71, %r448, 257, %r445;
	add.s32 	%r449, %r2, 48;
	shr.u32 	%r450, %r449, 3;
	mad.lo.s32 	%r72, %r450, 257, %r445;
	add.s32 	%r451, %r2, 72;
	shr.u32 	%r452, %r451, 3;
	mad.lo.s32 	%r73, %r452, 257, %r445;
	or.b32  	%r453, %r447, 12;
	mad.lo.s32 	%r74, %r453, 257, %r445;
	add.s32 	%r454, %r2, 120;
	shr.u32 	%r455, %r454, 3;
	mad.lo.s32 	%r75, %r455, 257, %r445;
	add.s32 	%r456, %r2, 144;
	shr.u32 	%r457, %r456, 3;
	mad.lo.s32 	%r76, %r457, 257, %r445;
	add.s32 	%r458, %r2, 168;
	shr.u32 	%r459, %r458, 3;
	mad.lo.s32 	%r77, %r459, 257, %r445;
	or.b32  	%r460, %r447, 24;
	mad.lo.s32 	%r78, %r460, 257, %r445;
	add.s32 	%r461, %r2, 216;
	shr.u32 	%r462, %r461, 3;
	mad.lo.s32 	%r79, %r462, 257, %r445;
	add.s32 	%r463, %r2, 240;
	shr.u32 	%r464, %r463, 3;
	mad.lo.s32 	%r80, %r464, 257, %r445;
	add.s32 	%r465, %r2, 264;
	shr.u32 	%r466, %r465, 3;
	mad.lo.s32 	%r81, %r466, 257, %r445;
	or.b32  	%r467, %r447, 36;
	mad.lo.s32 	%r82, %r467, 257, %r445;
	add.s32 	%r468, %r2, 312;
	shr.u32 	%r469, %r468, 3;
	mad.lo.s32 	%r83, %r469, 257, %r445;
	add.s32 	%r470, %r2, 336;
	shr.u32 	%r471, %r470, 3;
	mad.lo.s32 	%r84, %r471, 257, %r445;
	add.s32 	%r472, %r2, 360;
	shr.u32 	%r473, %r472, 3;
	mad.lo.s32 	%r85, %r473, 257, %r445;
	or.b32  	%r474, %r447, 48;
	mad.lo.s32 	%r86, %r474, 257, %r445;
	add.s32 	%r475, %r2, 408;
	shr.u32 	%r476, %r475, 3;
	mad.lo.s32 	%r87, %r476, 257, %r445;
	add.s32 	%r477, %r2, 432;
	shr.u32 	%r478, %r477, 3;
	mad.lo.s32 	%r88, %r478, 257, %r445;
	add.s32 	%r479, %r2, 456;
	shr.u32 	%r480, %r479, 3;
	mad.lo.s32 	%r89, %r480, 257, %r445;
	or.b32  	%r481, %r447, 60;
	mad.lo.s32 	%r90, %r481, 257, %r445;
	add.s32 	%r482, %r2, 504;
	bfe.u32 	%r483, %r482, 3, 6;
	mad.lo.s32 	%r91, %r483, 257, %r445;
	mul.lo.s32 	%r484, %r5, 4806;
	mad.lo.s32 	%r485, %r3430, 33, %r484;
	mad.lo.s32 	%r486, %r3429, 198, %r485;
	mad.lo.s32 	%r487, %r3428, 801, %r486;
	and.b32  	%r488, %r4, 1;
	mul.lo.s32 	%r489, %r488, 4112;
	bfe.u32 	%r490, %r4, 1, 1;
	mul.lo.s32 	%r491, %r490, 2056;
	and.b32  	%r492, %r6, 1;
	mul.lo.s32 	%r493, %r492, 1028;
	mul.lo.s32 	%r494, %r441, 257;
	bfe.u32 	%r495, %r4, 3, 1;
	mul.lo.s32 	%r496, %r495, 514;
	add.s32 	%r497, %r494, %r489;
	add.s32 	%r498, %r497, %r3430;
	add.s32 	%r499, %r498, %r491;
	add.s32 	%r500, %r499, %r493;
	add.s32 	%r501, %r500, %r496;
	add.s32 	%r92, %r501, %r3427;
	mul.wide.u32 	%rd27, %r92, 4;
	mov.u64 	%rd28, shmem;
	add.s64 	%rd6, %rd28, %rd27;
	add.s32 	%r93, %r92, 8256;
	cvt.u64.u32 	%rd29, %r3427;
	cvt.u64.u32 	%rd30, %r496;
	cvt.u64.u32 	%rd31, %r493;
	cvt.u64.u32 	%rd32, %r491;
	cvt.u64.u32 	%rd33, %r3430;
	cvt.u64.u32 	%rd34, %r494;
	cvt.u64.u32 	%rd35, %r489;
	add.s64 	%rd36, %rd35, %rd34;
	add.s64 	%rd37, %rd36, %rd33;
	add.s64 	%rd38, %rd37, %rd32;
	add.s64 	%rd39, %rd38, %rd31;
	add.s64 	%rd40, %rd39, %rd30;
	add.s64 	%rd41, %rd40, %rd29;
	shl.b64 	%rd42, %rd41, 2;
	add.s64 	%rd7, %rd28, %rd42;
	add.s32 	%r94, %r92, 32;
	add.s32 	%r95, %r92, 8288;
	and.b32  	%r502, %r2, 1;
	mul.lo.s32 	%r503, %r502, 4112;
	bfe.u32 	%r504, %r2, 1, 1;
	bfe.u32 	%r505, %r2, 2, 1;
	shr.u32 	%r506, %r2, 4;
	bfe.u32 	%r507, %r2, 3, 1;
	mad.lo.s32 	%r508, %r506, 257, %r503;
	mad.lo.s32 	%r509, %r5, 6, %r508;
	mad.lo.s32 	%r510, %r504, 2056, %r509;
	mad.lo.s32 	%r511, %r505, 1028, %r510;
	mad.lo.s32 	%r512, %r507, 514, %r511;
	add.s32 	%r96, %r512, %r3428;
	mul.wide.u32 	%rd43, %r96, 4;
	add.s64 	%rd8, %rd28, %rd43;
	add.s32 	%r97, %r96, 8256;
	mul.wide.u32 	%rd44, %r97, 4;
	add.s64 	%rd9, %rd28, %rd44;
	add.s32 	%r98, %r96, 32;
	mul.wide.u32 	%rd45, %r98, 4;
	add.s64 	%rd10, %rd28, %rd45;
	add.s32 	%r99, %r96, 8288;
	mul.wide.u32 	%rd46, %r99, 4;
	add.s64 	%rd11, %rd28, %rd46;
	shl.b16 	%rs57, %rs1, 1;
	and.b16  	%rs58, %rs57, 254;
	mul.lo.s16 	%rs59, %rs58, 171;
	shr.u16 	%rs60, %rs59, 13;
	mul.lo.s16 	%rs61, %rs60, 48;
	sub.s16 	%rs62, %rs57, %rs61;
	cvt.u32.u16 	%r513, %rs62;
	and.b32  	%r514, %r513, 254;
	mul.lo.s32 	%r515, %r1, 59904;
	or.b32  	%r516, %r515, %r69;
	mad.lo.s32 	%r100, %r514, 24, %r516;
	or.b16  	%rs63, %rs57, 1;
	and.b16  	%rs64, %rs63, 255;
	mul.lo.s16 	%rs65, %rs64, 171;
	shr.u16 	%rs66, %rs65, 13;
	mul.lo.s16 	%rs67, %rs66, 48;
	sub.s16 	%rs68, %rs63, %rs67;
	cvt.u32.u16 	%r517, %rs68;
	and.b32  	%r518, %r517, 255;
	mad.lo.s32 	%r101, %r518, 24, %r516;
	mul.wide.u32 	%rd47, %r487, 4;
	add.s64 	%rd12, %rd28, %rd47;
	setp.gt.u32 	%p112, %r2, 7;
	setp.eq.s16 	%p113, %rs2, 0;
	setp.lt.u32 	%p115, %r4, 24;
	mov.u32 	%r3433, %r3417;
	mov.u32 	%r3464, %r3417;
	mov.u32 	%r3465, %r3417;
	mov.u32 	%r3466, %r3417;
	mov.u32 	%r3467, %r3417;
	bra.uni 	LBB0_71;
LBB0_92:                                // %guard_pass14622
                                        //   in Loop: Header=BB0_71 Depth=1
	add.s32 	%r284, %r3433, 48;
	setp.ne.s32 	%p141, %r3433, 2016;
	mov.u32 	%r3433, %r284;
	@%p141 bra 	LBB0_71;
	bra.uni 	LBB0_93;
LBB0_71:                                // %L743
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_73 Depth 2
                                        //     Child Loop BB0_83 Depth 2
	mul.hi.u32 	%r712, %r3433, -1431655765;
	shr.u32 	%r713, %r712, 5;
	mul.lo.s32 	%r107, %r713, 48;
	add.s32 	%r714, %r107, %r2;
	cvt.u16.u32 	%rs69, %r714;
	mul.hi.s16 	%rs70, %rs69, 16257;
	shr.u16 	%rs71, %rs70, 15;
	shr.s16 	%rs72, %rs70, 9;
	add.s16 	%rs73, %rs72, %rs71;
	mul.lo.s16 	%rs74, %rs73, 2064;
	sub.s16 	%rs75, %rs69, %rs74;
	cvt.u32.u16 	%r715, %rs75;
	shl.b32 	%r716, %r715, 16;
	or.b32  	%r717, %r64, %r716;
	mul.wide.s32 	%rd48, %r717, 4;
	add.s64 	%rd49, %rd3, %rd48;
	ld.global.v4.u32 	{%r718, %r719, %r720, %r721}, [%rd49];
	or.b32  	%r722, %r65, %r716;
	add.s32 	%r723, %r722, -1;
	mul.wide.s32 	%rd50, %r723, 4;
	add.s64 	%rd51, %rd3, %rd50;
	ld.global.v4.u32 	{%r724, %r725, %r726, %r727}, [%rd51];
	add.s32 	%r728, %r66, %r107;
	cvt.u16.u32 	%rs76, %r728;
	mul.hi.s16 	%rs77, %rs76, 16257;
	shr.u16 	%rs78, %rs77, 15;
	shr.s16 	%rs79, %rs77, 9;
	add.s16 	%rs80, %rs79, %rs78;
	mul.lo.s16 	%rs81, %rs80, 2064;
	sub.s16 	%rs82, %rs76, %rs81;
	cvt.u32.u16 	%r729, %rs82;
	shl.b32 	%r730, %r729, 16;
	or.b32  	%r731, %r64, %r730;
	mul.wide.s32 	%rd52, %r731, 4;
	add.s64 	%rd53, %rd3, %rd52;
	ld.global.v4.u32 	{%r732, %r733, %r734, %r735}, [%rd53];
	or.b32  	%r736, %r65, %r730;
	add.s32 	%r737, %r736, -1;
	mul.wide.s32 	%rd54, %r737, 4;
	add.s64 	%rd55, %rd3, %rd54;
	ld.global.v4.u32 	{%r738, %r739, %r740, %r741}, [%rd55];
	selp.b32 	%r742, %r720, %r718, %p113;
	shfl.sync.bfly.b32	%r743, %r742, 16, 31, -1;
	selp.b32 	%r521, %r718, %r743, %p113;
	selp.b32 	%r526, %r743, %r720, %p113;
	selp.b32 	%r744, %r721, %r719, %p113;
	shfl.sync.bfly.b32	%r745, %r744, 16, 31, -1;
	selp.b32 	%r529, %r719, %r745, %p113;
	selp.b32 	%r534, %r745, %r721, %p113;
	selp.b32 	%r746, %r726, %r724, %p113;
	shfl.sync.bfly.b32	%r747, %r746, 16, 31, -1;
	selp.b32 	%r537, %r724, %r747, %p113;
	selp.b32 	%r542, %r747, %r726, %p113;
	selp.b32 	%r748, %r727, %r725, %p113;
	shfl.sync.bfly.b32	%r749, %r748, 16, 31, -1;
	selp.b32 	%r545, %r725, %r749, %p113;
	selp.b32 	%r550, %r749, %r727, %p113;
	selp.b32 	%r750, %r734, %r732, %p113;
	shfl.sync.bfly.b32	%r751, %r750, 16, 31, -1;
	selp.b32 	%r553, %r732, %r751, %p113;
	selp.b32 	%r558, %r751, %r734, %p113;
	selp.b32 	%r752, %r735, %r733, %p113;
	shfl.sync.bfly.b32	%r753, %r752, 16, 31, -1;
	selp.b32 	%r561, %r733, %r753, %p113;
	selp.b32 	%r566, %r753, %r735, %p113;
	selp.b32 	%r754, %r740, %r738, %p113;
	shfl.sync.bfly.b32	%r755, %r754, 16, 31, -1;
	selp.b32 	%r569, %r738, %r755, %p113;
	selp.b32 	%r574, %r755, %r740, %p113;
	selp.b32 	%r756, %r741, %r739, %p113;
	shfl.sync.bfly.b32	%r757, %r756, 16, 31, -1;
	selp.b32 	%r577, %r739, %r757, %p113;
	selp.b32 	%r582, %r757, %r741, %p113;
	shl.b32 	%r522, %r526, 4;
	mov.u32 	%r520, 252645135;
	// begin inline asm
	lop3.b32 %r584, %r520, %r521, %r522, 202;
	// end inline asm
	shr.u32 	%r525, %r521, 4;
	// begin inline asm
	lop3.b32 %r600, %r520, %r525, %r526, 202;
	// end inline asm
	shl.b32 	%r530, %r534, 4;
	// begin inline asm
	lop3.b32 %r592, %r520, %r529, %r530, 202;
	// end inline asm
	shr.u32 	%r533, %r529, 4;
	// begin inline asm
	lop3.b32 %r608, %r520, %r533, %r534, 202;
	// end inline asm
	shl.b32 	%r538, %r542, 4;
	// begin inline asm
	lop3.b32 %r616, %r520, %r537, %r538, 202;
	// end inline asm
	shr.u32 	%r541, %r537, 4;
	// begin inline asm
	lop3.b32 %r632, %r520, %r541, %r542, 202;
	// end inline asm
	shl.b32 	%r546, %r550, 4;
	// begin inline asm
	lop3.b32 %r624, %r520, %r545, %r546, 202;
	// end inline asm
	shr.u32 	%r549, %r545, 4;
	// begin inline asm
	lop3.b32 %r640, %r520, %r549, %r550, 202;
	// end inline asm
	shl.b32 	%r554, %r558, 4;
	// begin inline asm
	lop3.b32 %r585, %r520, %r553, %r554, 202;
	// end inline asm
	shr.u32 	%r557, %r553, 4;
	// begin inline asm
	lop3.b32 %r601, %r520, %r557, %r558, 202;
	// end inline asm
	shl.b32 	%r562, %r566, 4;
	// begin inline asm
	lop3.b32 %r593, %r520, %r561, %r562, 202;
	// end inline asm
	shr.u32 	%r565, %r561, 4;
	// begin inline asm
	lop3.b32 %r609, %r520, %r565, %r566, 202;
	// end inline asm
	shl.b32 	%r570, %r574, 4;
	// begin inline asm
	lop3.b32 %r617, %r520, %r569, %r570, 202;
	// end inline asm
	shr.u32 	%r573, %r569, 4;
	// begin inline asm
	lop3.b32 %r633, %r520, %r573, %r574, 202;
	// end inline asm
	shl.b32 	%r578, %r582, 4;
	// begin inline asm
	lop3.b32 %r625, %r520, %r577, %r578, 202;
	// end inline asm
	shr.u32 	%r581, %r577, 4;
	// begin inline asm
	lop3.b32 %r641, %r520, %r581, %r582, 202;
	// end inline asm
	mov.u32 	%r586, 25152;
	// begin inline asm
	prmt.b32 %r648, %r584, %r585, %r586;
	// end inline asm
	mov.u32 	%r590, 29521;
	// begin inline asm
	prmt.b32 %r680, %r584, %r585, %r590;
	// end inline asm
	// begin inline asm
	prmt.b32 %r656, %r592, %r593, %r586;
	// end inline asm
	// begin inline asm
	prmt.b32 %r688, %r592, %r593, %r590;
	// end inline asm
	// begin inline asm
	prmt.b32 %r649, %r600, %r601, %r586;
	// end inline asm
	// begin inline asm
	prmt.b32 %r681, %r600, %r601, %r590;
	// end inline asm
	// begin inline asm
	prmt.b32 %r657, %r608, %r609, %r586;
	// end inline asm
	// begin inline asm
	prmt.b32 %r689, %r608, %r609, %r590;
	// end inline asm
	// begin inline asm
	prmt.b32 %r664, %r616, %r617, %r586;
	// end inline asm
	// begin inline asm
	prmt.b32 %r696, %r616, %r617, %r590;
	// end inline asm
	// begin inline asm
	prmt.b32 %r672, %r624, %r625, %r586;
	// end inline asm
	// begin inline asm
	prmt.b32 %r704, %r624, %r625, %r590;
	// end inline asm
	// begin inline asm
	prmt.b32 %r665, %r632, %r633, %r586;
	// end inline asm
	// begin inline asm
	prmt.b32 %r697, %r632, %r633, %r590;
	// end inline asm
	// begin inline asm
	prmt.b32 %r673, %r640, %r641, %r586;
	// end inline asm
	// begin inline asm
	prmt.b32 %r705, %r640, %r641, %r590;
	// end inline asm
	mov.u32 	%r706, 21520;
	// begin inline asm
	prmt.b32 %r647, %r648, %r649, %r706;
	// end inline asm
	mov.u32 	%r710, 30258;
	// begin inline asm
	prmt.b32 %r651, %r648, %r649, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r655, %r656, %r657, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r659, %r656, %r657, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r663, %r664, %r665, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r667, %r664, %r665, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r671, %r672, %r673, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r675, %r672, %r673, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r679, %r680, %r681, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r683, %r680, %r681, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r687, %r688, %r689, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r691, %r688, %r689, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r695, %r696, %r697, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r699, %r696, %r697, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r703, %r704, %r705, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r707, %r704, %r705, %r710;
	// end inline asm
	mul.hi.s16 	%rs83, %rs69, 10923;
	shr.u16 	%rs84, %rs83, 15;
	shr.s16 	%rs85, %rs83, 2;
	add.s16 	%rs86, %rs85, %rs84;
	mul.lo.s16 	%rs87, %rs86, 24;
	sub.s16 	%rs88, %rs69, %rs87;
	cvt.s32.s16 	%r758, %rs88;
	add.s32 	%r759, %r67, %r758;
	mul.wide.s32 	%rd56, %r759, 4;
	add.s64 	%rd58, %rd28, %rd56;
	st.shared.u32 	[%rd58], %r647;
	st.shared.u32 	[%rd58+512], %r655;
	st.shared.u32 	[%rd58+256], %r651;
	st.shared.u32 	[%rd58+768], %r659;
	add.s32 	%r760, %r68, %r758;
	mul.wide.s32 	%rd59, %r760, 4;
	add.s64 	%rd60, %rd28, %rd59;
	st.shared.u32 	[%rd60], %r663;
	st.shared.u32 	[%rd60+512], %r671;
	st.shared.u32 	[%rd60+256], %r667;
	st.shared.u32 	[%rd60+768], %r675;
	st.shared.u32 	[%rd58+128], %r679;
	st.shared.u32 	[%rd58+640], %r687;
	st.shared.u32 	[%rd58+384], %r683;
	st.shared.u32 	[%rd58+896], %r691;
	st.shared.u32 	[%rd60+128], %r695;
	st.shared.u32 	[%rd60+640], %r703;
	st.shared.u32 	[%rd60+384], %r699;
	st.shared.u32 	[%rd60+896], %r707;
	bar.sync 	0;
	add.s32 	%r761, %r107, %r69;
	cvt.u16.u32 	%rs89, %r761;
	mul.hi.s16 	%rs90, %rs89, 10923;
	shr.u16 	%rs91, %rs90, 15;
	shr.s16 	%rs92, %rs90, 2;
	add.s16 	%rs93, %rs92, %rs91;
	mul.lo.s16 	%rs94, %rs93, 24;
	sub.s16 	%rs95, %rs89, %rs94;
	cvt.s32.s16 	%r762, %rs95;
	add.s32 	%r763, %r70, %r762;
	mul.wide.s32 	%rd61, %r763, 4;
	add.s64 	%rd62, %rd28, %rd61;
	ld.shared.u32 	%r764, [%rd62];
	add.s32 	%r765, %r71, %r762;
	mul.wide.u32 	%rd63, %r765, 4;
	add.s64 	%rd64, %rd28, %rd63;
	ld.shared.u32 	%r766, [%rd64];
	add.s32 	%r767, %r72, %r762;
	mul.wide.u32 	%rd65, %r767, 4;
	add.s64 	%rd66, %rd28, %rd65;
	ld.shared.u32 	%r768, [%rd66];
	add.s32 	%r769, %r73, %r762;
	mul.wide.u32 	%rd67, %r769, 4;
	add.s64 	%rd68, %rd28, %rd67;
	ld.shared.u32 	%r770, [%rd68];
	add.s32 	%r771, %r74, %r762;
	mul.wide.s32 	%rd69, %r771, 4;
	add.s64 	%rd70, %rd28, %rd69;
	ld.shared.u32 	%r772, [%rd70];
	add.s32 	%r773, %r75, %r762;
	mul.wide.u32 	%rd71, %r773, 4;
	add.s64 	%rd72, %rd28, %rd71;
	ld.shared.u32 	%r774, [%rd72];
	add.s32 	%r775, %r76, %r762;
	mul.wide.u32 	%rd73, %r775, 4;
	add.s64 	%rd74, %rd28, %rd73;
	ld.shared.u32 	%r776, [%rd74];
	add.s32 	%r777, %r77, %r762;
	mul.wide.u32 	%rd75, %r777, 4;
	add.s64 	%rd76, %rd28, %rd75;
	ld.shared.u32 	%r778, [%rd76];
	add.s32 	%r779, %r78, %r762;
	mul.wide.s32 	%rd77, %r779, 4;
	add.s64 	%rd78, %rd28, %rd77;
	ld.shared.u32 	%r780, [%rd78];
	add.s32 	%r781, %r79, %r762;
	mul.wide.u32 	%rd79, %r781, 4;
	add.s64 	%rd80, %rd28, %rd79;
	ld.shared.u32 	%r782, [%rd80];
	add.s32 	%r783, %r80, %r762;
	mul.wide.u32 	%rd81, %r783, 4;
	add.s64 	%rd82, %rd28, %rd81;
	ld.shared.u32 	%r784, [%rd82];
	add.s32 	%r785, %r81, %r762;
	mul.wide.u32 	%rd83, %r785, 4;
	add.s64 	%rd84, %rd28, %rd83;
	ld.shared.u32 	%r786, [%rd84];
	add.s32 	%r787, %r82, %r762;
	mul.wide.s32 	%rd85, %r787, 4;
	add.s64 	%rd86, %rd28, %rd85;
	ld.shared.u32 	%r788, [%rd86];
	add.s32 	%r789, %r83, %r762;
	mul.wide.u32 	%rd87, %r789, 4;
	add.s64 	%rd88, %rd28, %rd87;
	ld.shared.u32 	%r790, [%rd88];
	add.s32 	%r791, %r84, %r762;
	mul.wide.u32 	%rd89, %r791, 4;
	add.s64 	%rd90, %rd28, %rd89;
	ld.shared.u32 	%r792, [%rd90];
	add.s32 	%r793, %r85, %r762;
	mul.wide.u32 	%rd91, %r793, 4;
	add.s64 	%rd92, %rd28, %rd91;
	ld.shared.u32 	%r794, [%rd92];
	add.s32 	%r795, %r86, %r762;
	mul.wide.s32 	%rd93, %r795, 4;
	add.s64 	%rd94, %rd28, %rd93;
	ld.shared.u32 	%r796, [%rd94];
	add.s32 	%r797, %r87, %r762;
	mul.wide.u32 	%rd95, %r797, 4;
	add.s64 	%rd96, %rd28, %rd95;
	ld.shared.u32 	%r798, [%rd96];
	add.s32 	%r799, %r88, %r762;
	mul.wide.u32 	%rd97, %r799, 4;
	add.s64 	%rd98, %rd28, %rd97;
	ld.shared.u32 	%r800, [%rd98];
	add.s32 	%r801, %r89, %r762;
	mul.wide.u32 	%rd99, %r801, 4;
	add.s64 	%rd100, %rd28, %rd99;
	ld.shared.u32 	%r802, [%rd100];
	add.s32 	%r803, %r90, %r762;
	mul.wide.s32 	%rd101, %r803, 4;
	add.s64 	%rd102, %rd28, %rd101;
	ld.shared.u32 	%r804, [%rd102];
	add.s32 	%r805, %r91, %r762;
	mul.wide.s32 	%rd103, %r805, 4;
	add.s64 	%rd104, %rd28, %rd103;
	ld.shared.u32 	%r806, [%rd104];
	bar.sync 	0;
	shfl.sync.idx.b32	%r807, %r3426, 0, 31, -1;
	shfl.sync.idx.b32	%r808, %r3426, 1, 31, -1;
	shfl.sync.idx.b32	%r809, %r3426, 2, 31, -1;
	shfl.sync.idx.b32	%r810, %r3426, 3, 31, -1;
	shfl.sync.idx.b32	%r811, %r3426, 4, 31, -1;
	shfl.sync.idx.b32	%r812, %r3426, 5, 31, -1;
	shfl.sync.idx.b32	%r813, %r3426, 6, 31, -1;
	shfl.sync.idx.b32	%r814, %r3426, 7, 31, -1;
	shfl.sync.idx.b32	%r815, %r3426, 8, 31, -1;
	shfl.sync.idx.b32	%r816, %r3426, 9, 31, -1;
	shfl.sync.idx.b32	%r817, %r3426, 10, 31, -1;
	shfl.sync.idx.b32	%r818, %r3426, 11, 31, -1;
	shfl.sync.idx.b32	%r819, %r3426, 12, 31, -1;
	shfl.sync.idx.b32	%r820, %r3426, 13, 31, -1;
	shfl.sync.idx.b32	%r821, %r3426, 14, 31, -1;
	shfl.sync.idx.b32	%r822, %r3426, 15, 31, -1;
	shfl.sync.idx.b32	%r823, %r3426, 16, 31, -1;
	shfl.sync.idx.b32	%r824, %r3426, 17, 31, -1;
	shfl.sync.idx.b32	%r825, %r3426, 18, 31, -1;
	shfl.sync.idx.b32	%r826, %r3426, 19, 31, -1;
	shfl.sync.idx.b32	%r827, %r3426, 20, 31, -1;
	shfl.sync.idx.b32	%r828, %r3426, 21, 31, -1;
	shfl.sync.idx.b32	%r829, %r3426, 22, 31, -1;
	shfl.sync.idx.b32	%r830, %r3426, 23, 31, -1;
	add.s32 	%r831, %r807, %r762;
	mul.wide.s32 	%rd105, %r831, 4;
	add.s64 	%rd106, %rd28, %rd105;
	st.shared.u32 	[%rd106], %r764;
	add.s32 	%r832, %r808, %r762;
	mul.wide.s32 	%rd107, %r832, 4;
	add.s64 	%rd108, %rd28, %rd107;
	st.shared.u32 	[%rd108], %r766;
	add.s32 	%r833, %r809, %r762;
	mul.wide.s32 	%rd109, %r833, 4;
	add.s64 	%rd110, %rd28, %rd109;
	st.shared.u32 	[%rd110], %r768;
	add.s32 	%r834, %r810, %r762;
	mul.wide.s32 	%rd111, %r834, 4;
	add.s64 	%rd112, %rd28, %rd111;
	st.shared.u32 	[%rd112], %r770;
	add.s32 	%r835, %r811, %r762;
	mul.wide.s32 	%rd113, %r835, 4;
	add.s64 	%rd114, %rd28, %rd113;
	st.shared.u32 	[%rd114], %r772;
	add.s32 	%r836, %r812, %r762;
	mul.wide.s32 	%rd115, %r836, 4;
	add.s64 	%rd116, %rd28, %rd115;
	st.shared.u32 	[%rd116], %r774;
	add.s32 	%r837, %r813, %r762;
	mul.wide.s32 	%rd117, %r837, 4;
	add.s64 	%rd118, %rd28, %rd117;
	st.shared.u32 	[%rd118], %r776;
	add.s32 	%r838, %r814, %r762;
	mul.wide.s32 	%rd119, %r838, 4;
	add.s64 	%rd120, %rd28, %rd119;
	st.shared.u32 	[%rd120], %r778;
	add.s32 	%r839, %r815, %r762;
	mul.wide.s32 	%rd121, %r839, 4;
	add.s64 	%rd122, %rd28, %rd121;
	st.shared.u32 	[%rd122], %r780;
	add.s32 	%r840, %r816, %r762;
	mul.wide.s32 	%rd123, %r840, 4;
	add.s64 	%rd124, %rd28, %rd123;
	st.shared.u32 	[%rd124], %r782;
	add.s32 	%r841, %r817, %r762;
	mul.wide.s32 	%rd125, %r841, 4;
	add.s64 	%rd126, %rd28, %rd125;
	st.shared.u32 	[%rd126], %r784;
	add.s32 	%r842, %r818, %r762;
	mul.wide.s32 	%rd127, %r842, 4;
	add.s64 	%rd128, %rd28, %rd127;
	st.shared.u32 	[%rd128], %r786;
	add.s32 	%r843, %r819, %r762;
	mul.wide.s32 	%rd129, %r843, 4;
	add.s64 	%rd130, %rd28, %rd129;
	st.shared.u32 	[%rd130], %r788;
	add.s32 	%r844, %r820, %r762;
	mul.wide.s32 	%rd131, %r844, 4;
	add.s64 	%rd132, %rd28, %rd131;
	st.shared.u32 	[%rd132], %r790;
	add.s32 	%r845, %r821, %r762;
	mul.wide.s32 	%rd133, %r845, 4;
	add.s64 	%rd134, %rd28, %rd133;
	st.shared.u32 	[%rd134], %r792;
	add.s32 	%r846, %r822, %r762;
	mul.wide.s32 	%rd135, %r846, 4;
	add.s64 	%rd136, %rd28, %rd135;
	st.shared.u32 	[%rd136], %r794;
	add.s32 	%r847, %r823, %r762;
	mul.wide.s32 	%rd137, %r847, 4;
	add.s64 	%rd138, %rd28, %rd137;
	st.shared.u32 	[%rd138], %r796;
	add.s32 	%r848, %r824, %r762;
	mul.wide.s32 	%rd139, %r848, 4;
	add.s64 	%rd140, %rd28, %rd139;
	st.shared.u32 	[%rd140], %r798;
	add.s32 	%r849, %r825, %r762;
	mul.wide.s32 	%rd141, %r849, 4;
	add.s64 	%rd142, %rd28, %rd141;
	st.shared.u32 	[%rd142], %r800;
	add.s32 	%r850, %r826, %r762;
	mul.wide.s32 	%rd143, %r850, 4;
	add.s64 	%rd144, %rd28, %rd143;
	st.shared.u32 	[%rd144], %r802;
	add.s32 	%r851, %r827, %r762;
	mul.wide.s32 	%rd145, %r851, 4;
	add.s64 	%rd146, %rd28, %rd145;
	st.shared.u32 	[%rd146], %r804;
	selp.b32 	%r852, 0, %r806, %p112;
	add.s32 	%r853, %r828, %r762;
	mul.wide.s32 	%rd147, %r853, 4;
	add.s64 	%rd148, %rd28, %rd147;
	st.shared.u32 	[%rd148], %r852;
	add.s32 	%r854, %r829, %r762;
	mul.wide.s32 	%rd149, %r854, 4;
	add.s64 	%rd150, %rd28, %rd149;
	st.shared.u32 	[%rd150], %r3417;
	add.s32 	%r855, %r830, %r762;
	mul.wide.s32 	%rd151, %r855, 4;
	add.s64 	%rd152, %rd28, %rd151;
	st.shared.u32 	[%rd152], %r3417;
	bar.sync 	0;
	mov.u32 	%r3438, %r3417;
	mov.u32 	%r3439, %r3417;
	mov.u32 	%r3440, %r3417;
	mov.u32 	%r3441, %r3417;
	mov.u32 	%r3442, %r3417;
	mov.u32 	%r3443, %r3417;
	mov.u32 	%r3444, %r3417;
	mov.u32 	%r3445, %r3417;
	mov.u32 	%r3446, %r3417;
	mov.u32 	%r3447, %r3417;
	mov.u32 	%r3448, %r3417;
	mov.u32 	%r3449, %r3417;
	mov.u32 	%r3450, %r3417;
	mov.u32 	%r3451, %r3417;
	mov.u32 	%r3452, %r3417;
	mov.u32 	%r3453, %r3417;
	mov.u32 	%r3454, %r3417;
	mov.u32 	%r3455, %r3417;
	mov.u32 	%r3456, %r3417;
	mov.u32 	%r3457, %r3417;
	mov.u32 	%r3458, %r3417;
	mov.u32 	%r3459, %r3417;
	mov.u32 	%r3460, %r3417;
	mov.u32 	%r3461, %r3417;
	@%p111 bra 	LBB0_111;
	bra.uni 	LBB0_72;
LBB0_111:                               // %oksrem3319
                                        //   in Loop: Header=BB0_71 Depth=1
	cvt.u16.u32 	%rs96, %r107;
	mul.hi.s16 	%rs97, %rs96, 10923;
	shr.u16 	%rs98, %rs97, 15;
	shr.s16 	%rs99, %rs97, 2;
	add.s16 	%rs100, %rs99, %rs98;
	mul.lo.s16 	%rs101, %rs100, 24;
	sub.s16 	%rs102, %rs96, %rs101;
	cvt.s32.s16 	%r856, %rs102;
	mul.wide.s32 	%rd153, %r856, 4;
	add.s64 	%rd154, %rd12, %rd153;
	ld.shared.u32 	%r3438, [%rd154];
	ld.shared.u32 	%r3439, [%rd12+4];
	ld.shared.u32 	%r3440, [%rd12+8];
	ld.shared.u32 	%r3441, [%rd12+12];
	ld.shared.u32 	%r3442, [%rd12+16];
	ld.shared.u32 	%r3443, [%rd12+20];
	ld.shared.u32 	%r3444, [%rd12+24];
	ld.shared.u32 	%r3445, [%rd12+28];
	ld.shared.u32 	%r3446, [%rd12+32];
	ld.shared.u32 	%r3447, [%rd12+36];
	ld.shared.u32 	%r3448, [%rd12+40];
	ld.shared.u32 	%r3449, [%rd12+44];
	ld.shared.u32 	%r3450, [%rd12+48];
	ld.shared.u32 	%r3451, [%rd12+52];
	ld.shared.u32 	%r3452, [%rd12+56];
	ld.shared.u32 	%r3453, [%rd12+60];
	add.s16 	%rs103, %rs96, 16;
	mul.hi.s16 	%rs104, %rs103, 10923;
	shr.u16 	%rs105, %rs104, 15;
	shr.s16 	%rs106, %rs104, 2;
	add.s16 	%rs107, %rs106, %rs105;
	mul.lo.s16 	%rs108, %rs107, 24;
	sub.s16 	%rs109, %rs103, %rs108;
	cvt.s32.s16 	%r857, %rs109;
	mul.wide.s32 	%rd155, %r857, 4;
	add.s64 	%rd156, %rd12, %rd155;
	ld.shared.u32 	%r3454, [%rd156];
	add.s16 	%rs110, %rs96, 17;
	mul.hi.s16 	%rs111, %rs110, 10923;
	shr.u16 	%rs112, %rs111, 15;
	shr.s16 	%rs113, %rs111, 2;
	add.s16 	%rs114, %rs113, %rs112;
	mul.lo.s16 	%rs115, %rs114, 24;
	sub.s16 	%rs116, %rs110, %rs115;
	cvt.s32.s16 	%r858, %rs116;
	mul.wide.s32 	%rd157, %r858, 4;
	add.s64 	%rd158, %rd12, %rd157;
	ld.shared.u32 	%r3455, [%rd158];
	add.s16 	%rs117, %rs96, 18;
	mul.hi.s16 	%rs118, %rs117, 10923;
	shr.u16 	%rs119, %rs118, 15;
	shr.s16 	%rs120, %rs118, 2;
	add.s16 	%rs121, %rs120, %rs119;
	mul.lo.s16 	%rs122, %rs121, 24;
	sub.s16 	%rs123, %rs117, %rs122;
	cvt.s32.s16 	%r859, %rs123;
	mul.wide.s32 	%rd159, %r859, 4;
	add.s64 	%rd160, %rd12, %rd159;
	ld.shared.u32 	%r3456, [%rd160];
	add.s16 	%rs124, %rs96, 19;
	mul.hi.s16 	%rs125, %rs124, 10923;
	shr.u16 	%rs126, %rs125, 15;
	shr.s16 	%rs127, %rs125, 2;
	add.s16 	%rs128, %rs127, %rs126;
	mul.lo.s16 	%rs129, %rs128, 24;
	sub.s16 	%rs130, %rs124, %rs129;
	cvt.s32.s16 	%r860, %rs130;
	mul.wide.s32 	%rd161, %r860, 4;
	add.s64 	%rd162, %rd12, %rd161;
	ld.shared.u32 	%r3457, [%rd162];
	add.s16 	%rs131, %rs96, 20;
	mul.hi.s16 	%rs132, %rs131, 10923;
	shr.u16 	%rs133, %rs132, 15;
	shr.s16 	%rs134, %rs132, 2;
	add.s16 	%rs135, %rs134, %rs133;
	mul.lo.s16 	%rs136, %rs135, 24;
	sub.s16 	%rs137, %rs131, %rs136;
	cvt.s32.s16 	%r861, %rs137;
	mul.wide.s32 	%rd163, %r861, 4;
	add.s64 	%rd164, %rd12, %rd163;
	ld.shared.u32 	%r3458, [%rd164];
	add.s16 	%rs138, %rs96, 21;
	mul.hi.s16 	%rs139, %rs138, 10923;
	shr.u16 	%rs140, %rs139, 15;
	shr.s16 	%rs141, %rs139, 2;
	add.s16 	%rs142, %rs141, %rs140;
	mul.lo.s16 	%rs143, %rs142, 24;
	sub.s16 	%rs144, %rs138, %rs143;
	cvt.s32.s16 	%r862, %rs144;
	mul.wide.s32 	%rd165, %r862, 4;
	add.s64 	%rd166, %rd12, %rd165;
	ld.shared.u32 	%r3459, [%rd166];
	add.s16 	%rs145, %rs96, 22;
	mul.hi.s16 	%rs146, %rs145, 10923;
	shr.u16 	%rs147, %rs146, 15;
	shr.s16 	%rs148, %rs146, 2;
	add.s16 	%rs149, %rs148, %rs147;
	mul.lo.s16 	%rs150, %rs149, 24;
	sub.s16 	%rs151, %rs145, %rs150;
	cvt.s32.s16 	%r863, %rs151;
	mul.wide.s32 	%rd167, %r863, 4;
	add.s64 	%rd168, %rd12, %rd167;
	ld.shared.u32 	%r3460, [%rd168];
	add.s16 	%rs152, %rs96, 23;
	mul.hi.s16 	%rs153, %rs152, 10923;
	shr.u16 	%rs154, %rs153, 15;
	shr.s16 	%rs155, %rs153, 2;
	add.s16 	%rs156, %rs155, %rs154;
	mul.lo.s16 	%rs157, %rs156, 24;
	sub.s16 	%rs158, %rs152, %rs157;
	cvt.s32.s16 	%r864, %rs158;
	mul.wide.s32 	%rd169, %r864, 4;
	add.s64 	%rd170, %rd12, %rd169;
	ld.shared.u32 	%r3461, [%rd170];
LBB0_72:                                // %L11396
                                        //   in Loop: Header=BB0_71 Depth=1
	bar.sync 	0;
	mov.u32 	%r3462, 12;
	mov.u32 	%r3463, %r3417;
	bra.uni 	LBB0_73;
LBB0_80:                                // %L21413
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r3465, %r3465, 1;
	mov.u32 	%r3464, 0;
	mov.u32 	%r3466, %r3464;
	mov.u32 	%r3467, %r3464;
LBB0_81:                                // %L21414
                                        //   in Loop: Header=BB0_73 Depth=2
	bar.sync 	0;
	add.s32 	%r3463, %r3463, 1;
	add.s32 	%r3462, %r3462, -4;
	setp.ne.s32 	%p127, %r3462, -12;
	@%p127 bra 	LBB0_73;
	bra.uni 	LBB0_82;
LBB0_73:                                // %L11422
                                        //   Parent Loop BB0_71 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p116, %r3462, 12;
	selp.b32 	%r1404, %r3438, 0, %p116;
	setp.eq.s32 	%p117, %r3462, 8;
	selp.b32 	%r1405, %r3442, %r1404, %p117;
	setp.eq.s32 	%p118, %r3462, 4;
	selp.b32 	%r1406, %r3446, %r1405, %p118;
	setp.eq.s32 	%p119, %r3462, 0;
	selp.b32 	%r1407, %r3450, %r1406, %p119;
	setp.eq.s32 	%p120, %r3462, -4;
	selp.b32 	%r1408, %r3454, %r1407, %p120;
	setp.eq.s32 	%p121, %r3462, -8;
	selp.b32 	%r1409, %r3458, %r1408, %p121;
	selp.b32 	%r1410, %r3439, 0, %p116;
	selp.b32 	%r1411, %r3443, %r1410, %p117;
	selp.b32 	%r1412, %r3447, %r1411, %p118;
	selp.b32 	%r1413, %r3451, %r1412, %p119;
	selp.b32 	%r1414, %r3455, %r1413, %p120;
	selp.b32 	%r1415, %r3459, %r1414, %p121;
	selp.b32 	%r1416, %r3440, 0, %p116;
	selp.b32 	%r1417, %r3444, %r1416, %p117;
	selp.b32 	%r1418, %r3448, %r1417, %p118;
	selp.b32 	%r1419, %r3452, %r1418, %p119;
	selp.b32 	%r1420, %r3456, %r1419, %p120;
	selp.b32 	%r1421, %r3460, %r1420, %p121;
	selp.b32 	%r1422, %r3441, 0, %p116;
	selp.b32 	%r1423, %r3445, %r1422, %p117;
	selp.b32 	%r1424, %r3449, %r1423, %p118;
	selp.b32 	%r1425, %r3453, %r1424, %p119;
	selp.b32 	%r1426, %r3457, %r1425, %p120;
	selp.b32 	%r1427, %r3461, %r1426, %p121;
	mov.u16 	%rs196, 25600;
	// begin inline asm
	mov.b32 %r872, {%rs196, %rs196};
	// end inline asm
	mov.u16 	%rs198, 21504;
	// begin inline asm
	mov.b32 %r883, {%rs198, %rs198};
	// end inline asm
	xor.b32  	%r871, %r1409, -2004318072;
	mov.u32 	%r1008, 983055;
	// begin inline asm
	lop3.b32 %r869, %r1008, %r871, %r872, 202;
	// end inline asm
	mov.u16 	%rs202, 18432;
	// begin inline asm
	mov.b32 %r873, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r874, %r872, %r873;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r877, %r869, %r874;
	// end inline asm
	mov.u32 	%r1019, 15728880;
	// begin inline asm
	lop3.b32 %r880, %r1019, %r871, %r883, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r884, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r885, %r883, %r884;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r888, %r880, %r885;
	// end inline asm
	// begin inline asm
	mov.b32 %r918, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r929, {%rs198, %rs198};
	// end inline asm
	xor.b32  	%r917, %r1415, -2004318072;
	// begin inline asm
	lop3.b32 %r915, %r1008, %r917, %r918, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r919, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r920, %r918, %r919;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r923, %r915, %r920;
	// end inline asm
	// begin inline asm
	lop3.b32 %r926, %r1019, %r917, %r929, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r930, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r931, %r929, %r930;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r934, %r926, %r931;
	// end inline asm
	// begin inline asm
	mov.b32 %r964, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r975, {%rs198, %rs198};
	// end inline asm
	xor.b32  	%r963, %r1421, -2004318072;
	// begin inline asm
	lop3.b32 %r961, %r1008, %r963, %r964, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r965, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r966, %r964, %r965;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r969, %r961, %r966;
	// end inline asm
	// begin inline asm
	lop3.b32 %r972, %r1019, %r963, %r975, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r976, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r977, %r975, %r976;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r980, %r972, %r977;
	// end inline asm
	// begin inline asm
	mov.b32 %r1010, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r1021, {%rs198, %rs198};
	// end inline asm
	xor.b32  	%r1009, %r1427, -2004318072;
	// begin inline asm
	lop3.b32 %r1007, %r1008, %r1009, %r1010, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1011, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1012, %r1010, %r1011;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1015, %r1007, %r1012;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1018, %r1019, %r1009, %r1021, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1022, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1023, %r1021, %r1022;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1026, %r1018, %r1023;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3431;
    mov.b32 {%r2re, %r2im}, %r877;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1051, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3432;
    mov.b32 {%r2re, %r2im}, %r888;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1054, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3431;
    mov.b32 {%r2re, %r2im}, %r923;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1057, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3432;
    mov.b32 {%r2re, %r2im}, %r934;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1060, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3431;
    mov.b32 {%r2re, %r2im}, %r969;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1063, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3432;
    mov.b32 {%r2re, %r2im}, %r980;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1066, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3431;
    mov.b32 {%r2re, %r2im}, %r1015;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1069, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3432;
    mov.b32 {%r2re, %r2im}, %r1026;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1072, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1138, %r1135}, {%r299, %r302}, {%r1051}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1147, %r1144}, {%r299, %r302}, {%r1054}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1156, %r1153}, {%r299, %r302}, {%r1057}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1165, %r1162}, {%r299, %r302}, {%r1060}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1174, %r1171}, {%r299, %r302}, {%r1063}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1183, %r1180}, {%r299, %r302}, {%r1066}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1192, %r1189}, {%r299, %r302}, {%r1069}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1201, %r1198}, {%r299, %r302}, {%r1072}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1131, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1133, %r1131, %r1135;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1136, %r351, %r1138, %r1133;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1140, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1142, %r1140, %r1144;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1145, %r351, %r1147, %r1142;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1149, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1151, %r1149, %r1153;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1154, %r351, %r1156, %r1151;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1158, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1160, %r1158, %r1162;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1163, %r351, %r1165, %r1160;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1167, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1169, %r1167, %r1171;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1172, %r351, %r1174, %r1169;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1176, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1178, %r1176, %r1180;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1181, %r351, %r1183, %r1178;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1185, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1187, %r1185, %r1189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1190, %r351, %r1192, %r1187;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1194, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1196, %r1194, %r1198;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1199, %r351, %r1201, %r1196;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1203, %r354, %r1138;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1206, %r351, %r1135, %r1203;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1210, %r354, %r1147;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1213, %r351, %r1144, %r1210;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1217, %r354, %r1156;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1220, %r351, %r1153, %r1217;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1224, %r354, %r1165;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1227, %r351, %r1162, %r1224;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1231, %r354, %r1174;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1234, %r351, %r1171, %r1231;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1238, %r354, %r1183;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1241, %r351, %r1180, %r1238;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1245, %r354, %r1192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1248, %r351, %r1189, %r1245;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1252, %r354, %r1201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1255, %r351, %r1198, %r1252;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1340, %r1341}, {%r395, %r401, %r398, %r404}, {%r1136, %r1206}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1348, %r1349}, {%r395, %r401, %r398, %r404}, {%r1145, %r1213}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1356, %r1357}, {%r395, %r401, %r398, %r404}, {%r1154, %r1220}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1364, %r1365}, {%r395, %r401, %r398, %r404}, {%r1163, %r1227}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1372, %r1373}, {%r395, %r401, %r398, %r404}, {%r1172, %r1234}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1380, %r1381}, {%r395, %r401, %r398, %r404}, {%r1181, %r1241}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1388, %r1389}, {%r395, %r401, %r398, %r404}, {%r1190, %r1248}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1396, %r1397}, {%r395, %r401, %r398, %r404}, {%r1199, %r1255}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	prmt.b32 %r1339, %r1340, %r1341, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1343, %r1340, %r1341, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1347, %r1348, %r1349, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1351, %r1348, %r1349, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1355, %r1356, %r1357, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1359, %r1356, %r1357, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1363, %r1364, %r1365, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1367, %r1364, %r1365, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1371, %r1372, %r1373, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1375, %r1372, %r1373, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1379, %r1380, %r1381, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1383, %r1380, %r1381, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1387, %r1388, %r1389, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1391, %r1388, %r1389, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1395, %r1396, %r1397, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1399, %r1396, %r1397, %r710;
	// end inline asm
	st.shared.u32 	[%rd6], %r1339;
	st.shared.u32 	[%rd7+33024], %r1343;
	st.shared.u32 	[%rd7+128], %r1347;
	st.shared.u32 	[%rd7+33152], %r1351;
	cvt.u16.u32 	%rs207, %r3463;
	and.b16  	%rs208, %rs207, 255;
	mul.lo.s16 	%rs209, %rs208, 171;
	shr.u16 	%rs210, %rs209, 10;
	mul.lo.s16 	%rs211, %rs210, 6;
	sub.s16 	%rs212, %rs207, %rs211;
	shl.b16 	%rs213, %rs212, 2;
	cvt.u32.u16 	%r1428, %rs213;
	and.b32  	%r1429, %r1428, 252;
	add.s32 	%r1430, %r107, %r1429;
	add.s32 	%r1431, %r1430, 1;
	shr.s32 	%r1432, %r1431, 31;
	shr.u32 	%r1433, %r1432, 30;
	add.s32 	%r1434, %r1431, %r1433;
	and.b32  	%r1435, %r1434, 67108860;
	sub.s32 	%r1436, %r1431, %r1435;
	shl.b32 	%r138, %r1436, 6;
	add.s32 	%r1437, %r92, %r138;
	mul.wide.s32 	%rd171, %r1437, 4;
	add.s64 	%rd173, %rd28, %rd171;
	st.shared.u32 	[%rd173], %r1355;
	add.s32 	%r1438, %r93, %r138;
	mul.wide.u32 	%rd174, %r1438, 4;
	add.s64 	%rd175, %rd28, %rd174;
	st.shared.u32 	[%rd175], %r1359;
	add.s32 	%r1439, %r94, %r138;
	mul.wide.s32 	%rd176, %r1439, 4;
	add.s64 	%rd177, %rd28, %rd176;
	st.shared.u32 	[%rd177], %r1363;
	add.s32 	%r1440, %r95, %r138;
	mul.wide.u32 	%rd178, %r1440, 4;
	add.s64 	%rd179, %rd28, %rd178;
	st.shared.u32 	[%rd179], %r1367;
	add.s32 	%r1441, %r1430, 2;
	shr.s32 	%r1442, %r1441, 31;
	shr.u32 	%r1443, %r1442, 30;
	add.s32 	%r1444, %r1441, %r1443;
	and.b32  	%r1445, %r1444, 67108860;
	sub.s32 	%r1446, %r1441, %r1445;
	shl.b32 	%r139, %r1446, 6;
	add.s32 	%r1447, %r92, %r139;
	mul.wide.s32 	%rd180, %r1447, 4;
	add.s64 	%rd181, %rd28, %rd180;
	st.shared.u32 	[%rd181], %r1371;
	add.s32 	%r1448, %r93, %r139;
	mul.wide.u32 	%rd182, %r1448, 4;
	add.s64 	%rd183, %rd28, %rd182;
	st.shared.u32 	[%rd183], %r1375;
	add.s32 	%r1449, %r94, %r139;
	mul.wide.s32 	%rd184, %r1449, 4;
	add.s64 	%rd185, %rd28, %rd184;
	st.shared.u32 	[%rd185], %r1379;
	add.s32 	%r1450, %r95, %r139;
	mul.wide.u32 	%rd186, %r1450, 4;
	add.s64 	%rd187, %rd28, %rd186;
	st.shared.u32 	[%rd187], %r1383;
	add.s32 	%r1451, %r1430, 3;
	shr.s32 	%r1452, %r1451, 31;
	shr.u32 	%r1453, %r1452, 30;
	add.s32 	%r1454, %r1451, %r1453;
	and.b32  	%r1455, %r1454, 67108860;
	sub.s32 	%r1456, %r1451, %r1455;
	shl.b32 	%r140, %r1456, 6;
	add.s32 	%r1457, %r92, %r140;
	mul.wide.s32 	%rd188, %r1457, 4;
	add.s64 	%rd189, %rd28, %rd188;
	st.shared.u32 	[%rd189], %r1387;
	add.s32 	%r1458, %r93, %r140;
	mul.wide.u32 	%rd190, %r1458, 4;
	add.s64 	%rd191, %rd28, %rd190;
	st.shared.u32 	[%rd191], %r1391;
	add.s32 	%r1459, %r94, %r140;
	mul.wide.s32 	%rd192, %r1459, 4;
	add.s64 	%rd193, %rd28, %rd192;
	st.shared.u32 	[%rd193], %r1395;
	add.s32 	%r1460, %r95, %r140;
	mul.wide.u32 	%rd194, %r1460, 4;
	add.s64 	%rd195, %rd28, %rd194;
	st.shared.u32 	[%rd195], %r1399;
	bar.sync 	0;
	mov.u32 	%r3468, %r3417;
	mov.u32 	%r3469, %r3417;
	mov.u32 	%r3470, %r3417;
	mov.u32 	%r3471, %r3417;
	@%p115 bra 	LBB0_112;
	bra.uni 	LBB0_74;
LBB0_112:                               // %oksrem7119
                                        //   in Loop: Header=BB0_73 Depth=2
	ld.shared.u32 	%r3468, [%rd8];
	ld.shared.u32 	%r3469, [%rd9];
	ld.shared.u32 	%r3470, [%rd10];
	ld.shared.u32 	%r3471, [%rd11];
LBB0_74:                                // %L17301
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1496, %r1493}, {%r299, %r302}, {%r3468}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1505, %r1502}, {%r299, %r302}, {%r3469}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1514, %r1511}, {%r299, %r302}, {%r3470}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1523, %r1520}, {%r299, %r302}, {%r3471}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1489, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1491, %r1489, %r1493;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1494, %r351, %r1496, %r1491;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1498, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1500, %r1498, %r1502;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1503, %r351, %r1505, %r1500;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1507, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1509, %r1507, %r1511;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1512, %r351, %r1514, %r1509;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1516, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1518, %r1516, %r1520;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1521, %r351, %r1523, %r1518;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1525, %r354, %r1496;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1528, %r351, %r1493, %r1525;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1532, %r354, %r1505;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1535, %r351, %r1502, %r1532;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1539, %r354, %r1514;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1542, %r351, %r1511, %r1539;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1546, %r354, %r1523;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1549, %r351, %r1520, %r1546;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1594, %r1598}, {%r395, %r401, %r398, %r404}, {%r1494, %r1528}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1610, %r1614}, {%r395, %r401, %r398, %r404}, {%r1503, %r1535}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1602, %r1606}, {%r395, %r401, %r398, %r404}, {%r1512, %r1542}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1618, %r1622}, {%r395, %r401, %r398, %r404}, {%r1521, %r1549}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1593, %r1594, %r1594, %r3467;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1597, %r1598, %r1598, %r1593;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1601, %r1602, %r1602, %r1597;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1605, %r1606, %r1606, %r1601;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1609, %r1610, %r1610, %r3466;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1613, %r1614, %r1614, %r1609;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1617, %r1618, %r1618, %r1613;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1621, %r1622, %r1622, %r1617;
	// end inline asm
	mov.u32 	%r3472, %r3417;
	mov.u32 	%r3473, %r3417;
	mov.u32 	%r3474, %r3417;
	mov.u32 	%r3475, %r3417;
	@%p115 bra 	LBB0_113;
	bra.uni 	LBB0_75;
LBB0_113:                               // %oksrem7654
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r1626, %r96, %r138;
	mul.wide.s32 	%rd196, %r1626, 4;
	add.s64 	%rd198, %rd28, %rd196;
	ld.shared.u32 	%r3472, [%rd198];
	add.s32 	%r1627, %r97, %r138;
	mul.wide.u32 	%rd199, %r1627, 4;
	add.s64 	%rd200, %rd28, %rd199;
	ld.shared.u32 	%r3473, [%rd200];
	add.s32 	%r1628, %r98, %r138;
	mul.wide.s32 	%rd201, %r1628, 4;
	add.s64 	%rd202, %rd28, %rd201;
	ld.shared.u32 	%r3474, [%rd202];
	add.s32 	%r1629, %r99, %r138;
	mul.wide.u32 	%rd203, %r1629, 4;
	add.s64 	%rd204, %rd28, %rd203;
	ld.shared.u32 	%r3475, [%rd204];
LBB0_75:                                // %L18526
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1665, %r1662}, {%r299, %r302}, {%r3472}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1674, %r1671}, {%r299, %r302}, {%r3473}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1683, %r1680}, {%r299, %r302}, {%r3474}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1692, %r1689}, {%r299, %r302}, {%r3475}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1658, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1660, %r1658, %r1662;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1663, %r351, %r1665, %r1660;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1667, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1669, %r1667, %r1671;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1672, %r351, %r1674, %r1669;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1676, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1678, %r1676, %r1680;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1681, %r351, %r1683, %r1678;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1685, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1687, %r1685, %r1689;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1690, %r351, %r1692, %r1687;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1694, %r354, %r1665;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1697, %r351, %r1662, %r1694;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1701, %r354, %r1674;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1704, %r351, %r1671, %r1701;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1708, %r354, %r1683;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1711, %r351, %r1680, %r1708;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1715, %r354, %r1692;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1718, %r351, %r1689, %r1715;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1763, %r1767}, {%r395, %r401, %r398, %r404}, {%r1663, %r1697}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1779, %r1783}, {%r395, %r401, %r398, %r404}, {%r1672, %r1704}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1771, %r1775}, {%r395, %r401, %r398, %r404}, {%r1681, %r1711}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1787, %r1791}, {%r395, %r401, %r398, %r404}, {%r1690, %r1718}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1762, %r1763, %r1763, %r1605;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1766, %r1767, %r1767, %r1762;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1770, %r1771, %r1771, %r1766;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1774, %r1775, %r1775, %r1770;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1778, %r1779, %r1779, %r1621;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1782, %r1783, %r1783, %r1778;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1786, %r1787, %r1787, %r1782;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1790, %r1791, %r1791, %r1786;
	// end inline asm
	mov.u32 	%r3476, %r3417;
	mov.u32 	%r3477, %r3417;
	mov.u32 	%r3478, %r3417;
	mov.u32 	%r3479, %r3417;
	@%p115 bra 	LBB0_114;
	bra.uni 	LBB0_76;
LBB0_114:                               // %oksrem8189
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r1795, %r96, %r139;
	mul.wide.s32 	%rd205, %r1795, 4;
	add.s64 	%rd207, %rd28, %rd205;
	ld.shared.u32 	%r3476, [%rd207];
	add.s32 	%r1796, %r97, %r139;
	mul.wide.u32 	%rd208, %r1796, 4;
	add.s64 	%rd209, %rd28, %rd208;
	ld.shared.u32 	%r3477, [%rd209];
	add.s32 	%r1797, %r98, %r139;
	mul.wide.s32 	%rd210, %r1797, 4;
	add.s64 	%rd211, %rd28, %rd210;
	ld.shared.u32 	%r3478, [%rd211];
	add.s32 	%r1798, %r99, %r139;
	mul.wide.u32 	%rd212, %r1798, 4;
	add.s64 	%rd213, %rd28, %rd212;
	ld.shared.u32 	%r3479, [%rd213];
LBB0_76:                                // %L19751
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1834, %r1831}, {%r299, %r302}, {%r3476}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1843, %r1840}, {%r299, %r302}, {%r3477}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1852, %r1849}, {%r299, %r302}, {%r3478}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1861, %r1858}, {%r299, %r302}, {%r3479}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1827, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1829, %r1827, %r1831;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1832, %r351, %r1834, %r1829;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1836, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1838, %r1836, %r1840;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1841, %r351, %r1843, %r1838;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1845, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1847, %r1845, %r1849;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1850, %r351, %r1852, %r1847;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1854, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1856, %r1854, %r1858;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1859, %r351, %r1861, %r1856;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1863, %r354, %r1834;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1866, %r351, %r1831, %r1863;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1870, %r354, %r1843;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1873, %r351, %r1840, %r1870;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1877, %r354, %r1852;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1880, %r351, %r1849, %r1877;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1884, %r354, %r1861;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1887, %r351, %r1858, %r1884;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1932, %r1936}, {%r395, %r401, %r398, %r404}, {%r1832, %r1866}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1948, %r1952}, {%r395, %r401, %r398, %r404}, {%r1841, %r1873}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1940, %r1944}, {%r395, %r401, %r398, %r404}, {%r1850, %r1880}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1956, %r1960}, {%r395, %r401, %r398, %r404}, {%r1859, %r1887}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1931, %r1932, %r1932, %r1774;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1935, %r1936, %r1936, %r1931;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1939, %r1940, %r1940, %r1935;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1943, %r1944, %r1944, %r1939;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1947, %r1948, %r1948, %r1790;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1951, %r1952, %r1952, %r1947;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1955, %r1956, %r1956, %r1951;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1959, %r1960, %r1960, %r1955;
	// end inline asm
	mov.u32 	%r3480, %r3417;
	mov.u32 	%r3481, %r3417;
	mov.u32 	%r3482, %r3417;
	mov.u32 	%r3483, %r3417;
	@%p115 bra 	LBB0_115;
	bra.uni 	LBB0_77;
LBB0_115:                               // %oksrem8724
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r1964, %r96, %r140;
	mul.wide.s32 	%rd214, %r1964, 4;
	add.s64 	%rd216, %rd28, %rd214;
	ld.shared.u32 	%r3480, [%rd216];
	add.s32 	%r1965, %r97, %r140;
	mul.wide.u32 	%rd217, %r1965, 4;
	add.s64 	%rd218, %rd28, %rd217;
	ld.shared.u32 	%r3481, [%rd218];
	add.s32 	%r1966, %r98, %r140;
	mul.wide.s32 	%rd219, %r1966, 4;
	add.s64 	%rd220, %rd28, %rd219;
	ld.shared.u32 	%r3482, [%rd220];
	add.s32 	%r1967, %r99, %r140;
	mul.wide.u32 	%rd221, %r1967, 4;
	add.s64 	%rd222, %rd28, %rd221;
	ld.shared.u32 	%r3483, [%rd222];
LBB0_77:                                // %L20976
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2003, %r2000}, {%r299, %r302}, {%r3480}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2012, %r2009}, {%r299, %r302}, {%r3481}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2021, %r2018}, {%r299, %r302}, {%r3482}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2030, %r2027}, {%r299, %r302}, {%r3483}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1996, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1998, %r1996, %r2000;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2001, %r351, %r2003, %r1998;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2005, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2007, %r2005, %r2009;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2010, %r351, %r2012, %r2007;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2014, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2016, %r2014, %r2018;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2019, %r351, %r2021, %r2016;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2023, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2025, %r2023, %r2027;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2028, %r351, %r2030, %r2025;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2032, %r354, %r2003;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2035, %r351, %r2000, %r2032;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2039, %r354, %r2012;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2042, %r351, %r2009, %r2039;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2046, %r354, %r2021;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2049, %r351, %r2018, %r2046;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2053, %r354, %r2030;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2056, %r351, %r2027, %r2053;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2101, %r2105}, {%r395, %r401, %r398, %r404}, {%r2001, %r2035}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2117, %r2121}, {%r395, %r401, %r398, %r404}, {%r2010, %r2042}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2109, %r2113}, {%r395, %r401, %r398, %r404}, {%r2019, %r2049}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2125, %r2129}, {%r395, %r401, %r398, %r404}, {%r2028, %r2056}, {%r3417, %r3417};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2100, %r2101, %r2101, %r1943;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2104, %r2105, %r2105, %r2100;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2108, %r2109, %r2109, %r2104;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3467, %r2113, %r2113, %r2108;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2116, %r2117, %r2117, %r1959;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2120, %r2121, %r2121, %r2116;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2124, %r2125, %r2125, %r2120;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3466, %r2129, %r2129, %r2124;
	// end inline asm
	add.s32 	%r3464, %r3464, 4;
	setp.ne.s32 	%p125, %r3464, 40;
	@%p125 bra 	LBB0_81;
// %bb.78:                              // %L21122
                                        //   in Loop: Header=BB0_73 Depth=2
	@%p65 bra 	LBB0_80;
// %bb.79:                              // %L21181
                                        //   in Loop: Header=BB0_73 Depth=2
	mul.lo.s32 	%r2132, %r3465, 1152;
	add.s32 	%r2133, %r100, %r2132;
	mul.wide.u32 	%rd223, %r2133, 4;
	add.s64 	%rd224, %rd4, %rd223;
	st.global.u32 	[%rd224], %r3467;
	add.s32 	%r2134, %r101, %r2132;
	mul.wide.u32 	%rd225, %r2134, 4;
	add.s64 	%rd226, %rd4, %rd225;
	st.global.u32 	[%rd226], %r3466;
	bra.uni 	LBB0_80;
LBB0_82:                                // %L21443.preheader
                                        //   in Loop: Header=BB0_71 Depth=1
	add.s32 	%r173, %r107, 24;
	mov.u32 	%r2137, 0;
	mov.u32 	%r3488, 12;
	mov.u32 	%r3489, %r2137;
	bra.uni 	LBB0_83;
LBB0_90:                                // %L31434
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r3465, %r3465, 1;
	mov.u32 	%r3466, 0;
	mov.u32 	%r3467, %r3466;
	mov.u32 	%r3464, %r3466;
LBB0_91:                                // %L31435
                                        //   in Loop: Header=BB0_83 Depth=2
	bar.sync 	0;
	add.s32 	%r3489, %r3489, 1;
	add.s32 	%r3488, %r3488, -4;
	setp.eq.s32 	%p140, %r3488, -12;
	@%p140 bra 	LBB0_92;
LBB0_83:                                // %L21443
                                        //   Parent Loop BB0_71 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p129, %r3488, 12;
	selp.b32 	%r2675, %r3438, 0, %p129;
	setp.eq.s32 	%p130, %r3488, 8;
	selp.b32 	%r2676, %r3442, %r2675, %p130;
	setp.eq.s32 	%p131, %r3488, 4;
	selp.b32 	%r2677, %r3446, %r2676, %p131;
	setp.eq.s32 	%p132, %r3488, 0;
	selp.b32 	%r2678, %r3450, %r2677, %p132;
	setp.eq.s32 	%p133, %r3488, -4;
	selp.b32 	%r2679, %r3454, %r2678, %p133;
	setp.eq.s32 	%p134, %r3488, -8;
	selp.b32 	%r2680, %r3458, %r2679, %p134;
	selp.b32 	%r2681, %r3439, 0, %p129;
	selp.b32 	%r2682, %r3443, %r2681, %p130;
	selp.b32 	%r2683, %r3447, %r2682, %p131;
	selp.b32 	%r2684, %r3451, %r2683, %p132;
	selp.b32 	%r2685, %r3455, %r2684, %p133;
	selp.b32 	%r2686, %r3459, %r2685, %p134;
	selp.b32 	%r2687, %r3440, 0, %p129;
	selp.b32 	%r2688, %r3444, %r2687, %p130;
	selp.b32 	%r2689, %r3448, %r2688, %p131;
	selp.b32 	%r2690, %r3452, %r2689, %p132;
	selp.b32 	%r2691, %r3456, %r2690, %p133;
	selp.b32 	%r2692, %r3460, %r2691, %p134;
	selp.b32 	%r2693, %r3441, 0, %p129;
	selp.b32 	%r2694, %r3445, %r2693, %p130;
	selp.b32 	%r2695, %r3449, %r2694, %p131;
	selp.b32 	%r2696, %r3453, %r2695, %p132;
	selp.b32 	%r2697, %r3457, %r2696, %p133;
	selp.b32 	%r2698, %r3461, %r2697, %p134;
	// begin inline asm
	mov.b32 %r2165, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r2176, {%rs198, %rs198};
	// end inline asm
	shr.u32 	%r2699, %r2680, 8;
	xor.b32  	%r2175, %r2699, 8947848;
	// begin inline asm
	lop3.b32 %r2162, %r1008, %r2175, %r2165, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2166, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2167, %r2165, %r2166;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2170, %r2162, %r2167;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2173, %r1019, %r2175, %r2176, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2177, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2178, %r2176, %r2177;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2181, %r2173, %r2178;
	// end inline asm
	// begin inline asm
	mov.b32 %r2211, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r2222, {%rs198, %rs198};
	// end inline asm
	shr.u32 	%r2700, %r2686, 8;
	xor.b32  	%r2221, %r2700, 8947848;
	// begin inline asm
	lop3.b32 %r2208, %r1008, %r2221, %r2211, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2212, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2213, %r2211, %r2212;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2216, %r2208, %r2213;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2219, %r1019, %r2221, %r2222, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2223, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2224, %r2222, %r2223;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2227, %r2219, %r2224;
	// end inline asm
	// begin inline asm
	mov.b32 %r2257, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r2268, {%rs198, %rs198};
	// end inline asm
	shr.u32 	%r2701, %r2692, 8;
	xor.b32  	%r2267, %r2701, 8947848;
	// begin inline asm
	lop3.b32 %r2254, %r1008, %r2267, %r2257, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2258, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2259, %r2257, %r2258;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2262, %r2254, %r2259;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2265, %r1019, %r2267, %r2268, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2269, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2270, %r2268, %r2269;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2273, %r2265, %r2270;
	// end inline asm
	// begin inline asm
	mov.b32 %r2303, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r2314, {%rs198, %rs198};
	// end inline asm
	shr.u32 	%r2702, %r2698, 8;
	xor.b32  	%r2313, %r2702, 8947848;
	// begin inline asm
	lop3.b32 %r2300, %r1008, %r2313, %r2303, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2304, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2305, %r2303, %r2304;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2308, %r2300, %r2305;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2311, %r1019, %r2313, %r2314, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2315, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2316, %r2314, %r2315;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2319, %r2311, %r2316;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3431;
    mov.b32 {%r2re, %r2im}, %r2170;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2322, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3432;
    mov.b32 {%r2re, %r2im}, %r2181;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2325, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3431;
    mov.b32 {%r2re, %r2im}, %r2216;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2328, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3432;
    mov.b32 {%r2re, %r2im}, %r2227;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2331, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3431;
    mov.b32 {%r2re, %r2im}, %r2262;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2334, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3432;
    mov.b32 {%r2re, %r2im}, %r2273;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2337, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3431;
    mov.b32 {%r2re, %r2im}, %r2308;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2340, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3432;
    mov.b32 {%r2re, %r2im}, %r2319;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2343, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2409, %r2406}, {%r299, %r302}, {%r2322}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2418, %r2415}, {%r299, %r302}, {%r2325}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2427, %r2424}, {%r299, %r302}, {%r2328}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2436, %r2433}, {%r299, %r302}, {%r2331}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2445, %r2442}, {%r299, %r302}, {%r2334}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2454, %r2451}, {%r299, %r302}, {%r2337}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2463, %r2460}, {%r299, %r302}, {%r2340}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2472, %r2469}, {%r299, %r302}, {%r2343}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2402, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2404, %r2402, %r2406;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2407, %r351, %r2409, %r2404;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2411, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2413, %r2411, %r2415;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2416, %r351, %r2418, %r2413;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2420, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2422, %r2420, %r2424;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2425, %r351, %r2427, %r2422;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2429, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2431, %r2429, %r2433;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2434, %r351, %r2436, %r2431;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2438, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2440, %r2438, %r2442;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2443, %r351, %r2445, %r2440;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2447, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2449, %r2447, %r2451;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2452, %r351, %r2454, %r2449;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2456, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2458, %r2456, %r2460;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2461, %r351, %r2463, %r2458;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2465, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2467, %r2465, %r2469;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2470, %r351, %r2472, %r2467;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2474, %r354, %r2409;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2477, %r351, %r2406, %r2474;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2481, %r354, %r2418;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2484, %r351, %r2415, %r2481;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2488, %r354, %r2427;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2491, %r351, %r2424, %r2488;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2495, %r354, %r2436;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2498, %r351, %r2433, %r2495;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2502, %r354, %r2445;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2505, %r351, %r2442, %r2502;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2509, %r354, %r2454;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2512, %r351, %r2451, %r2509;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2516, %r354, %r2463;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2519, %r351, %r2460, %r2516;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2523, %r354, %r2472;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2526, %r351, %r2469, %r2523;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2611, %r2612}, {%r395, %r401, %r398, %r404}, {%r2407, %r2477}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2619, %r2620}, {%r395, %r401, %r398, %r404}, {%r2416, %r2484}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2627, %r2628}, {%r395, %r401, %r398, %r404}, {%r2425, %r2491}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2635, %r2636}, {%r395, %r401, %r398, %r404}, {%r2434, %r2498}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2643, %r2644}, {%r395, %r401, %r398, %r404}, {%r2443, %r2505}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2651, %r2652}, {%r395, %r401, %r398, %r404}, {%r2452, %r2512}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2659, %r2660}, {%r395, %r401, %r398, %r404}, {%r2461, %r2519}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2667, %r2668}, {%r395, %r401, %r398, %r404}, {%r2470, %r2526}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	prmt.b32 %r2610, %r2611, %r2612, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2614, %r2611, %r2612, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2618, %r2619, %r2620, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2622, %r2619, %r2620, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2626, %r2627, %r2628, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2630, %r2627, %r2628, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2634, %r2635, %r2636, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2638, %r2635, %r2636, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2642, %r2643, %r2644, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2646, %r2643, %r2644, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2650, %r2651, %r2652, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2654, %r2651, %r2652, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2658, %r2659, %r2660, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2662, %r2659, %r2660, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2666, %r2667, %r2668, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2670, %r2667, %r2668, %r710;
	// end inline asm
	st.shared.u32 	[%rd6], %r2610;
	st.shared.u32 	[%rd7+33024], %r2614;
	st.shared.u32 	[%rd7+128], %r2618;
	st.shared.u32 	[%rd7+33152], %r2622;
	cvt.u16.u32 	%rs262, %r3489;
	and.b16  	%rs263, %rs262, 255;
	mul.lo.s16 	%rs264, %rs263, 171;
	shr.u16 	%rs265, %rs264, 10;
	mul.lo.s16 	%rs266, %rs265, 6;
	sub.s16 	%rs267, %rs262, %rs266;
	shl.b16 	%rs268, %rs267, 2;
	cvt.u32.u16 	%r2703, %rs268;
	and.b32  	%r2704, %r2703, 252;
	add.s32 	%r2705, %r173, %r2704;
	add.s32 	%r2706, %r2705, 1;
	shr.s32 	%r2707, %r2706, 31;
	shr.u32 	%r2708, %r2707, 30;
	add.s32 	%r2709, %r2706, %r2708;
	and.b32  	%r2710, %r2709, 67108860;
	sub.s32 	%r2711, %r2706, %r2710;
	shl.b32 	%r180, %r2711, 6;
	add.s32 	%r2712, %r92, %r180;
	mul.wide.s32 	%rd227, %r2712, 4;
	add.s64 	%rd229, %rd28, %rd227;
	st.shared.u32 	[%rd229], %r2626;
	add.s32 	%r2713, %r93, %r180;
	mul.wide.u32 	%rd230, %r2713, 4;
	add.s64 	%rd231, %rd28, %rd230;
	st.shared.u32 	[%rd231], %r2630;
	add.s32 	%r2714, %r94, %r180;
	mul.wide.s32 	%rd232, %r2714, 4;
	add.s64 	%rd233, %rd28, %rd232;
	st.shared.u32 	[%rd233], %r2634;
	add.s32 	%r2715, %r95, %r180;
	mul.wide.u32 	%rd234, %r2715, 4;
	add.s64 	%rd235, %rd28, %rd234;
	st.shared.u32 	[%rd235], %r2638;
	add.s32 	%r2716, %r2705, 2;
	shr.s32 	%r2717, %r2716, 31;
	shr.u32 	%r2718, %r2717, 30;
	add.s32 	%r2719, %r2716, %r2718;
	and.b32  	%r2720, %r2719, 67108860;
	sub.s32 	%r2721, %r2716, %r2720;
	shl.b32 	%r181, %r2721, 6;
	add.s32 	%r2722, %r92, %r181;
	mul.wide.s32 	%rd236, %r2722, 4;
	add.s64 	%rd237, %rd28, %rd236;
	st.shared.u32 	[%rd237], %r2642;
	add.s32 	%r2723, %r93, %r181;
	mul.wide.u32 	%rd238, %r2723, 4;
	add.s64 	%rd239, %rd28, %rd238;
	st.shared.u32 	[%rd239], %r2646;
	add.s32 	%r2724, %r94, %r181;
	mul.wide.s32 	%rd240, %r2724, 4;
	add.s64 	%rd241, %rd28, %rd240;
	st.shared.u32 	[%rd241], %r2650;
	add.s32 	%r2725, %r95, %r181;
	mul.wide.u32 	%rd242, %r2725, 4;
	add.s64 	%rd243, %rd28, %rd242;
	st.shared.u32 	[%rd243], %r2654;
	add.s32 	%r2726, %r2705, 3;
	shr.s32 	%r2727, %r2726, 31;
	shr.u32 	%r2728, %r2727, 30;
	add.s32 	%r2729, %r2726, %r2728;
	and.b32  	%r2730, %r2729, 67108860;
	sub.s32 	%r2731, %r2726, %r2730;
	shl.b32 	%r182, %r2731, 6;
	add.s32 	%r2732, %r92, %r182;
	mul.wide.s32 	%rd244, %r2732, 4;
	add.s64 	%rd245, %rd28, %rd244;
	st.shared.u32 	[%rd245], %r2658;
	add.s32 	%r2733, %r93, %r182;
	mul.wide.u32 	%rd246, %r2733, 4;
	add.s64 	%rd247, %rd28, %rd246;
	st.shared.u32 	[%rd247], %r2662;
	add.s32 	%r2734, %r94, %r182;
	mul.wide.s32 	%rd248, %r2734, 4;
	add.s64 	%rd249, %rd28, %rd248;
	st.shared.u32 	[%rd249], %r2666;
	add.s32 	%r2735, %r95, %r182;
	mul.wide.u32 	%rd250, %r2735, 4;
	add.s64 	%rd251, %rd28, %rd250;
	st.shared.u32 	[%rd251], %r2670;
	bar.sync 	0;
	mov.u32 	%r3494, %r2137;
	mov.u32 	%r3495, %r2137;
	mov.u32 	%r3496, %r2137;
	mov.u32 	%r3497, %r2137;
	@%p115 bra 	LBB0_116;
	bra.uni 	LBB0_84;
LBB0_116:                               // %oksrem11517
                                        //   in Loop: Header=BB0_83 Depth=2
	ld.shared.u32 	%r3497, [%rd8];
	ld.shared.u32 	%r3496, [%rd9];
	ld.shared.u32 	%r3495, [%rd10];
	ld.shared.u32 	%r3494, [%rd11];
LBB0_84:                                // %L27322
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2771, %r2768}, {%r299, %r302}, {%r3497}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2780, %r2777}, {%r299, %r302}, {%r3496}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2789, %r2786}, {%r299, %r302}, {%r3495}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2798, %r2795}, {%r299, %r302}, {%r3494}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2764, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2766, %r2764, %r2768;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2769, %r351, %r2771, %r2766;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2773, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2775, %r2773, %r2777;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2778, %r351, %r2780, %r2775;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2782, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2784, %r2782, %r2786;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2787, %r351, %r2789, %r2784;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2791, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2793, %r2791, %r2795;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2796, %r351, %r2798, %r2793;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2800, %r354, %r2771;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2803, %r351, %r2768, %r2800;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2807, %r354, %r2780;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2810, %r351, %r2777, %r2807;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2814, %r354, %r2789;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2817, %r351, %r2786, %r2814;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2821, %r354, %r2798;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2824, %r351, %r2795, %r2821;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2869, %r2873}, {%r395, %r401, %r398, %r404}, {%r2769, %r2803}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2885, %r2889}, {%r395, %r401, %r398, %r404}, {%r2778, %r2810}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2877, %r2881}, {%r395, %r401, %r398, %r404}, {%r2787, %r2817}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2893, %r2897}, {%r395, %r401, %r398, %r404}, {%r2796, %r2824}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2868, %r2869, %r2869, %r3467;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2872, %r2873, %r2873, %r2868;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2876, %r2877, %r2877, %r2872;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2880, %r2881, %r2881, %r2876;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2884, %r2885, %r2885, %r3466;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2888, %r2889, %r2889, %r2884;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2892, %r2893, %r2893, %r2888;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2896, %r2897, %r2897, %r2892;
	// end inline asm
	mov.u32 	%r3498, %r2137;
	mov.u32 	%r3499, %r2137;
	mov.u32 	%r3500, %r2137;
	mov.u32 	%r3501, %r2137;
	@%p115 bra 	LBB0_117;
	bra.uni 	LBB0_85;
LBB0_117:                               // %oksrem12052
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r2901, %r96, %r180;
	mul.wide.s32 	%rd252, %r2901, 4;
	add.s64 	%rd254, %rd28, %rd252;
	ld.shared.u32 	%r3501, [%rd254];
	add.s32 	%r2902, %r97, %r180;
	mul.wide.u32 	%rd255, %r2902, 4;
	add.s64 	%rd256, %rd28, %rd255;
	ld.shared.u32 	%r3500, [%rd256];
	add.s32 	%r2903, %r98, %r180;
	mul.wide.s32 	%rd257, %r2903, 4;
	add.s64 	%rd258, %rd28, %rd257;
	ld.shared.u32 	%r3499, [%rd258];
	add.s32 	%r2904, %r99, %r180;
	mul.wide.u32 	%rd259, %r2904, 4;
	add.s64 	%rd260, %rd28, %rd259;
	ld.shared.u32 	%r3498, [%rd260];
LBB0_85:                                // %L28547
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2940, %r2937}, {%r299, %r302}, {%r3501}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2949, %r2946}, {%r299, %r302}, {%r3500}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2958, %r2955}, {%r299, %r302}, {%r3499}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2967, %r2964}, {%r299, %r302}, {%r3498}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2933, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2935, %r2933, %r2937;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2938, %r351, %r2940, %r2935;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2942, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2944, %r2942, %r2946;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2947, %r351, %r2949, %r2944;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2951, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2953, %r2951, %r2955;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2956, %r351, %r2958, %r2953;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2960, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2962, %r2960, %r2964;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2965, %r351, %r2967, %r2962;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2969, %r354, %r2940;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2972, %r351, %r2937, %r2969;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2976, %r354, %r2949;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2979, %r351, %r2946, %r2976;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2983, %r354, %r2958;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2986, %r351, %r2955, %r2983;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2990, %r354, %r2967;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2993, %r351, %r2964, %r2990;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3038, %r3042}, {%r395, %r401, %r398, %r404}, {%r2938, %r2972}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3054, %r3058}, {%r395, %r401, %r398, %r404}, {%r2947, %r2979}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3046, %r3050}, {%r395, %r401, %r398, %r404}, {%r2956, %r2986}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3062, %r3066}, {%r395, %r401, %r398, %r404}, {%r2965, %r2993}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3037, %r3038, %r3038, %r2880;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3041, %r3042, %r3042, %r3037;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3045, %r3046, %r3046, %r3041;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3049, %r3050, %r3050, %r3045;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3053, %r3054, %r3054, %r2896;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3057, %r3058, %r3058, %r3053;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3061, %r3062, %r3062, %r3057;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3065, %r3066, %r3066, %r3061;
	// end inline asm
	mov.u32 	%r3502, %r2137;
	mov.u32 	%r3503, %r2137;
	mov.u32 	%r3504, %r2137;
	mov.u32 	%r3505, %r2137;
	@%p115 bra 	LBB0_118;
	bra.uni 	LBB0_86;
LBB0_118:                               // %oksrem12587
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r3070, %r96, %r181;
	mul.wide.s32 	%rd261, %r3070, 4;
	add.s64 	%rd263, %rd28, %rd261;
	ld.shared.u32 	%r3505, [%rd263];
	add.s32 	%r3071, %r97, %r181;
	mul.wide.u32 	%rd264, %r3071, 4;
	add.s64 	%rd265, %rd28, %rd264;
	ld.shared.u32 	%r3504, [%rd265];
	add.s32 	%r3072, %r98, %r181;
	mul.wide.s32 	%rd266, %r3072, 4;
	add.s64 	%rd267, %rd28, %rd266;
	ld.shared.u32 	%r3503, [%rd267];
	add.s32 	%r3073, %r99, %r181;
	mul.wide.u32 	%rd268, %r3073, 4;
	add.s64 	%rd269, %rd28, %rd268;
	ld.shared.u32 	%r3502, [%rd269];
LBB0_86:                                // %L29772
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3109, %r3106}, {%r299, %r302}, {%r3505}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3118, %r3115}, {%r299, %r302}, {%r3504}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3127, %r3124}, {%r299, %r302}, {%r3503}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3136, %r3133}, {%r299, %r302}, {%r3502}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3102, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3104, %r3102, %r3106;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3107, %r351, %r3109, %r3104;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3111, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3113, %r3111, %r3115;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3116, %r351, %r3118, %r3113;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3120, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3122, %r3120, %r3124;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3125, %r351, %r3127, %r3122;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3129, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3131, %r3129, %r3133;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3134, %r351, %r3136, %r3131;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3138, %r354, %r3109;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3141, %r351, %r3106, %r3138;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3145, %r354, %r3118;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3148, %r351, %r3115, %r3145;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3152, %r354, %r3127;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3155, %r351, %r3124, %r3152;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3159, %r354, %r3136;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3162, %r351, %r3133, %r3159;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3207, %r3211}, {%r395, %r401, %r398, %r404}, {%r3107, %r3141}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3223, %r3227}, {%r395, %r401, %r398, %r404}, {%r3116, %r3148}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3215, %r3219}, {%r395, %r401, %r398, %r404}, {%r3125, %r3155}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3231, %r3235}, {%r395, %r401, %r398, %r404}, {%r3134, %r3162}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3206, %r3207, %r3207, %r3049;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3210, %r3211, %r3211, %r3206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3214, %r3215, %r3215, %r3210;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3218, %r3219, %r3219, %r3214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3222, %r3223, %r3223, %r3065;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3226, %r3227, %r3227, %r3222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3230, %r3231, %r3231, %r3226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3234, %r3235, %r3235, %r3230;
	// end inline asm
	mov.u32 	%r3506, %r2137;
	mov.u32 	%r3507, %r2137;
	mov.u32 	%r3508, %r2137;
	mov.u32 	%r3509, %r2137;
	@%p115 bra 	LBB0_119;
	bra.uni 	LBB0_87;
LBB0_119:                               // %oksrem13122
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r3239, %r96, %r182;
	mul.wide.s32 	%rd270, %r3239, 4;
	add.s64 	%rd272, %rd28, %rd270;
	ld.shared.u32 	%r3509, [%rd272];
	add.s32 	%r3240, %r97, %r182;
	mul.wide.u32 	%rd273, %r3240, 4;
	add.s64 	%rd274, %rd28, %rd273;
	ld.shared.u32 	%r3508, [%rd274];
	add.s32 	%r3241, %r98, %r182;
	mul.wide.s32 	%rd275, %r3241, 4;
	add.s64 	%rd276, %rd28, %rd275;
	ld.shared.u32 	%r3507, [%rd276];
	add.s32 	%r3242, %r99, %r182;
	mul.wide.u32 	%rd277, %r3242, 4;
	add.s64 	%rd278, %rd28, %rd277;
	ld.shared.u32 	%r3506, [%rd278];
LBB0_87:                                // %L30997
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3278, %r3275}, {%r299, %r302}, {%r3509}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3287, %r3284}, {%r299, %r302}, {%r3508}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3296, %r3293}, {%r299, %r302}, {%r3507}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3305, %r3302}, {%r299, %r302}, {%r3506}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3271, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3273, %r3271, %r3275;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3276, %r351, %r3278, %r3273;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3280, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3282, %r3280, %r3284;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3285, %r351, %r3287, %r3282;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3289, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3291, %r3289, %r3293;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3294, %r351, %r3296, %r3291;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3298, %r354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3300, %r3298, %r3302;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3303, %r351, %r3305, %r3300;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3307, %r354, %r3278;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3310, %r351, %r3275, %r3307;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3314, %r354, %r3287;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3317, %r351, %r3284, %r3314;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3321, %r354, %r3296;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3324, %r351, %r3293, %r3321;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3328, %r354, %r3305;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3331, %r351, %r3302, %r3328;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3376, %r3380}, {%r395, %r401, %r398, %r404}, {%r3276, %r3310}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3392, %r3396}, {%r395, %r401, %r398, %r404}, {%r3285, %r3317}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3384, %r3388}, {%r395, %r401, %r398, %r404}, {%r3294, %r3324}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3400, %r3404}, {%r395, %r401, %r398, %r404}, {%r3303, %r3331}, {%r2137, %r2137};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3375, %r3376, %r3376, %r3218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3379, %r3380, %r3380, %r3375;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3383, %r3384, %r3384, %r3379;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3467, %r3388, %r3388, %r3383;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3391, %r3392, %r3392, %r3234;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3395, %r3396, %r3396, %r3391;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3399, %r3400, %r3400, %r3395;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3466, %r3404, %r3404, %r3399;
	// end inline asm
	add.s32 	%r3464, %r3464, 4;
	setp.ne.s32 	%p138, %r3464, 40;
	@%p138 bra 	LBB0_91;
// %bb.88:                              // %L31143
                                        //   in Loop: Header=BB0_83 Depth=2
	@%p65 bra 	LBB0_90;
// %bb.89:                              // %L31202
                                        //   in Loop: Header=BB0_83 Depth=2
	mul.lo.s32 	%r3407, %r3465, 1152;
	add.s32 	%r3408, %r100, %r3407;
	mul.wide.u32 	%rd279, %r3408, 4;
	add.s64 	%rd280, %rd4, %rd279;
	st.global.u32 	[%rd280], %r3467;
	add.s32 	%r3409, %r101, %r3407;
	mul.wide.u32 	%rd281, %r3409, 4;
	add.s64 	%rd282, %rd4, %rd281;
	st.global.u32 	[%rd282], %r3466;
	bra.uni 	LBB0_90;
LBB0_93:                                // %guard_pass14638
	@%p65 bra 	LBB0_95;
// %bb.94:                              // %L31536
	mul.lo.s32 	%r3411, %r3465, 1152;
	add.s32 	%r3412, %r100, %r3411;
	mul.wide.u32 	%rd283, %r3412, 4;
	add.s64 	%rd284, %rd4, %rd283;
	st.global.u32 	[%rd284], %r3467;
	add.s32 	%r3413, %r101, %r3411;
	mul.wide.u32 	%rd285, %r3413, 4;
	add.s64 	%rd286, %rd4, %rd285;
	st.global.u32 	[%rd286], %r3466;
LBB0_95:                                // %L31768
	mov.u32 	%r3414, 0;
	st.global.u32 	[%rd5], %r3414;
	ret;
LBB0_1:                                 // %L8
	ld.param.u64 	%rd13, [_Z15julia_frb_1026813CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0];
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd13;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
