// PTX CompilerJob of kernel #frb(CuDeviceVector{Int16x2, 1}, CuDeviceVector{Float16x2, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Float16x2, 1}, CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 7.1
.target sm_86
.address_size 64

	// .globl	_Z15julia_frb_1084813CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE // -- Begin function _Z15julia_frb_1084813CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[8]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z15julia_frb_1084813CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.visible .entry _Z15julia_frb_1084813CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE(
	.param .align 8 .b8 _Z15julia_frb_1084813CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0[8],
	.param .align 8 .b8 _Z15julia_frb_1084813CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z15julia_frb_1084813CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z15julia_frb_1084813CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z15julia_frb_1084813CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z15julia_frb_1084813CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<78>;
	.reg .b16 	%rs<285>;
	.reg .b32 	%r<3425>;
	.reg .f32 	%f<202>;
	.reg .b64 	%rd<296>;

// %bb.0:                               // %conversion
	// begin inline asm
	mov.u32 %r252, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r252, 76895;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L10
	ld.param.u64 	%rd12, [_Z15julia_frb_1084813CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %ctaid.x;
	or.b32  	%r259, %r2, %r3;
	mad.lo.s32 	%r260, %r4, 768, %r259;
	mul.wide.u32 	%rd18, %r260, 4;
	add.s64 	%rd5, %rd12, %rd18;
	mov.u32 	%r261, 1;
	st.global.u32 	[%rd5], %r261;
	and.b32  	%r5, %r3, 3;
	shr.u32 	%r6, %r3, 2;
	mul.lo.s32 	%r262, %r5, %r6;
	and.b32  	%r263, %r262, 7;
	cvt.rn.f32.u32 	%f18, %r263;
	mov.f32 	%f19, 0f40800000;
	div.approx.f32 	%f20, %f18, %f19;
	add.f32 	%f21, %f20, %f20;
	mov.b32 	%r264, %f21;
	and.b32  	%r265, %r264, -2147483648;
	or.b32  	%r266, %r265, 1056964608;
	mov.b32 	%f22, %r266;
	add.f32 	%f23, %f21, %f22;
	cvt.rzi.f32.f32 	%f24, %f23;
	abs.f32 	%f25, %f21;
	setp.gt.f32 	%p2, %f25, 0f4B000000;
	selp.f32 	%f26, %f21, %f24, %p2;
	cvt.rzi.f32.f32 	%f27, %f21;
	setp.lt.f32 	%p3, %f25, 0f3F000000;
	selp.f32 	%f28, %f27, %f26, %p3;
	cvt.rzi.s32.f32 	%r267, %f28;
	fma.rn.f32 	%f29, %f28, 0fBF000000, %f20;
	mul.f32 	%f30, %f29, 0f34222169;
	fma.rn.f32 	%f31, %f29, 0f40490FDA, %f30;
	mul.f32 	%f32, %f31, %f31;
	fma.rn.f32 	%f33, %f32, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f34, %f33, %f32, 0f3D2AAABB;
	fma.rn.f32 	%f35, %f34, %f32, 0fBEFFFFFF;
	fma.rn.f32 	%f36, %f35, %f32, 0f3F800000;
	fma.rn.f32 	%f37, %f32, %f31, 0f00000000;
	fma.rn.f32 	%f38, %f32, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f39, %f38, %f32, 0fBE2AAAA8;
	fma.rn.f32 	%f40, %f39, %f37, %f31;
	and.b32  	%r268, %r267, 1;
	setp.eq.b32 	%p4, %r268, 1;
	selp.f32 	%f41, %f36, %f40, %p4;
	selp.f32 	%f42, %f40, %f36, %p4;
	and.b32  	%r269, %r267, 2;
	setp.eq.s32 	%p5, %r269, 0;
	neg.f32 	%f43, %f41;
	selp.f32 	%f44, %f41, %f43, %p5;
	add.s32 	%r270, %r267, 1;
	and.b32  	%r271, %r270, 2;
	mov.f32 	%f200, 0f00000000;
	cvt.rzi.f32.f32 	%f47, %f20;
	setp.eq.f32 	%p7, %f47, %f20;
	mul.f32 	%f48, %f20, 0f00000000;
	shl.b32 	%r9, %r3, 1;
	and.b32  	%r10, %r9, 6;
	or.b32  	%r11, %r10, 1;
	setp.eq.s32 	%p9, %r10, 6;
	mov.f32 	%f192, 0f41C00000;
	mul.lo.s32 	%r3334, %r10, %r6;
	mov.f32 	%f194, %f200;
	mov.f32 	%f195, %f200;
	@%p9 bra 	LBB0_4;
// %bb.3:                               // %L205
	cvt.u16.u32 	%rs2, %r3334;
	and.b16  	%rs3, %rs2, 255;
	mul.lo.s16 	%rs4, %rs3, 171;
	shr.u16 	%rs5, %rs4, 13;
	mul.lo.s16 	%rs6, %rs5, 48;
	sub.s16 	%rs7, %rs2, %rs6;
	and.b16  	%rs8, %rs7, 255;
	cvt.rn.f32.u16 	%f53, %rs8;
	div.approx.f32 	%f55, %f53, %f192;
	add.f32 	%f56, %f55, %f55;
	mov.b32 	%r273, %f56;
	and.b32  	%r274, %r273, -2147483648;
	or.b32  	%r275, %r274, 1056964608;
	mov.b32 	%f57, %r275;
	add.f32 	%f58, %f56, %f57;
	cvt.rzi.f32.f32 	%f59, %f58;
	abs.f32 	%f60, %f56;
	setp.gt.f32 	%p10, %f60, 0f4B000000;
	selp.f32 	%f61, %f56, %f59, %p10;
	cvt.rzi.f32.f32 	%f62, %f56;
	setp.lt.f32 	%p11, %f60, 0f3F000000;
	selp.f32 	%f63, %f62, %f61, %p11;
	cvt.rzi.s32.f32 	%r276, %f63;
	fma.rn.f32 	%f64, %f63, 0fBF000000, %f55;
	mul.f32 	%f65, %f64, 0f34222169;
	fma.rn.f32 	%f66, %f64, 0f40490FDA, %f65;
	mul.f32 	%f67, %f66, %f66;
	fma.rn.f32 	%f68, %f67, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f69, %f68, %f67, 0f3D2AAABB;
	fma.rn.f32 	%f70, %f69, %f67, 0fBEFFFFFF;
	fma.rn.f32 	%f71, %f70, %f67, 0f3F800000;
	fma.rn.f32 	%f72, %f67, %f66, 0f00000000;
	fma.rn.f32 	%f73, %f67, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f74, %f73, %f67, 0fBE2AAAA8;
	fma.rn.f32 	%f75, %f74, %f72, %f66;
	and.b32  	%r277, %r276, 1;
	setp.eq.b32 	%p12, %r277, 1;
	selp.f32 	%f76, %f71, %f75, %p12;
	selp.f32 	%f77, %f75, %f71, %p12;
	and.b32  	%r278, %r276, 2;
	setp.eq.s32 	%p13, %r278, 0;
	neg.f32 	%f78, %f76;
	selp.f32 	%f79, %f76, %f78, %p13;
	add.s32 	%r279, %r276, 1;
	and.b32  	%r280, %r279, 2;
	setp.eq.s32 	%p14, %r280, 0;
	mov.f32 	%f80, 0f00000000;
	sub.f32 	%f81, %f80, %f77;
	selp.f32 	%f82, %f77, %f81, %p14;
	cvt.rzi.f32.f32 	%f83, %f55;
	setp.eq.f32 	%p15, %f83, %f55;
	mul.f32 	%f84, %f55, 0f00000000;
	selp.f32 	%f195, %f84, %f79, %p15;
	abs.f32 	%f85, %f55;
	setp.gt.f32 	%p16, %f85, 0f4B800000;
	add.f32 	%f86, %f195, 0f3F800000;
	selp.f32 	%f194, %f86, %f82, %p16;
LBB0_4:                                 // %L220
	setp.eq.s32 	%p6, %r271, 0;
	sub.f32 	%f45, %f200, %f42;
	selp.f32 	%f49, %f48, %f44, %p7;
	abs.f32 	%f50, %f20;
	setp.gt.u32 	%p17, %r11, 5;
	mul.lo.s32 	%r3335, %r11, %r6;
	mov.f32 	%f196, %f200;
	mov.f32 	%f197, %f200;
	@%p17 bra 	LBB0_6;
// %bb.5:                               // %L224
	cvt.u16.u32 	%rs9, %r3335;
	and.b16  	%rs10, %rs9, 255;
	mul.lo.s16 	%rs11, %rs10, 171;
	shr.u16 	%rs12, %rs11, 13;
	mul.lo.s16 	%rs13, %rs12, 48;
	sub.s16 	%rs14, %rs9, %rs13;
	and.b16  	%rs15, %rs14, 255;
	cvt.rn.f32.u16 	%f88, %rs15;
	div.approx.f32 	%f90, %f88, %f192;
	add.f32 	%f91, %f90, %f90;
	mov.b32 	%r282, %f91;
	and.b32  	%r283, %r282, -2147483648;
	or.b32  	%r284, %r283, 1056964608;
	mov.b32 	%f92, %r284;
	add.f32 	%f93, %f91, %f92;
	cvt.rzi.f32.f32 	%f94, %f93;
	abs.f32 	%f95, %f91;
	setp.gt.f32 	%p18, %f95, 0f4B000000;
	selp.f32 	%f96, %f91, %f94, %p18;
	cvt.rzi.f32.f32 	%f97, %f91;
	setp.lt.f32 	%p19, %f95, 0f3F000000;
	selp.f32 	%f98, %f97, %f96, %p19;
	cvt.rzi.s32.f32 	%r285, %f98;
	fma.rn.f32 	%f99, %f98, 0fBF000000, %f90;
	mul.f32 	%f100, %f99, 0f34222169;
	fma.rn.f32 	%f101, %f99, 0f40490FDA, %f100;
	mul.f32 	%f102, %f101, %f101;
	fma.rn.f32 	%f103, %f102, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f104, %f103, %f102, 0f3D2AAABB;
	fma.rn.f32 	%f105, %f104, %f102, 0fBEFFFFFF;
	fma.rn.f32 	%f106, %f105, %f102, 0f3F800000;
	fma.rn.f32 	%f107, %f102, %f101, 0f00000000;
	fma.rn.f32 	%f108, %f102, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f109, %f108, %f102, 0fBE2AAAA8;
	fma.rn.f32 	%f110, %f109, %f107, %f101;
	and.b32  	%r286, %r285, 1;
	setp.eq.b32 	%p20, %r286, 1;
	selp.f32 	%f111, %f106, %f110, %p20;
	selp.f32 	%f112, %f110, %f106, %p20;
	and.b32  	%r287, %r285, 2;
	setp.eq.s32 	%p21, %r287, 0;
	neg.f32 	%f113, %f111;
	selp.f32 	%f114, %f111, %f113, %p21;
	add.s32 	%r288, %r285, 1;
	and.b32  	%r289, %r288, 2;
	setp.eq.s32 	%p22, %r289, 0;
	mov.f32 	%f115, 0f00000000;
	sub.f32 	%f116, %f115, %f112;
	selp.f32 	%f117, %f112, %f116, %p22;
	cvt.rzi.f32.f32 	%f118, %f90;
	setp.eq.f32 	%p23, %f118, %f90;
	mul.f32 	%f119, %f90, 0f00000000;
	selp.f32 	%f197, %f119, %f114, %p23;
	abs.f32 	%f120, %f90;
	setp.gt.f32 	%p24, %f120, 0f4B800000;
	add.f32 	%f121, %f197, 0f3F800000;
	selp.f32 	%f196, %f121, %f117, %p24;
LBB0_6:                                 // %L239
	selp.f32 	%f46, %f42, %f45, %p6;
	setp.gt.f32 	%p8, %f50, 0f4B800000;
	add.f32 	%f51, %f49, 0f3F800000;
	setp.gt.u32 	%p26, %r3, 23;
	or.pred  	%p27, %p9, %p26;
	mov.f32 	%f193, 0f40400000;
	mov.f32 	%f198, %f200;
	mov.f32 	%f199, %f200;
	@%p27 bra 	LBB0_8;
// %bb.7:                               // %L276
	cvt.u16.u32 	%rs16, %r3334;
	and.b16  	%rs17, %rs16, 255;
	mul.lo.s16 	%rs18, %rs17, 171;
	shr.u16 	%rs19, %rs18, 10;
	mul.lo.s16 	%rs20, %rs19, 6;
	sub.s16 	%rs21, %rs16, %rs20;
	and.b16  	%rs22, %rs21, 255;
	cvt.rn.f32.u16 	%f123, %rs22;
	div.approx.f32 	%f125, %f123, %f193;
	add.f32 	%f126, %f125, %f125;
	mov.b32 	%r297, %f126;
	and.b32  	%r298, %r297, -2147483648;
	or.b32  	%r299, %r298, 1056964608;
	mov.b32 	%f127, %r299;
	add.f32 	%f128, %f126, %f127;
	cvt.rzi.f32.f32 	%f129, %f128;
	abs.f32 	%f130, %f126;
	setp.gt.f32 	%p28, %f130, 0f4B000000;
	selp.f32 	%f131, %f126, %f129, %p28;
	cvt.rzi.f32.f32 	%f132, %f126;
	setp.lt.f32 	%p29, %f130, 0f3F000000;
	selp.f32 	%f133, %f132, %f131, %p29;
	cvt.rzi.s32.f32 	%r300, %f133;
	fma.rn.f32 	%f134, %f133, 0fBF000000, %f125;
	mul.f32 	%f135, %f134, 0f34222169;
	fma.rn.f32 	%f136, %f134, 0f40490FDA, %f135;
	mul.f32 	%f137, %f136, %f136;
	fma.rn.f32 	%f138, %f137, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f139, %f138, %f137, 0f3D2AAABB;
	fma.rn.f32 	%f140, %f139, %f137, 0fBEFFFFFF;
	fma.rn.f32 	%f141, %f140, %f137, 0f3F800000;
	fma.rn.f32 	%f142, %f137, %f136, 0f00000000;
	fma.rn.f32 	%f143, %f137, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f144, %f143, %f137, 0fBE2AAAA8;
	fma.rn.f32 	%f145, %f144, %f142, %f136;
	and.b32  	%r301, %r300, 1;
	setp.eq.b32 	%p30, %r301, 1;
	selp.f32 	%f146, %f141, %f145, %p30;
	selp.f32 	%f147, %f145, %f141, %p30;
	and.b32  	%r302, %r300, 2;
	setp.eq.s32 	%p31, %r302, 0;
	neg.f32 	%f148, %f146;
	selp.f32 	%f149, %f146, %f148, %p31;
	add.s32 	%r303, %r300, 1;
	and.b32  	%r304, %r303, 2;
	setp.eq.s32 	%p32, %r304, 0;
	mov.f32 	%f150, 0f00000000;
	sub.f32 	%f151, %f150, %f147;
	selp.f32 	%f152, %f147, %f151, %p32;
	cvt.rzi.f32.f32 	%f153, %f125;
	setp.eq.f32 	%p33, %f153, %f125;
	mul.f32 	%f154, %f125, 0f00000000;
	selp.f32 	%f199, %f154, %f149, %p33;
	abs.f32 	%f155, %f125;
	setp.gt.f32 	%p34, %f155, 0f4B800000;
	add.f32 	%f156, %f199, 0f3F800000;
	selp.f32 	%f198, %f156, %f152, %p34;
LBB0_8:                                 // %L291
	selp.f32 	%f52, %f51, %f46, %p8;
	or.pred  	%p37, %p17, %p26;
	mov.f32 	%f201, %f200;
	@%p37 bra 	LBB0_10;
// %bb.9:                               // %L299
	cvt.u16.u32 	%rs23, %r3335;
	and.b16  	%rs24, %rs23, 255;
	mul.lo.s16 	%rs25, %rs24, 171;
	shr.u16 	%rs26, %rs25, 10;
	mul.lo.s16 	%rs27, %rs26, 6;
	sub.s16 	%rs28, %rs23, %rs27;
	and.b16  	%rs29, %rs28, 255;
	cvt.rn.f32.u16 	%f158, %rs29;
	div.approx.f32 	%f160, %f158, %f193;
	add.f32 	%f161, %f160, %f160;
	mov.b32 	%r306, %f161;
	and.b32  	%r307, %r306, -2147483648;
	or.b32  	%r308, %r307, 1056964608;
	mov.b32 	%f162, %r308;
	add.f32 	%f163, %f161, %f162;
	cvt.rzi.f32.f32 	%f164, %f163;
	abs.f32 	%f165, %f161;
	setp.gt.f32 	%p38, %f165, 0f4B000000;
	selp.f32 	%f166, %f161, %f164, %p38;
	cvt.rzi.f32.f32 	%f167, %f161;
	setp.lt.f32 	%p39, %f165, 0f3F000000;
	selp.f32 	%f168, %f167, %f166, %p39;
	cvt.rzi.s32.f32 	%r309, %f168;
	fma.rn.f32 	%f169, %f168, 0fBF000000, %f160;
	mul.f32 	%f170, %f169, 0f34222169;
	fma.rn.f32 	%f171, %f169, 0f40490FDA, %f170;
	mul.f32 	%f172, %f171, %f171;
	fma.rn.f32 	%f173, %f172, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f174, %f173, %f172, 0f3D2AAABB;
	fma.rn.f32 	%f175, %f174, %f172, 0fBEFFFFFF;
	fma.rn.f32 	%f176, %f175, %f172, 0f3F800000;
	fma.rn.f32 	%f177, %f172, %f171, 0f00000000;
	fma.rn.f32 	%f178, %f172, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f179, %f178, %f172, 0fBE2AAAA8;
	fma.rn.f32 	%f180, %f179, %f177, %f171;
	and.b32  	%r310, %r309, 1;
	setp.eq.b32 	%p40, %r310, 1;
	selp.f32 	%f181, %f176, %f180, %p40;
	selp.f32 	%f182, %f180, %f176, %p40;
	and.b32  	%r311, %r309, 2;
	setp.eq.s32 	%p41, %r311, 0;
	neg.f32 	%f183, %f181;
	selp.f32 	%f184, %f181, %f183, %p41;
	add.s32 	%r312, %r309, 1;
	and.b32  	%r313, %r312, 2;
	setp.eq.s32 	%p42, %r313, 0;
	mov.f32 	%f185, 0f00000000;
	sub.f32 	%f186, %f185, %f182;
	selp.f32 	%f187, %f182, %f186, %p42;
	cvt.rzi.f32.f32 	%f188, %f160;
	setp.eq.f32 	%p43, %f188, %f160;
	mul.f32 	%f189, %f160, 0f00000000;
	selp.f32 	%f201, %f189, %f184, %p43;
	abs.f32 	%f190, %f160;
	setp.gt.f32 	%p44, %f190, 0f4B800000;
	add.f32 	%f191, %f201, 0f3F800000;
	selp.f32 	%f200, %f191, %f187, %p44;
LBB0_10:                                // %L314
	mov.b32 	%r255, %f52;
	mov.b32 	%r258, %f49;
	mov.b32 	%r315, %f198;
	mov.b32 	%r316, %f200;
	mov.b32 	%r321, %f199;
	mov.b32 	%r322, %f201;
	mov.u32 	%r3337, 999999999;
	cvt.u16.u32 	%rs283, %r3;
	@%p26 bra 	LBB0_12;
// %bb.11:                              // %L350
	ld.param.u64 	%rd1, [_Z15julia_frb_1084813CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1];
	and.b16  	%rs31, %rs283, 255;
	mul.lo.s16 	%rs32, %rs31, 171;
	shr.u16 	%rs33, %rs32, 12;
	mul.lo.s16 	%rs34, %rs33, 24;
	sub.s16 	%rs35, %rs283, %rs34;
	cvt.u32.u16 	%r327, %rs35;
	and.b32  	%r328, %r327, 255;
	mad.lo.s32 	%r329, %r328, 24, %r1;
	cvt.u16.u32 	%rs36, %r329;
	mul.hi.u16 	%rs37, %rs36, -7281;
	shr.u16 	%rs38, %rs37, 9;
	mul.lo.s16 	%rs39, %rs38, 576;
	sub.s16 	%rs40, %rs36, %rs39;
	cvt.u32.u16 	%r330, %rs40;
	mul.wide.u32 	%rd19, %r330, 4;
	add.s64 	%rd20, %rd1, %rd19;
	ld.global.u32 	%r331, [%rd20];
	cvt.s32.s16 	%r332, %r331;
	shr.s32 	%r333, %r331, 16;
	mul.lo.s32 	%r334, %r333, 801;
	mad.lo.s32 	%r3337, %r332, 33, %r334;
LBB0_12:                                // %L428
	xor.b32  	%r254, %r258, -2147483648;
	mov.b32 	%r291, %f194;
	mov.b32 	%r292, %f196;
	mov.b32 	%r294, %f195;
	mov.b32 	%r295, %f197;
	xor.b32  	%r318, %r321, -2147483648;
	xor.b32  	%r319, %r322, -2147483648;
	and.b32  	%r20, %r3, 24;
	setp.ne.s32 	%p46, %r20, 24;
	cvt.u16.u32 	%rs284, %r6;
	@%p46 bra 	LBB0_14;
// %bb.13:                              // %L428.L735_crit_edge
	mul.lo.s16 	%rs54, %rs284, 171;
	shr.u16 	%rs55, %rs54, 10;
	mul.lo.s16 	%rs56, %rs55, 6;
	sub.s16 	%rs57, %rs284, %rs56;
	cvt.u32.u16 	%r349, %rs57;
	and.b32  	%r3341, %r349, 255;
	cvt.u16.u32 	%rs58, %r1;
	and.b16  	%rs59, %rs58, 255;
	mul.lo.s16 	%rs60, %rs59, 171;
	shr.u16 	%rs61, %rs60, 10;
	cvt.u32.u16 	%r3340, %rs61;
	mul.lo.s16 	%rs62, %rs61, -6;
	add.s16 	%rs63, %rs62, %rs58;
	cvt.u32.u16 	%r351, %rs63;
	and.b32  	%r3339, %r351, 255;
	mul.wide.u16 	%r3338, %rs61, 6;
	mov.u32 	%r3342, 0;
	mov.u32 	%r3343, %r3342;
	bra.uni 	LBB0_15;
LBB0_14:                                // %L454
	ld.param.u64 	%rd2, [_Z15julia_frb_1084813CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2];
	cvt.u16.u32 	%rs41, %r1;
	and.b16  	%rs42, %rs41, 255;
	mul.lo.s16 	%rs43, %rs42, 171;
	shr.u16 	%rs44, %rs43, 10;
	mul.lo.s16 	%rs45, %rs44, -6;
	add.s16 	%rs46, %rs45, %rs41;
	cvt.u32.u16 	%r336, %rs46;
	and.b32  	%r3339, %r336, 255;
	mul.lo.s32 	%r337, %r4, 576;
	cvt.u32.u16 	%r3340, %rs44;
	mul.wide.u16 	%r3338, %rs44, 6;
	mul.lo.s16 	%rs48, %rs284, 171;
	shr.u16 	%rs49, %rs48, 10;
	mul.lo.s16 	%rs50, %rs49, 6;
	sub.s16 	%rs51, %rs284, %rs50;
	cvt.u32.u16 	%r338, %rs51;
	and.b32  	%r3341, %r338, 255;
	and.b16  	%rs52, %rs51, 255;
	mul.wide.u16 	%r339, %rs52, 24;
	mad.lo.s32 	%r340, %r5, 144, %r337;
	or.b32  	%r341, %r340, %r3339;
	add.s32 	%r342, %r341, %r3338;
	add.s32 	%r343, %r342, %r339;
	mul.wide.u32 	%rd21, %r343, 4;
	add.s64 	%rd22, %rd2, %rd21;
	ld.global.u32 	%r3342, [%rd22];
	add.s32 	%r344, %r340, 32256;
	or.b32  	%r345, %r344, %r3339;
	add.s32 	%r346, %r345, %r3338;
	add.s32 	%r347, %r346, %r339;
	mul.wide.u32 	%rd23, %r347, 4;
	add.s64 	%rd24, %rd2, %rd23;
	ld.global.u32 	%r3343, [%rd24];
LBB0_15:                                // %L735
	ld.param.u64 	%rd3, [_Z15julia_frb_1084813CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z15julia_frb_1084813CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4];
	// begin inline asm
	cvt.rn.f16x2.f32 %r253, %r255, %r254;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r256, %r258, %r255;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r290, %r292, %r291;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r293, %r295, %r294;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r314, %r316, %r315;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r317, %r319, %r318;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r320, %r322, %r321;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r323, %r316, %r315;
	// end inline asm
	mov.u32 	%r3336, 0;
	shl.b32 	%r353, %r3, 2;
	and.b32  	%r354, %r353, 60;
	shr.u32 	%r355, %r3, 4;
	mul.lo.s32 	%r37, %r355, 7168;
	shl.b32 	%r38, %r4, 7;
	add.s32 	%r356, %r37, %r38;
	or.b32  	%r39, %r356, %r354;
	or.b32  	%r40, %r353, 64;
	add.s32 	%r41, %r1, 24;
	and.b16  	%rs1, %rs283, 16;
	and.b32  	%r357, %r9, 30;
	or.b32  	%r358, %r357, %r355;
	mul.lo.s32 	%r42, %r358, 257;
	or.b32  	%r359, %r355, %r9;
	or.b32  	%r360, %r359, 32;
	mul.lo.s32 	%r43, %r360, 257;
	shr.u32 	%r361, %r1, 3;
	and.b16  	%rs65, %rs283, 255;
	mul.lo.s16 	%rs66, %rs65, 171;
	shr.u16 	%rs67, %rs66, 12;
	mul.lo.s16 	%rs68, %rs67, 24;
	sub.s16 	%rs69, %rs283, %rs68;
	cvt.u32.u16 	%r362, %rs69;
	and.b32  	%r44, %r362, 255;
	and.b32  	%r363, %r2, 224;
	mad.lo.s32 	%r45, %r361, 257, %r363;
	shr.u32 	%r364, %r41, 3;
	mad.lo.s32 	%r46, %r364, 257, %r363;
	add.s32 	%r365, %r1, 48;
	shr.u32 	%r366, %r365, 3;
	mad.lo.s32 	%r47, %r366, 257, %r363;
	add.s32 	%r367, %r1, 72;
	shr.u32 	%r368, %r367, 3;
	mad.lo.s32 	%r48, %r368, 257, %r363;
	or.b32  	%r369, %r361, 12;
	mad.lo.s32 	%r49, %r369, 257, %r363;
	add.s32 	%r370, %r1, 120;
	shr.u32 	%r371, %r370, 3;
	mad.lo.s32 	%r50, %r371, 257, %r363;
	add.s32 	%r372, %r1, 144;
	shr.u32 	%r373, %r372, 3;
	mad.lo.s32 	%r51, %r373, 257, %r363;
	add.s32 	%r374, %r1, 168;
	shr.u32 	%r375, %r374, 3;
	mad.lo.s32 	%r52, %r375, 257, %r363;
	or.b32  	%r376, %r361, 24;
	mad.lo.s32 	%r53, %r376, 257, %r363;
	add.s32 	%r377, %r1, 216;
	shr.u32 	%r378, %r377, 3;
	mad.lo.s32 	%r54, %r378, 257, %r363;
	add.s32 	%r379, %r1, 240;
	shr.u32 	%r380, %r379, 3;
	mad.lo.s32 	%r55, %r380, 257, %r363;
	add.s32 	%r381, %r1, 264;
	shr.u32 	%r382, %r381, 3;
	mad.lo.s32 	%r56, %r382, 257, %r363;
	or.b32  	%r383, %r361, 36;
	mad.lo.s32 	%r57, %r383, 257, %r363;
	add.s32 	%r384, %r1, 312;
	shr.u32 	%r385, %r384, 3;
	mad.lo.s32 	%r58, %r385, 257, %r363;
	add.s32 	%r386, %r1, 336;
	shr.u32 	%r387, %r386, 3;
	mad.lo.s32 	%r59, %r387, 257, %r363;
	add.s32 	%r388, %r1, 360;
	shr.u32 	%r389, %r388, 3;
	mad.lo.s32 	%r60, %r389, 257, %r363;
	or.b32  	%r390, %r361, 48;
	mad.lo.s32 	%r61, %r390, 257, %r363;
	add.s32 	%r391, %r1, 408;
	shr.u32 	%r392, %r391, 3;
	mad.lo.s32 	%r62, %r392, 257, %r363;
	add.s32 	%r393, %r1, 432;
	shr.u32 	%r394, %r393, 3;
	mad.lo.s32 	%r63, %r394, 257, %r363;
	add.s32 	%r395, %r1, 456;
	shr.u32 	%r396, %r395, 3;
	mad.lo.s32 	%r64, %r396, 257, %r363;
	or.b32  	%r397, %r361, 60;
	mad.lo.s32 	%r65, %r397, 257, %r363;
	add.s32 	%r398, %r1, 504;
	bfe.u32 	%r399, %r398, 3, 6;
	mad.lo.s32 	%r66, %r399, 257, %r363;
	mul.lo.s32 	%r400, %r5, 4806;
	mad.lo.s32 	%r401, %r3340, 198, %r400;
	mad.lo.s32 	%r402, %r3339, 33, %r401;
	mad.lo.s32 	%r403, %r3341, 801, %r402;
	and.b32  	%r404, %r6, 1;
	mul.lo.s32 	%r405, %r404, 1028;
	and.b32  	%r406, %r3, 1;
	mul.lo.s32 	%r407, %r406, 4112;
	mul.lo.s32 	%r408, %r355, 257;
	bfe.u32 	%r409, %r3, 3, 1;
	mul.lo.s32 	%r410, %r409, 514;
	bfe.u32 	%r411, %r3, 1, 1;
	mul.lo.s32 	%r412, %r411, 2056;
	add.s32 	%r413, %r408, %r407;
	add.s32 	%r414, %r413, %r405;
	add.s32 	%r415, %r414, %r410;
	add.s32 	%r416, %r415, %r3339;
	add.s32 	%r417, %r416, %r412;
	add.s32 	%r67, %r417, %r3338;
	mul.wide.u32 	%rd25, %r67, 4;
	mov.u64 	%rd26, shmem;
	add.s64 	%rd6, %rd26, %rd25;
	add.s32 	%r68, %r67, 8256;
	cvt.u64.u32 	%rd27, %r3338;
	cvt.u64.u32 	%rd28, %r412;
	cvt.u64.u32 	%rd29, %r3339;
	cvt.u64.u32 	%rd30, %r410;
	cvt.u64.u32 	%rd31, %r405;
	cvt.u64.u32 	%rd32, %r408;
	cvt.u64.u32 	%rd33, %r407;
	add.s64 	%rd34, %rd33, %rd32;
	add.s64 	%rd35, %rd34, %rd31;
	add.s64 	%rd36, %rd35, %rd30;
	add.s64 	%rd37, %rd36, %rd29;
	add.s64 	%rd38, %rd37, %rd28;
	add.s64 	%rd39, %rd38, %rd27;
	shl.b64 	%rd40, %rd39, 2;
	add.s64 	%rd7, %rd26, %rd40;
	add.s32 	%r69, %r67, 32;
	add.s32 	%r70, %r67, 8288;
	bfe.u32 	%r418, %r1, 2, 1;
	mul.lo.s32 	%r419, %r418, 1028;
	and.b32  	%r420, %r1, 1;
	mul.lo.s32 	%r421, %r420, 4112;
	shr.u32 	%r422, %r1, 4;
	mul.lo.s32 	%r423, %r422, 257;
	bfe.u32 	%r424, %r1, 3, 1;
	mul.lo.s32 	%r425, %r424, 514;
	mul.lo.s32 	%r426, %r5, 6;
	bfe.u32 	%r427, %r1, 1, 1;
	mul.lo.s32 	%r428, %r427, 2056;
	add.s32 	%r429, %r423, %r421;
	add.s32 	%r430, %r429, %r426;
	add.s32 	%r431, %r430, %r419;
	add.s32 	%r432, %r431, %r425;
	add.s32 	%r433, %r432, %r428;
	add.s32 	%r71, %r433, %r3341;
	mul.wide.u32 	%rd41, %r71, 4;
	add.s64 	%rd8, %rd26, %rd41;
	add.s32 	%r72, %r71, 8256;
	cvt.u64.u32 	%rd42, %r3341;
	cvt.u64.u32 	%rd43, %r428;
	cvt.u64.u32 	%rd44, %r425;
	cvt.u64.u32 	%rd45, %r419;
	cvt.u64.u32 	%rd46, %r426;
	cvt.u64.u32 	%rd47, %r423;
	cvt.u64.u32 	%rd48, %r421;
	add.s64 	%rd49, %rd48, %rd47;
	add.s64 	%rd50, %rd49, %rd46;
	add.s64 	%rd51, %rd50, %rd45;
	add.s64 	%rd52, %rd51, %rd44;
	add.s64 	%rd53, %rd52, %rd43;
	add.s64 	%rd54, %rd53, %rd42;
	shl.b64 	%rd55, %rd54, 2;
	add.s64 	%rd9, %rd26, %rd55;
	add.s32 	%r73, %r71, 32;
	add.s32 	%r74, %r71, 8288;
	cvt.u16.u32 	%rs70, %r1;
	shl.b16 	%rs71, %rs70, 1;
	and.b16  	%rs72, %rs71, 254;
	mul.lo.s16 	%rs73, %rs72, 171;
	shr.u16 	%rs74, %rs73, 13;
	mul.lo.s16 	%rs75, %rs74, 48;
	sub.s16 	%rs76, %rs71, %rs75;
	cvt.u32.u16 	%r434, %rs76;
	and.b32  	%r435, %r434, 254;
	mul.lo.s32 	%r436, %r4, 59904;
	or.b32  	%r437, %r436, %r44;
	mad.lo.s32 	%r75, %r435, 24, %r437;
	or.b16  	%rs77, %rs71, 1;
	and.b16  	%rs78, %rs77, 255;
	mul.lo.s16 	%rs79, %rs78, 171;
	shr.u16 	%rs80, %rs79, 13;
	mul.lo.s16 	%rs81, %rs80, 48;
	sub.s16 	%rs82, %rs77, %rs81;
	cvt.u32.u16 	%r438, %rs82;
	and.b32  	%r439, %r438, 255;
	mad.lo.s32 	%r76, %r439, 24, %r437;
	mul.wide.u32 	%rd56, %r403, 4;
	add.s64 	%rd10, %rd26, %rd56;
	setp.gt.u32 	%p47, %r1, 7;
	setp.eq.s16 	%p48, %rs1, 0;
	setp.lt.u32 	%p50, %r3, 24;
	mov.u32 	%r3344, %r3336;
	mov.u32 	%r3375, %r3336;
	mov.u32 	%r3376, %r3336;
	mov.u32 	%r3377, %r3336;
	mov.u32 	%r3378, %r3336;
	bra.uni 	LBB0_16;
LBB0_37:                                // %guard_pass14622
                                        //   in Loop: Header=BB0_16 Depth=1
	add.s32 	%r251, %r3344, 48;
	setp.ne.s32 	%p76, %r3344, 2016;
	mov.u32 	%r3344, %r251;
	@%p76 bra 	LBB0_16;
	bra.uni 	LBB0_38;
LBB0_16:                                // %L738
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_18 Depth 2
                                        //     Child Loop BB0_28 Depth 2
	mul.hi.u32 	%r633, %r3344, -1431655765;
	shr.u32 	%r634, %r633, 5;
	mul.lo.s32 	%r82, %r634, 48;
	add.s32 	%r635, %r82, %r1;
	cvt.u16.u32 	%rs83, %r635;
	mul.hi.s16 	%rs84, %rs83, 16257;
	shr.u16 	%rs85, %rs84, 15;
	shr.s16 	%rs86, %rs84, 9;
	add.s16 	%rs87, %rs86, %rs85;
	mul.lo.s16 	%rs88, %rs87, 2064;
	sub.s16 	%rs89, %rs83, %rs88;
	mul.wide.s16 	%r636, %rs89, 14336;
	add.s32 	%r637, %r39, %r636;
	mul.wide.s32 	%rd57, %r637, 4;
	add.s64 	%rd58, %rd3, %rd57;
	ld.global.v4.u32 	{%r638, %r639, %r640, %r641}, [%rd58];
	add.s32 	%r642, %r636, %r37;
	or.b32  	%r643, %r40, %r642;
	add.s32 	%r644, %r643, %r38;
	mul.wide.s32 	%rd59, %r644, 4;
	add.s64 	%rd60, %rd3, %rd59;
	ld.global.v4.u32 	{%r645, %r646, %r647, %r648}, [%rd60];
	add.s32 	%r649, %r41, %r82;
	cvt.u16.u32 	%rs90, %r649;
	mul.hi.s16 	%rs91, %rs90, 16257;
	shr.u16 	%rs92, %rs91, 15;
	shr.s16 	%rs93, %rs91, 9;
	add.s16 	%rs94, %rs93, %rs92;
	mul.lo.s16 	%rs95, %rs94, 2064;
	sub.s16 	%rs96, %rs90, %rs95;
	mul.wide.s16 	%r650, %rs96, 14336;
	add.s32 	%r651, %r39, %r650;
	mul.wide.s32 	%rd61, %r651, 4;
	add.s64 	%rd62, %rd3, %rd61;
	ld.global.v4.u32 	{%r652, %r653, %r654, %r655}, [%rd62];
	add.s32 	%r656, %r650, %r37;
	or.b32  	%r657, %r40, %r656;
	add.s32 	%r658, %r657, %r38;
	mul.wide.s32 	%rd63, %r658, 4;
	add.s64 	%rd64, %rd3, %rd63;
	ld.global.v4.u32 	{%r659, %r660, %r661, %r662}, [%rd64];
	selp.b32 	%r663, %r640, %r638, %p48;
	shfl.sync.bfly.b32	%r664, %r663, 16, 31, -1;
	selp.b32 	%r442, %r638, %r664, %p48;
	selp.b32 	%r447, %r664, %r640, %p48;
	selp.b32 	%r665, %r641, %r639, %p48;
	shfl.sync.bfly.b32	%r666, %r665, 16, 31, -1;
	selp.b32 	%r450, %r639, %r666, %p48;
	selp.b32 	%r455, %r666, %r641, %p48;
	selp.b32 	%r667, %r647, %r645, %p48;
	shfl.sync.bfly.b32	%r668, %r667, 16, 31, -1;
	selp.b32 	%r458, %r645, %r668, %p48;
	selp.b32 	%r463, %r668, %r647, %p48;
	selp.b32 	%r669, %r648, %r646, %p48;
	shfl.sync.bfly.b32	%r670, %r669, 16, 31, -1;
	selp.b32 	%r466, %r646, %r670, %p48;
	selp.b32 	%r471, %r670, %r648, %p48;
	selp.b32 	%r671, %r654, %r652, %p48;
	shfl.sync.bfly.b32	%r672, %r671, 16, 31, -1;
	selp.b32 	%r474, %r652, %r672, %p48;
	selp.b32 	%r479, %r672, %r654, %p48;
	selp.b32 	%r673, %r655, %r653, %p48;
	shfl.sync.bfly.b32	%r674, %r673, 16, 31, -1;
	selp.b32 	%r482, %r653, %r674, %p48;
	selp.b32 	%r487, %r674, %r655, %p48;
	selp.b32 	%r675, %r661, %r659, %p48;
	shfl.sync.bfly.b32	%r676, %r675, 16, 31, -1;
	selp.b32 	%r490, %r659, %r676, %p48;
	selp.b32 	%r495, %r676, %r661, %p48;
	selp.b32 	%r677, %r662, %r660, %p48;
	shfl.sync.bfly.b32	%r678, %r677, 16, 31, -1;
	selp.b32 	%r498, %r660, %r678, %p48;
	selp.b32 	%r503, %r678, %r662, %p48;
	shl.b32 	%r443, %r447, 4;
	mov.u32 	%r441, 252645135;
	// begin inline asm
	lop3.b32 %r505, %r441, %r442, %r443, 202;
	// end inline asm
	shr.u32 	%r446, %r442, 4;
	// begin inline asm
	lop3.b32 %r521, %r441, %r446, %r447, 202;
	// end inline asm
	shl.b32 	%r451, %r455, 4;
	// begin inline asm
	lop3.b32 %r513, %r441, %r450, %r451, 202;
	// end inline asm
	shr.u32 	%r454, %r450, 4;
	// begin inline asm
	lop3.b32 %r529, %r441, %r454, %r455, 202;
	// end inline asm
	shl.b32 	%r459, %r463, 4;
	// begin inline asm
	lop3.b32 %r537, %r441, %r458, %r459, 202;
	// end inline asm
	shr.u32 	%r462, %r458, 4;
	// begin inline asm
	lop3.b32 %r553, %r441, %r462, %r463, 202;
	// end inline asm
	shl.b32 	%r467, %r471, 4;
	// begin inline asm
	lop3.b32 %r545, %r441, %r466, %r467, 202;
	// end inline asm
	shr.u32 	%r470, %r466, 4;
	// begin inline asm
	lop3.b32 %r561, %r441, %r470, %r471, 202;
	// end inline asm
	shl.b32 	%r475, %r479, 4;
	// begin inline asm
	lop3.b32 %r506, %r441, %r474, %r475, 202;
	// end inline asm
	shr.u32 	%r478, %r474, 4;
	// begin inline asm
	lop3.b32 %r522, %r441, %r478, %r479, 202;
	// end inline asm
	shl.b32 	%r483, %r487, 4;
	// begin inline asm
	lop3.b32 %r514, %r441, %r482, %r483, 202;
	// end inline asm
	shr.u32 	%r486, %r482, 4;
	// begin inline asm
	lop3.b32 %r530, %r441, %r486, %r487, 202;
	// end inline asm
	shl.b32 	%r491, %r495, 4;
	// begin inline asm
	lop3.b32 %r538, %r441, %r490, %r491, 202;
	// end inline asm
	shr.u32 	%r494, %r490, 4;
	// begin inline asm
	lop3.b32 %r554, %r441, %r494, %r495, 202;
	// end inline asm
	shl.b32 	%r499, %r503, 4;
	// begin inline asm
	lop3.b32 %r546, %r441, %r498, %r499, 202;
	// end inline asm
	shr.u32 	%r502, %r498, 4;
	// begin inline asm
	lop3.b32 %r562, %r441, %r502, %r503, 202;
	// end inline asm
	mov.u32 	%r507, 25152;
	// begin inline asm
	prmt.b32 %r569, %r505, %r506, %r507;
	// end inline asm
	mov.u32 	%r511, 29521;
	// begin inline asm
	prmt.b32 %r601, %r505, %r506, %r511;
	// end inline asm
	// begin inline asm
	prmt.b32 %r577, %r513, %r514, %r507;
	// end inline asm
	// begin inline asm
	prmt.b32 %r609, %r513, %r514, %r511;
	// end inline asm
	// begin inline asm
	prmt.b32 %r570, %r521, %r522, %r507;
	// end inline asm
	// begin inline asm
	prmt.b32 %r602, %r521, %r522, %r511;
	// end inline asm
	// begin inline asm
	prmt.b32 %r578, %r529, %r530, %r507;
	// end inline asm
	// begin inline asm
	prmt.b32 %r610, %r529, %r530, %r511;
	// end inline asm
	// begin inline asm
	prmt.b32 %r585, %r537, %r538, %r507;
	// end inline asm
	// begin inline asm
	prmt.b32 %r617, %r537, %r538, %r511;
	// end inline asm
	// begin inline asm
	prmt.b32 %r593, %r545, %r546, %r507;
	// end inline asm
	// begin inline asm
	prmt.b32 %r625, %r545, %r546, %r511;
	// end inline asm
	// begin inline asm
	prmt.b32 %r586, %r553, %r554, %r507;
	// end inline asm
	// begin inline asm
	prmt.b32 %r618, %r553, %r554, %r511;
	// end inline asm
	// begin inline asm
	prmt.b32 %r594, %r561, %r562, %r507;
	// end inline asm
	// begin inline asm
	prmt.b32 %r626, %r561, %r562, %r511;
	// end inline asm
	mov.u32 	%r627, 21520;
	// begin inline asm
	prmt.b32 %r568, %r569, %r570, %r627;
	// end inline asm
	mov.u32 	%r631, 30258;
	// begin inline asm
	prmt.b32 %r572, %r569, %r570, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r576, %r577, %r578, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r580, %r577, %r578, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r584, %r585, %r586, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r588, %r585, %r586, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r592, %r593, %r594, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r596, %r593, %r594, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r600, %r601, %r602, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r604, %r601, %r602, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r608, %r609, %r610, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r612, %r609, %r610, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r616, %r617, %r618, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r620, %r617, %r618, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r624, %r625, %r626, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r628, %r625, %r626, %r631;
	// end inline asm
	mul.hi.s16 	%rs97, %rs83, 10923;
	shr.u16 	%rs98, %rs97, 15;
	shr.s16 	%rs99, %rs97, 2;
	add.s16 	%rs100, %rs99, %rs98;
	mul.lo.s16 	%rs101, %rs100, 24;
	sub.s16 	%rs102, %rs83, %rs101;
	cvt.s32.s16 	%r679, %rs102;
	add.s32 	%r680, %r42, %r679;
	mul.wide.s32 	%rd65, %r680, 4;
	add.s64 	%rd67, %rd26, %rd65;
	st.shared.u32 	[%rd67], %r568;
	st.shared.u32 	[%rd67+512], %r576;
	st.shared.u32 	[%rd67+256], %r572;
	st.shared.u32 	[%rd67+768], %r580;
	add.s32 	%r681, %r43, %r679;
	mul.wide.s32 	%rd68, %r681, 4;
	add.s64 	%rd69, %rd26, %rd68;
	st.shared.u32 	[%rd69], %r584;
	st.shared.u32 	[%rd69+512], %r592;
	st.shared.u32 	[%rd69+256], %r588;
	st.shared.u32 	[%rd69+768], %r596;
	st.shared.u32 	[%rd67+128], %r600;
	st.shared.u32 	[%rd67+640], %r608;
	st.shared.u32 	[%rd67+384], %r604;
	st.shared.u32 	[%rd67+896], %r612;
	st.shared.u32 	[%rd69+128], %r616;
	st.shared.u32 	[%rd69+640], %r624;
	st.shared.u32 	[%rd69+384], %r620;
	st.shared.u32 	[%rd69+896], %r628;
	bar.sync 	0;
	add.s32 	%r682, %r82, %r44;
	cvt.u16.u32 	%rs103, %r682;
	mul.hi.s16 	%rs104, %rs103, 10923;
	shr.u16 	%rs105, %rs104, 15;
	shr.s16 	%rs106, %rs104, 2;
	add.s16 	%rs107, %rs106, %rs105;
	mul.lo.s16 	%rs108, %rs107, 24;
	sub.s16 	%rs109, %rs103, %rs108;
	cvt.s32.s16 	%r683, %rs109;
	add.s32 	%r684, %r45, %r683;
	mul.wide.s32 	%rd70, %r684, 4;
	add.s64 	%rd71, %rd26, %rd70;
	ld.shared.u32 	%r685, [%rd71];
	add.s32 	%r686, %r46, %r683;
	mul.wide.u32 	%rd72, %r686, 4;
	add.s64 	%rd73, %rd26, %rd72;
	ld.shared.u32 	%r687, [%rd73];
	add.s32 	%r688, %r47, %r683;
	mul.wide.u32 	%rd74, %r688, 4;
	add.s64 	%rd75, %rd26, %rd74;
	ld.shared.u32 	%r689, [%rd75];
	add.s32 	%r690, %r48, %r683;
	mul.wide.u32 	%rd76, %r690, 4;
	add.s64 	%rd77, %rd26, %rd76;
	ld.shared.u32 	%r691, [%rd77];
	add.s32 	%r692, %r49, %r683;
	mul.wide.s32 	%rd78, %r692, 4;
	add.s64 	%rd79, %rd26, %rd78;
	ld.shared.u32 	%r693, [%rd79];
	add.s32 	%r694, %r50, %r683;
	mul.wide.u32 	%rd80, %r694, 4;
	add.s64 	%rd81, %rd26, %rd80;
	ld.shared.u32 	%r695, [%rd81];
	add.s32 	%r696, %r51, %r683;
	mul.wide.u32 	%rd82, %r696, 4;
	add.s64 	%rd83, %rd26, %rd82;
	ld.shared.u32 	%r697, [%rd83];
	add.s32 	%r698, %r52, %r683;
	mul.wide.u32 	%rd84, %r698, 4;
	add.s64 	%rd85, %rd26, %rd84;
	ld.shared.u32 	%r699, [%rd85];
	add.s32 	%r700, %r53, %r683;
	mul.wide.s32 	%rd86, %r700, 4;
	add.s64 	%rd87, %rd26, %rd86;
	ld.shared.u32 	%r701, [%rd87];
	add.s32 	%r702, %r54, %r683;
	mul.wide.u32 	%rd88, %r702, 4;
	add.s64 	%rd89, %rd26, %rd88;
	ld.shared.u32 	%r703, [%rd89];
	add.s32 	%r704, %r55, %r683;
	mul.wide.u32 	%rd90, %r704, 4;
	add.s64 	%rd91, %rd26, %rd90;
	ld.shared.u32 	%r705, [%rd91];
	add.s32 	%r706, %r56, %r683;
	mul.wide.u32 	%rd92, %r706, 4;
	add.s64 	%rd93, %rd26, %rd92;
	ld.shared.u32 	%r707, [%rd93];
	add.s32 	%r708, %r57, %r683;
	mul.wide.s32 	%rd94, %r708, 4;
	add.s64 	%rd95, %rd26, %rd94;
	ld.shared.u32 	%r709, [%rd95];
	add.s32 	%r710, %r58, %r683;
	mul.wide.u32 	%rd96, %r710, 4;
	add.s64 	%rd97, %rd26, %rd96;
	ld.shared.u32 	%r711, [%rd97];
	add.s32 	%r712, %r59, %r683;
	mul.wide.u32 	%rd98, %r712, 4;
	add.s64 	%rd99, %rd26, %rd98;
	ld.shared.u32 	%r713, [%rd99];
	add.s32 	%r714, %r60, %r683;
	mul.wide.u32 	%rd100, %r714, 4;
	add.s64 	%rd101, %rd26, %rd100;
	ld.shared.u32 	%r715, [%rd101];
	add.s32 	%r716, %r61, %r683;
	mul.wide.s32 	%rd102, %r716, 4;
	add.s64 	%rd103, %rd26, %rd102;
	ld.shared.u32 	%r717, [%rd103];
	add.s32 	%r718, %r62, %r683;
	mul.wide.u32 	%rd104, %r718, 4;
	add.s64 	%rd105, %rd26, %rd104;
	ld.shared.u32 	%r719, [%rd105];
	add.s32 	%r720, %r63, %r683;
	mul.wide.u32 	%rd106, %r720, 4;
	add.s64 	%rd107, %rd26, %rd106;
	ld.shared.u32 	%r721, [%rd107];
	add.s32 	%r722, %r64, %r683;
	mul.wide.u32 	%rd108, %r722, 4;
	add.s64 	%rd109, %rd26, %rd108;
	ld.shared.u32 	%r723, [%rd109];
	add.s32 	%r724, %r65, %r683;
	mul.wide.s32 	%rd110, %r724, 4;
	add.s64 	%rd111, %rd26, %rd110;
	ld.shared.u32 	%r725, [%rd111];
	add.s32 	%r726, %r66, %r683;
	mul.wide.s32 	%rd112, %r726, 4;
	add.s64 	%rd113, %rd26, %rd112;
	ld.shared.u32 	%r727, [%rd113];
	bar.sync 	0;
	shfl.sync.idx.b32	%r728, %r3337, 0, 31, -1;
	shfl.sync.idx.b32	%r729, %r3337, 1, 31, -1;
	shfl.sync.idx.b32	%r730, %r3337, 2, 31, -1;
	shfl.sync.idx.b32	%r731, %r3337, 3, 31, -1;
	shfl.sync.idx.b32	%r732, %r3337, 4, 31, -1;
	shfl.sync.idx.b32	%r733, %r3337, 5, 31, -1;
	shfl.sync.idx.b32	%r734, %r3337, 6, 31, -1;
	shfl.sync.idx.b32	%r735, %r3337, 7, 31, -1;
	shfl.sync.idx.b32	%r736, %r3337, 8, 31, -1;
	shfl.sync.idx.b32	%r737, %r3337, 9, 31, -1;
	shfl.sync.idx.b32	%r738, %r3337, 10, 31, -1;
	shfl.sync.idx.b32	%r739, %r3337, 11, 31, -1;
	shfl.sync.idx.b32	%r740, %r3337, 12, 31, -1;
	shfl.sync.idx.b32	%r741, %r3337, 13, 31, -1;
	shfl.sync.idx.b32	%r742, %r3337, 14, 31, -1;
	shfl.sync.idx.b32	%r743, %r3337, 15, 31, -1;
	shfl.sync.idx.b32	%r744, %r3337, 16, 31, -1;
	shfl.sync.idx.b32	%r745, %r3337, 17, 31, -1;
	shfl.sync.idx.b32	%r746, %r3337, 18, 31, -1;
	shfl.sync.idx.b32	%r747, %r3337, 19, 31, -1;
	shfl.sync.idx.b32	%r748, %r3337, 20, 31, -1;
	shfl.sync.idx.b32	%r749, %r3337, 21, 31, -1;
	shfl.sync.idx.b32	%r750, %r3337, 22, 31, -1;
	shfl.sync.idx.b32	%r751, %r3337, 23, 31, -1;
	add.s32 	%r752, %r728, %r683;
	mul.wide.s32 	%rd114, %r752, 4;
	add.s64 	%rd115, %rd26, %rd114;
	st.shared.u32 	[%rd115], %r685;
	add.s32 	%r753, %r729, %r683;
	mul.wide.s32 	%rd116, %r753, 4;
	add.s64 	%rd117, %rd26, %rd116;
	st.shared.u32 	[%rd117], %r687;
	add.s32 	%r754, %r730, %r683;
	mul.wide.s32 	%rd118, %r754, 4;
	add.s64 	%rd119, %rd26, %rd118;
	st.shared.u32 	[%rd119], %r689;
	add.s32 	%r755, %r731, %r683;
	mul.wide.s32 	%rd120, %r755, 4;
	add.s64 	%rd121, %rd26, %rd120;
	st.shared.u32 	[%rd121], %r691;
	add.s32 	%r756, %r732, %r683;
	mul.wide.s32 	%rd122, %r756, 4;
	add.s64 	%rd123, %rd26, %rd122;
	st.shared.u32 	[%rd123], %r693;
	add.s32 	%r757, %r733, %r683;
	mul.wide.s32 	%rd124, %r757, 4;
	add.s64 	%rd125, %rd26, %rd124;
	st.shared.u32 	[%rd125], %r695;
	add.s32 	%r758, %r734, %r683;
	mul.wide.s32 	%rd126, %r758, 4;
	add.s64 	%rd127, %rd26, %rd126;
	st.shared.u32 	[%rd127], %r697;
	add.s32 	%r759, %r735, %r683;
	mul.wide.s32 	%rd128, %r759, 4;
	add.s64 	%rd129, %rd26, %rd128;
	st.shared.u32 	[%rd129], %r699;
	add.s32 	%r760, %r736, %r683;
	mul.wide.s32 	%rd130, %r760, 4;
	add.s64 	%rd131, %rd26, %rd130;
	st.shared.u32 	[%rd131], %r701;
	add.s32 	%r761, %r737, %r683;
	mul.wide.s32 	%rd132, %r761, 4;
	add.s64 	%rd133, %rd26, %rd132;
	st.shared.u32 	[%rd133], %r703;
	add.s32 	%r762, %r738, %r683;
	mul.wide.s32 	%rd134, %r762, 4;
	add.s64 	%rd135, %rd26, %rd134;
	st.shared.u32 	[%rd135], %r705;
	add.s32 	%r763, %r739, %r683;
	mul.wide.s32 	%rd136, %r763, 4;
	add.s64 	%rd137, %rd26, %rd136;
	st.shared.u32 	[%rd137], %r707;
	add.s32 	%r764, %r740, %r683;
	mul.wide.s32 	%rd138, %r764, 4;
	add.s64 	%rd139, %rd26, %rd138;
	st.shared.u32 	[%rd139], %r709;
	add.s32 	%r765, %r741, %r683;
	mul.wide.s32 	%rd140, %r765, 4;
	add.s64 	%rd141, %rd26, %rd140;
	st.shared.u32 	[%rd141], %r711;
	add.s32 	%r766, %r742, %r683;
	mul.wide.s32 	%rd142, %r766, 4;
	add.s64 	%rd143, %rd26, %rd142;
	st.shared.u32 	[%rd143], %r713;
	add.s32 	%r767, %r743, %r683;
	mul.wide.s32 	%rd144, %r767, 4;
	add.s64 	%rd145, %rd26, %rd144;
	st.shared.u32 	[%rd145], %r715;
	add.s32 	%r768, %r744, %r683;
	mul.wide.s32 	%rd146, %r768, 4;
	add.s64 	%rd147, %rd26, %rd146;
	st.shared.u32 	[%rd147], %r717;
	add.s32 	%r769, %r745, %r683;
	mul.wide.s32 	%rd148, %r769, 4;
	add.s64 	%rd149, %rd26, %rd148;
	st.shared.u32 	[%rd149], %r719;
	add.s32 	%r770, %r746, %r683;
	mul.wide.s32 	%rd150, %r770, 4;
	add.s64 	%rd151, %rd26, %rd150;
	st.shared.u32 	[%rd151], %r721;
	add.s32 	%r771, %r747, %r683;
	mul.wide.s32 	%rd152, %r771, 4;
	add.s64 	%rd153, %rd26, %rd152;
	st.shared.u32 	[%rd153], %r723;
	add.s32 	%r772, %r748, %r683;
	mul.wide.s32 	%rd154, %r772, 4;
	add.s64 	%rd155, %rd26, %rd154;
	st.shared.u32 	[%rd155], %r725;
	selp.b32 	%r773, 0, %r727, %p47;
	add.s32 	%r774, %r749, %r683;
	mul.wide.s32 	%rd156, %r774, 4;
	add.s64 	%rd157, %rd26, %rd156;
	st.shared.u32 	[%rd157], %r773;
	add.s32 	%r775, %r750, %r683;
	mul.wide.s32 	%rd158, %r775, 4;
	add.s64 	%rd159, %rd26, %rd158;
	st.shared.u32 	[%rd159], %r3336;
	add.s32 	%r776, %r751, %r683;
	mul.wide.s32 	%rd160, %r776, 4;
	add.s64 	%rd161, %rd26, %rd160;
	st.shared.u32 	[%rd161], %r3336;
	bar.sync 	0;
	mov.u32 	%r3349, %r3336;
	mov.u32 	%r3350, %r3336;
	mov.u32 	%r3351, %r3336;
	mov.u32 	%r3352, %r3336;
	mov.u32 	%r3353, %r3336;
	mov.u32 	%r3354, %r3336;
	mov.u32 	%r3355, %r3336;
	mov.u32 	%r3356, %r3336;
	mov.u32 	%r3357, %r3336;
	mov.u32 	%r3358, %r3336;
	mov.u32 	%r3359, %r3336;
	mov.u32 	%r3360, %r3336;
	mov.u32 	%r3361, %r3336;
	mov.u32 	%r3362, %r3336;
	mov.u32 	%r3363, %r3336;
	mov.u32 	%r3364, %r3336;
	mov.u32 	%r3365, %r3336;
	mov.u32 	%r3366, %r3336;
	mov.u32 	%r3367, %r3336;
	mov.u32 	%r3368, %r3336;
	mov.u32 	%r3369, %r3336;
	mov.u32 	%r3370, %r3336;
	mov.u32 	%r3371, %r3336;
	mov.u32 	%r3372, %r3336;
	@%p46 bra 	LBB0_41;
	bra.uni 	LBB0_17;
LBB0_41:                                // %oksrem3295
                                        //   in Loop: Header=BB0_16 Depth=1
	cvt.u16.u32 	%rs110, %r82;
	mul.hi.s16 	%rs111, %rs110, 10923;
	shr.u16 	%rs112, %rs111, 15;
	shr.s16 	%rs113, %rs111, 2;
	add.s16 	%rs114, %rs113, %rs112;
	mul.lo.s16 	%rs115, %rs114, 24;
	sub.s16 	%rs116, %rs110, %rs115;
	cvt.s32.s16 	%r777, %rs116;
	mul.wide.s32 	%rd162, %r777, 4;
	add.s64 	%rd163, %rd10, %rd162;
	ld.shared.u32 	%r3349, [%rd163];
	ld.shared.u32 	%r3350, [%rd10+4];
	ld.shared.u32 	%r3351, [%rd10+8];
	ld.shared.u32 	%r3352, [%rd10+12];
	ld.shared.u32 	%r3353, [%rd10+16];
	ld.shared.u32 	%r3354, [%rd10+20];
	ld.shared.u32 	%r3355, [%rd10+24];
	ld.shared.u32 	%r3356, [%rd10+28];
	ld.shared.u32 	%r3357, [%rd10+32];
	ld.shared.u32 	%r3358, [%rd10+36];
	ld.shared.u32 	%r3359, [%rd10+40];
	ld.shared.u32 	%r3360, [%rd10+44];
	ld.shared.u32 	%r3361, [%rd10+48];
	ld.shared.u32 	%r3362, [%rd10+52];
	ld.shared.u32 	%r3363, [%rd10+56];
	ld.shared.u32 	%r3364, [%rd10+60];
	add.s16 	%rs117, %rs110, 16;
	mul.hi.s16 	%rs118, %rs117, 10923;
	shr.u16 	%rs119, %rs118, 15;
	shr.s16 	%rs120, %rs118, 2;
	add.s16 	%rs121, %rs120, %rs119;
	mul.lo.s16 	%rs122, %rs121, 24;
	sub.s16 	%rs123, %rs117, %rs122;
	cvt.s32.s16 	%r778, %rs123;
	mul.wide.s32 	%rd164, %r778, 4;
	add.s64 	%rd165, %rd10, %rd164;
	ld.shared.u32 	%r3365, [%rd165];
	add.s16 	%rs124, %rs110, 17;
	mul.hi.s16 	%rs125, %rs124, 10923;
	shr.u16 	%rs126, %rs125, 15;
	shr.s16 	%rs127, %rs125, 2;
	add.s16 	%rs128, %rs127, %rs126;
	mul.lo.s16 	%rs129, %rs128, 24;
	sub.s16 	%rs130, %rs124, %rs129;
	cvt.s32.s16 	%r779, %rs130;
	mul.wide.s32 	%rd166, %r779, 4;
	add.s64 	%rd167, %rd10, %rd166;
	ld.shared.u32 	%r3366, [%rd167];
	add.s16 	%rs131, %rs110, 18;
	mul.hi.s16 	%rs132, %rs131, 10923;
	shr.u16 	%rs133, %rs132, 15;
	shr.s16 	%rs134, %rs132, 2;
	add.s16 	%rs135, %rs134, %rs133;
	mul.lo.s16 	%rs136, %rs135, 24;
	sub.s16 	%rs137, %rs131, %rs136;
	cvt.s32.s16 	%r780, %rs137;
	mul.wide.s32 	%rd168, %r780, 4;
	add.s64 	%rd169, %rd10, %rd168;
	ld.shared.u32 	%r3367, [%rd169];
	add.s16 	%rs138, %rs110, 19;
	mul.hi.s16 	%rs139, %rs138, 10923;
	shr.u16 	%rs140, %rs139, 15;
	shr.s16 	%rs141, %rs139, 2;
	add.s16 	%rs142, %rs141, %rs140;
	mul.lo.s16 	%rs143, %rs142, 24;
	sub.s16 	%rs144, %rs138, %rs143;
	cvt.s32.s16 	%r781, %rs144;
	mul.wide.s32 	%rd170, %r781, 4;
	add.s64 	%rd171, %rd10, %rd170;
	ld.shared.u32 	%r3368, [%rd171];
	add.s16 	%rs145, %rs110, 20;
	mul.hi.s16 	%rs146, %rs145, 10923;
	shr.u16 	%rs147, %rs146, 15;
	shr.s16 	%rs148, %rs146, 2;
	add.s16 	%rs149, %rs148, %rs147;
	mul.lo.s16 	%rs150, %rs149, 24;
	sub.s16 	%rs151, %rs145, %rs150;
	cvt.s32.s16 	%r782, %rs151;
	mul.wide.s32 	%rd172, %r782, 4;
	add.s64 	%rd173, %rd10, %rd172;
	ld.shared.u32 	%r3369, [%rd173];
	add.s16 	%rs152, %rs110, 21;
	mul.hi.s16 	%rs153, %rs152, 10923;
	shr.u16 	%rs154, %rs153, 15;
	shr.s16 	%rs155, %rs153, 2;
	add.s16 	%rs156, %rs155, %rs154;
	mul.lo.s16 	%rs157, %rs156, 24;
	sub.s16 	%rs158, %rs152, %rs157;
	cvt.s32.s16 	%r783, %rs158;
	mul.wide.s32 	%rd174, %r783, 4;
	add.s64 	%rd175, %rd10, %rd174;
	ld.shared.u32 	%r3370, [%rd175];
	add.s16 	%rs159, %rs110, 22;
	mul.hi.s16 	%rs160, %rs159, 10923;
	shr.u16 	%rs161, %rs160, 15;
	shr.s16 	%rs162, %rs160, 2;
	add.s16 	%rs163, %rs162, %rs161;
	mul.lo.s16 	%rs164, %rs163, 24;
	sub.s16 	%rs165, %rs159, %rs164;
	cvt.s32.s16 	%r784, %rs165;
	mul.wide.s32 	%rd176, %r784, 4;
	add.s64 	%rd177, %rd10, %rd176;
	ld.shared.u32 	%r3371, [%rd177];
	add.s16 	%rs166, %rs110, 23;
	mul.hi.s16 	%rs167, %rs166, 10923;
	shr.u16 	%rs168, %rs167, 15;
	shr.s16 	%rs169, %rs167, 2;
	add.s16 	%rs170, %rs169, %rs168;
	mul.lo.s16 	%rs171, %rs170, 24;
	sub.s16 	%rs172, %rs166, %rs171;
	cvt.s32.s16 	%r785, %rs172;
	mul.wide.s32 	%rd178, %r785, 4;
	add.s64 	%rd179, %rd10, %rd178;
	ld.shared.u32 	%r3372, [%rd179];
LBB0_17:                                // %L11391
                                        //   in Loop: Header=BB0_16 Depth=1
	bar.sync 	0;
	add.s32 	%r107, %r82, 1;
	add.s32 	%r108, %r82, 2;
	add.s32 	%r109, %r82, 3;
	mov.u32 	%r3373, 12;
	mov.u32 	%r3374, %r3336;
	bra.uni 	LBB0_18;
LBB0_25:                                // %L21408
                                        //   in Loop: Header=BB0_18 Depth=2
	add.s32 	%r3376, %r3376, 1;
	mov.u32 	%r3375, 0;
	mov.u32 	%r3377, %r3375;
	mov.u32 	%r3378, %r3375;
LBB0_26:                                // %L21409
                                        //   in Loop: Header=BB0_18 Depth=2
	bar.sync 	0;
	add.s32 	%r3374, %r3374, 1;
	add.s32 	%r3373, %r3373, -4;
	setp.ne.s32 	%p62, %r3373, -12;
	@%p62 bra 	LBB0_18;
	bra.uni 	LBB0_27;
LBB0_18:                                // %L11417
                                        //   Parent Loop BB0_16 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p51, %r3373, 12;
	selp.b32 	%r1325, %r3349, 0, %p51;
	setp.eq.s32 	%p52, %r3373, 8;
	selp.b32 	%r1326, %r3353, %r1325, %p52;
	setp.eq.s32 	%p53, %r3373, 4;
	selp.b32 	%r1327, %r3357, %r1326, %p53;
	setp.eq.s32 	%p54, %r3373, 0;
	selp.b32 	%r1328, %r3361, %r1327, %p54;
	setp.eq.s32 	%p55, %r3373, -4;
	selp.b32 	%r1329, %r3365, %r1328, %p55;
	setp.eq.s32 	%p56, %r3373, -8;
	selp.b32 	%r1330, %r3369, %r1329, %p56;
	selp.b32 	%r1331, %r3350, 0, %p51;
	selp.b32 	%r1332, %r3354, %r1331, %p52;
	selp.b32 	%r1333, %r3358, %r1332, %p53;
	selp.b32 	%r1334, %r3362, %r1333, %p54;
	selp.b32 	%r1335, %r3366, %r1334, %p55;
	selp.b32 	%r1336, %r3370, %r1335, %p56;
	selp.b32 	%r1337, %r3351, 0, %p51;
	selp.b32 	%r1338, %r3355, %r1337, %p52;
	selp.b32 	%r1339, %r3359, %r1338, %p53;
	selp.b32 	%r1340, %r3363, %r1339, %p54;
	selp.b32 	%r1341, %r3367, %r1340, %p55;
	selp.b32 	%r1342, %r3371, %r1341, %p56;
	selp.b32 	%r1343, %r3352, 0, %p51;
	selp.b32 	%r1344, %r3356, %r1343, %p52;
	selp.b32 	%r1345, %r3360, %r1344, %p53;
	selp.b32 	%r1346, %r3364, %r1345, %p54;
	selp.b32 	%r1347, %r3368, %r1346, %p55;
	selp.b32 	%r1348, %r3372, %r1347, %p56;
	mov.u16 	%rs210, 25600;
	// begin inline asm
	mov.b32 %r793, {%rs210, %rs210};
	// end inline asm
	mov.u16 	%rs212, 21504;
	// begin inline asm
	mov.b32 %r804, {%rs212, %rs212};
	// end inline asm
	xor.b32  	%r792, %r1330, -2004318072;
	mov.u32 	%r929, 983055;
	// begin inline asm
	lop3.b32 %r790, %r929, %r792, %r793, 202;
	// end inline asm
	mov.u16 	%rs216, 18432;
	// begin inline asm
	mov.b32 %r794, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r795, %r793, %r794;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r798, %r790, %r795;
	// end inline asm
	mov.u32 	%r940, 15728880;
	// begin inline asm
	lop3.b32 %r801, %r940, %r792, %r804, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r805, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r806, %r804, %r805;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r809, %r801, %r806;
	// end inline asm
	// begin inline asm
	mov.b32 %r839, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	mov.b32 %r850, {%rs212, %rs212};
	// end inline asm
	xor.b32  	%r838, %r1336, -2004318072;
	// begin inline asm
	lop3.b32 %r836, %r929, %r838, %r839, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r840, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r841, %r839, %r840;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r844, %r836, %r841;
	// end inline asm
	// begin inline asm
	lop3.b32 %r847, %r940, %r838, %r850, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r851, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r852, %r850, %r851;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r855, %r847, %r852;
	// end inline asm
	// begin inline asm
	mov.b32 %r885, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	mov.b32 %r896, {%rs212, %rs212};
	// end inline asm
	xor.b32  	%r884, %r1342, -2004318072;
	// begin inline asm
	lop3.b32 %r882, %r929, %r884, %r885, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r886, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r887, %r885, %r886;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r890, %r882, %r887;
	// end inline asm
	// begin inline asm
	lop3.b32 %r893, %r940, %r884, %r896, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r897, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r898, %r896, %r897;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r901, %r893, %r898;
	// end inline asm
	// begin inline asm
	mov.b32 %r931, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	mov.b32 %r942, {%rs212, %rs212};
	// end inline asm
	xor.b32  	%r930, %r1348, -2004318072;
	// begin inline asm
	lop3.b32 %r928, %r929, %r930, %r931, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r932, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r933, %r931, %r932;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r936, %r928, %r933;
	// end inline asm
	// begin inline asm
	lop3.b32 %r939, %r940, %r930, %r942, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r943, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r944, %r942, %r943;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r947, %r939, %r944;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3342;
    mov.b32 {%r2re, %r2im}, %r798;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r972, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3343;
    mov.b32 {%r2re, %r2im}, %r809;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r975, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3342;
    mov.b32 {%r2re, %r2im}, %r844;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r978, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3343;
    mov.b32 {%r2re, %r2im}, %r855;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r981, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3342;
    mov.b32 {%r2re, %r2im}, %r890;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r984, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3343;
    mov.b32 {%r2re, %r2im}, %r901;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r987, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3342;
    mov.b32 {%r2re, %r2im}, %r936;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r990, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3343;
    mov.b32 {%r2re, %r2im}, %r947;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r993, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1059, %r1056}, {%r253, %r256}, {%r972}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1068, %r1065}, {%r253, %r256}, {%r975}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1077, %r1074}, {%r253, %r256}, {%r978}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1086, %r1083}, {%r253, %r256}, {%r981}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1095, %r1092}, {%r253, %r256}, {%r984}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1104, %r1101}, {%r253, %r256}, {%r987}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1113, %r1110}, {%r253, %r256}, {%r990}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1122, %r1119}, {%r253, %r256}, {%r993}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1052, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1054, %r1052, %r1056;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1057, %r290, %r1059, %r1054;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1061, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1063, %r1061, %r1065;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1066, %r290, %r1068, %r1063;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1070, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1072, %r1070, %r1074;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1075, %r290, %r1077, %r1072;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1079, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1081, %r1079, %r1083;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1084, %r290, %r1086, %r1081;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1088, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1090, %r1088, %r1092;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1093, %r290, %r1095, %r1090;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1097, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1099, %r1097, %r1101;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1102, %r290, %r1104, %r1099;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1106, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1108, %r1106, %r1110;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1111, %r290, %r1113, %r1108;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1115, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1117, %r1115, %r1119;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1120, %r290, %r1122, %r1117;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1124, %r293, %r1059;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1127, %r290, %r1056, %r1124;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1131, %r293, %r1068;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1134, %r290, %r1065, %r1131;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1138, %r293, %r1077;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1141, %r290, %r1074, %r1138;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1145, %r293, %r1086;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1148, %r290, %r1083, %r1145;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1152, %r293, %r1095;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1155, %r290, %r1092, %r1152;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1159, %r293, %r1104;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1162, %r290, %r1101, %r1159;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1166, %r293, %r1113;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1169, %r290, %r1110, %r1166;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1173, %r293, %r1122;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1176, %r290, %r1119, %r1173;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1261, %r1262}, {%r314, %r320, %r317, %r323}, {%r1057, %r1127}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1269, %r1270}, {%r314, %r320, %r317, %r323}, {%r1066, %r1134}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1277, %r1278}, {%r314, %r320, %r317, %r323}, {%r1075, %r1141}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1285, %r1286}, {%r314, %r320, %r317, %r323}, {%r1084, %r1148}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1293, %r1294}, {%r314, %r320, %r317, %r323}, {%r1093, %r1155}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1301, %r1302}, {%r314, %r320, %r317, %r323}, {%r1102, %r1162}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1309, %r1310}, {%r314, %r320, %r317, %r323}, {%r1111, %r1169}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1317, %r1318}, {%r314, %r320, %r317, %r323}, {%r1120, %r1176}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	prmt.b32 %r1260, %r1261, %r1262, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1264, %r1261, %r1262, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1268, %r1269, %r1270, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1272, %r1269, %r1270, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1276, %r1277, %r1278, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1280, %r1277, %r1278, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1284, %r1285, %r1286, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1288, %r1285, %r1286, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1292, %r1293, %r1294, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1296, %r1293, %r1294, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1300, %r1301, %r1302, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1304, %r1301, %r1302, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1308, %r1309, %r1310, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1312, %r1309, %r1310, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1316, %r1317, %r1318, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1320, %r1317, %r1318, %r631;
	// end inline asm
	st.shared.u32 	[%rd6], %r1260;
	st.shared.u32 	[%rd7+33024], %r1264;
	st.shared.u32 	[%rd7+128], %r1268;
	st.shared.u32 	[%rd7+33152], %r1272;
	cvt.u16.u32 	%rs221, %r3374;
	and.b16  	%rs222, %rs221, 255;
	mul.lo.s16 	%rs223, %rs222, 171;
	shr.u16 	%rs224, %rs223, 10;
	mul.lo.s16 	%rs225, %rs224, 6;
	sub.s16 	%rs226, %rs221, %rs225;
	shl.b16 	%rs227, %rs226, 2;
	cvt.u32.u16 	%r1349, %rs227;
	and.b32  	%r1350, %r1349, 252;
	add.s32 	%r1351, %r107, %r1350;
	shr.s32 	%r1352, %r1351, 31;
	shr.u32 	%r1353, %r1352, 30;
	add.s32 	%r1354, %r1351, %r1353;
	and.b32  	%r1355, %r1354, 67108860;
	sub.s32 	%r1356, %r1351, %r1355;
	shl.b32 	%r116, %r1356, 6;
	add.s32 	%r1357, %r67, %r116;
	mul.wide.s32 	%rd180, %r1357, 4;
	add.s64 	%rd182, %rd26, %rd180;
	st.shared.u32 	[%rd182], %r1276;
	add.s32 	%r1358, %r68, %r116;
	mul.wide.u32 	%rd183, %r1358, 4;
	add.s64 	%rd184, %rd26, %rd183;
	st.shared.u32 	[%rd184], %r1280;
	add.s32 	%r1359, %r69, %r116;
	mul.wide.s32 	%rd185, %r1359, 4;
	add.s64 	%rd186, %rd26, %rd185;
	st.shared.u32 	[%rd186], %r1284;
	add.s32 	%r1360, %r70, %r116;
	mul.wide.u32 	%rd187, %r1360, 4;
	add.s64 	%rd188, %rd26, %rd187;
	st.shared.u32 	[%rd188], %r1288;
	add.s32 	%r1361, %r108, %r1350;
	shr.s32 	%r1362, %r1361, 31;
	shr.u32 	%r1363, %r1362, 30;
	add.s32 	%r1364, %r1361, %r1363;
	and.b32  	%r1365, %r1364, 67108860;
	sub.s32 	%r1366, %r1361, %r1365;
	shl.b32 	%r117, %r1366, 6;
	add.s32 	%r1367, %r67, %r117;
	mul.wide.s32 	%rd189, %r1367, 4;
	add.s64 	%rd190, %rd26, %rd189;
	st.shared.u32 	[%rd190], %r1292;
	add.s32 	%r1368, %r68, %r117;
	mul.wide.u32 	%rd191, %r1368, 4;
	add.s64 	%rd192, %rd26, %rd191;
	st.shared.u32 	[%rd192], %r1296;
	add.s32 	%r1369, %r69, %r117;
	mul.wide.s32 	%rd193, %r1369, 4;
	add.s64 	%rd194, %rd26, %rd193;
	st.shared.u32 	[%rd194], %r1300;
	add.s32 	%r1370, %r70, %r117;
	mul.wide.u32 	%rd195, %r1370, 4;
	add.s64 	%rd196, %rd26, %rd195;
	st.shared.u32 	[%rd196], %r1304;
	add.s32 	%r1371, %r109, %r1350;
	shr.s32 	%r1372, %r1371, 31;
	shr.u32 	%r1373, %r1372, 30;
	add.s32 	%r1374, %r1371, %r1373;
	and.b32  	%r1375, %r1374, 67108860;
	sub.s32 	%r1376, %r1371, %r1375;
	shl.b32 	%r118, %r1376, 6;
	add.s32 	%r1377, %r67, %r118;
	mul.wide.s32 	%rd197, %r1377, 4;
	add.s64 	%rd198, %rd26, %rd197;
	st.shared.u32 	[%rd198], %r1308;
	add.s32 	%r1378, %r68, %r118;
	mul.wide.u32 	%rd199, %r1378, 4;
	add.s64 	%rd200, %rd26, %rd199;
	st.shared.u32 	[%rd200], %r1312;
	add.s32 	%r1379, %r69, %r118;
	mul.wide.s32 	%rd201, %r1379, 4;
	add.s64 	%rd202, %rd26, %rd201;
	st.shared.u32 	[%rd202], %r1316;
	add.s32 	%r1380, %r70, %r118;
	mul.wide.u32 	%rd203, %r1380, 4;
	add.s64 	%rd204, %rd26, %rd203;
	st.shared.u32 	[%rd204], %r1320;
	bar.sync 	0;
	mov.u32 	%r3379, %r3336;
	mov.u32 	%r3380, %r3336;
	mov.u32 	%r3381, %r3336;
	mov.u32 	%r3382, %r3336;
	@%p50 bra 	LBB0_42;
	bra.uni 	LBB0_19;
LBB0_42:                                // %oksrem7093
                                        //   in Loop: Header=BB0_18 Depth=2
	ld.shared.u32 	%r3379, [%rd8];
	ld.shared.u32 	%r3380, [%rd9+33024];
	ld.shared.u32 	%r3381, [%rd9+128];
	ld.shared.u32 	%r3382, [%rd9+33152];
LBB0_19:                                // %L17296
                                        //   in Loop: Header=BB0_18 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1416, %r1413}, {%r253, %r256}, {%r3379}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1425, %r1422}, {%r253, %r256}, {%r3380}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1434, %r1431}, {%r253, %r256}, {%r3381}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1443, %r1440}, {%r253, %r256}, {%r3382}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1409, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1411, %r1409, %r1413;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1414, %r290, %r1416, %r1411;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1418, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1420, %r1418, %r1422;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1423, %r290, %r1425, %r1420;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1427, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1429, %r1427, %r1431;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1432, %r290, %r1434, %r1429;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1436, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1438, %r1436, %r1440;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1441, %r290, %r1443, %r1438;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1445, %r293, %r1416;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1448, %r290, %r1413, %r1445;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1452, %r293, %r1425;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1455, %r290, %r1422, %r1452;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1459, %r293, %r1434;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1462, %r290, %r1431, %r1459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1466, %r293, %r1443;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1469, %r290, %r1440, %r1466;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1514, %r1518}, {%r314, %r320, %r317, %r323}, {%r1414, %r1448}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1530, %r1534}, {%r314, %r320, %r317, %r323}, {%r1423, %r1455}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1522, %r1526}, {%r314, %r320, %r317, %r323}, {%r1432, %r1462}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1538, %r1542}, {%r314, %r320, %r317, %r323}, {%r1441, %r1469}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1513, %r1514, %r1514, %r3378;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1517, %r1518, %r1518, %r1513;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1521, %r1522, %r1522, %r1517;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1525, %r1526, %r1526, %r1521;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1529, %r1530, %r1530, %r3377;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1533, %r1534, %r1534, %r1529;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1537, %r1538, %r1538, %r1533;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1541, %r1542, %r1542, %r1537;
	// end inline asm
	mov.u32 	%r3383, %r3336;
	mov.u32 	%r3384, %r3336;
	mov.u32 	%r3385, %r3336;
	mov.u32 	%r3386, %r3336;
	@%p50 bra 	LBB0_43;
	bra.uni 	LBB0_20;
LBB0_43:                                // %oksrem7628
                                        //   in Loop: Header=BB0_18 Depth=2
	add.s32 	%r1546, %r71, %r116;
	mul.wide.s32 	%rd205, %r1546, 4;
	add.s64 	%rd207, %rd26, %rd205;
	ld.shared.u32 	%r3383, [%rd207];
	add.s32 	%r1547, %r72, %r116;
	mul.wide.u32 	%rd208, %r1547, 4;
	add.s64 	%rd209, %rd26, %rd208;
	ld.shared.u32 	%r3384, [%rd209];
	add.s32 	%r1548, %r73, %r116;
	mul.wide.s32 	%rd210, %r1548, 4;
	add.s64 	%rd211, %rd26, %rd210;
	ld.shared.u32 	%r3385, [%rd211];
	add.s32 	%r1549, %r74, %r116;
	mul.wide.u32 	%rd212, %r1549, 4;
	add.s64 	%rd213, %rd26, %rd212;
	ld.shared.u32 	%r3386, [%rd213];
LBB0_20:                                // %L18521
                                        //   in Loop: Header=BB0_18 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1585, %r1582}, {%r253, %r256}, {%r3383}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1594, %r1591}, {%r253, %r256}, {%r3384}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1603, %r1600}, {%r253, %r256}, {%r3385}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1612, %r1609}, {%r253, %r256}, {%r3386}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1578, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1580, %r1578, %r1582;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1583, %r290, %r1585, %r1580;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1587, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1589, %r1587, %r1591;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1592, %r290, %r1594, %r1589;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1596, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1598, %r1596, %r1600;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1601, %r290, %r1603, %r1598;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1605, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1607, %r1605, %r1609;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1610, %r290, %r1612, %r1607;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1614, %r293, %r1585;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1617, %r290, %r1582, %r1614;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1621, %r293, %r1594;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1624, %r290, %r1591, %r1621;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1628, %r293, %r1603;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1631, %r290, %r1600, %r1628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1635, %r293, %r1612;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1638, %r290, %r1609, %r1635;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1683, %r1687}, {%r314, %r320, %r317, %r323}, {%r1583, %r1617}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1699, %r1703}, {%r314, %r320, %r317, %r323}, {%r1592, %r1624}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1691, %r1695}, {%r314, %r320, %r317, %r323}, {%r1601, %r1631}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1707, %r1711}, {%r314, %r320, %r317, %r323}, {%r1610, %r1638}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1682, %r1683, %r1683, %r1525;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1686, %r1687, %r1687, %r1682;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1690, %r1691, %r1691, %r1686;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1694, %r1695, %r1695, %r1690;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1698, %r1699, %r1699, %r1541;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1702, %r1703, %r1703, %r1698;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1706, %r1707, %r1707, %r1702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1710, %r1711, %r1711, %r1706;
	// end inline asm
	mov.u32 	%r3387, %r3336;
	mov.u32 	%r3388, %r3336;
	mov.u32 	%r3389, %r3336;
	mov.u32 	%r3390, %r3336;
	@%p50 bra 	LBB0_44;
	bra.uni 	LBB0_21;
LBB0_44:                                // %oksrem8163
                                        //   in Loop: Header=BB0_18 Depth=2
	add.s32 	%r1715, %r71, %r117;
	mul.wide.s32 	%rd214, %r1715, 4;
	add.s64 	%rd216, %rd26, %rd214;
	ld.shared.u32 	%r3387, [%rd216];
	add.s32 	%r1716, %r72, %r117;
	mul.wide.u32 	%rd217, %r1716, 4;
	add.s64 	%rd218, %rd26, %rd217;
	ld.shared.u32 	%r3388, [%rd218];
	add.s32 	%r1717, %r73, %r117;
	mul.wide.s32 	%rd219, %r1717, 4;
	add.s64 	%rd220, %rd26, %rd219;
	ld.shared.u32 	%r3389, [%rd220];
	add.s32 	%r1718, %r74, %r117;
	mul.wide.u32 	%rd221, %r1718, 4;
	add.s64 	%rd222, %rd26, %rd221;
	ld.shared.u32 	%r3390, [%rd222];
LBB0_21:                                // %L19746
                                        //   in Loop: Header=BB0_18 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1754, %r1751}, {%r253, %r256}, {%r3387}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1763, %r1760}, {%r253, %r256}, {%r3388}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1772, %r1769}, {%r253, %r256}, {%r3389}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1781, %r1778}, {%r253, %r256}, {%r3390}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1747, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1749, %r1747, %r1751;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1752, %r290, %r1754, %r1749;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1756, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1758, %r1756, %r1760;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1761, %r290, %r1763, %r1758;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1765, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1767, %r1765, %r1769;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1770, %r290, %r1772, %r1767;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1774, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1776, %r1774, %r1778;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1779, %r290, %r1781, %r1776;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1783, %r293, %r1754;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1786, %r290, %r1751, %r1783;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1790, %r293, %r1763;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1793, %r290, %r1760, %r1790;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1797, %r293, %r1772;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1800, %r290, %r1769, %r1797;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1804, %r293, %r1781;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1807, %r290, %r1778, %r1804;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1852, %r1856}, {%r314, %r320, %r317, %r323}, {%r1752, %r1786}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1868, %r1872}, {%r314, %r320, %r317, %r323}, {%r1761, %r1793}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1860, %r1864}, {%r314, %r320, %r317, %r323}, {%r1770, %r1800}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1876, %r1880}, {%r314, %r320, %r317, %r323}, {%r1779, %r1807}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1851, %r1852, %r1852, %r1694;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1855, %r1856, %r1856, %r1851;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1859, %r1860, %r1860, %r1855;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1863, %r1864, %r1864, %r1859;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1867, %r1868, %r1868, %r1710;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1871, %r1872, %r1872, %r1867;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1875, %r1876, %r1876, %r1871;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1879, %r1880, %r1880, %r1875;
	// end inline asm
	mov.u32 	%r3391, %r3336;
	mov.u32 	%r3392, %r3336;
	mov.u32 	%r3393, %r3336;
	mov.u32 	%r3394, %r3336;
	@%p50 bra 	LBB0_45;
	bra.uni 	LBB0_22;
LBB0_45:                                // %oksrem8698
                                        //   in Loop: Header=BB0_18 Depth=2
	add.s32 	%r1884, %r71, %r118;
	mul.wide.s32 	%rd223, %r1884, 4;
	add.s64 	%rd225, %rd26, %rd223;
	ld.shared.u32 	%r3391, [%rd225];
	add.s32 	%r1885, %r72, %r118;
	mul.wide.u32 	%rd226, %r1885, 4;
	add.s64 	%rd227, %rd26, %rd226;
	ld.shared.u32 	%r3392, [%rd227];
	add.s32 	%r1886, %r73, %r118;
	mul.wide.s32 	%rd228, %r1886, 4;
	add.s64 	%rd229, %rd26, %rd228;
	ld.shared.u32 	%r3393, [%rd229];
	add.s32 	%r1887, %r74, %r118;
	mul.wide.u32 	%rd230, %r1887, 4;
	add.s64 	%rd231, %rd26, %rd230;
	ld.shared.u32 	%r3394, [%rd231];
LBB0_22:                                // %L20971
                                        //   in Loop: Header=BB0_18 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1923, %r1920}, {%r253, %r256}, {%r3391}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1932, %r1929}, {%r253, %r256}, {%r3392}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1941, %r1938}, {%r253, %r256}, {%r3393}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1950, %r1947}, {%r253, %r256}, {%r3394}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1916, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1918, %r1916, %r1920;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1921, %r290, %r1923, %r1918;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1925, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1927, %r1925, %r1929;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1930, %r290, %r1932, %r1927;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1934, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1936, %r1934, %r1938;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1939, %r290, %r1941, %r1936;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1943, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1945, %r1943, %r1947;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1948, %r290, %r1950, %r1945;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1952, %r293, %r1923;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1955, %r290, %r1920, %r1952;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1959, %r293, %r1932;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1962, %r290, %r1929, %r1959;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1966, %r293, %r1941;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1969, %r290, %r1938, %r1966;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1973, %r293, %r1950;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1976, %r290, %r1947, %r1973;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2021, %r2025}, {%r314, %r320, %r317, %r323}, {%r1921, %r1955}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2037, %r2041}, {%r314, %r320, %r317, %r323}, {%r1930, %r1962}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2029, %r2033}, {%r314, %r320, %r317, %r323}, {%r1939, %r1969}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2045, %r2049}, {%r314, %r320, %r317, %r323}, {%r1948, %r1976}, {%r3336, %r3336};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2020, %r2021, %r2021, %r1863;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2024, %r2025, %r2025, %r2020;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2028, %r2029, %r2029, %r2024;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3378, %r2033, %r2033, %r2028;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2036, %r2037, %r2037, %r1879;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2040, %r2041, %r2041, %r2036;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2044, %r2045, %r2045, %r2040;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3377, %r2049, %r2049, %r2044;
	// end inline asm
	add.s32 	%r3375, %r3375, 4;
	setp.ne.s32 	%p60, %r3375, 40;
	@%p60 bra 	LBB0_26;
// %bb.23:                              // %L21117
                                        //   in Loop: Header=BB0_18 Depth=2
	@%p26 bra 	LBB0_25;
// %bb.24:                              // %L21176
                                        //   in Loop: Header=BB0_18 Depth=2
	mul.lo.s32 	%r2052, %r3376, 1152;
	add.s32 	%r2053, %r75, %r2052;
	mul.wide.u32 	%rd232, %r2053, 4;
	add.s64 	%rd233, %rd4, %rd232;
	st.global.u32 	[%rd233], %r3378;
	add.s32 	%r2054, %r76, %r2052;
	mul.wide.u32 	%rd234, %r2054, 4;
	add.s64 	%rd235, %rd4, %rd234;
	st.global.u32 	[%rd235], %r3377;
	bra.uni 	LBB0_25;
LBB0_27:                                // %L21438.preheader
                                        //   in Loop: Header=BB0_16 Depth=1
	add.s32 	%r151, %r82, 25;
	add.s32 	%r152, %r82, 26;
	add.s32 	%r153, %r82, 27;
	mov.u32 	%r2057, 0;
	mov.u32 	%r3399, 12;
	mov.u32 	%r3400, %r2057;
	bra.uni 	LBB0_28;
LBB0_35:                                // %L31429
                                        //   in Loop: Header=BB0_28 Depth=2
	add.s32 	%r3376, %r3376, 1;
	mov.u32 	%r3377, 0;
	mov.u32 	%r3378, %r3377;
	mov.u32 	%r3375, %r3377;
LBB0_36:                                // %L31430
                                        //   in Loop: Header=BB0_28 Depth=2
	bar.sync 	0;
	add.s32 	%r3400, %r3400, 1;
	add.s32 	%r3399, %r3399, -4;
	setp.eq.s32 	%p75, %r3399, -12;
	@%p75 bra 	LBB0_37;
LBB0_28:                                // %L21438
                                        //   Parent Loop BB0_16 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p64, %r3399, 12;
	selp.b32 	%r2595, %r3349, 0, %p64;
	setp.eq.s32 	%p65, %r3399, 8;
	selp.b32 	%r2596, %r3353, %r2595, %p65;
	setp.eq.s32 	%p66, %r3399, 4;
	selp.b32 	%r2597, %r3357, %r2596, %p66;
	setp.eq.s32 	%p67, %r3399, 0;
	selp.b32 	%r2598, %r3361, %r2597, %p67;
	setp.eq.s32 	%p68, %r3399, -4;
	selp.b32 	%r2599, %r3365, %r2598, %p68;
	setp.eq.s32 	%p69, %r3399, -8;
	selp.b32 	%r2600, %r3369, %r2599, %p69;
	selp.b32 	%r2601, %r3350, 0, %p64;
	selp.b32 	%r2602, %r3354, %r2601, %p65;
	selp.b32 	%r2603, %r3358, %r2602, %p66;
	selp.b32 	%r2604, %r3362, %r2603, %p67;
	selp.b32 	%r2605, %r3366, %r2604, %p68;
	selp.b32 	%r2606, %r3370, %r2605, %p69;
	selp.b32 	%r2607, %r3351, 0, %p64;
	selp.b32 	%r2608, %r3355, %r2607, %p65;
	selp.b32 	%r2609, %r3359, %r2608, %p66;
	selp.b32 	%r2610, %r3363, %r2609, %p67;
	selp.b32 	%r2611, %r3367, %r2610, %p68;
	selp.b32 	%r2612, %r3371, %r2611, %p69;
	selp.b32 	%r2613, %r3352, 0, %p64;
	selp.b32 	%r2614, %r3356, %r2613, %p65;
	selp.b32 	%r2615, %r3360, %r2614, %p66;
	selp.b32 	%r2616, %r3364, %r2615, %p67;
	selp.b32 	%r2617, %r3368, %r2616, %p68;
	selp.b32 	%r2618, %r3372, %r2617, %p69;
	// begin inline asm
	mov.b32 %r2085, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	mov.b32 %r2096, {%rs212, %rs212};
	// end inline asm
	shr.u32 	%r2619, %r2600, 8;
	xor.b32  	%r2095, %r2619, 8947848;
	// begin inline asm
	lop3.b32 %r2082, %r929, %r2095, %r2085, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2086, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2087, %r2085, %r2086;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2090, %r2082, %r2087;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2093, %r940, %r2095, %r2096, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2097, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2098, %r2096, %r2097;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2101, %r2093, %r2098;
	// end inline asm
	// begin inline asm
	mov.b32 %r2131, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	mov.b32 %r2142, {%rs212, %rs212};
	// end inline asm
	shr.u32 	%r2620, %r2606, 8;
	xor.b32  	%r2141, %r2620, 8947848;
	// begin inline asm
	lop3.b32 %r2128, %r929, %r2141, %r2131, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2132, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2133, %r2131, %r2132;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2136, %r2128, %r2133;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2139, %r940, %r2141, %r2142, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2143, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2144, %r2142, %r2143;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2147, %r2139, %r2144;
	// end inline asm
	// begin inline asm
	mov.b32 %r2177, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	mov.b32 %r2188, {%rs212, %rs212};
	// end inline asm
	shr.u32 	%r2621, %r2612, 8;
	xor.b32  	%r2187, %r2621, 8947848;
	// begin inline asm
	lop3.b32 %r2174, %r929, %r2187, %r2177, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2178, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2179, %r2177, %r2178;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2182, %r2174, %r2179;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2185, %r940, %r2187, %r2188, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2189, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2190, %r2188, %r2189;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2193, %r2185, %r2190;
	// end inline asm
	// begin inline asm
	mov.b32 %r2223, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	mov.b32 %r2234, {%rs212, %rs212};
	// end inline asm
	shr.u32 	%r2622, %r2618, 8;
	xor.b32  	%r2233, %r2622, 8947848;
	// begin inline asm
	lop3.b32 %r2220, %r929, %r2233, %r2223, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2224, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2225, %r2223, %r2224;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2228, %r2220, %r2225;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2231, %r940, %r2233, %r2234, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2235, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2236, %r2234, %r2235;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2239, %r2231, %r2236;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3342;
    mov.b32 {%r2re, %r2im}, %r2090;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2242, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3343;
    mov.b32 {%r2re, %r2im}, %r2101;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2245, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3342;
    mov.b32 {%r2re, %r2im}, %r2136;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2248, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3343;
    mov.b32 {%r2re, %r2im}, %r2147;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2251, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3342;
    mov.b32 {%r2re, %r2im}, %r2182;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2254, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3343;
    mov.b32 {%r2re, %r2im}, %r2193;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2257, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3342;
    mov.b32 {%r2re, %r2im}, %r2228;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2260, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3343;
    mov.b32 {%r2re, %r2im}, %r2239;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2263, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2329, %r2326}, {%r253, %r256}, {%r2242}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2338, %r2335}, {%r253, %r256}, {%r2245}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2347, %r2344}, {%r253, %r256}, {%r2248}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2356, %r2353}, {%r253, %r256}, {%r2251}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2365, %r2362}, {%r253, %r256}, {%r2254}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2374, %r2371}, {%r253, %r256}, {%r2257}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2383, %r2380}, {%r253, %r256}, {%r2260}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2392, %r2389}, {%r253, %r256}, {%r2263}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2322, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2324, %r2322, %r2326;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2327, %r290, %r2329, %r2324;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2331, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2333, %r2331, %r2335;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2336, %r290, %r2338, %r2333;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2340, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2342, %r2340, %r2344;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2345, %r290, %r2347, %r2342;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2349, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2351, %r2349, %r2353;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2354, %r290, %r2356, %r2351;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2358, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2360, %r2358, %r2362;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2363, %r290, %r2365, %r2360;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2367, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2369, %r2367, %r2371;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2372, %r290, %r2374, %r2369;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2376, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2378, %r2376, %r2380;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2381, %r290, %r2383, %r2378;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2385, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2387, %r2385, %r2389;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2390, %r290, %r2392, %r2387;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2394, %r293, %r2329;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2397, %r290, %r2326, %r2394;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2401, %r293, %r2338;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2404, %r290, %r2335, %r2401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2408, %r293, %r2347;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2411, %r290, %r2344, %r2408;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2415, %r293, %r2356;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2418, %r290, %r2353, %r2415;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2422, %r293, %r2365;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2425, %r290, %r2362, %r2422;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2429, %r293, %r2374;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2432, %r290, %r2371, %r2429;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2436, %r293, %r2383;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2439, %r290, %r2380, %r2436;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2443, %r293, %r2392;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2446, %r290, %r2389, %r2443;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2531, %r2532}, {%r314, %r320, %r317, %r323}, {%r2327, %r2397}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2539, %r2540}, {%r314, %r320, %r317, %r323}, {%r2336, %r2404}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2547, %r2548}, {%r314, %r320, %r317, %r323}, {%r2345, %r2411}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2555, %r2556}, {%r314, %r320, %r317, %r323}, {%r2354, %r2418}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2563, %r2564}, {%r314, %r320, %r317, %r323}, {%r2363, %r2425}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2571, %r2572}, {%r314, %r320, %r317, %r323}, {%r2372, %r2432}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2579, %r2580}, {%r314, %r320, %r317, %r323}, {%r2381, %r2439}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2587, %r2588}, {%r314, %r320, %r317, %r323}, {%r2390, %r2446}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	prmt.b32 %r2530, %r2531, %r2532, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2534, %r2531, %r2532, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2538, %r2539, %r2540, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2542, %r2539, %r2540, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2546, %r2547, %r2548, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2550, %r2547, %r2548, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2554, %r2555, %r2556, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2558, %r2555, %r2556, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2562, %r2563, %r2564, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2566, %r2563, %r2564, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2570, %r2571, %r2572, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2574, %r2571, %r2572, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2578, %r2579, %r2580, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2582, %r2579, %r2580, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2586, %r2587, %r2588, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2590, %r2587, %r2588, %r631;
	// end inline asm
	st.shared.u32 	[%rd6], %r2530;
	st.shared.u32 	[%rd7+33024], %r2534;
	st.shared.u32 	[%rd7+128], %r2538;
	st.shared.u32 	[%rd7+33152], %r2542;
	cvt.u16.u32 	%rs276, %r3400;
	and.b16  	%rs277, %rs276, 255;
	mul.lo.s16 	%rs278, %rs277, 171;
	shr.u16 	%rs279, %rs278, 10;
	mul.lo.s16 	%rs280, %rs279, 6;
	sub.s16 	%rs281, %rs276, %rs280;
	shl.b16 	%rs282, %rs281, 2;
	cvt.u32.u16 	%r2623, %rs282;
	and.b32  	%r2624, %r2623, 252;
	add.s32 	%r2625, %r151, %r2624;
	shr.s32 	%r2626, %r2625, 31;
	shr.u32 	%r2627, %r2626, 30;
	add.s32 	%r2628, %r2625, %r2627;
	and.b32  	%r2629, %r2628, 67108860;
	sub.s32 	%r2630, %r2625, %r2629;
	shl.b32 	%r160, %r2630, 6;
	add.s32 	%r2631, %r67, %r160;
	mul.wide.s32 	%rd236, %r2631, 4;
	add.s64 	%rd238, %rd26, %rd236;
	st.shared.u32 	[%rd238], %r2546;
	add.s32 	%r2632, %r68, %r160;
	mul.wide.u32 	%rd239, %r2632, 4;
	add.s64 	%rd240, %rd26, %rd239;
	st.shared.u32 	[%rd240], %r2550;
	add.s32 	%r2633, %r69, %r160;
	mul.wide.s32 	%rd241, %r2633, 4;
	add.s64 	%rd242, %rd26, %rd241;
	st.shared.u32 	[%rd242], %r2554;
	add.s32 	%r2634, %r70, %r160;
	mul.wide.u32 	%rd243, %r2634, 4;
	add.s64 	%rd244, %rd26, %rd243;
	st.shared.u32 	[%rd244], %r2558;
	add.s32 	%r2635, %r152, %r2624;
	shr.s32 	%r2636, %r2635, 31;
	shr.u32 	%r2637, %r2636, 30;
	add.s32 	%r2638, %r2635, %r2637;
	and.b32  	%r2639, %r2638, 67108860;
	sub.s32 	%r2640, %r2635, %r2639;
	shl.b32 	%r161, %r2640, 6;
	add.s32 	%r2641, %r67, %r161;
	mul.wide.s32 	%rd245, %r2641, 4;
	add.s64 	%rd246, %rd26, %rd245;
	st.shared.u32 	[%rd246], %r2562;
	add.s32 	%r2642, %r68, %r161;
	mul.wide.u32 	%rd247, %r2642, 4;
	add.s64 	%rd248, %rd26, %rd247;
	st.shared.u32 	[%rd248], %r2566;
	add.s32 	%r2643, %r69, %r161;
	mul.wide.s32 	%rd249, %r2643, 4;
	add.s64 	%rd250, %rd26, %rd249;
	st.shared.u32 	[%rd250], %r2570;
	add.s32 	%r2644, %r70, %r161;
	mul.wide.u32 	%rd251, %r2644, 4;
	add.s64 	%rd252, %rd26, %rd251;
	st.shared.u32 	[%rd252], %r2574;
	add.s32 	%r2645, %r153, %r2624;
	shr.s32 	%r2646, %r2645, 31;
	shr.u32 	%r2647, %r2646, 30;
	add.s32 	%r2648, %r2645, %r2647;
	and.b32  	%r2649, %r2648, 67108860;
	sub.s32 	%r2650, %r2645, %r2649;
	shl.b32 	%r162, %r2650, 6;
	add.s32 	%r2651, %r67, %r162;
	mul.wide.s32 	%rd253, %r2651, 4;
	add.s64 	%rd254, %rd26, %rd253;
	st.shared.u32 	[%rd254], %r2578;
	add.s32 	%r2652, %r68, %r162;
	mul.wide.u32 	%rd255, %r2652, 4;
	add.s64 	%rd256, %rd26, %rd255;
	st.shared.u32 	[%rd256], %r2582;
	add.s32 	%r2653, %r69, %r162;
	mul.wide.s32 	%rd257, %r2653, 4;
	add.s64 	%rd258, %rd26, %rd257;
	st.shared.u32 	[%rd258], %r2586;
	add.s32 	%r2654, %r70, %r162;
	mul.wide.u32 	%rd259, %r2654, 4;
	add.s64 	%rd260, %rd26, %rd259;
	st.shared.u32 	[%rd260], %r2590;
	bar.sync 	0;
	mov.u32 	%r3405, %r2057;
	mov.u32 	%r3406, %r2057;
	mov.u32 	%r3407, %r2057;
	mov.u32 	%r3408, %r2057;
	@%p50 bra 	LBB0_46;
	bra.uni 	LBB0_29;
LBB0_46:                                // %oksrem11491
                                        //   in Loop: Header=BB0_28 Depth=2
	ld.shared.u32 	%r3408, [%rd8];
	ld.shared.u32 	%r3407, [%rd9+33024];
	ld.shared.u32 	%r3406, [%rd9+128];
	ld.shared.u32 	%r3405, [%rd9+33152];
LBB0_29:                                // %L27317
                                        //   in Loop: Header=BB0_28 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2690, %r2687}, {%r253, %r256}, {%r3408}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2699, %r2696}, {%r253, %r256}, {%r3407}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2708, %r2705}, {%r253, %r256}, {%r3406}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2717, %r2714}, {%r253, %r256}, {%r3405}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2683, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2685, %r2683, %r2687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2688, %r290, %r2690, %r2685;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2692, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2694, %r2692, %r2696;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2697, %r290, %r2699, %r2694;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2701, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2703, %r2701, %r2705;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2706, %r290, %r2708, %r2703;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2710, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2712, %r2710, %r2714;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2715, %r290, %r2717, %r2712;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2719, %r293, %r2690;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2722, %r290, %r2687, %r2719;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2726, %r293, %r2699;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2729, %r290, %r2696, %r2726;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2733, %r293, %r2708;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2736, %r290, %r2705, %r2733;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2740, %r293, %r2717;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2743, %r290, %r2714, %r2740;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2788, %r2792}, {%r314, %r320, %r317, %r323}, {%r2688, %r2722}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2804, %r2808}, {%r314, %r320, %r317, %r323}, {%r2697, %r2729}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2796, %r2800}, {%r314, %r320, %r317, %r323}, {%r2706, %r2736}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2812, %r2816}, {%r314, %r320, %r317, %r323}, {%r2715, %r2743}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2787, %r2788, %r2788, %r3378;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2791, %r2792, %r2792, %r2787;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2795, %r2796, %r2796, %r2791;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2799, %r2800, %r2800, %r2795;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2803, %r2804, %r2804, %r3377;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2807, %r2808, %r2808, %r2803;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2811, %r2812, %r2812, %r2807;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2815, %r2816, %r2816, %r2811;
	// end inline asm
	mov.u32 	%r3409, %r2057;
	mov.u32 	%r3410, %r2057;
	mov.u32 	%r3411, %r2057;
	mov.u32 	%r3412, %r2057;
	@%p50 bra 	LBB0_47;
	bra.uni 	LBB0_30;
LBB0_47:                                // %oksrem12026
                                        //   in Loop: Header=BB0_28 Depth=2
	add.s32 	%r2820, %r71, %r160;
	mul.wide.s32 	%rd261, %r2820, 4;
	add.s64 	%rd263, %rd26, %rd261;
	ld.shared.u32 	%r3412, [%rd263];
	add.s32 	%r2821, %r72, %r160;
	mul.wide.u32 	%rd264, %r2821, 4;
	add.s64 	%rd265, %rd26, %rd264;
	ld.shared.u32 	%r3411, [%rd265];
	add.s32 	%r2822, %r73, %r160;
	mul.wide.s32 	%rd266, %r2822, 4;
	add.s64 	%rd267, %rd26, %rd266;
	ld.shared.u32 	%r3410, [%rd267];
	add.s32 	%r2823, %r74, %r160;
	mul.wide.u32 	%rd268, %r2823, 4;
	add.s64 	%rd269, %rd26, %rd268;
	ld.shared.u32 	%r3409, [%rd269];
LBB0_30:                                // %L28542
                                        //   in Loop: Header=BB0_28 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2859, %r2856}, {%r253, %r256}, {%r3412}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2868, %r2865}, {%r253, %r256}, {%r3411}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2877, %r2874}, {%r253, %r256}, {%r3410}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2886, %r2883}, {%r253, %r256}, {%r3409}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2852, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2854, %r2852, %r2856;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2857, %r290, %r2859, %r2854;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2861, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2863, %r2861, %r2865;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2866, %r290, %r2868, %r2863;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2870, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2872, %r2870, %r2874;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2875, %r290, %r2877, %r2872;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2879, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2881, %r2879, %r2883;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2884, %r290, %r2886, %r2881;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2888, %r293, %r2859;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2891, %r290, %r2856, %r2888;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2895, %r293, %r2868;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2898, %r290, %r2865, %r2895;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2902, %r293, %r2877;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2905, %r290, %r2874, %r2902;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2909, %r293, %r2886;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2912, %r290, %r2883, %r2909;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2957, %r2961}, {%r314, %r320, %r317, %r323}, {%r2857, %r2891}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2973, %r2977}, {%r314, %r320, %r317, %r323}, {%r2866, %r2898}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2965, %r2969}, {%r314, %r320, %r317, %r323}, {%r2875, %r2905}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2981, %r2985}, {%r314, %r320, %r317, %r323}, {%r2884, %r2912}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2956, %r2957, %r2957, %r2799;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2960, %r2961, %r2961, %r2956;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2964, %r2965, %r2965, %r2960;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2968, %r2969, %r2969, %r2964;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2972, %r2973, %r2973, %r2815;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2976, %r2977, %r2977, %r2972;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2980, %r2981, %r2981, %r2976;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2984, %r2985, %r2985, %r2980;
	// end inline asm
	mov.u32 	%r3413, %r2057;
	mov.u32 	%r3414, %r2057;
	mov.u32 	%r3415, %r2057;
	mov.u32 	%r3416, %r2057;
	@%p50 bra 	LBB0_48;
	bra.uni 	LBB0_31;
LBB0_48:                                // %oksrem12561
                                        //   in Loop: Header=BB0_28 Depth=2
	add.s32 	%r2989, %r71, %r161;
	mul.wide.s32 	%rd270, %r2989, 4;
	add.s64 	%rd272, %rd26, %rd270;
	ld.shared.u32 	%r3416, [%rd272];
	add.s32 	%r2990, %r72, %r161;
	mul.wide.u32 	%rd273, %r2990, 4;
	add.s64 	%rd274, %rd26, %rd273;
	ld.shared.u32 	%r3415, [%rd274];
	add.s32 	%r2991, %r73, %r161;
	mul.wide.s32 	%rd275, %r2991, 4;
	add.s64 	%rd276, %rd26, %rd275;
	ld.shared.u32 	%r3414, [%rd276];
	add.s32 	%r2992, %r74, %r161;
	mul.wide.u32 	%rd277, %r2992, 4;
	add.s64 	%rd278, %rd26, %rd277;
	ld.shared.u32 	%r3413, [%rd278];
LBB0_31:                                // %L29767
                                        //   in Loop: Header=BB0_28 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3028, %r3025}, {%r253, %r256}, {%r3416}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3037, %r3034}, {%r253, %r256}, {%r3415}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3046, %r3043}, {%r253, %r256}, {%r3414}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3055, %r3052}, {%r253, %r256}, {%r3413}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3021, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3023, %r3021, %r3025;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3026, %r290, %r3028, %r3023;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3030, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3032, %r3030, %r3034;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3035, %r290, %r3037, %r3032;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3039, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3041, %r3039, %r3043;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3044, %r290, %r3046, %r3041;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3048, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3050, %r3048, %r3052;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3053, %r290, %r3055, %r3050;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3057, %r293, %r3028;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3060, %r290, %r3025, %r3057;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3064, %r293, %r3037;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3067, %r290, %r3034, %r3064;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3071, %r293, %r3046;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3074, %r290, %r3043, %r3071;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3078, %r293, %r3055;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3081, %r290, %r3052, %r3078;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3126, %r3130}, {%r314, %r320, %r317, %r323}, {%r3026, %r3060}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3142, %r3146}, {%r314, %r320, %r317, %r323}, {%r3035, %r3067}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3134, %r3138}, {%r314, %r320, %r317, %r323}, {%r3044, %r3074}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3150, %r3154}, {%r314, %r320, %r317, %r323}, {%r3053, %r3081}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3125, %r3126, %r3126, %r2968;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3129, %r3130, %r3130, %r3125;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3133, %r3134, %r3134, %r3129;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3137, %r3138, %r3138, %r3133;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3141, %r3142, %r3142, %r2984;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3145, %r3146, %r3146, %r3141;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3149, %r3150, %r3150, %r3145;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3153, %r3154, %r3154, %r3149;
	// end inline asm
	mov.u32 	%r3417, %r2057;
	mov.u32 	%r3418, %r2057;
	mov.u32 	%r3419, %r2057;
	mov.u32 	%r3420, %r2057;
	@%p50 bra 	LBB0_49;
	bra.uni 	LBB0_32;
LBB0_49:                                // %oksrem13096
                                        //   in Loop: Header=BB0_28 Depth=2
	add.s32 	%r3158, %r71, %r162;
	mul.wide.s32 	%rd279, %r3158, 4;
	add.s64 	%rd281, %rd26, %rd279;
	ld.shared.u32 	%r3420, [%rd281];
	add.s32 	%r3159, %r72, %r162;
	mul.wide.u32 	%rd282, %r3159, 4;
	add.s64 	%rd283, %rd26, %rd282;
	ld.shared.u32 	%r3419, [%rd283];
	add.s32 	%r3160, %r73, %r162;
	mul.wide.s32 	%rd284, %r3160, 4;
	add.s64 	%rd285, %rd26, %rd284;
	ld.shared.u32 	%r3418, [%rd285];
	add.s32 	%r3161, %r74, %r162;
	mul.wide.u32 	%rd286, %r3161, 4;
	add.s64 	%rd287, %rd26, %rd286;
	ld.shared.u32 	%r3417, [%rd287];
LBB0_32:                                // %L30992
                                        //   in Loop: Header=BB0_28 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3197, %r3194}, {%r253, %r256}, {%r3420}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3206, %r3203}, {%r253, %r256}, {%r3419}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3215, %r3212}, {%r253, %r256}, {%r3418}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3224, %r3221}, {%r253, %r256}, {%r3417}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3190, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3192, %r3190, %r3194;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3195, %r290, %r3197, %r3192;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3199, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3201, %r3199, %r3203;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3204, %r290, %r3206, %r3201;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3208, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3210, %r3208, %r3212;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3213, %r290, %r3215, %r3210;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3217, %r293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3219, %r3217, %r3221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3222, %r290, %r3224, %r3219;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3226, %r293, %r3197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3229, %r290, %r3194, %r3226;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3233, %r293, %r3206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3236, %r290, %r3203, %r3233;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3240, %r293, %r3215;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3243, %r290, %r3212, %r3240;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3247, %r293, %r3224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3250, %r290, %r3221, %r3247;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3295, %r3299}, {%r314, %r320, %r317, %r323}, {%r3195, %r3229}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3311, %r3315}, {%r314, %r320, %r317, %r323}, {%r3204, %r3236}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3303, %r3307}, {%r314, %r320, %r317, %r323}, {%r3213, %r3243}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3319, %r3323}, {%r314, %r320, %r317, %r323}, {%r3222, %r3250}, {%r2057, %r2057};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3294, %r3295, %r3295, %r3137;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3298, %r3299, %r3299, %r3294;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3302, %r3303, %r3303, %r3298;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3378, %r3307, %r3307, %r3302;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3310, %r3311, %r3311, %r3153;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3314, %r3315, %r3315, %r3310;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3318, %r3319, %r3319, %r3314;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3377, %r3323, %r3323, %r3318;
	// end inline asm
	add.s32 	%r3375, %r3375, 4;
	setp.ne.s32 	%p73, %r3375, 40;
	@%p73 bra 	LBB0_36;
// %bb.33:                              // %L31138
                                        //   in Loop: Header=BB0_28 Depth=2
	@%p26 bra 	LBB0_35;
// %bb.34:                              // %L31197
                                        //   in Loop: Header=BB0_28 Depth=2
	mul.lo.s32 	%r3326, %r3376, 1152;
	add.s32 	%r3327, %r75, %r3326;
	mul.wide.u32 	%rd288, %r3327, 4;
	add.s64 	%rd289, %rd4, %rd288;
	st.global.u32 	[%rd289], %r3378;
	add.s32 	%r3328, %r76, %r3326;
	mul.wide.u32 	%rd290, %r3328, 4;
	add.s64 	%rd291, %rd4, %rd290;
	st.global.u32 	[%rd291], %r3377;
	bra.uni 	LBB0_35;
LBB0_38:                                // %guard_pass14638
	@%p26 bra 	LBB0_40;
// %bb.39:                              // %L31531
	mul.lo.s32 	%r3330, %r3376, 1152;
	add.s32 	%r3331, %r75, %r3330;
	mul.wide.u32 	%rd292, %r3331, 4;
	add.s64 	%rd293, %rd4, %rd292;
	st.global.u32 	[%rd293], %r3378;
	add.s32 	%r3332, %r76, %r3330;
	mul.wide.u32 	%rd294, %r3332, 4;
	add.s64 	%rd295, %rd4, %rd294;
	st.global.u32 	[%rd295], %r3377;
LBB0_40:                                // %L31763
	mov.u32 	%r3333, 0;
	st.global.u32 	[%rd5], %r3333;
	ret;
LBB0_1:                                 // %L8
	ld.param.u64 	%rd11, [_Z15julia_frb_1084813CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0];
	mov.u64 	%rd16, exception1;
	cvta.global.u64 	%rd17, %rd16;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd17;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd11;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
