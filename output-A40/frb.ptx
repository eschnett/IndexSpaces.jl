// PTX CompilerJob of frb(CuDeviceVector{Int16x2, 1}, CuDeviceVector{Float16x2, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Float16x2, 1}, CuDeviceVector{Int32, 1}) in world 33561 for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 7.1
.target sm_86
.address_size 64

	// .globl	_Z15julia_frb_1025413CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE // -- Begin function _Z15julia_frb_1025413CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[8]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z15julia_frb_1025413CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.visible .entry _Z15julia_frb_1025413CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE(
	.param .align 8 .b8 _Z15julia_frb_1025413CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0[8],
	.param .align 8 .b8 _Z15julia_frb_1025413CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z15julia_frb_1025413CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z15julia_frb_1025413CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z15julia_frb_1025413CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z15julia_frb_1025413CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<143>;
	.reg .b16 	%rs<270>;
	.reg .b32 	%r<3513>;
	.reg .f32 	%f<402>;
	.reg .b64 	%rd<285>;

// %bb.0:                               // %conversion
	// begin inline asm
	mov.u32 %r285, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r285, 76895;
	@%p1 bra 	LBB0_96;
	bra.uni 	LBB0_1;
LBB0_96:                                // %L10
	ld.param.u64 	%rd14, [_Z15julia_frb_1025413CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r286, %r2, 768;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r287, %r286, %r1;
	add.s32 	%r288, %r287, %r4;
	mul.wide.u32 	%rd20, %r288, 4;
	add.s64 	%rd5, %rd14, %rd20;
	mov.u32 	%r289, 1;
	st.global.u32 	[%rd5], %r289;
	and.b32  	%r5, %r1, 3;
	shr.u32 	%r6, %r1, 2;
	mul.lo.s32 	%r290, %r5, %r6;
	and.b32  	%r291, %r290, 7;
	cvt.rn.f32.u32 	%f102, %r291;
	mov.f32 	%f103, 0f40800000;
	div.approx.f32 	%f1, %f102, %f103;
	abs.f32 	%f400, %f1;
	setp.lt.f32 	%p2, %f400, 0f40000000;
	@%p2 bra 	LBB0_108;
// %bb.97:
	setp.gtu.f32 	%p3, %f400, 0f4B800000;
	@%p3 bra 	LBB0_104;
	bra.uni 	LBB0_98;
LBB0_104:
	mov.b32 	%r216, %f400;
	and.b32  	%r292, %r216, 8388607;
	or.b32  	%r3511, %r292, 1065353216;
	mov.b32 	%f399, %r3511;
	add.s32 	%r293, %r216, -1073741824;
	and.b32  	%r3512, %r293, -8388608;
	setp.eq.s32 	%p9, %r3512, 0;
	@%p9 bra 	LBB0_107;
// %bb.105:                             // %__nv_fmaf_rn.exit4.i.i.i1407.preheader
	mov.f32 	%f113, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f112,%f113;
	// end inline asm
LBB0_106:                               // %__nv_fmaf_rn.exit4.i.i.i1407
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r294, %r3512, 192937984;
	add.s32 	%r295, %r294, %r3511;
	mov.b32 	%f114, %r295;
	mul.f32 	%f115, %f112, %f114;
	sub.f32 	%f116, %f114, %f115;
	fma.rn.f32 	%f117, %f116, %f112, %f115;
	sub.f32 	%f118, %f114, %f117;
	fma.rz.f32 	%f119, %f118, %f112, %f117;
	cvt.rzi.f32.f32 	%f120, %f119;
	sub.f32 	%f399, %f114, %f120;
	sub.s32 	%r3512, %r3512, %r294;
	mov.b32 	%r3511, %f399;
	setp.ne.s32 	%p10, %r3512, 0;
	setp.ne.s32 	%p11, %r3511, 0;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	LBB0_106;
LBB0_107:                               // %__internal_fmodf_slowpath_mod.exit.i.i1409
	setp.gt.u32 	%p13, %r216, 2139095039;
	selp.f32 	%f121, 0f7FFFFFFF, 0f4B800000, %p13;
	mul.f32 	%f122, %f399, 0f34000000;
	mul.f32 	%f400, %f121, %f122;
	bra.uni 	LBB0_108;
LBB0_98:                                // %__nv_fast_fdividef.exit.i.i.i1379
	mov.f32 	%f104, 0f40000000;
	div.approx.f32 	%f105, %f400, %f104;
	cvt.rzi.f32.f32 	%f398, %f105;
	fma.rn.f32 	%f88, %f398, 0fC0000000, %f400;
	mov.b32 	%r215, %f88;
	setp.lt.u32 	%p4, %r215, 1073741824;
	@%p4 bra 	LBB0_103;
// %bb.99:
	setp.lt.u32 	%p5, %r215, -2147483647;
	@%p5 bra 	LBB0_101;
// %bb.100:
	add.f32 	%f110, %f398, 0fBF800000;
	setp.lt.f32 	%p8, %f88, 0fC0000000;
	add.f32 	%f111, %f110, 0fBF800000;
	selp.f32 	%f398, %f111, %f110, %p8;
	bra.uni 	LBB0_103;
LBB0_101:
	add.f32 	%f398, %f398, 0f3F800000;
	setp.ltu.f32 	%p6, %f88, 0f40800000;
	@%p6 bra 	LBB0_103;
// %bb.102:                             // %__nv_fmaf_rn.exit.i.i.i1384
	add.f32 	%f106, %f398, 0f3F800000;
	fma.rn.f32 	%f108, %f104, 0fC0400000, %f88;
	setp.ge.f32 	%p7, %f108, 0f00000000;
	add.f32 	%f109, %f106, 0f3F800000;
	selp.f32 	%f398, %f109, %f106, %p7;
LBB0_103:                               // %__internal_fmodf_fastpath_quot.exit.i.i1388
	fma.rn.f32 	%f400, %f398, 0fC0000000, %f400;
LBB0_108:                               // %__internal_fmodf_kernel.exit.i1413
	abs.f32 	%f123, %f400;
	setp.gtu.f32 	%p14, %f123, 0f7F800000;
	@%p14 bra 	LBB0_110;
// %bb.109:
	mov.b32 	%r296, %f1;
	and.b32  	%r297, %r296, -2147483648;
	mov.b32 	%r298, %f400;
	or.b32  	%r299, %r297, %r298;
	mov.b32 	%f400, %r299;
LBB0_110:                               // %__nv_fmodf.exit1414
	add.f32 	%f125, %f400, %f400;
	mov.b32 	%r306, %f125;
	and.b32  	%r307, %r306, -2147483648;
	or.b32  	%r308, %r307, 1056964608;
	mov.b32 	%f126, %r308;
	add.f32 	%f127, %f125, %f126;
	cvt.rzi.f32.f32 	%f128, %f127;
	abs.f32 	%f129, %f125;
	setp.gt.f32 	%p15, %f129, 0f4B000000;
	selp.f32 	%f130, %f125, %f128, %p15;
	cvt.rzi.f32.f32 	%f131, %f125;
	setp.lt.f32 	%p16, %f129, 0f3F000000;
	selp.f32 	%f132, %f131, %f130, %p16;
	cvt.rzi.s32.f32 	%r309, %f132;
	fma.rn.f32 	%f133, %f132, 0fBF000000, %f400;
	mul.f32 	%f134, %f133, 0f34222169;
	fma.rn.f32 	%f135, %f133, 0f40490FDA, %f134;
	mul.f32 	%f136, %f135, %f135;
	fma.rn.f32 	%f137, %f136, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f138, %f137, %f136, 0f3D2AAABB;
	fma.rn.f32 	%f139, %f138, %f136, 0fBEFFFFFF;
	fma.rn.f32 	%f140, %f139, %f136, 0f3F800000;
	fma.rn.f32 	%f141, %f136, %f135, 0f00000000;
	fma.rn.f32 	%f142, %f136, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f143, %f142, %f136, 0fBE2AAAA8;
	fma.rn.f32 	%f144, %f143, %f141, %f135;
	and.b32  	%r310, %r309, 1;
	setp.eq.b32 	%p17, %r310, 1;
	selp.f32 	%f145, %f140, %f144, %p17;
	selp.f32 	%f146, %f144, %f140, %p17;
	and.b32  	%r311, %r309, 2;
	setp.eq.s32 	%p18, %r311, 0;
	neg.f32 	%f147, %f145;
	selp.f32 	%f148, %f145, %f147, %p18;
	add.s32 	%r312, %r309, 1;
	and.b32  	%r313, %r312, 2;
	mov.f32 	%f396, 0f00000000;
	cvt.rzi.f32.f32 	%f151, %f400;
	setp.eq.f32 	%p20, %f151, %f400;
	mul.f32 	%f152, %f400, 0f00000000;
	shl.b32 	%r225, %r1, 1;
	and.b32  	%r226, %r225, 6;
	or.b32  	%r227, %r226, 1;
	setp.eq.s32 	%p22, %r226, 6;
	mov.f32 	%f372, 0f41C00000;
	mul.lo.s32 	%r3412, %r226, %r6;
	mov.f32 	%f378, %f396;
	mov.f32 	%f379, %f396;
	@%p22 bra 	LBB0_17;
// %bb.2:                               // %L206
	cvt.u16.u32 	%rs2, %r3412;
	and.b16  	%rs3, %rs2, 255;
	mul.lo.s16 	%rs4, %rs3, 171;
	shr.u16 	%rs5, %rs4, 13;
	mul.lo.s16 	%rs6, %rs5, 48;
	sub.s16 	%rs7, %rs2, %rs6;
	and.b16  	%rs8, %rs7, 255;
	cvt.rn.f32.u16 	%f157, %rs8;
	div.approx.f32 	%f3, %f157, %f372;
	abs.f32 	%f376, %f3;
	setp.lt.f32 	%p23, %f376, 0f40000000;
	@%p23 bra 	LBB0_14;
// %bb.3:
	setp.gtu.f32 	%p24, %f376, 0f4B800000;
	@%p24 bra 	LBB0_10;
	bra.uni 	LBB0_4;
LBB0_10:
	mov.b32 	%r8, %f376;
	and.b32  	%r315, %r8, 8388607;
	or.b32  	%r3415, %r315, 1065353216;
	mov.b32 	%f375, %r3415;
	add.s32 	%r316, %r8, -1073741824;
	and.b32  	%r3416, %r316, -8388608;
	setp.eq.s32 	%p30, %r3416, 0;
	@%p30 bra 	LBB0_13;
// %bb.11:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f168, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f167,%f168;
	// end inline asm
LBB0_12:                                // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r317, %r3416, 192937984;
	add.s32 	%r318, %r317, %r3415;
	mov.b32 	%f169, %r318;
	mul.f32 	%f170, %f167, %f169;
	sub.f32 	%f171, %f169, %f170;
	fma.rn.f32 	%f172, %f171, %f167, %f170;
	sub.f32 	%f173, %f169, %f172;
	fma.rz.f32 	%f174, %f173, %f167, %f172;
	cvt.rzi.f32.f32 	%f175, %f174;
	sub.f32 	%f375, %f169, %f175;
	sub.s32 	%r3416, %r3416, %r317;
	mov.b32 	%r3415, %f375;
	setp.ne.s32 	%p31, %r3416, 0;
	setp.ne.s32 	%p32, %r3415, 0;
	and.pred  	%p33, %p31, %p32;
	@%p33 bra 	LBB0_12;
LBB0_13:                                // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p34, %r8, 2139095039;
	selp.f32 	%f176, 0f7FFFFFFF, 0f4B800000, %p34;
	mul.f32 	%f177, %f375, 0f34000000;
	mul.f32 	%f376, %f176, %f177;
	bra.uni 	LBB0_14;
LBB0_4:                                 // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f159, 0f40000000;
	div.approx.f32 	%f160, %f376, %f159;
	cvt.rzi.f32.f32 	%f374, %f160;
	fma.rn.f32 	%f6, %f374, 0fC0000000, %f376;
	mov.b32 	%r7, %f6;
	setp.lt.u32 	%p25, %r7, 1073741824;
	@%p25 bra 	LBB0_9;
// %bb.5:
	setp.lt.u32 	%p26, %r7, -2147483647;
	@%p26 bra 	LBB0_7;
// %bb.6:
	add.f32 	%f165, %f374, 0fBF800000;
	setp.lt.f32 	%p29, %f6, 0fC0000000;
	add.f32 	%f166, %f165, 0fBF800000;
	selp.f32 	%f374, %f166, %f165, %p29;
	bra.uni 	LBB0_9;
LBB0_7:
	add.f32 	%f374, %f374, 0f3F800000;
	setp.ltu.f32 	%p27, %f6, 0f40800000;
	@%p27 bra 	LBB0_9;
// %bb.8:                               // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f161, %f374, 0f3F800000;
	fma.rn.f32 	%f163, %f159, 0fC0400000, %f6;
	setp.ge.f32 	%p28, %f163, 0f00000000;
	add.f32 	%f164, %f161, 0f3F800000;
	selp.f32 	%f374, %f164, %f161, %p28;
LBB0_9:                                 // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f376, %f374, 0fC0000000, %f376;
LBB0_14:                                // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f178, %f376;
	setp.gtu.f32 	%p35, %f178, 0f7F800000;
	@%p35 bra 	LBB0_16;
// %bb.15:
	mov.b32 	%r319, %f3;
	and.b32  	%r320, %r319, -2147483648;
	mov.b32 	%r321, %f376;
	or.b32  	%r322, %r320, %r321;
	mov.b32 	%f376, %r322;
LBB0_16:                                // %__nv_fmodf.exit
	add.f32 	%f179, %f376, %f376;
	mov.b32 	%r323, %f179;
	and.b32  	%r324, %r323, -2147483648;
	or.b32  	%r325, %r324, 1056964608;
	mov.b32 	%f180, %r325;
	add.f32 	%f181, %f179, %f180;
	cvt.rzi.f32.f32 	%f182, %f181;
	abs.f32 	%f183, %f179;
	setp.gt.f32 	%p36, %f183, 0f4B000000;
	selp.f32 	%f184, %f179, %f182, %p36;
	cvt.rzi.f32.f32 	%f185, %f179;
	setp.lt.f32 	%p37, %f183, 0f3F000000;
	selp.f32 	%f186, %f185, %f184, %p37;
	cvt.rzi.s32.f32 	%r326, %f186;
	fma.rn.f32 	%f187, %f186, 0fBF000000, %f376;
	mul.f32 	%f188, %f187, 0f34222169;
	fma.rn.f32 	%f189, %f187, 0f40490FDA, %f188;
	mul.f32 	%f190, %f189, %f189;
	fma.rn.f32 	%f191, %f190, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f192, %f191, %f190, 0f3D2AAABB;
	fma.rn.f32 	%f193, %f192, %f190, 0fBEFFFFFF;
	fma.rn.f32 	%f194, %f193, %f190, 0f3F800000;
	fma.rn.f32 	%f195, %f190, %f189, 0f00000000;
	fma.rn.f32 	%f196, %f190, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f197, %f196, %f190, 0fBE2AAAA8;
	fma.rn.f32 	%f198, %f197, %f195, %f189;
	and.b32  	%r327, %r326, 1;
	setp.eq.b32 	%p38, %r327, 1;
	selp.f32 	%f199, %f194, %f198, %p38;
	selp.f32 	%f200, %f198, %f194, %p38;
	and.b32  	%r328, %r326, 2;
	setp.eq.s32 	%p39, %r328, 0;
	neg.f32 	%f201, %f199;
	selp.f32 	%f202, %f199, %f201, %p39;
	add.s32 	%r329, %r326, 1;
	and.b32  	%r330, %r329, 2;
	setp.eq.s32 	%p40, %r330, 0;
	mov.f32 	%f203, 0f00000000;
	sub.f32 	%f204, %f203, %f200;
	selp.f32 	%f205, %f200, %f204, %p40;
	cvt.rzi.f32.f32 	%f206, %f376;
	setp.eq.f32 	%p41, %f206, %f376;
	mul.f32 	%f207, %f376, 0f00000000;
	selp.f32 	%f379, %f207, %f202, %p41;
	abs.f32 	%f208, %f376;
	setp.gt.f32 	%p42, %f208, 0f4B800000;
	add.f32 	%f209, %f379, 0f3F800000;
	selp.f32 	%f378, %f209, %f205, %p42;
LBB0_17:                                // %L222
	setp.eq.s32 	%p19, %r313, 0;
	sub.f32 	%f149, %f396, %f146;
	selp.f32 	%f153, %f152, %f148, %p20;
	abs.f32 	%f154, %f400;
	setp.gt.u32 	%p43, %r227, 5;
	mul.lo.s32 	%r3413, %r227, %r6;
	mov.f32 	%f384, %f396;
	mov.f32 	%f385, %f396;
	@%p43 bra 	LBB0_33;
// %bb.18:                              // %L226
	mul.hi.u32 	%r332, %r3413, -1431655765;
	shr.u32 	%r333, %r332, 5;
	mul.lo.s32 	%r334, %r333, 48;
	sub.s32 	%r335, %r3413, %r334;
	cvt.rn.f32.s32 	%f211, %r335;
	div.approx.f32 	%f24, %f211, %f372;
	abs.f32 	%f382, %f24;
	setp.lt.f32 	%p44, %f382, 0f40000000;
	@%p44 bra 	LBB0_30;
// %bb.19:
	setp.gtu.f32 	%p45, %f382, 0f4B800000;
	@%p45 bra 	LBB0_26;
	bra.uni 	LBB0_20;
LBB0_26:
	mov.b32 	%r16, %f382;
	and.b32  	%r336, %r16, 8388607;
	or.b32  	%r3417, %r336, 1065353216;
	mov.b32 	%f381, %r3417;
	add.s32 	%r337, %r16, -1073741824;
	and.b32  	%r3418, %r337, -8388608;
	setp.eq.s32 	%p51, %r3418, 0;
	@%p51 bra 	LBB0_29;
// %bb.27:                              // %__nv_fmaf_rn.exit4.i.i.i1269.preheader
	mov.f32 	%f222, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f221,%f222;
	// end inline asm
LBB0_28:                                // %__nv_fmaf_rn.exit4.i.i.i1269
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r338, %r3418, 192937984;
	add.s32 	%r339, %r338, %r3417;
	mov.b32 	%f223, %r339;
	mul.f32 	%f224, %f221, %f223;
	sub.f32 	%f225, %f223, %f224;
	fma.rn.f32 	%f226, %f225, %f221, %f224;
	sub.f32 	%f227, %f223, %f226;
	fma.rz.f32 	%f228, %f227, %f221, %f226;
	cvt.rzi.f32.f32 	%f229, %f228;
	sub.f32 	%f381, %f223, %f229;
	sub.s32 	%r3418, %r3418, %r338;
	mov.b32 	%r3417, %f381;
	setp.ne.s32 	%p52, %r3418, 0;
	setp.ne.s32 	%p53, %r3417, 0;
	and.pred  	%p54, %p52, %p53;
	@%p54 bra 	LBB0_28;
LBB0_29:                                // %__internal_fmodf_slowpath_mod.exit.i.i1271
	setp.gt.u32 	%p55, %r16, 2139095039;
	selp.f32 	%f230, 0f7FFFFFFF, 0f4B800000, %p55;
	mul.f32 	%f231, %f381, 0f34000000;
	mul.f32 	%f382, %f230, %f231;
	bra.uni 	LBB0_30;
LBB0_20:                                // %__nv_fast_fdividef.exit.i.i.i1241
	mov.f32 	%f213, 0f40000000;
	div.approx.f32 	%f214, %f382, %f213;
	cvt.rzi.f32.f32 	%f380, %f214;
	fma.rn.f32 	%f27, %f380, 0fC0000000, %f382;
	mov.b32 	%r15, %f27;
	setp.lt.u32 	%p46, %r15, 1073741824;
	@%p46 bra 	LBB0_25;
// %bb.21:
	setp.lt.u32 	%p47, %r15, -2147483647;
	@%p47 bra 	LBB0_23;
// %bb.22:
	add.f32 	%f219, %f380, 0fBF800000;
	setp.lt.f32 	%p50, %f27, 0fC0000000;
	add.f32 	%f220, %f219, 0fBF800000;
	selp.f32 	%f380, %f220, %f219, %p50;
	bra.uni 	LBB0_25;
LBB0_23:
	add.f32 	%f380, %f380, 0f3F800000;
	setp.ltu.f32 	%p48, %f27, 0f40800000;
	@%p48 bra 	LBB0_25;
// %bb.24:                              // %__nv_fmaf_rn.exit.i.i.i1246
	add.f32 	%f215, %f380, 0f3F800000;
	fma.rn.f32 	%f217, %f213, 0fC0400000, %f27;
	setp.ge.f32 	%p49, %f217, 0f00000000;
	add.f32 	%f218, %f215, 0f3F800000;
	selp.f32 	%f380, %f218, %f215, %p49;
LBB0_25:                                // %__internal_fmodf_fastpath_quot.exit.i.i1250
	fma.rn.f32 	%f382, %f380, 0fC0000000, %f382;
LBB0_30:                                // %__internal_fmodf_kernel.exit.i1275
	abs.f32 	%f232, %f382;
	setp.gtu.f32 	%p56, %f232, 0f7F800000;
	@%p56 bra 	LBB0_32;
// %bb.31:
	mov.b32 	%r340, %f24;
	and.b32  	%r341, %r340, -2147483648;
	mov.b32 	%r342, %f382;
	or.b32  	%r343, %r341, %r342;
	mov.b32 	%f382, %r343;
LBB0_32:                                // %__nv_fmodf.exit1276
	add.f32 	%f233, %f382, %f382;
	mov.b32 	%r344, %f233;
	and.b32  	%r345, %r344, -2147483648;
	or.b32  	%r346, %r345, 1056964608;
	mov.b32 	%f234, %r346;
	add.f32 	%f235, %f233, %f234;
	cvt.rzi.f32.f32 	%f236, %f235;
	abs.f32 	%f237, %f233;
	setp.gt.f32 	%p57, %f237, 0f4B000000;
	selp.f32 	%f238, %f233, %f236, %p57;
	cvt.rzi.f32.f32 	%f239, %f233;
	setp.lt.f32 	%p58, %f237, 0f3F000000;
	selp.f32 	%f240, %f239, %f238, %p58;
	cvt.rzi.s32.f32 	%r347, %f240;
	fma.rn.f32 	%f241, %f240, 0fBF000000, %f382;
	mul.f32 	%f242, %f241, 0f34222169;
	fma.rn.f32 	%f243, %f241, 0f40490FDA, %f242;
	mul.f32 	%f244, %f243, %f243;
	fma.rn.f32 	%f245, %f244, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f246, %f245, %f244, 0f3D2AAABB;
	fma.rn.f32 	%f247, %f246, %f244, 0fBEFFFFFF;
	fma.rn.f32 	%f248, %f247, %f244, 0f3F800000;
	fma.rn.f32 	%f249, %f244, %f243, 0f00000000;
	fma.rn.f32 	%f250, %f244, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f251, %f250, %f244, 0fBE2AAAA8;
	fma.rn.f32 	%f252, %f251, %f249, %f243;
	and.b32  	%r348, %r347, 1;
	setp.eq.b32 	%p59, %r348, 1;
	selp.f32 	%f253, %f248, %f252, %p59;
	selp.f32 	%f254, %f252, %f248, %p59;
	and.b32  	%r349, %r347, 2;
	setp.eq.s32 	%p60, %r349, 0;
	neg.f32 	%f255, %f253;
	selp.f32 	%f256, %f253, %f255, %p60;
	add.s32 	%r350, %r347, 1;
	and.b32  	%r351, %r350, 2;
	setp.eq.s32 	%p61, %r351, 0;
	mov.f32 	%f257, 0f00000000;
	sub.f32 	%f258, %f257, %f254;
	selp.f32 	%f259, %f254, %f258, %p61;
	cvt.rzi.f32.f32 	%f260, %f382;
	setp.eq.f32 	%p62, %f260, %f382;
	mul.f32 	%f261, %f382, 0f00000000;
	selp.f32 	%f385, %f261, %f256, %p62;
	abs.f32 	%f262, %f382;
	setp.gt.f32 	%p63, %f262, 0f4B800000;
	add.f32 	%f263, %f385, 0f3F800000;
	selp.f32 	%f384, %f263, %f259, %p63;
LBB0_33:                                // %L242
	selp.f32 	%f150, %f146, %f149, %p19;
	setp.gt.f32 	%p21, %f154, 0f4B800000;
	add.f32 	%f155, %f153, 0f3F800000;
	setp.gt.u32 	%p65, %r1, 23;
	or.pred  	%p66, %p22, %p65;
	mov.f32 	%f373, 0f40400000;
	mov.f32 	%f390, %f396;
	mov.f32 	%f391, %f396;
	@%p66 bra 	LBB0_49;
// %bb.34:                              // %L279
	cvt.u16.u32 	%rs9, %r3412;
	and.b16  	%rs10, %rs9, 255;
	mul.lo.s16 	%rs11, %rs10, 171;
	shr.u16 	%rs12, %rs11, 10;
	mul.lo.s16 	%rs13, %rs12, 6;
	sub.s16 	%rs14, %rs9, %rs13;
	and.b16  	%rs15, %rs14, 255;
	cvt.rn.f32.u16 	%f265, %rs15;
	div.approx.f32 	%f45, %f265, %f373;
	abs.f32 	%f388, %f45;
	setp.lt.f32 	%p67, %f388, 0f40000000;
	@%p67 bra 	LBB0_46;
// %bb.35:
	setp.gtu.f32 	%p68, %f388, 0f4B800000;
	@%p68 bra 	LBB0_42;
	bra.uni 	LBB0_36;
LBB0_42:
	mov.b32 	%r26, %f388;
	and.b32  	%r359, %r26, 8388607;
	or.b32  	%r3419, %r359, 1065353216;
	mov.b32 	%f387, %r3419;
	add.s32 	%r360, %r26, -1073741824;
	and.b32  	%r3420, %r360, -8388608;
	setp.eq.s32 	%p74, %r3420, 0;
	@%p74 bra 	LBB0_45;
// %bb.43:                              // %__nv_fmaf_rn.exit4.i.i.i1315.preheader
	mov.f32 	%f276, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f275,%f276;
	// end inline asm
LBB0_44:                                // %__nv_fmaf_rn.exit4.i.i.i1315
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r361, %r3420, 192937984;
	add.s32 	%r362, %r361, %r3419;
	mov.b32 	%f277, %r362;
	mul.f32 	%f278, %f275, %f277;
	sub.f32 	%f279, %f277, %f278;
	fma.rn.f32 	%f280, %f279, %f275, %f278;
	sub.f32 	%f281, %f277, %f280;
	fma.rz.f32 	%f282, %f281, %f275, %f280;
	cvt.rzi.f32.f32 	%f283, %f282;
	sub.f32 	%f387, %f277, %f283;
	sub.s32 	%r3420, %r3420, %r361;
	mov.b32 	%r3419, %f387;
	setp.ne.s32 	%p75, %r3420, 0;
	setp.ne.s32 	%p76, %r3419, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	LBB0_44;
LBB0_45:                                // %__internal_fmodf_slowpath_mod.exit.i.i1317
	setp.gt.u32 	%p78, %r26, 2139095039;
	selp.f32 	%f284, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f285, %f387, 0f34000000;
	mul.f32 	%f388, %f284, %f285;
	bra.uni 	LBB0_46;
LBB0_36:                                // %__nv_fast_fdividef.exit.i.i.i1287
	mov.f32 	%f267, 0f40000000;
	div.approx.f32 	%f268, %f388, %f267;
	cvt.rzi.f32.f32 	%f386, %f268;
	fma.rn.f32 	%f48, %f386, 0fC0000000, %f388;
	mov.b32 	%r25, %f48;
	setp.lt.u32 	%p69, %r25, 1073741824;
	@%p69 bra 	LBB0_41;
// %bb.37:
	setp.lt.u32 	%p70, %r25, -2147483647;
	@%p70 bra 	LBB0_39;
// %bb.38:
	add.f32 	%f273, %f386, 0fBF800000;
	setp.lt.f32 	%p73, %f48, 0fC0000000;
	add.f32 	%f274, %f273, 0fBF800000;
	selp.f32 	%f386, %f274, %f273, %p73;
	bra.uni 	LBB0_41;
LBB0_39:
	add.f32 	%f386, %f386, 0f3F800000;
	setp.ltu.f32 	%p71, %f48, 0f40800000;
	@%p71 bra 	LBB0_41;
// %bb.40:                              // %__nv_fmaf_rn.exit.i.i.i1292
	add.f32 	%f269, %f386, 0f3F800000;
	fma.rn.f32 	%f271, %f267, 0fC0400000, %f48;
	setp.ge.f32 	%p72, %f271, 0f00000000;
	add.f32 	%f272, %f269, 0f3F800000;
	selp.f32 	%f386, %f272, %f269, %p72;
LBB0_41:                                // %__internal_fmodf_fastpath_quot.exit.i.i1296
	fma.rn.f32 	%f388, %f386, 0fC0000000, %f388;
LBB0_46:                                // %__internal_fmodf_kernel.exit.i1321
	abs.f32 	%f286, %f388;
	setp.gtu.f32 	%p79, %f286, 0f7F800000;
	@%p79 bra 	LBB0_48;
// %bb.47:
	mov.b32 	%r363, %f45;
	and.b32  	%r364, %r363, -2147483648;
	mov.b32 	%r365, %f388;
	or.b32  	%r366, %r364, %r365;
	mov.b32 	%f388, %r366;
LBB0_48:                                // %__nv_fmodf.exit1322
	add.f32 	%f287, %f388, %f388;
	mov.b32 	%r367, %f287;
	and.b32  	%r368, %r367, -2147483648;
	or.b32  	%r369, %r368, 1056964608;
	mov.b32 	%f288, %r369;
	add.f32 	%f289, %f287, %f288;
	cvt.rzi.f32.f32 	%f290, %f289;
	abs.f32 	%f291, %f287;
	setp.gt.f32 	%p80, %f291, 0f4B000000;
	selp.f32 	%f292, %f287, %f290, %p80;
	cvt.rzi.f32.f32 	%f293, %f287;
	setp.lt.f32 	%p81, %f291, 0f3F000000;
	selp.f32 	%f294, %f293, %f292, %p81;
	cvt.rzi.s32.f32 	%r370, %f294;
	fma.rn.f32 	%f295, %f294, 0fBF000000, %f388;
	mul.f32 	%f296, %f295, 0f34222169;
	fma.rn.f32 	%f297, %f295, 0f40490FDA, %f296;
	mul.f32 	%f298, %f297, %f297;
	fma.rn.f32 	%f299, %f298, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f300, %f299, %f298, 0f3D2AAABB;
	fma.rn.f32 	%f301, %f300, %f298, 0fBEFFFFFF;
	fma.rn.f32 	%f302, %f301, %f298, 0f3F800000;
	fma.rn.f32 	%f303, %f298, %f297, 0f00000000;
	fma.rn.f32 	%f304, %f298, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f305, %f304, %f298, 0fBE2AAAA8;
	fma.rn.f32 	%f306, %f305, %f303, %f297;
	and.b32  	%r371, %r370, 1;
	setp.eq.b32 	%p82, %r371, 1;
	selp.f32 	%f307, %f302, %f306, %p82;
	selp.f32 	%f308, %f306, %f302, %p82;
	and.b32  	%r372, %r370, 2;
	setp.eq.s32 	%p83, %r372, 0;
	neg.f32 	%f309, %f307;
	selp.f32 	%f310, %f307, %f309, %p83;
	add.s32 	%r373, %r370, 1;
	and.b32  	%r374, %r373, 2;
	setp.eq.s32 	%p84, %r374, 0;
	mov.f32 	%f311, 0f00000000;
	sub.f32 	%f312, %f311, %f308;
	selp.f32 	%f313, %f308, %f312, %p84;
	cvt.rzi.f32.f32 	%f314, %f388;
	setp.eq.f32 	%p85, %f314, %f388;
	mul.f32 	%f315, %f388, 0f00000000;
	selp.f32 	%f391, %f315, %f310, %p85;
	abs.f32 	%f316, %f388;
	setp.gt.f32 	%p86, %f316, 0f4B800000;
	add.f32 	%f317, %f391, 0f3F800000;
	selp.f32 	%f390, %f317, %f313, %p86;
LBB0_49:                                // %L295
	selp.f32 	%f156, %f155, %f150, %p21;
	or.pred  	%p89, %p43, %p65;
	mov.f32 	%f397, %f396;
	@%p89 bra 	LBB0_65;
// %bb.50:                              // %L303
	mul.hi.u32 	%r376, %r3413, -1431655765;
	shr.u32 	%r377, %r376, 2;
	mul.lo.s32 	%r378, %r377, 6;
	sub.s32 	%r379, %r3413, %r378;
	cvt.rn.f32.s32 	%f319, %r379;
	div.approx.f32 	%f66, %f319, %f373;
	abs.f32 	%f394, %f66;
	setp.lt.f32 	%p90, %f394, 0f40000000;
	@%p90 bra 	LBB0_62;
// %bb.51:
	setp.gtu.f32 	%p91, %f394, 0f4B800000;
	@%p91 bra 	LBB0_58;
	bra.uni 	LBB0_52;
LBB0_58:
	mov.b32 	%r34, %f394;
	and.b32  	%r380, %r34, 8388607;
	or.b32  	%r3421, %r380, 1065353216;
	mov.b32 	%f393, %r3421;
	add.s32 	%r381, %r34, -1073741824;
	and.b32  	%r3422, %r381, -8388608;
	setp.eq.s32 	%p97, %r3422, 0;
	@%p97 bra 	LBB0_61;
// %bb.59:                              // %__nv_fmaf_rn.exit4.i.i.i1361.preheader
	mov.f32 	%f330, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f329,%f330;
	// end inline asm
LBB0_60:                                // %__nv_fmaf_rn.exit4.i.i.i1361
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r382, %r3422, 192937984;
	add.s32 	%r383, %r382, %r3421;
	mov.b32 	%f331, %r383;
	mul.f32 	%f332, %f329, %f331;
	sub.f32 	%f333, %f331, %f332;
	fma.rn.f32 	%f334, %f333, %f329, %f332;
	sub.f32 	%f335, %f331, %f334;
	fma.rz.f32 	%f336, %f335, %f329, %f334;
	cvt.rzi.f32.f32 	%f337, %f336;
	sub.f32 	%f393, %f331, %f337;
	sub.s32 	%r3422, %r3422, %r382;
	mov.b32 	%r3421, %f393;
	setp.ne.s32 	%p98, %r3422, 0;
	setp.ne.s32 	%p99, %r3421, 0;
	and.pred  	%p100, %p98, %p99;
	@%p100 bra 	LBB0_60;
LBB0_61:                                // %__internal_fmodf_slowpath_mod.exit.i.i1363
	setp.gt.u32 	%p101, %r34, 2139095039;
	selp.f32 	%f338, 0f7FFFFFFF, 0f4B800000, %p101;
	mul.f32 	%f339, %f393, 0f34000000;
	mul.f32 	%f394, %f338, %f339;
	bra.uni 	LBB0_62;
LBB0_52:                                // %__nv_fast_fdividef.exit.i.i.i1333
	mov.f32 	%f321, 0f40000000;
	div.approx.f32 	%f322, %f394, %f321;
	cvt.rzi.f32.f32 	%f392, %f322;
	fma.rn.f32 	%f69, %f392, 0fC0000000, %f394;
	mov.b32 	%r33, %f69;
	setp.lt.u32 	%p92, %r33, 1073741824;
	@%p92 bra 	LBB0_57;
// %bb.53:
	setp.lt.u32 	%p93, %r33, -2147483647;
	@%p93 bra 	LBB0_55;
// %bb.54:
	add.f32 	%f327, %f392, 0fBF800000;
	setp.lt.f32 	%p96, %f69, 0fC0000000;
	add.f32 	%f328, %f327, 0fBF800000;
	selp.f32 	%f392, %f328, %f327, %p96;
	bra.uni 	LBB0_57;
LBB0_55:
	add.f32 	%f392, %f392, 0f3F800000;
	setp.ltu.f32 	%p94, %f69, 0f40800000;
	@%p94 bra 	LBB0_57;
// %bb.56:                              // %__nv_fmaf_rn.exit.i.i.i1338
	add.f32 	%f323, %f392, 0f3F800000;
	fma.rn.f32 	%f325, %f321, 0fC0400000, %f69;
	setp.ge.f32 	%p95, %f325, 0f00000000;
	add.f32 	%f326, %f323, 0f3F800000;
	selp.f32 	%f392, %f326, %f323, %p95;
LBB0_57:                                // %__internal_fmodf_fastpath_quot.exit.i.i1342
	fma.rn.f32 	%f394, %f392, 0fC0000000, %f394;
LBB0_62:                                // %__internal_fmodf_kernel.exit.i1367
	abs.f32 	%f340, %f394;
	setp.gtu.f32 	%p102, %f340, 0f7F800000;
	@%p102 bra 	LBB0_64;
// %bb.63:
	mov.b32 	%r384, %f66;
	and.b32  	%r385, %r384, -2147483648;
	mov.b32 	%r386, %f394;
	or.b32  	%r387, %r385, %r386;
	mov.b32 	%f394, %r387;
LBB0_64:                                // %__nv_fmodf.exit1368
	add.f32 	%f341, %f394, %f394;
	mov.b32 	%r388, %f341;
	and.b32  	%r389, %r388, -2147483648;
	or.b32  	%r390, %r389, 1056964608;
	mov.b32 	%f342, %r390;
	add.f32 	%f343, %f341, %f342;
	cvt.rzi.f32.f32 	%f344, %f343;
	abs.f32 	%f345, %f341;
	setp.gt.f32 	%p103, %f345, 0f4B000000;
	selp.f32 	%f346, %f341, %f344, %p103;
	cvt.rzi.f32.f32 	%f347, %f341;
	setp.lt.f32 	%p104, %f345, 0f3F000000;
	selp.f32 	%f348, %f347, %f346, %p104;
	cvt.rzi.s32.f32 	%r391, %f348;
	fma.rn.f32 	%f349, %f348, 0fBF000000, %f394;
	mul.f32 	%f350, %f349, 0f34222169;
	fma.rn.f32 	%f351, %f349, 0f40490FDA, %f350;
	mul.f32 	%f352, %f351, %f351;
	fma.rn.f32 	%f353, %f352, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f354, %f353, %f352, 0f3D2AAABB;
	fma.rn.f32 	%f355, %f354, %f352, 0fBEFFFFFF;
	fma.rn.f32 	%f356, %f355, %f352, 0f3F800000;
	fma.rn.f32 	%f357, %f352, %f351, 0f00000000;
	fma.rn.f32 	%f358, %f352, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f359, %f358, %f352, 0fBE2AAAA8;
	fma.rn.f32 	%f360, %f359, %f357, %f351;
	and.b32  	%r392, %r391, 1;
	setp.eq.b32 	%p105, %r392, 1;
	selp.f32 	%f361, %f356, %f360, %p105;
	selp.f32 	%f362, %f360, %f356, %p105;
	and.b32  	%r393, %r391, 2;
	setp.eq.s32 	%p106, %r393, 0;
	neg.f32 	%f363, %f361;
	selp.f32 	%f364, %f361, %f363, %p106;
	add.s32 	%r394, %r391, 1;
	and.b32  	%r395, %r394, 2;
	setp.eq.s32 	%p107, %r395, 0;
	mov.f32 	%f365, 0f00000000;
	sub.f32 	%f366, %f365, %f362;
	selp.f32 	%f367, %f362, %f366, %p107;
	cvt.rzi.f32.f32 	%f368, %f394;
	setp.eq.f32 	%p108, %f368, %f394;
	mul.f32 	%f369, %f394, 0f00000000;
	selp.f32 	%f397, %f369, %f364, %p108;
	abs.f32 	%f370, %f394;
	setp.gt.f32 	%p109, %f370, 0f4B800000;
	add.f32 	%f371, %f397, 0f3F800000;
	selp.f32 	%f396, %f371, %f367, %p109;
LBB0_65:                                // %L319
	mov.b32 	%r302, %f156;
	mov.b32 	%r305, %f153;
	mov.b32 	%r397, %f390;
	mov.b32 	%r398, %f396;
	mov.b32 	%r403, %f391;
	mov.b32 	%r404, %f397;
	mov.u32 	%r3423, 999999999;
	cvt.u16.u32 	%rs268, %r1;
	@%p65 bra 	LBB0_67;
// %bb.66:                              // %L355
	ld.param.u64 	%rd1, [_Z15julia_frb_1025413CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1];
	and.b16  	%rs17, %rs268, 255;
	mul.lo.s16 	%rs18, %rs17, 171;
	shr.u16 	%rs19, %rs18, 12;
	mul.lo.s16 	%rs20, %rs19, 24;
	sub.s16 	%rs21, %rs268, %rs20;
	cvt.u32.u16 	%r409, %rs21;
	and.b32  	%r410, %r409, 255;
	mad.lo.s32 	%r411, %r410, 24, %r3;
	cvt.u16.u32 	%rs22, %r411;
	mul.hi.u16 	%rs23, %rs22, -7281;
	shr.u16 	%rs24, %rs23, 9;
	mul.lo.s16 	%rs25, %rs24, 576;
	sub.s16 	%rs26, %rs22, %rs25;
	cvt.u32.u16 	%r412, %rs26;
	mul.wide.u32 	%rd21, %r412, 4;
	add.s64 	%rd22, %rd1, %rd21;
	ld.global.u32 	%r413, [%rd22];
	cvt.s32.s16 	%r414, %r413;
	shr.s32 	%r415, %r413, 16;
	mul.lo.s32 	%r416, %r415, 801;
	mad.lo.s32 	%r3423, %r414, 33, %r416;
LBB0_67:                                // %L433
	xor.b32  	%r301, %r305, -2147483648;
	mov.b32 	%r353, %f378;
	mov.b32 	%r354, %f384;
	mov.b32 	%r356, %f379;
	mov.b32 	%r357, %f385;
	xor.b32  	%r400, %r403, -2147483648;
	xor.b32  	%r401, %r404, -2147483648;
	and.b32  	%r47, %r1, 24;
	setp.ne.s32 	%p111, %r47, 24;
	cvt.u16.u32 	%rs269, %r6;
	@%p111 bra 	LBB0_69;
// %bb.68:                              // %L433.L740_crit_edge
	mul.lo.s16 	%rs39, %rs269, 171;
	shr.u16 	%rs40, %rs39, 10;
	mul.lo.s16 	%rs41, %rs40, 6;
	sub.s16 	%rs42, %rs269, %rs41;
	cvt.u32.u16 	%r427, %rs42;
	and.b32  	%r3427, %r427, 255;
	cvt.u16.u32 	%rs43, %r3;
	and.b16  	%rs44, %rs43, 255;
	mul.lo.s16 	%rs45, %rs44, 171;
	shr.u16 	%rs46, %rs45, 10;
	cvt.u32.u16 	%r3426, %rs46;
	mul.lo.s16 	%rs47, %rs46, -6;
	add.s16 	%rs48, %rs47, %rs43;
	cvt.u32.u16 	%r429, %rs48;
	and.b32  	%r3425, %r429, 255;
	mul.wide.u16 	%r3424, %rs46, 6;
	mov.u32 	%r3428, 0;
	mov.u32 	%r3429, %r3428;
	bra.uni 	LBB0_70;
LBB0_69:                                // %L459
	ld.param.u64 	%rd2, [_Z15julia_frb_1025413CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2];
	mul.lo.s32 	%r417, %r2, 576;
	cvt.u16.u32 	%rs27, %r3;
	and.b16  	%rs28, %rs27, 255;
	mul.lo.s16 	%rs29, %rs28, 171;
	shr.u16 	%rs30, %rs29, 10;
	mul.lo.s16 	%rs31, %rs30, -6;
	add.s16 	%rs32, %rs31, %rs27;
	cvt.u32.u16 	%r419, %rs32;
	and.b32  	%r3425, %r419, 255;
	mul.lo.s32 	%r420, %r5, 144;
	cvt.u32.u16 	%r3426, %rs30;
	mul.wide.u16 	%r3424, %rs30, 6;
	mul.lo.s16 	%rs34, %rs269, 171;
	shr.u16 	%rs35, %rs34, 10;
	mul.lo.s16 	%rs36, %rs35, 6;
	sub.s16 	%rs37, %rs269, %rs36;
	cvt.u32.u16 	%r421, %rs37;
	and.b32  	%r3427, %r421, 255;
	or.b32  	%r422, %r3424, %r417;
	or.b32  	%r423, %r420, %r3425;
	add.s32 	%r424, %r423, %r422;
	mad.lo.s32 	%r425, %r3427, 24, %r424;
	mul.wide.u32 	%rd23, %r425, 4;
	add.s64 	%rd24, %rd2, %rd23;
	ld.global.u32 	%r3428, [%rd24];
	ld.global.u32 	%r3429, [%rd24+589824];
LBB0_70:                                // %L740
	ld.param.u64 	%rd3, [_Z15julia_frb_1025413CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z15julia_frb_1025413CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4];
	// begin inline asm
	cvt.rn.f16x2.f32 %r300, %r302, %r301;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r303, %r305, %r302;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r352, %r354, %r353;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r355, %r357, %r356;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r396, %r398, %r397;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r399, %r401, %r400;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r402, %r404, %r403;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r405, %r398, %r397;
	// end inline asm
	mov.u32 	%r3414, 0;
	shl.b32 	%r431, %r2, 7;
	shl.b32 	%r432, %r1, 2;
	and.b32  	%r433, %r432, 60;
	shl.b32 	%r434, %r1, 11;
	and.b32  	%r435, %r434, 32768;
	or.b32  	%r436, %r433, %r431;
	or.b32  	%r64, %r436, %r435;
	or.b32  	%r437, %r432, %r431;
	or.b32  	%r438, %r437, %r435;
	or.b32  	%r65, %r438, 64;
	add.s32 	%r66, %r3, 24;
	and.b16  	%rs1, %rs268, 16;
	shr.u32 	%r439, %r1, 4;
	and.b32  	%r440, %r225, 30;
	or.b32  	%r441, %r440, %r439;
	mul.lo.s32 	%r67, %r441, 257;
	or.b32  	%r442, %r225, %r439;
	or.b32  	%r443, %r442, 32;
	mul.lo.s32 	%r68, %r443, 257;
	and.b32  	%r444, %r4, 224;
	shr.u32 	%r445, %r3, 3;
	and.b16  	%rs50, %rs268, 255;
	mul.lo.s16 	%rs51, %rs50, 171;
	shr.u16 	%rs52, %rs51, 12;
	mul.lo.s16 	%rs53, %rs52, 24;
	sub.s16 	%rs54, %rs268, %rs53;
	cvt.u32.u16 	%r446, %rs54;
	and.b32  	%r69, %r446, 255;
	mad.lo.s32 	%r70, %r445, 257, %r444;
	shr.u32 	%r447, %r66, 3;
	mad.lo.s32 	%r71, %r447, 257, %r444;
	add.s32 	%r448, %r3, 48;
	shr.u32 	%r449, %r448, 3;
	mad.lo.s32 	%r72, %r449, 257, %r444;
	add.s32 	%r450, %r3, 72;
	shr.u32 	%r451, %r450, 3;
	mad.lo.s32 	%r73, %r451, 257, %r444;
	or.b32  	%r452, %r445, 12;
	mad.lo.s32 	%r74, %r452, 257, %r444;
	add.s32 	%r453, %r3, 120;
	shr.u32 	%r454, %r453, 3;
	mad.lo.s32 	%r75, %r454, 257, %r444;
	add.s32 	%r455, %r3, 144;
	shr.u32 	%r456, %r455, 3;
	mad.lo.s32 	%r76, %r456, 257, %r444;
	add.s32 	%r457, %r3, 168;
	shr.u32 	%r458, %r457, 3;
	mad.lo.s32 	%r77, %r458, 257, %r444;
	or.b32  	%r459, %r445, 24;
	mad.lo.s32 	%r78, %r459, 257, %r444;
	add.s32 	%r460, %r3, 216;
	shr.u32 	%r461, %r460, 3;
	mad.lo.s32 	%r79, %r461, 257, %r444;
	add.s32 	%r462, %r3, 240;
	shr.u32 	%r463, %r462, 3;
	mad.lo.s32 	%r80, %r463, 257, %r444;
	add.s32 	%r464, %r3, 264;
	shr.u32 	%r465, %r464, 3;
	mad.lo.s32 	%r81, %r465, 257, %r444;
	or.b32  	%r466, %r445, 36;
	mad.lo.s32 	%r82, %r466, 257, %r444;
	add.s32 	%r467, %r3, 312;
	shr.u32 	%r468, %r467, 3;
	mad.lo.s32 	%r83, %r468, 257, %r444;
	add.s32 	%r469, %r3, 336;
	shr.u32 	%r470, %r469, 3;
	mad.lo.s32 	%r84, %r470, 257, %r444;
	add.s32 	%r471, %r3, 360;
	shr.u32 	%r472, %r471, 3;
	mad.lo.s32 	%r85, %r472, 257, %r444;
	or.b32  	%r473, %r445, 48;
	mad.lo.s32 	%r86, %r473, 257, %r444;
	add.s32 	%r474, %r3, 408;
	shr.u32 	%r475, %r474, 3;
	mad.lo.s32 	%r87, %r475, 257, %r444;
	add.s32 	%r476, %r3, 432;
	shr.u32 	%r477, %r476, 3;
	mad.lo.s32 	%r88, %r477, 257, %r444;
	add.s32 	%r478, %r3, 456;
	shr.u32 	%r479, %r478, 3;
	mad.lo.s32 	%r89, %r479, 257, %r444;
	or.b32  	%r480, %r445, 60;
	mad.lo.s32 	%r90, %r480, 257, %r444;
	add.s32 	%r481, %r3, 504;
	bfe.u32 	%r482, %r481, 3, 6;
	mad.lo.s32 	%r91, %r482, 257, %r444;
	mul.lo.s32 	%r483, %r5, 4806;
	mad.lo.s32 	%r484, %r3426, 198, %r483;
	mad.lo.s32 	%r485, %r3425, 33, %r484;
	mad.lo.s32 	%r486, %r3427, 801, %r485;
	bfe.u32 	%r487, %r1, 1, 1;
	mul.lo.s32 	%r488, %r487, 2056;
	and.b32  	%r489, %r6, 1;
	mul.lo.s32 	%r490, %r489, 1028;
	bfe.u32 	%r491, %r1, 3, 1;
	mul.lo.s32 	%r492, %r491, 514;
	and.b32  	%r493, %r1, 1;
	mul.lo.s32 	%r494, %r493, 4112;
	mul.lo.s32 	%r495, %r439, 257;
	add.s32 	%r496, %r495, %r494;
	add.s32 	%r497, %r496, %r490;
	add.s32 	%r498, %r497, %r488;
	add.s32 	%r499, %r498, %r492;
	add.s32 	%r500, %r499, %r3425;
	add.s32 	%r92, %r500, %r3424;
	mul.wide.u32 	%rd25, %r92, 4;
	mov.u64 	%rd26, shmem;
	add.s64 	%rd6, %rd26, %rd25;
	add.s32 	%r93, %r92, 8256;
	cvt.u64.u32 	%rd27, %r3424;
	cvt.u64.u32 	%rd28, %r3425;
	cvt.u64.u32 	%rd29, %r492;
	cvt.u64.u32 	%rd30, %r488;
	cvt.u64.u32 	%rd31, %r490;
	cvt.u64.u32 	%rd32, %r495;
	cvt.u64.u32 	%rd33, %r494;
	add.s64 	%rd34, %rd33, %rd32;
	add.s64 	%rd35, %rd34, %rd31;
	add.s64 	%rd36, %rd35, %rd30;
	add.s64 	%rd37, %rd36, %rd29;
	add.s64 	%rd38, %rd37, %rd28;
	add.s64 	%rd39, %rd38, %rd27;
	shl.b64 	%rd40, %rd39, 2;
	add.s64 	%rd7, %rd26, %rd40;
	add.s32 	%r94, %r92, 32;
	add.s32 	%r95, %r92, 8288;
	bfe.u32 	%r501, %r3, 1, 1;
	bfe.u32 	%r502, %r3, 2, 1;
	bfe.u32 	%r503, %r3, 3, 1;
	and.b32  	%r504, %r3, 1;
	mul.lo.s32 	%r505, %r504, 4112;
	shr.u32 	%r506, %r3, 4;
	mad.lo.s32 	%r507, %r5, 6, %r505;
	mad.lo.s32 	%r508, %r506, 257, %r507;
	mad.lo.s32 	%r509, %r502, 1028, %r508;
	mad.lo.s32 	%r510, %r501, 2056, %r509;
	mad.lo.s32 	%r511, %r503, 514, %r510;
	add.s32 	%r96, %r511, %r3427;
	mul.wide.u32 	%rd41, %r96, 4;
	add.s64 	%rd8, %rd26, %rd41;
	add.s32 	%r97, %r96, 8256;
	mul.wide.u32 	%rd42, %r97, 4;
	add.s64 	%rd9, %rd26, %rd42;
	add.s32 	%r98, %r96, 32;
	mul.wide.u32 	%rd43, %r98, 4;
	add.s64 	%rd10, %rd26, %rd43;
	add.s32 	%r99, %r96, 8288;
	mul.wide.u32 	%rd44, %r99, 4;
	add.s64 	%rd11, %rd26, %rd44;
	mul.lo.s32 	%r512, %r2, 59904;
	cvt.u16.u32 	%rs55, %r3;
	shl.b16 	%rs56, %rs55, 1;
	and.b16  	%rs57, %rs56, 254;
	mul.lo.s16 	%rs58, %rs57, 171;
	shr.u16 	%rs59, %rs58, 13;
	mul.lo.s16 	%rs60, %rs59, 48;
	sub.s16 	%rs61, %rs56, %rs60;
	cvt.u32.u16 	%r513, %rs61;
	and.b32  	%r514, %r513, 254;
	or.b32  	%r515, %r512, %r69;
	mad.lo.s32 	%r100, %r514, 24, %r515;
	or.b16  	%rs62, %rs56, 1;
	and.b16  	%rs63, %rs62, 255;
	mul.lo.s16 	%rs64, %rs63, 171;
	shr.u16 	%rs65, %rs64, 13;
	mul.lo.s16 	%rs66, %rs65, 48;
	sub.s16 	%rs67, %rs62, %rs66;
	cvt.u32.u16 	%r516, %rs67;
	and.b32  	%r517, %r516, 255;
	mad.lo.s32 	%r101, %r517, 24, %r515;
	mul.wide.u32 	%rd45, %r486, 4;
	add.s64 	%rd12, %rd26, %rd45;
	setp.gt.u32 	%p112, %r3, 7;
	setp.eq.s16 	%p113, %rs1, 0;
	setp.lt.u32 	%p115, %r1, 24;
	mov.u32 	%r3430, %r3414;
	mov.u32 	%r3461, %r3414;
	mov.u32 	%r3462, %r3414;
	mov.u32 	%r3463, %r3414;
	mov.u32 	%r3464, %r3414;
	bra.uni 	LBB0_71;
LBB0_92:                                // %guard_pass14622
                                        //   in Loop: Header=BB0_71 Depth=1
	add.s32 	%r284, %r3430, 48;
	setp.ne.s32 	%p141, %r3430, 2016;
	mov.u32 	%r3430, %r284;
	@%p141 bra 	LBB0_71;
	bra.uni 	LBB0_93;
LBB0_71:                                // %L743
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_73 Depth 2
                                        //     Child Loop BB0_83 Depth 2
	mul.hi.u32 	%r711, %r3430, -1431655765;
	shr.u32 	%r712, %r711, 5;
	mul.lo.s32 	%r107, %r712, 48;
	add.s32 	%r713, %r107, %r3;
	cvt.u16.u32 	%rs68, %r713;
	mul.hi.s16 	%rs69, %rs68, 16257;
	shr.u16 	%rs70, %rs69, 15;
	shr.s16 	%rs71, %rs69, 9;
	add.s16 	%rs72, %rs71, %rs70;
	mul.lo.s16 	%rs73, %rs72, 2064;
	sub.s16 	%rs74, %rs68, %rs73;
	cvt.u32.u16 	%r714, %rs74;
	shl.b32 	%r715, %r714, 16;
	or.b32  	%r716, %r64, %r715;
	mul.wide.s32 	%rd46, %r716, 4;
	add.s64 	%rd47, %rd3, %rd46;
	ld.global.v4.u32 	{%r717, %r718, %r719, %r720}, [%rd47];
	or.b32  	%r721, %r65, %r715;
	mul.wide.s32 	%rd48, %r721, 4;
	add.s64 	%rd49, %rd3, %rd48;
	ld.global.v4.u32 	{%r722, %r723, %r724, %r725}, [%rd49];
	add.s32 	%r726, %r66, %r107;
	cvt.u16.u32 	%rs75, %r726;
	mul.hi.s16 	%rs76, %rs75, 16257;
	shr.u16 	%rs77, %rs76, 15;
	shr.s16 	%rs78, %rs76, 9;
	add.s16 	%rs79, %rs78, %rs77;
	mul.lo.s16 	%rs80, %rs79, 2064;
	sub.s16 	%rs81, %rs75, %rs80;
	cvt.u32.u16 	%r727, %rs81;
	shl.b32 	%r728, %r727, 16;
	or.b32  	%r729, %r64, %r728;
	mul.wide.s32 	%rd50, %r729, 4;
	add.s64 	%rd51, %rd3, %rd50;
	ld.global.v4.u32 	{%r730, %r731, %r732, %r733}, [%rd51];
	or.b32  	%r734, %r65, %r728;
	mul.wide.s32 	%rd52, %r734, 4;
	add.s64 	%rd53, %rd3, %rd52;
	ld.global.v4.u32 	{%r735, %r736, %r737, %r738}, [%rd53];
	selp.b32 	%r739, %r719, %r717, %p113;
	shfl.sync.bfly.b32	%r740, %r739, 16, 31, -1;
	selp.b32 	%r520, %r717, %r740, %p113;
	selp.b32 	%r525, %r740, %r719, %p113;
	selp.b32 	%r741, %r720, %r718, %p113;
	shfl.sync.bfly.b32	%r742, %r741, 16, 31, -1;
	selp.b32 	%r528, %r718, %r742, %p113;
	selp.b32 	%r533, %r742, %r720, %p113;
	selp.b32 	%r743, %r724, %r722, %p113;
	shfl.sync.bfly.b32	%r744, %r743, 16, 31, -1;
	selp.b32 	%r536, %r722, %r744, %p113;
	selp.b32 	%r541, %r744, %r724, %p113;
	selp.b32 	%r745, %r725, %r723, %p113;
	shfl.sync.bfly.b32	%r746, %r745, 16, 31, -1;
	selp.b32 	%r544, %r723, %r746, %p113;
	selp.b32 	%r549, %r746, %r725, %p113;
	selp.b32 	%r747, %r732, %r730, %p113;
	shfl.sync.bfly.b32	%r748, %r747, 16, 31, -1;
	selp.b32 	%r552, %r730, %r748, %p113;
	selp.b32 	%r557, %r748, %r732, %p113;
	selp.b32 	%r749, %r733, %r731, %p113;
	shfl.sync.bfly.b32	%r750, %r749, 16, 31, -1;
	selp.b32 	%r560, %r731, %r750, %p113;
	selp.b32 	%r565, %r750, %r733, %p113;
	selp.b32 	%r751, %r737, %r735, %p113;
	shfl.sync.bfly.b32	%r752, %r751, 16, 31, -1;
	selp.b32 	%r568, %r735, %r752, %p113;
	selp.b32 	%r573, %r752, %r737, %p113;
	selp.b32 	%r753, %r738, %r736, %p113;
	shfl.sync.bfly.b32	%r754, %r753, 16, 31, -1;
	selp.b32 	%r576, %r736, %r754, %p113;
	selp.b32 	%r581, %r754, %r738, %p113;
	shl.b32 	%r521, %r525, 4;
	mov.u32 	%r519, 252645135;
	// begin inline asm
	lop3.b32 %r583, %r519, %r520, %r521, 202;
	// end inline asm
	shr.u32 	%r524, %r520, 4;
	// begin inline asm
	lop3.b32 %r599, %r519, %r524, %r525, 202;
	// end inline asm
	shl.b32 	%r529, %r533, 4;
	// begin inline asm
	lop3.b32 %r591, %r519, %r528, %r529, 202;
	// end inline asm
	shr.u32 	%r532, %r528, 4;
	// begin inline asm
	lop3.b32 %r607, %r519, %r532, %r533, 202;
	// end inline asm
	shl.b32 	%r537, %r541, 4;
	// begin inline asm
	lop3.b32 %r615, %r519, %r536, %r537, 202;
	// end inline asm
	shr.u32 	%r540, %r536, 4;
	// begin inline asm
	lop3.b32 %r631, %r519, %r540, %r541, 202;
	// end inline asm
	shl.b32 	%r545, %r549, 4;
	// begin inline asm
	lop3.b32 %r623, %r519, %r544, %r545, 202;
	// end inline asm
	shr.u32 	%r548, %r544, 4;
	// begin inline asm
	lop3.b32 %r639, %r519, %r548, %r549, 202;
	// end inline asm
	shl.b32 	%r553, %r557, 4;
	// begin inline asm
	lop3.b32 %r584, %r519, %r552, %r553, 202;
	// end inline asm
	shr.u32 	%r556, %r552, 4;
	// begin inline asm
	lop3.b32 %r600, %r519, %r556, %r557, 202;
	// end inline asm
	shl.b32 	%r561, %r565, 4;
	// begin inline asm
	lop3.b32 %r592, %r519, %r560, %r561, 202;
	// end inline asm
	shr.u32 	%r564, %r560, 4;
	// begin inline asm
	lop3.b32 %r608, %r519, %r564, %r565, 202;
	// end inline asm
	shl.b32 	%r569, %r573, 4;
	// begin inline asm
	lop3.b32 %r616, %r519, %r568, %r569, 202;
	// end inline asm
	shr.u32 	%r572, %r568, 4;
	// begin inline asm
	lop3.b32 %r632, %r519, %r572, %r573, 202;
	// end inline asm
	shl.b32 	%r577, %r581, 4;
	// begin inline asm
	lop3.b32 %r624, %r519, %r576, %r577, 202;
	// end inline asm
	shr.u32 	%r580, %r576, 4;
	// begin inline asm
	lop3.b32 %r640, %r519, %r580, %r581, 202;
	// end inline asm
	mov.u32 	%r585, 25152;
	// begin inline asm
	prmt.b32 %r647, %r583, %r584, %r585;
	// end inline asm
	mov.u32 	%r589, 29521;
	// begin inline asm
	prmt.b32 %r679, %r583, %r584, %r589;
	// end inline asm
	// begin inline asm
	prmt.b32 %r655, %r591, %r592, %r585;
	// end inline asm
	// begin inline asm
	prmt.b32 %r687, %r591, %r592, %r589;
	// end inline asm
	// begin inline asm
	prmt.b32 %r648, %r599, %r600, %r585;
	// end inline asm
	// begin inline asm
	prmt.b32 %r680, %r599, %r600, %r589;
	// end inline asm
	// begin inline asm
	prmt.b32 %r656, %r607, %r608, %r585;
	// end inline asm
	// begin inline asm
	prmt.b32 %r688, %r607, %r608, %r589;
	// end inline asm
	// begin inline asm
	prmt.b32 %r663, %r615, %r616, %r585;
	// end inline asm
	// begin inline asm
	prmt.b32 %r695, %r615, %r616, %r589;
	// end inline asm
	// begin inline asm
	prmt.b32 %r671, %r623, %r624, %r585;
	// end inline asm
	// begin inline asm
	prmt.b32 %r703, %r623, %r624, %r589;
	// end inline asm
	// begin inline asm
	prmt.b32 %r664, %r631, %r632, %r585;
	// end inline asm
	// begin inline asm
	prmt.b32 %r696, %r631, %r632, %r589;
	// end inline asm
	// begin inline asm
	prmt.b32 %r672, %r639, %r640, %r585;
	// end inline asm
	// begin inline asm
	prmt.b32 %r704, %r639, %r640, %r589;
	// end inline asm
	mov.u32 	%r705, 21520;
	// begin inline asm
	prmt.b32 %r646, %r647, %r648, %r705;
	// end inline asm
	mov.u32 	%r709, 30258;
	// begin inline asm
	prmt.b32 %r650, %r647, %r648, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r654, %r655, %r656, %r705;
	// end inline asm
	// begin inline asm
	prmt.b32 %r658, %r655, %r656, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r662, %r663, %r664, %r705;
	// end inline asm
	// begin inline asm
	prmt.b32 %r666, %r663, %r664, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r670, %r671, %r672, %r705;
	// end inline asm
	// begin inline asm
	prmt.b32 %r674, %r671, %r672, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r678, %r679, %r680, %r705;
	// end inline asm
	// begin inline asm
	prmt.b32 %r682, %r679, %r680, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r686, %r687, %r688, %r705;
	// end inline asm
	// begin inline asm
	prmt.b32 %r690, %r687, %r688, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r694, %r695, %r696, %r705;
	// end inline asm
	// begin inline asm
	prmt.b32 %r698, %r695, %r696, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r702, %r703, %r704, %r705;
	// end inline asm
	// begin inline asm
	prmt.b32 %r706, %r703, %r704, %r709;
	// end inline asm
	mul.hi.s16 	%rs82, %rs68, 10923;
	shr.u16 	%rs83, %rs82, 15;
	shr.s16 	%rs84, %rs82, 2;
	add.s16 	%rs85, %rs84, %rs83;
	mul.lo.s16 	%rs86, %rs85, 24;
	sub.s16 	%rs87, %rs68, %rs86;
	cvt.s32.s16 	%r755, %rs87;
	add.s32 	%r756, %r67, %r755;
	mul.wide.s32 	%rd54, %r756, 4;
	add.s64 	%rd56, %rd26, %rd54;
	st.shared.u32 	[%rd56], %r646;
	st.shared.u32 	[%rd56+512], %r654;
	st.shared.u32 	[%rd56+256], %r650;
	st.shared.u32 	[%rd56+768], %r658;
	add.s32 	%r757, %r68, %r755;
	mul.wide.s32 	%rd57, %r757, 4;
	add.s64 	%rd58, %rd26, %rd57;
	st.shared.u32 	[%rd58], %r662;
	st.shared.u32 	[%rd58+512], %r670;
	st.shared.u32 	[%rd58+256], %r666;
	st.shared.u32 	[%rd58+768], %r674;
	st.shared.u32 	[%rd56+128], %r678;
	st.shared.u32 	[%rd56+640], %r686;
	st.shared.u32 	[%rd56+384], %r682;
	st.shared.u32 	[%rd56+896], %r690;
	st.shared.u32 	[%rd58+128], %r694;
	st.shared.u32 	[%rd58+640], %r702;
	st.shared.u32 	[%rd58+384], %r698;
	st.shared.u32 	[%rd58+896], %r706;
	bar.sync 	0;
	add.s32 	%r758, %r107, %r69;
	cvt.u16.u32 	%rs88, %r758;
	mul.hi.s16 	%rs89, %rs88, 10923;
	shr.u16 	%rs90, %rs89, 15;
	shr.s16 	%rs91, %rs89, 2;
	add.s16 	%rs92, %rs91, %rs90;
	mul.lo.s16 	%rs93, %rs92, 24;
	sub.s16 	%rs94, %rs88, %rs93;
	cvt.s32.s16 	%r759, %rs94;
	add.s32 	%r760, %r70, %r759;
	mul.wide.s32 	%rd59, %r760, 4;
	add.s64 	%rd60, %rd26, %rd59;
	ld.shared.u32 	%r761, [%rd60];
	add.s32 	%r762, %r71, %r759;
	mul.wide.u32 	%rd61, %r762, 4;
	add.s64 	%rd62, %rd26, %rd61;
	ld.shared.u32 	%r763, [%rd62];
	add.s32 	%r764, %r72, %r759;
	mul.wide.u32 	%rd63, %r764, 4;
	add.s64 	%rd64, %rd26, %rd63;
	ld.shared.u32 	%r765, [%rd64];
	add.s32 	%r766, %r73, %r759;
	mul.wide.u32 	%rd65, %r766, 4;
	add.s64 	%rd66, %rd26, %rd65;
	ld.shared.u32 	%r767, [%rd66];
	add.s32 	%r768, %r74, %r759;
	mul.wide.s32 	%rd67, %r768, 4;
	add.s64 	%rd68, %rd26, %rd67;
	ld.shared.u32 	%r769, [%rd68];
	add.s32 	%r770, %r75, %r759;
	mul.wide.u32 	%rd69, %r770, 4;
	add.s64 	%rd70, %rd26, %rd69;
	ld.shared.u32 	%r771, [%rd70];
	add.s32 	%r772, %r76, %r759;
	mul.wide.u32 	%rd71, %r772, 4;
	add.s64 	%rd72, %rd26, %rd71;
	ld.shared.u32 	%r773, [%rd72];
	add.s32 	%r774, %r77, %r759;
	mul.wide.u32 	%rd73, %r774, 4;
	add.s64 	%rd74, %rd26, %rd73;
	ld.shared.u32 	%r775, [%rd74];
	add.s32 	%r776, %r78, %r759;
	mul.wide.s32 	%rd75, %r776, 4;
	add.s64 	%rd76, %rd26, %rd75;
	ld.shared.u32 	%r777, [%rd76];
	add.s32 	%r778, %r79, %r759;
	mul.wide.u32 	%rd77, %r778, 4;
	add.s64 	%rd78, %rd26, %rd77;
	ld.shared.u32 	%r779, [%rd78];
	add.s32 	%r780, %r80, %r759;
	mul.wide.u32 	%rd79, %r780, 4;
	add.s64 	%rd80, %rd26, %rd79;
	ld.shared.u32 	%r781, [%rd80];
	add.s32 	%r782, %r81, %r759;
	mul.wide.u32 	%rd81, %r782, 4;
	add.s64 	%rd82, %rd26, %rd81;
	ld.shared.u32 	%r783, [%rd82];
	add.s32 	%r784, %r82, %r759;
	mul.wide.s32 	%rd83, %r784, 4;
	add.s64 	%rd84, %rd26, %rd83;
	ld.shared.u32 	%r785, [%rd84];
	add.s32 	%r786, %r83, %r759;
	mul.wide.u32 	%rd85, %r786, 4;
	add.s64 	%rd86, %rd26, %rd85;
	ld.shared.u32 	%r787, [%rd86];
	add.s32 	%r788, %r84, %r759;
	mul.wide.u32 	%rd87, %r788, 4;
	add.s64 	%rd88, %rd26, %rd87;
	ld.shared.u32 	%r789, [%rd88];
	add.s32 	%r790, %r85, %r759;
	mul.wide.u32 	%rd89, %r790, 4;
	add.s64 	%rd90, %rd26, %rd89;
	ld.shared.u32 	%r791, [%rd90];
	add.s32 	%r792, %r86, %r759;
	mul.wide.s32 	%rd91, %r792, 4;
	add.s64 	%rd92, %rd26, %rd91;
	ld.shared.u32 	%r793, [%rd92];
	add.s32 	%r794, %r87, %r759;
	mul.wide.u32 	%rd93, %r794, 4;
	add.s64 	%rd94, %rd26, %rd93;
	ld.shared.u32 	%r795, [%rd94];
	add.s32 	%r796, %r88, %r759;
	mul.wide.u32 	%rd95, %r796, 4;
	add.s64 	%rd96, %rd26, %rd95;
	ld.shared.u32 	%r797, [%rd96];
	add.s32 	%r798, %r89, %r759;
	mul.wide.u32 	%rd97, %r798, 4;
	add.s64 	%rd98, %rd26, %rd97;
	ld.shared.u32 	%r799, [%rd98];
	add.s32 	%r800, %r90, %r759;
	mul.wide.s32 	%rd99, %r800, 4;
	add.s64 	%rd100, %rd26, %rd99;
	ld.shared.u32 	%r801, [%rd100];
	add.s32 	%r802, %r91, %r759;
	mul.wide.s32 	%rd101, %r802, 4;
	add.s64 	%rd102, %rd26, %rd101;
	ld.shared.u32 	%r803, [%rd102];
	bar.sync 	0;
	shfl.sync.idx.b32	%r804, %r3423, 0, 31, -1;
	shfl.sync.idx.b32	%r805, %r3423, 1, 31, -1;
	shfl.sync.idx.b32	%r806, %r3423, 2, 31, -1;
	shfl.sync.idx.b32	%r807, %r3423, 3, 31, -1;
	shfl.sync.idx.b32	%r808, %r3423, 4, 31, -1;
	shfl.sync.idx.b32	%r809, %r3423, 5, 31, -1;
	shfl.sync.idx.b32	%r810, %r3423, 6, 31, -1;
	shfl.sync.idx.b32	%r811, %r3423, 7, 31, -1;
	shfl.sync.idx.b32	%r812, %r3423, 8, 31, -1;
	shfl.sync.idx.b32	%r813, %r3423, 9, 31, -1;
	shfl.sync.idx.b32	%r814, %r3423, 10, 31, -1;
	shfl.sync.idx.b32	%r815, %r3423, 11, 31, -1;
	shfl.sync.idx.b32	%r816, %r3423, 12, 31, -1;
	shfl.sync.idx.b32	%r817, %r3423, 13, 31, -1;
	shfl.sync.idx.b32	%r818, %r3423, 14, 31, -1;
	shfl.sync.idx.b32	%r819, %r3423, 15, 31, -1;
	shfl.sync.idx.b32	%r820, %r3423, 16, 31, -1;
	shfl.sync.idx.b32	%r821, %r3423, 17, 31, -1;
	shfl.sync.idx.b32	%r822, %r3423, 18, 31, -1;
	shfl.sync.idx.b32	%r823, %r3423, 19, 31, -1;
	shfl.sync.idx.b32	%r824, %r3423, 20, 31, -1;
	shfl.sync.idx.b32	%r825, %r3423, 21, 31, -1;
	shfl.sync.idx.b32	%r826, %r3423, 22, 31, -1;
	shfl.sync.idx.b32	%r827, %r3423, 23, 31, -1;
	add.s32 	%r828, %r804, %r759;
	mul.wide.s32 	%rd103, %r828, 4;
	add.s64 	%rd104, %rd26, %rd103;
	st.shared.u32 	[%rd104], %r761;
	add.s32 	%r829, %r805, %r759;
	mul.wide.s32 	%rd105, %r829, 4;
	add.s64 	%rd106, %rd26, %rd105;
	st.shared.u32 	[%rd106], %r763;
	add.s32 	%r830, %r806, %r759;
	mul.wide.s32 	%rd107, %r830, 4;
	add.s64 	%rd108, %rd26, %rd107;
	st.shared.u32 	[%rd108], %r765;
	add.s32 	%r831, %r807, %r759;
	mul.wide.s32 	%rd109, %r831, 4;
	add.s64 	%rd110, %rd26, %rd109;
	st.shared.u32 	[%rd110], %r767;
	add.s32 	%r832, %r808, %r759;
	mul.wide.s32 	%rd111, %r832, 4;
	add.s64 	%rd112, %rd26, %rd111;
	st.shared.u32 	[%rd112], %r769;
	add.s32 	%r833, %r809, %r759;
	mul.wide.s32 	%rd113, %r833, 4;
	add.s64 	%rd114, %rd26, %rd113;
	st.shared.u32 	[%rd114], %r771;
	add.s32 	%r834, %r810, %r759;
	mul.wide.s32 	%rd115, %r834, 4;
	add.s64 	%rd116, %rd26, %rd115;
	st.shared.u32 	[%rd116], %r773;
	add.s32 	%r835, %r811, %r759;
	mul.wide.s32 	%rd117, %r835, 4;
	add.s64 	%rd118, %rd26, %rd117;
	st.shared.u32 	[%rd118], %r775;
	add.s32 	%r836, %r812, %r759;
	mul.wide.s32 	%rd119, %r836, 4;
	add.s64 	%rd120, %rd26, %rd119;
	st.shared.u32 	[%rd120], %r777;
	add.s32 	%r837, %r813, %r759;
	mul.wide.s32 	%rd121, %r837, 4;
	add.s64 	%rd122, %rd26, %rd121;
	st.shared.u32 	[%rd122], %r779;
	add.s32 	%r838, %r814, %r759;
	mul.wide.s32 	%rd123, %r838, 4;
	add.s64 	%rd124, %rd26, %rd123;
	st.shared.u32 	[%rd124], %r781;
	add.s32 	%r839, %r815, %r759;
	mul.wide.s32 	%rd125, %r839, 4;
	add.s64 	%rd126, %rd26, %rd125;
	st.shared.u32 	[%rd126], %r783;
	add.s32 	%r840, %r816, %r759;
	mul.wide.s32 	%rd127, %r840, 4;
	add.s64 	%rd128, %rd26, %rd127;
	st.shared.u32 	[%rd128], %r785;
	add.s32 	%r841, %r817, %r759;
	mul.wide.s32 	%rd129, %r841, 4;
	add.s64 	%rd130, %rd26, %rd129;
	st.shared.u32 	[%rd130], %r787;
	add.s32 	%r842, %r818, %r759;
	mul.wide.s32 	%rd131, %r842, 4;
	add.s64 	%rd132, %rd26, %rd131;
	st.shared.u32 	[%rd132], %r789;
	add.s32 	%r843, %r819, %r759;
	mul.wide.s32 	%rd133, %r843, 4;
	add.s64 	%rd134, %rd26, %rd133;
	st.shared.u32 	[%rd134], %r791;
	add.s32 	%r844, %r820, %r759;
	mul.wide.s32 	%rd135, %r844, 4;
	add.s64 	%rd136, %rd26, %rd135;
	st.shared.u32 	[%rd136], %r793;
	add.s32 	%r845, %r821, %r759;
	mul.wide.s32 	%rd137, %r845, 4;
	add.s64 	%rd138, %rd26, %rd137;
	st.shared.u32 	[%rd138], %r795;
	add.s32 	%r846, %r822, %r759;
	mul.wide.s32 	%rd139, %r846, 4;
	add.s64 	%rd140, %rd26, %rd139;
	st.shared.u32 	[%rd140], %r797;
	add.s32 	%r847, %r823, %r759;
	mul.wide.s32 	%rd141, %r847, 4;
	add.s64 	%rd142, %rd26, %rd141;
	st.shared.u32 	[%rd142], %r799;
	add.s32 	%r848, %r824, %r759;
	mul.wide.s32 	%rd143, %r848, 4;
	add.s64 	%rd144, %rd26, %rd143;
	st.shared.u32 	[%rd144], %r801;
	selp.b32 	%r849, 0, %r803, %p112;
	add.s32 	%r850, %r825, %r759;
	mul.wide.s32 	%rd145, %r850, 4;
	add.s64 	%rd146, %rd26, %rd145;
	st.shared.u32 	[%rd146], %r849;
	add.s32 	%r851, %r826, %r759;
	mul.wide.s32 	%rd147, %r851, 4;
	add.s64 	%rd148, %rd26, %rd147;
	st.shared.u32 	[%rd148], %r3414;
	add.s32 	%r852, %r827, %r759;
	mul.wide.s32 	%rd149, %r852, 4;
	add.s64 	%rd150, %rd26, %rd149;
	st.shared.u32 	[%rd150], %r3414;
	bar.sync 	0;
	mov.u32 	%r3435, %r3414;
	mov.u32 	%r3436, %r3414;
	mov.u32 	%r3437, %r3414;
	mov.u32 	%r3438, %r3414;
	mov.u32 	%r3439, %r3414;
	mov.u32 	%r3440, %r3414;
	mov.u32 	%r3441, %r3414;
	mov.u32 	%r3442, %r3414;
	mov.u32 	%r3443, %r3414;
	mov.u32 	%r3444, %r3414;
	mov.u32 	%r3445, %r3414;
	mov.u32 	%r3446, %r3414;
	mov.u32 	%r3447, %r3414;
	mov.u32 	%r3448, %r3414;
	mov.u32 	%r3449, %r3414;
	mov.u32 	%r3450, %r3414;
	mov.u32 	%r3451, %r3414;
	mov.u32 	%r3452, %r3414;
	mov.u32 	%r3453, %r3414;
	mov.u32 	%r3454, %r3414;
	mov.u32 	%r3455, %r3414;
	mov.u32 	%r3456, %r3414;
	mov.u32 	%r3457, %r3414;
	mov.u32 	%r3458, %r3414;
	@%p111 bra 	LBB0_111;
	bra.uni 	LBB0_72;
LBB0_111:                               // %oksrem3282
                                        //   in Loop: Header=BB0_71 Depth=1
	cvt.u16.u32 	%rs95, %r107;
	mul.hi.s16 	%rs96, %rs95, 10923;
	shr.u16 	%rs97, %rs96, 15;
	shr.s16 	%rs98, %rs96, 2;
	add.s16 	%rs99, %rs98, %rs97;
	mul.lo.s16 	%rs100, %rs99, 24;
	sub.s16 	%rs101, %rs95, %rs100;
	cvt.s32.s16 	%r853, %rs101;
	mul.wide.s32 	%rd151, %r853, 4;
	add.s64 	%rd152, %rd12, %rd151;
	ld.shared.u32 	%r3435, [%rd152];
	ld.shared.u32 	%r3436, [%rd12+4];
	ld.shared.u32 	%r3437, [%rd12+8];
	ld.shared.u32 	%r3438, [%rd12+12];
	ld.shared.u32 	%r3439, [%rd12+16];
	ld.shared.u32 	%r3440, [%rd12+20];
	ld.shared.u32 	%r3441, [%rd12+24];
	ld.shared.u32 	%r3442, [%rd12+28];
	ld.shared.u32 	%r3443, [%rd12+32];
	ld.shared.u32 	%r3444, [%rd12+36];
	ld.shared.u32 	%r3445, [%rd12+40];
	ld.shared.u32 	%r3446, [%rd12+44];
	ld.shared.u32 	%r3447, [%rd12+48];
	ld.shared.u32 	%r3448, [%rd12+52];
	ld.shared.u32 	%r3449, [%rd12+56];
	ld.shared.u32 	%r3450, [%rd12+60];
	add.s16 	%rs102, %rs95, 16;
	mul.hi.s16 	%rs103, %rs102, 10923;
	shr.u16 	%rs104, %rs103, 15;
	shr.s16 	%rs105, %rs103, 2;
	add.s16 	%rs106, %rs105, %rs104;
	mul.lo.s16 	%rs107, %rs106, 24;
	sub.s16 	%rs108, %rs102, %rs107;
	cvt.s32.s16 	%r854, %rs108;
	mul.wide.s32 	%rd153, %r854, 4;
	add.s64 	%rd154, %rd12, %rd153;
	ld.shared.u32 	%r3451, [%rd154];
	add.s16 	%rs109, %rs95, 17;
	mul.hi.s16 	%rs110, %rs109, 10923;
	shr.u16 	%rs111, %rs110, 15;
	shr.s16 	%rs112, %rs110, 2;
	add.s16 	%rs113, %rs112, %rs111;
	mul.lo.s16 	%rs114, %rs113, 24;
	sub.s16 	%rs115, %rs109, %rs114;
	cvt.s32.s16 	%r855, %rs115;
	mul.wide.s32 	%rd155, %r855, 4;
	add.s64 	%rd156, %rd12, %rd155;
	ld.shared.u32 	%r3452, [%rd156];
	add.s16 	%rs116, %rs95, 18;
	mul.hi.s16 	%rs117, %rs116, 10923;
	shr.u16 	%rs118, %rs117, 15;
	shr.s16 	%rs119, %rs117, 2;
	add.s16 	%rs120, %rs119, %rs118;
	mul.lo.s16 	%rs121, %rs120, 24;
	sub.s16 	%rs122, %rs116, %rs121;
	cvt.s32.s16 	%r856, %rs122;
	mul.wide.s32 	%rd157, %r856, 4;
	add.s64 	%rd158, %rd12, %rd157;
	ld.shared.u32 	%r3453, [%rd158];
	add.s16 	%rs123, %rs95, 19;
	mul.hi.s16 	%rs124, %rs123, 10923;
	shr.u16 	%rs125, %rs124, 15;
	shr.s16 	%rs126, %rs124, 2;
	add.s16 	%rs127, %rs126, %rs125;
	mul.lo.s16 	%rs128, %rs127, 24;
	sub.s16 	%rs129, %rs123, %rs128;
	cvt.s32.s16 	%r857, %rs129;
	mul.wide.s32 	%rd159, %r857, 4;
	add.s64 	%rd160, %rd12, %rd159;
	ld.shared.u32 	%r3454, [%rd160];
	add.s16 	%rs130, %rs95, 20;
	mul.hi.s16 	%rs131, %rs130, 10923;
	shr.u16 	%rs132, %rs131, 15;
	shr.s16 	%rs133, %rs131, 2;
	add.s16 	%rs134, %rs133, %rs132;
	mul.lo.s16 	%rs135, %rs134, 24;
	sub.s16 	%rs136, %rs130, %rs135;
	cvt.s32.s16 	%r858, %rs136;
	mul.wide.s32 	%rd161, %r858, 4;
	add.s64 	%rd162, %rd12, %rd161;
	ld.shared.u32 	%r3455, [%rd162];
	add.s16 	%rs137, %rs95, 21;
	mul.hi.s16 	%rs138, %rs137, 10923;
	shr.u16 	%rs139, %rs138, 15;
	shr.s16 	%rs140, %rs138, 2;
	add.s16 	%rs141, %rs140, %rs139;
	mul.lo.s16 	%rs142, %rs141, 24;
	sub.s16 	%rs143, %rs137, %rs142;
	cvt.s32.s16 	%r859, %rs143;
	mul.wide.s32 	%rd163, %r859, 4;
	add.s64 	%rd164, %rd12, %rd163;
	ld.shared.u32 	%r3456, [%rd164];
	add.s16 	%rs144, %rs95, 22;
	mul.hi.s16 	%rs145, %rs144, 10923;
	shr.u16 	%rs146, %rs145, 15;
	shr.s16 	%rs147, %rs145, 2;
	add.s16 	%rs148, %rs147, %rs146;
	mul.lo.s16 	%rs149, %rs148, 24;
	sub.s16 	%rs150, %rs144, %rs149;
	cvt.s32.s16 	%r860, %rs150;
	mul.wide.s32 	%rd165, %r860, 4;
	add.s64 	%rd166, %rd12, %rd165;
	ld.shared.u32 	%r3457, [%rd166];
	add.s16 	%rs151, %rs95, 23;
	mul.hi.s16 	%rs152, %rs151, 10923;
	shr.u16 	%rs153, %rs152, 15;
	shr.s16 	%rs154, %rs152, 2;
	add.s16 	%rs155, %rs154, %rs153;
	mul.lo.s16 	%rs156, %rs155, 24;
	sub.s16 	%rs157, %rs151, %rs156;
	cvt.s32.s16 	%r861, %rs157;
	mul.wide.s32 	%rd167, %r861, 4;
	add.s64 	%rd168, %rd12, %rd167;
	ld.shared.u32 	%r3458, [%rd168];
LBB0_72:                                // %L11396
                                        //   in Loop: Header=BB0_71 Depth=1
	bar.sync 	0;
	mov.u32 	%r3459, 12;
	mov.u32 	%r3460, %r3414;
	bra.uni 	LBB0_73;
LBB0_80:                                // %L21413
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r3462, %r3462, 1;
	mov.u32 	%r3461, 0;
	mov.u32 	%r3463, %r3461;
	mov.u32 	%r3464, %r3461;
LBB0_81:                                // %L21414
                                        //   in Loop: Header=BB0_73 Depth=2
	bar.sync 	0;
	add.s32 	%r3460, %r3460, 1;
	add.s32 	%r3459, %r3459, -4;
	setp.ne.s32 	%p127, %r3459, -12;
	@%p127 bra 	LBB0_73;
	bra.uni 	LBB0_82;
LBB0_73:                                // %L11422
                                        //   Parent Loop BB0_71 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p116, %r3459, 12;
	selp.b32 	%r1401, %r3435, 0, %p116;
	setp.eq.s32 	%p117, %r3459, 8;
	selp.b32 	%r1402, %r3439, %r1401, %p117;
	setp.eq.s32 	%p118, %r3459, 4;
	selp.b32 	%r1403, %r3443, %r1402, %p118;
	setp.eq.s32 	%p119, %r3459, 0;
	selp.b32 	%r1404, %r3447, %r1403, %p119;
	setp.eq.s32 	%p120, %r3459, -4;
	selp.b32 	%r1405, %r3451, %r1404, %p120;
	setp.eq.s32 	%p121, %r3459, -8;
	selp.b32 	%r1406, %r3455, %r1405, %p121;
	selp.b32 	%r1407, %r3436, 0, %p116;
	selp.b32 	%r1408, %r3440, %r1407, %p117;
	selp.b32 	%r1409, %r3444, %r1408, %p118;
	selp.b32 	%r1410, %r3448, %r1409, %p119;
	selp.b32 	%r1411, %r3452, %r1410, %p120;
	selp.b32 	%r1412, %r3456, %r1411, %p121;
	selp.b32 	%r1413, %r3437, 0, %p116;
	selp.b32 	%r1414, %r3441, %r1413, %p117;
	selp.b32 	%r1415, %r3445, %r1414, %p118;
	selp.b32 	%r1416, %r3449, %r1415, %p119;
	selp.b32 	%r1417, %r3453, %r1416, %p120;
	selp.b32 	%r1418, %r3457, %r1417, %p121;
	selp.b32 	%r1419, %r3438, 0, %p116;
	selp.b32 	%r1420, %r3442, %r1419, %p117;
	selp.b32 	%r1421, %r3446, %r1420, %p118;
	selp.b32 	%r1422, %r3450, %r1421, %p119;
	selp.b32 	%r1423, %r3454, %r1422, %p120;
	selp.b32 	%r1424, %r3458, %r1423, %p121;
	mov.u16 	%rs195, 25600;
	// begin inline asm
	mov.b32 %r869, {%rs195, %rs195};
	// end inline asm
	mov.u16 	%rs197, 21504;
	// begin inline asm
	mov.b32 %r880, {%rs197, %rs197};
	// end inline asm
	xor.b32  	%r868, %r1406, -2004318072;
	mov.u32 	%r1005, 983055;
	// begin inline asm
	lop3.b32 %r866, %r1005, %r868, %r869, 202;
	// end inline asm
	mov.u16 	%rs201, 18432;
	// begin inline asm
	mov.b32 %r870, {%rs201, %rs201};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r871, %r869, %r870;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r874, %r866, %r871;
	// end inline asm
	mov.u32 	%r1016, 15728880;
	// begin inline asm
	lop3.b32 %r877, %r1016, %r868, %r880, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r881, {%rs201, %rs201};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r882, %r880, %r881;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r885, %r877, %r882;
	// end inline asm
	// begin inline asm
	mov.b32 %r915, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	mov.b32 %r926, {%rs197, %rs197};
	// end inline asm
	xor.b32  	%r914, %r1412, -2004318072;
	// begin inline asm
	lop3.b32 %r912, %r1005, %r914, %r915, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r916, {%rs201, %rs201};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r917, %r915, %r916;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r920, %r912, %r917;
	// end inline asm
	// begin inline asm
	lop3.b32 %r923, %r1016, %r914, %r926, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r927, {%rs201, %rs201};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r928, %r926, %r927;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r931, %r923, %r928;
	// end inline asm
	// begin inline asm
	mov.b32 %r961, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	mov.b32 %r972, {%rs197, %rs197};
	// end inline asm
	xor.b32  	%r960, %r1418, -2004318072;
	// begin inline asm
	lop3.b32 %r958, %r1005, %r960, %r961, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r962, {%rs201, %rs201};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r963, %r961, %r962;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r966, %r958, %r963;
	// end inline asm
	// begin inline asm
	lop3.b32 %r969, %r1016, %r960, %r972, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r973, {%rs201, %rs201};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r974, %r972, %r973;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r977, %r969, %r974;
	// end inline asm
	// begin inline asm
	mov.b32 %r1007, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	mov.b32 %r1018, {%rs197, %rs197};
	// end inline asm
	xor.b32  	%r1006, %r1424, -2004318072;
	// begin inline asm
	lop3.b32 %r1004, %r1005, %r1006, %r1007, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1008, {%rs201, %rs201};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1009, %r1007, %r1008;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1012, %r1004, %r1009;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1015, %r1016, %r1006, %r1018, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1019, {%rs201, %rs201};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1020, %r1018, %r1019;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1023, %r1015, %r1020;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3428;
    mov.b32 {%r2re, %r2im}, %r874;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1048, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3429;
    mov.b32 {%r2re, %r2im}, %r885;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1051, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3428;
    mov.b32 {%r2re, %r2im}, %r920;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1054, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3429;
    mov.b32 {%r2re, %r2im}, %r931;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1057, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3428;
    mov.b32 {%r2re, %r2im}, %r966;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1060, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3429;
    mov.b32 {%r2re, %r2im}, %r977;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1063, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3428;
    mov.b32 {%r2re, %r2im}, %r1012;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1066, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3429;
    mov.b32 {%r2re, %r2im}, %r1023;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1069, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1135, %r1132}, {%r300, %r303}, {%r1048}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1144, %r1141}, {%r300, %r303}, {%r1051}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1153, %r1150}, {%r300, %r303}, {%r1054}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1162, %r1159}, {%r300, %r303}, {%r1057}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1171, %r1168}, {%r300, %r303}, {%r1060}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1180, %r1177}, {%r300, %r303}, {%r1063}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1189, %r1186}, {%r300, %r303}, {%r1066}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1198, %r1195}, {%r300, %r303}, {%r1069}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1128, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1130, %r1128, %r1132;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1133, %r352, %r1135, %r1130;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1137, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1139, %r1137, %r1141;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1142, %r352, %r1144, %r1139;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1146, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1148, %r1146, %r1150;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1151, %r352, %r1153, %r1148;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1155, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1157, %r1155, %r1159;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1160, %r352, %r1162, %r1157;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1164, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1166, %r1164, %r1168;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1169, %r352, %r1171, %r1166;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1173, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1175, %r1173, %r1177;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1178, %r352, %r1180, %r1175;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1182, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1184, %r1182, %r1186;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1187, %r352, %r1189, %r1184;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1191, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1193, %r1191, %r1195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1196, %r352, %r1198, %r1193;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1200, %r355, %r1135;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1203, %r352, %r1132, %r1200;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1207, %r355, %r1144;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1210, %r352, %r1141, %r1207;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1214, %r355, %r1153;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1217, %r352, %r1150, %r1214;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1221, %r355, %r1162;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1224, %r352, %r1159, %r1221;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1228, %r355, %r1171;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1231, %r352, %r1168, %r1228;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1235, %r355, %r1180;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1238, %r352, %r1177, %r1235;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1242, %r355, %r1189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1245, %r352, %r1186, %r1242;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1249, %r355, %r1198;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1252, %r352, %r1195, %r1249;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1337, %r1338}, {%r396, %r402, %r399, %r405}, {%r1133, %r1203}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1345, %r1346}, {%r396, %r402, %r399, %r405}, {%r1142, %r1210}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1353, %r1354}, {%r396, %r402, %r399, %r405}, {%r1151, %r1217}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1361, %r1362}, {%r396, %r402, %r399, %r405}, {%r1160, %r1224}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1369, %r1370}, {%r396, %r402, %r399, %r405}, {%r1169, %r1231}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1377, %r1378}, {%r396, %r402, %r399, %r405}, {%r1178, %r1238}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1385, %r1386}, {%r396, %r402, %r399, %r405}, {%r1187, %r1245}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1393, %r1394}, {%r396, %r402, %r399, %r405}, {%r1196, %r1252}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	prmt.b32 %r1336, %r1337, %r1338, %r705;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1340, %r1337, %r1338, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1344, %r1345, %r1346, %r705;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1348, %r1345, %r1346, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1352, %r1353, %r1354, %r705;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1356, %r1353, %r1354, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1360, %r1361, %r1362, %r705;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1364, %r1361, %r1362, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1368, %r1369, %r1370, %r705;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1372, %r1369, %r1370, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1376, %r1377, %r1378, %r705;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1380, %r1377, %r1378, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1384, %r1385, %r1386, %r705;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1388, %r1385, %r1386, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1392, %r1393, %r1394, %r705;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1396, %r1393, %r1394, %r709;
	// end inline asm
	st.shared.u32 	[%rd6], %r1336;
	st.shared.u32 	[%rd7+33024], %r1340;
	st.shared.u32 	[%rd7+128], %r1344;
	st.shared.u32 	[%rd7+33152], %r1348;
	cvt.u16.u32 	%rs206, %r3460;
	and.b16  	%rs207, %rs206, 255;
	mul.lo.s16 	%rs208, %rs207, 171;
	shr.u16 	%rs209, %rs208, 10;
	mul.lo.s16 	%rs210, %rs209, 6;
	sub.s16 	%rs211, %rs206, %rs210;
	shl.b16 	%rs212, %rs211, 2;
	cvt.u32.u16 	%r1425, %rs212;
	and.b32  	%r1426, %r1425, 252;
	add.s32 	%r1427, %r107, %r1426;
	add.s32 	%r1428, %r1427, 1;
	shr.s32 	%r1429, %r1428, 31;
	shr.u32 	%r1430, %r1429, 30;
	add.s32 	%r1431, %r1428, %r1430;
	and.b32  	%r1432, %r1431, 67108860;
	sub.s32 	%r1433, %r1428, %r1432;
	shl.b32 	%r138, %r1433, 6;
	add.s32 	%r1434, %r92, %r138;
	mul.wide.s32 	%rd169, %r1434, 4;
	add.s64 	%rd171, %rd26, %rd169;
	st.shared.u32 	[%rd171], %r1352;
	add.s32 	%r1435, %r93, %r138;
	mul.wide.u32 	%rd172, %r1435, 4;
	add.s64 	%rd173, %rd26, %rd172;
	st.shared.u32 	[%rd173], %r1356;
	add.s32 	%r1436, %r94, %r138;
	mul.wide.s32 	%rd174, %r1436, 4;
	add.s64 	%rd175, %rd26, %rd174;
	st.shared.u32 	[%rd175], %r1360;
	add.s32 	%r1437, %r95, %r138;
	mul.wide.u32 	%rd176, %r1437, 4;
	add.s64 	%rd177, %rd26, %rd176;
	st.shared.u32 	[%rd177], %r1364;
	add.s32 	%r1438, %r1427, 2;
	shr.s32 	%r1439, %r1438, 31;
	shr.u32 	%r1440, %r1439, 30;
	add.s32 	%r1441, %r1438, %r1440;
	and.b32  	%r1442, %r1441, 67108860;
	sub.s32 	%r1443, %r1438, %r1442;
	shl.b32 	%r139, %r1443, 6;
	add.s32 	%r1444, %r92, %r139;
	mul.wide.s32 	%rd178, %r1444, 4;
	add.s64 	%rd179, %rd26, %rd178;
	st.shared.u32 	[%rd179], %r1368;
	add.s32 	%r1445, %r93, %r139;
	mul.wide.u32 	%rd180, %r1445, 4;
	add.s64 	%rd181, %rd26, %rd180;
	st.shared.u32 	[%rd181], %r1372;
	add.s32 	%r1446, %r94, %r139;
	mul.wide.s32 	%rd182, %r1446, 4;
	add.s64 	%rd183, %rd26, %rd182;
	st.shared.u32 	[%rd183], %r1376;
	add.s32 	%r1447, %r95, %r139;
	mul.wide.u32 	%rd184, %r1447, 4;
	add.s64 	%rd185, %rd26, %rd184;
	st.shared.u32 	[%rd185], %r1380;
	add.s32 	%r1448, %r1427, 3;
	shr.s32 	%r1449, %r1448, 31;
	shr.u32 	%r1450, %r1449, 30;
	add.s32 	%r1451, %r1448, %r1450;
	and.b32  	%r1452, %r1451, 67108860;
	sub.s32 	%r1453, %r1448, %r1452;
	shl.b32 	%r140, %r1453, 6;
	add.s32 	%r1454, %r92, %r140;
	mul.wide.s32 	%rd186, %r1454, 4;
	add.s64 	%rd187, %rd26, %rd186;
	st.shared.u32 	[%rd187], %r1384;
	add.s32 	%r1455, %r93, %r140;
	mul.wide.u32 	%rd188, %r1455, 4;
	add.s64 	%rd189, %rd26, %rd188;
	st.shared.u32 	[%rd189], %r1388;
	add.s32 	%r1456, %r94, %r140;
	mul.wide.s32 	%rd190, %r1456, 4;
	add.s64 	%rd191, %rd26, %rd190;
	st.shared.u32 	[%rd191], %r1392;
	add.s32 	%r1457, %r95, %r140;
	mul.wide.u32 	%rd192, %r1457, 4;
	add.s64 	%rd193, %rd26, %rd192;
	st.shared.u32 	[%rd193], %r1396;
	bar.sync 	0;
	mov.u32 	%r3465, %r3414;
	mov.u32 	%r3466, %r3414;
	mov.u32 	%r3467, %r3414;
	mov.u32 	%r3468, %r3414;
	@%p115 bra 	LBB0_112;
	bra.uni 	LBB0_74;
LBB0_112:                               // %oksrem7130
                                        //   in Loop: Header=BB0_73 Depth=2
	ld.shared.u32 	%r3465, [%rd8];
	ld.shared.u32 	%r3466, [%rd9];
	ld.shared.u32 	%r3467, [%rd10];
	ld.shared.u32 	%r3468, [%rd11];
LBB0_74:                                // %L17301
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1493, %r1490}, {%r300, %r303}, {%r3465}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1502, %r1499}, {%r300, %r303}, {%r3466}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1511, %r1508}, {%r300, %r303}, {%r3467}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1520, %r1517}, {%r300, %r303}, {%r3468}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1486, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1488, %r1486, %r1490;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1491, %r352, %r1493, %r1488;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1495, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1497, %r1495, %r1499;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1500, %r352, %r1502, %r1497;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1504, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1506, %r1504, %r1508;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1509, %r352, %r1511, %r1506;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1513, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1515, %r1513, %r1517;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1518, %r352, %r1520, %r1515;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1522, %r355, %r1493;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1525, %r352, %r1490, %r1522;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1529, %r355, %r1502;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1532, %r352, %r1499, %r1529;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1536, %r355, %r1511;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1539, %r352, %r1508, %r1536;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1543, %r355, %r1520;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1546, %r352, %r1517, %r1543;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1591, %r1595}, {%r396, %r402, %r399, %r405}, {%r1491, %r1525}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1607, %r1611}, {%r396, %r402, %r399, %r405}, {%r1500, %r1532}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1599, %r1603}, {%r396, %r402, %r399, %r405}, {%r1509, %r1539}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1615, %r1619}, {%r396, %r402, %r399, %r405}, {%r1518, %r1546}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1590, %r1591, %r1591, %r3464;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1594, %r1595, %r1595, %r1590;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1598, %r1599, %r1599, %r1594;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1602, %r1603, %r1603, %r1598;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1606, %r1607, %r1607, %r3463;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1610, %r1611, %r1611, %r1606;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1614, %r1615, %r1615, %r1610;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1618, %r1619, %r1619, %r1614;
	// end inline asm
	mov.u32 	%r3469, %r3414;
	mov.u32 	%r3470, %r3414;
	mov.u32 	%r3471, %r3414;
	mov.u32 	%r3472, %r3414;
	@%p115 bra 	LBB0_113;
	bra.uni 	LBB0_75;
LBB0_113:                               // %oksrem7665
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r1623, %r96, %r138;
	mul.wide.s32 	%rd194, %r1623, 4;
	add.s64 	%rd196, %rd26, %rd194;
	ld.shared.u32 	%r3469, [%rd196];
	add.s32 	%r1624, %r97, %r138;
	mul.wide.u32 	%rd197, %r1624, 4;
	add.s64 	%rd198, %rd26, %rd197;
	ld.shared.u32 	%r3470, [%rd198];
	add.s32 	%r1625, %r98, %r138;
	mul.wide.s32 	%rd199, %r1625, 4;
	add.s64 	%rd200, %rd26, %rd199;
	ld.shared.u32 	%r3471, [%rd200];
	add.s32 	%r1626, %r99, %r138;
	mul.wide.u32 	%rd201, %r1626, 4;
	add.s64 	%rd202, %rd26, %rd201;
	ld.shared.u32 	%r3472, [%rd202];
LBB0_75:                                // %L18526
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1662, %r1659}, {%r300, %r303}, {%r3469}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1671, %r1668}, {%r300, %r303}, {%r3470}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1680, %r1677}, {%r300, %r303}, {%r3471}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1689, %r1686}, {%r300, %r303}, {%r3472}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1655, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1657, %r1655, %r1659;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1660, %r352, %r1662, %r1657;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1664, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1666, %r1664, %r1668;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1669, %r352, %r1671, %r1666;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1673, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1675, %r1673, %r1677;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1678, %r352, %r1680, %r1675;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1682, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1684, %r1682, %r1686;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1687, %r352, %r1689, %r1684;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1691, %r355, %r1662;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1694, %r352, %r1659, %r1691;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1698, %r355, %r1671;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1701, %r352, %r1668, %r1698;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1705, %r355, %r1680;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1708, %r352, %r1677, %r1705;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1712, %r355, %r1689;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1715, %r352, %r1686, %r1712;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1760, %r1764}, {%r396, %r402, %r399, %r405}, {%r1660, %r1694}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1776, %r1780}, {%r396, %r402, %r399, %r405}, {%r1669, %r1701}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1768, %r1772}, {%r396, %r402, %r399, %r405}, {%r1678, %r1708}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1784, %r1788}, {%r396, %r402, %r399, %r405}, {%r1687, %r1715}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1759, %r1760, %r1760, %r1602;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1763, %r1764, %r1764, %r1759;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1767, %r1768, %r1768, %r1763;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1771, %r1772, %r1772, %r1767;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1775, %r1776, %r1776, %r1618;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1779, %r1780, %r1780, %r1775;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1783, %r1784, %r1784, %r1779;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1787, %r1788, %r1788, %r1783;
	// end inline asm
	mov.u32 	%r3473, %r3414;
	mov.u32 	%r3474, %r3414;
	mov.u32 	%r3475, %r3414;
	mov.u32 	%r3476, %r3414;
	@%p115 bra 	LBB0_114;
	bra.uni 	LBB0_76;
LBB0_114:                               // %oksrem8200
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r1792, %r96, %r139;
	mul.wide.s32 	%rd203, %r1792, 4;
	add.s64 	%rd205, %rd26, %rd203;
	ld.shared.u32 	%r3473, [%rd205];
	add.s32 	%r1793, %r97, %r139;
	mul.wide.u32 	%rd206, %r1793, 4;
	add.s64 	%rd207, %rd26, %rd206;
	ld.shared.u32 	%r3474, [%rd207];
	add.s32 	%r1794, %r98, %r139;
	mul.wide.s32 	%rd208, %r1794, 4;
	add.s64 	%rd209, %rd26, %rd208;
	ld.shared.u32 	%r3475, [%rd209];
	add.s32 	%r1795, %r99, %r139;
	mul.wide.u32 	%rd210, %r1795, 4;
	add.s64 	%rd211, %rd26, %rd210;
	ld.shared.u32 	%r3476, [%rd211];
LBB0_76:                                // %L19751
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1831, %r1828}, {%r300, %r303}, {%r3473}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1840, %r1837}, {%r300, %r303}, {%r3474}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1849, %r1846}, {%r300, %r303}, {%r3475}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1858, %r1855}, {%r300, %r303}, {%r3476}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1824, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1826, %r1824, %r1828;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1829, %r352, %r1831, %r1826;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1833, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1835, %r1833, %r1837;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1838, %r352, %r1840, %r1835;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1842, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1844, %r1842, %r1846;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1847, %r352, %r1849, %r1844;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1851, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1853, %r1851, %r1855;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1856, %r352, %r1858, %r1853;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1860, %r355, %r1831;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1863, %r352, %r1828, %r1860;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1867, %r355, %r1840;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1870, %r352, %r1837, %r1867;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1874, %r355, %r1849;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1877, %r352, %r1846, %r1874;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1881, %r355, %r1858;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1884, %r352, %r1855, %r1881;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1929, %r1933}, {%r396, %r402, %r399, %r405}, {%r1829, %r1863}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1945, %r1949}, {%r396, %r402, %r399, %r405}, {%r1838, %r1870}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1937, %r1941}, {%r396, %r402, %r399, %r405}, {%r1847, %r1877}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1953, %r1957}, {%r396, %r402, %r399, %r405}, {%r1856, %r1884}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1928, %r1929, %r1929, %r1771;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1932, %r1933, %r1933, %r1928;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1936, %r1937, %r1937, %r1932;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1940, %r1941, %r1941, %r1936;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1944, %r1945, %r1945, %r1787;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1948, %r1949, %r1949, %r1944;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1952, %r1953, %r1953, %r1948;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1956, %r1957, %r1957, %r1952;
	// end inline asm
	mov.u32 	%r3477, %r3414;
	mov.u32 	%r3478, %r3414;
	mov.u32 	%r3479, %r3414;
	mov.u32 	%r3480, %r3414;
	@%p115 bra 	LBB0_115;
	bra.uni 	LBB0_77;
LBB0_115:                               // %oksrem8735
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r1961, %r96, %r140;
	mul.wide.s32 	%rd212, %r1961, 4;
	add.s64 	%rd214, %rd26, %rd212;
	ld.shared.u32 	%r3477, [%rd214];
	add.s32 	%r1962, %r97, %r140;
	mul.wide.u32 	%rd215, %r1962, 4;
	add.s64 	%rd216, %rd26, %rd215;
	ld.shared.u32 	%r3478, [%rd216];
	add.s32 	%r1963, %r98, %r140;
	mul.wide.s32 	%rd217, %r1963, 4;
	add.s64 	%rd218, %rd26, %rd217;
	ld.shared.u32 	%r3479, [%rd218];
	add.s32 	%r1964, %r99, %r140;
	mul.wide.u32 	%rd219, %r1964, 4;
	add.s64 	%rd220, %rd26, %rd219;
	ld.shared.u32 	%r3480, [%rd220];
LBB0_77:                                // %L20976
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2000, %r1997}, {%r300, %r303}, {%r3477}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2009, %r2006}, {%r300, %r303}, {%r3478}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2018, %r2015}, {%r300, %r303}, {%r3479}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2027, %r2024}, {%r300, %r303}, {%r3480}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1993, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1995, %r1993, %r1997;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1998, %r352, %r2000, %r1995;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2002, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2004, %r2002, %r2006;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2007, %r352, %r2009, %r2004;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2011, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2013, %r2011, %r2015;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2016, %r352, %r2018, %r2013;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2020, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2022, %r2020, %r2024;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2025, %r352, %r2027, %r2022;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2029, %r355, %r2000;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2032, %r352, %r1997, %r2029;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2036, %r355, %r2009;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2039, %r352, %r2006, %r2036;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2043, %r355, %r2018;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2046, %r352, %r2015, %r2043;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2050, %r355, %r2027;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2053, %r352, %r2024, %r2050;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2098, %r2102}, {%r396, %r402, %r399, %r405}, {%r1998, %r2032}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2114, %r2118}, {%r396, %r402, %r399, %r405}, {%r2007, %r2039}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2106, %r2110}, {%r396, %r402, %r399, %r405}, {%r2016, %r2046}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2122, %r2126}, {%r396, %r402, %r399, %r405}, {%r2025, %r2053}, {%r3414, %r3414};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2097, %r2098, %r2098, %r1940;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2101, %r2102, %r2102, %r2097;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2105, %r2106, %r2106, %r2101;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3464, %r2110, %r2110, %r2105;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2113, %r2114, %r2114, %r1956;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2117, %r2118, %r2118, %r2113;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2121, %r2122, %r2122, %r2117;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3463, %r2126, %r2126, %r2121;
	// end inline asm
	add.s32 	%r3461, %r3461, 4;
	setp.ne.s32 	%p125, %r3461, 40;
	@%p125 bra 	LBB0_81;
// %bb.78:                              // %L21122
                                        //   in Loop: Header=BB0_73 Depth=2
	@%p65 bra 	LBB0_80;
// %bb.79:                              // %L21181
                                        //   in Loop: Header=BB0_73 Depth=2
	mul.lo.s32 	%r2129, %r3462, 1152;
	add.s32 	%r2130, %r100, %r2129;
	mul.wide.u32 	%rd221, %r2130, 4;
	add.s64 	%rd222, %rd4, %rd221;
	st.global.u32 	[%rd222], %r3464;
	add.s32 	%r2131, %r101, %r2129;
	mul.wide.u32 	%rd223, %r2131, 4;
	add.s64 	%rd224, %rd4, %rd223;
	st.global.u32 	[%rd224], %r3463;
	bra.uni 	LBB0_80;
LBB0_82:                                // %L21443.preheader
                                        //   in Loop: Header=BB0_71 Depth=1
	add.s32 	%r173, %r107, 24;
	mov.u32 	%r2134, 0;
	mov.u32 	%r3485, 12;
	mov.u32 	%r3486, %r2134;
	bra.uni 	LBB0_83;
LBB0_90:                                // %L31434
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r3462, %r3462, 1;
	mov.u32 	%r3463, 0;
	mov.u32 	%r3464, %r3463;
	mov.u32 	%r3461, %r3463;
LBB0_91:                                // %L31435
                                        //   in Loop: Header=BB0_83 Depth=2
	bar.sync 	0;
	add.s32 	%r3486, %r3486, 1;
	add.s32 	%r3485, %r3485, -4;
	setp.eq.s32 	%p140, %r3485, -12;
	@%p140 bra 	LBB0_92;
LBB0_83:                                // %L21443
                                        //   Parent Loop BB0_71 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p129, %r3485, 12;
	selp.b32 	%r2672, %r3435, 0, %p129;
	setp.eq.s32 	%p130, %r3485, 8;
	selp.b32 	%r2673, %r3439, %r2672, %p130;
	setp.eq.s32 	%p131, %r3485, 4;
	selp.b32 	%r2674, %r3443, %r2673, %p131;
	setp.eq.s32 	%p132, %r3485, 0;
	selp.b32 	%r2675, %r3447, %r2674, %p132;
	setp.eq.s32 	%p133, %r3485, -4;
	selp.b32 	%r2676, %r3451, %r2675, %p133;
	setp.eq.s32 	%p134, %r3485, -8;
	selp.b32 	%r2677, %r3455, %r2676, %p134;
	selp.b32 	%r2678, %r3436, 0, %p129;
	selp.b32 	%r2679, %r3440, %r2678, %p130;
	selp.b32 	%r2680, %r3444, %r2679, %p131;
	selp.b32 	%r2681, %r3448, %r2680, %p132;
	selp.b32 	%r2682, %r3452, %r2681, %p133;
	selp.b32 	%r2683, %r3456, %r2682, %p134;
	selp.b32 	%r2684, %r3437, 0, %p129;
	selp.b32 	%r2685, %r3441, %r2684, %p130;
	selp.b32 	%r2686, %r3445, %r2685, %p131;
	selp.b32 	%r2687, %r3449, %r2686, %p132;
	selp.b32 	%r2688, %r3453, %r2687, %p133;
	selp.b32 	%r2689, %r3457, %r2688, %p134;
	selp.b32 	%r2690, %r3438, 0, %p129;
	selp.b32 	%r2691, %r3442, %r2690, %p130;
	selp.b32 	%r2692, %r3446, %r2691, %p131;
	selp.b32 	%r2693, %r3450, %r2692, %p132;
	selp.b32 	%r2694, %r3454, %r2693, %p133;
	selp.b32 	%r2695, %r3458, %r2694, %p134;
	// begin inline asm
	mov.b32 %r2162, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	mov.b32 %r2173, {%rs197, %rs197};
	// end inline asm
	shr.u32 	%r2696, %r2677, 8;
	xor.b32  	%r2172, %r2696, 8947848;
	// begin inline asm
	lop3.b32 %r2159, %r1005, %r2172, %r2162, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2163, {%rs201, %rs201};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2164, %r2162, %r2163;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2167, %r2159, %r2164;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2170, %r1016, %r2172, %r2173, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2174, {%rs201, %rs201};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2175, %r2173, %r2174;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2178, %r2170, %r2175;
	// end inline asm
	// begin inline asm
	mov.b32 %r2208, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	mov.b32 %r2219, {%rs197, %rs197};
	// end inline asm
	shr.u32 	%r2697, %r2683, 8;
	xor.b32  	%r2218, %r2697, 8947848;
	// begin inline asm
	lop3.b32 %r2205, %r1005, %r2218, %r2208, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2209, {%rs201, %rs201};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2210, %r2208, %r2209;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2213, %r2205, %r2210;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2216, %r1016, %r2218, %r2219, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2220, {%rs201, %rs201};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2221, %r2219, %r2220;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2224, %r2216, %r2221;
	// end inline asm
	// begin inline asm
	mov.b32 %r2254, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	mov.b32 %r2265, {%rs197, %rs197};
	// end inline asm
	shr.u32 	%r2698, %r2689, 8;
	xor.b32  	%r2264, %r2698, 8947848;
	// begin inline asm
	lop3.b32 %r2251, %r1005, %r2264, %r2254, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2255, {%rs201, %rs201};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2256, %r2254, %r2255;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2259, %r2251, %r2256;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2262, %r1016, %r2264, %r2265, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2266, {%rs201, %rs201};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2267, %r2265, %r2266;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2270, %r2262, %r2267;
	// end inline asm
	// begin inline asm
	mov.b32 %r2300, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	mov.b32 %r2311, {%rs197, %rs197};
	// end inline asm
	shr.u32 	%r2699, %r2695, 8;
	xor.b32  	%r2310, %r2699, 8947848;
	// begin inline asm
	lop3.b32 %r2297, %r1005, %r2310, %r2300, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2301, {%rs201, %rs201};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2302, %r2300, %r2301;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2305, %r2297, %r2302;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2308, %r1016, %r2310, %r2311, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2312, {%rs201, %rs201};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2313, %r2311, %r2312;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2316, %r2308, %r2313;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3428;
    mov.b32 {%r2re, %r2im}, %r2167;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2319, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3429;
    mov.b32 {%r2re, %r2im}, %r2178;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2322, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3428;
    mov.b32 {%r2re, %r2im}, %r2213;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2325, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3429;
    mov.b32 {%r2re, %r2im}, %r2224;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2328, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3428;
    mov.b32 {%r2re, %r2im}, %r2259;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2331, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3429;
    mov.b32 {%r2re, %r2im}, %r2270;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2334, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3428;
    mov.b32 {%r2re, %r2im}, %r2305;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2337, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3429;
    mov.b32 {%r2re, %r2im}, %r2316;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2340, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2406, %r2403}, {%r300, %r303}, {%r2319}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2415, %r2412}, {%r300, %r303}, {%r2322}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2424, %r2421}, {%r300, %r303}, {%r2325}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2433, %r2430}, {%r300, %r303}, {%r2328}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2442, %r2439}, {%r300, %r303}, {%r2331}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2451, %r2448}, {%r300, %r303}, {%r2334}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2460, %r2457}, {%r300, %r303}, {%r2337}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2469, %r2466}, {%r300, %r303}, {%r2340}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2399, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2401, %r2399, %r2403;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2404, %r352, %r2406, %r2401;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2408, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2410, %r2408, %r2412;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2413, %r352, %r2415, %r2410;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2417, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2419, %r2417, %r2421;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2422, %r352, %r2424, %r2419;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2426, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2428, %r2426, %r2430;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2431, %r352, %r2433, %r2428;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2435, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2437, %r2435, %r2439;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2440, %r352, %r2442, %r2437;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2444, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2446, %r2444, %r2448;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2449, %r352, %r2451, %r2446;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2453, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2455, %r2453, %r2457;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2458, %r352, %r2460, %r2455;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2462, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2464, %r2462, %r2466;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2467, %r352, %r2469, %r2464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2471, %r355, %r2406;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2474, %r352, %r2403, %r2471;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2478, %r355, %r2415;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2481, %r352, %r2412, %r2478;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2485, %r355, %r2424;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2488, %r352, %r2421, %r2485;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2492, %r355, %r2433;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2495, %r352, %r2430, %r2492;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2499, %r355, %r2442;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2502, %r352, %r2439, %r2499;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2506, %r355, %r2451;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2509, %r352, %r2448, %r2506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2513, %r355, %r2460;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2516, %r352, %r2457, %r2513;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2520, %r355, %r2469;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2523, %r352, %r2466, %r2520;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2608, %r2609}, {%r396, %r402, %r399, %r405}, {%r2404, %r2474}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2616, %r2617}, {%r396, %r402, %r399, %r405}, {%r2413, %r2481}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2624, %r2625}, {%r396, %r402, %r399, %r405}, {%r2422, %r2488}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2632, %r2633}, {%r396, %r402, %r399, %r405}, {%r2431, %r2495}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2640, %r2641}, {%r396, %r402, %r399, %r405}, {%r2440, %r2502}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2648, %r2649}, {%r396, %r402, %r399, %r405}, {%r2449, %r2509}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2656, %r2657}, {%r396, %r402, %r399, %r405}, {%r2458, %r2516}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2664, %r2665}, {%r396, %r402, %r399, %r405}, {%r2467, %r2523}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	prmt.b32 %r2607, %r2608, %r2609, %r705;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2611, %r2608, %r2609, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2615, %r2616, %r2617, %r705;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2619, %r2616, %r2617, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2623, %r2624, %r2625, %r705;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2627, %r2624, %r2625, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2631, %r2632, %r2633, %r705;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2635, %r2632, %r2633, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2639, %r2640, %r2641, %r705;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2643, %r2640, %r2641, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2647, %r2648, %r2649, %r705;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2651, %r2648, %r2649, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2655, %r2656, %r2657, %r705;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2659, %r2656, %r2657, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2663, %r2664, %r2665, %r705;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2667, %r2664, %r2665, %r709;
	// end inline asm
	st.shared.u32 	[%rd6], %r2607;
	st.shared.u32 	[%rd7+33024], %r2611;
	st.shared.u32 	[%rd7+128], %r2615;
	st.shared.u32 	[%rd7+33152], %r2619;
	cvt.u16.u32 	%rs261, %r3486;
	and.b16  	%rs262, %rs261, 255;
	mul.lo.s16 	%rs263, %rs262, 171;
	shr.u16 	%rs264, %rs263, 10;
	mul.lo.s16 	%rs265, %rs264, 6;
	sub.s16 	%rs266, %rs261, %rs265;
	shl.b16 	%rs267, %rs266, 2;
	cvt.u32.u16 	%r2700, %rs267;
	and.b32  	%r2701, %r2700, 252;
	add.s32 	%r2702, %r173, %r2701;
	add.s32 	%r2703, %r2702, 1;
	shr.s32 	%r2704, %r2703, 31;
	shr.u32 	%r2705, %r2704, 30;
	add.s32 	%r2706, %r2703, %r2705;
	and.b32  	%r2707, %r2706, 67108860;
	sub.s32 	%r2708, %r2703, %r2707;
	shl.b32 	%r180, %r2708, 6;
	add.s32 	%r2709, %r92, %r180;
	mul.wide.s32 	%rd225, %r2709, 4;
	add.s64 	%rd227, %rd26, %rd225;
	st.shared.u32 	[%rd227], %r2623;
	add.s32 	%r2710, %r93, %r180;
	mul.wide.u32 	%rd228, %r2710, 4;
	add.s64 	%rd229, %rd26, %rd228;
	st.shared.u32 	[%rd229], %r2627;
	add.s32 	%r2711, %r94, %r180;
	mul.wide.s32 	%rd230, %r2711, 4;
	add.s64 	%rd231, %rd26, %rd230;
	st.shared.u32 	[%rd231], %r2631;
	add.s32 	%r2712, %r95, %r180;
	mul.wide.u32 	%rd232, %r2712, 4;
	add.s64 	%rd233, %rd26, %rd232;
	st.shared.u32 	[%rd233], %r2635;
	add.s32 	%r2713, %r2702, 2;
	shr.s32 	%r2714, %r2713, 31;
	shr.u32 	%r2715, %r2714, 30;
	add.s32 	%r2716, %r2713, %r2715;
	and.b32  	%r2717, %r2716, 67108860;
	sub.s32 	%r2718, %r2713, %r2717;
	shl.b32 	%r181, %r2718, 6;
	add.s32 	%r2719, %r92, %r181;
	mul.wide.s32 	%rd234, %r2719, 4;
	add.s64 	%rd235, %rd26, %rd234;
	st.shared.u32 	[%rd235], %r2639;
	add.s32 	%r2720, %r93, %r181;
	mul.wide.u32 	%rd236, %r2720, 4;
	add.s64 	%rd237, %rd26, %rd236;
	st.shared.u32 	[%rd237], %r2643;
	add.s32 	%r2721, %r94, %r181;
	mul.wide.s32 	%rd238, %r2721, 4;
	add.s64 	%rd239, %rd26, %rd238;
	st.shared.u32 	[%rd239], %r2647;
	add.s32 	%r2722, %r95, %r181;
	mul.wide.u32 	%rd240, %r2722, 4;
	add.s64 	%rd241, %rd26, %rd240;
	st.shared.u32 	[%rd241], %r2651;
	add.s32 	%r2723, %r2702, 3;
	shr.s32 	%r2724, %r2723, 31;
	shr.u32 	%r2725, %r2724, 30;
	add.s32 	%r2726, %r2723, %r2725;
	and.b32  	%r2727, %r2726, 67108860;
	sub.s32 	%r2728, %r2723, %r2727;
	shl.b32 	%r182, %r2728, 6;
	add.s32 	%r2729, %r92, %r182;
	mul.wide.s32 	%rd242, %r2729, 4;
	add.s64 	%rd243, %rd26, %rd242;
	st.shared.u32 	[%rd243], %r2655;
	add.s32 	%r2730, %r93, %r182;
	mul.wide.u32 	%rd244, %r2730, 4;
	add.s64 	%rd245, %rd26, %rd244;
	st.shared.u32 	[%rd245], %r2659;
	add.s32 	%r2731, %r94, %r182;
	mul.wide.s32 	%rd246, %r2731, 4;
	add.s64 	%rd247, %rd26, %rd246;
	st.shared.u32 	[%rd247], %r2663;
	add.s32 	%r2732, %r95, %r182;
	mul.wide.u32 	%rd248, %r2732, 4;
	add.s64 	%rd249, %rd26, %rd248;
	st.shared.u32 	[%rd249], %r2667;
	bar.sync 	0;
	mov.u32 	%r3491, %r2134;
	mov.u32 	%r3492, %r2134;
	mov.u32 	%r3493, %r2134;
	mov.u32 	%r3494, %r2134;
	@%p115 bra 	LBB0_116;
	bra.uni 	LBB0_84;
LBB0_116:                               // %oksrem11528
                                        //   in Loop: Header=BB0_83 Depth=2
	ld.shared.u32 	%r3494, [%rd8];
	ld.shared.u32 	%r3493, [%rd9];
	ld.shared.u32 	%r3492, [%rd10];
	ld.shared.u32 	%r3491, [%rd11];
LBB0_84:                                // %L27322
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2768, %r2765}, {%r300, %r303}, {%r3494}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2777, %r2774}, {%r300, %r303}, {%r3493}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2786, %r2783}, {%r300, %r303}, {%r3492}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2795, %r2792}, {%r300, %r303}, {%r3491}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2761, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2763, %r2761, %r2765;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2766, %r352, %r2768, %r2763;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2770, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2772, %r2770, %r2774;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2775, %r352, %r2777, %r2772;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2779, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2781, %r2779, %r2783;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2784, %r352, %r2786, %r2781;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2788, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2790, %r2788, %r2792;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2793, %r352, %r2795, %r2790;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2797, %r355, %r2768;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2800, %r352, %r2765, %r2797;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2804, %r355, %r2777;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2807, %r352, %r2774, %r2804;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2811, %r355, %r2786;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2814, %r352, %r2783, %r2811;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2818, %r355, %r2795;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2821, %r352, %r2792, %r2818;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2866, %r2870}, {%r396, %r402, %r399, %r405}, {%r2766, %r2800}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2882, %r2886}, {%r396, %r402, %r399, %r405}, {%r2775, %r2807}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2874, %r2878}, {%r396, %r402, %r399, %r405}, {%r2784, %r2814}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2890, %r2894}, {%r396, %r402, %r399, %r405}, {%r2793, %r2821}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2865, %r2866, %r2866, %r3464;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2869, %r2870, %r2870, %r2865;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2873, %r2874, %r2874, %r2869;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2877, %r2878, %r2878, %r2873;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2881, %r2882, %r2882, %r3463;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2885, %r2886, %r2886, %r2881;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2889, %r2890, %r2890, %r2885;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2893, %r2894, %r2894, %r2889;
	// end inline asm
	mov.u32 	%r3495, %r2134;
	mov.u32 	%r3496, %r2134;
	mov.u32 	%r3497, %r2134;
	mov.u32 	%r3498, %r2134;
	@%p115 bra 	LBB0_117;
	bra.uni 	LBB0_85;
LBB0_117:                               // %oksrem12063
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r2898, %r96, %r180;
	mul.wide.s32 	%rd250, %r2898, 4;
	add.s64 	%rd252, %rd26, %rd250;
	ld.shared.u32 	%r3498, [%rd252];
	add.s32 	%r2899, %r97, %r180;
	mul.wide.u32 	%rd253, %r2899, 4;
	add.s64 	%rd254, %rd26, %rd253;
	ld.shared.u32 	%r3497, [%rd254];
	add.s32 	%r2900, %r98, %r180;
	mul.wide.s32 	%rd255, %r2900, 4;
	add.s64 	%rd256, %rd26, %rd255;
	ld.shared.u32 	%r3496, [%rd256];
	add.s32 	%r2901, %r99, %r180;
	mul.wide.u32 	%rd257, %r2901, 4;
	add.s64 	%rd258, %rd26, %rd257;
	ld.shared.u32 	%r3495, [%rd258];
LBB0_85:                                // %L28547
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2937, %r2934}, {%r300, %r303}, {%r3498}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2946, %r2943}, {%r300, %r303}, {%r3497}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2955, %r2952}, {%r300, %r303}, {%r3496}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2964, %r2961}, {%r300, %r303}, {%r3495}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2930, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2932, %r2930, %r2934;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2935, %r352, %r2937, %r2932;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2939, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2941, %r2939, %r2943;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2944, %r352, %r2946, %r2941;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2948, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2950, %r2948, %r2952;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2953, %r352, %r2955, %r2950;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2957, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2959, %r2957, %r2961;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2962, %r352, %r2964, %r2959;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2966, %r355, %r2937;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2969, %r352, %r2934, %r2966;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2973, %r355, %r2946;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2976, %r352, %r2943, %r2973;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2980, %r355, %r2955;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2983, %r352, %r2952, %r2980;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2987, %r355, %r2964;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2990, %r352, %r2961, %r2987;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3035, %r3039}, {%r396, %r402, %r399, %r405}, {%r2935, %r2969}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3051, %r3055}, {%r396, %r402, %r399, %r405}, {%r2944, %r2976}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3043, %r3047}, {%r396, %r402, %r399, %r405}, {%r2953, %r2983}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3059, %r3063}, {%r396, %r402, %r399, %r405}, {%r2962, %r2990}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3034, %r3035, %r3035, %r2877;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3038, %r3039, %r3039, %r3034;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3042, %r3043, %r3043, %r3038;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3046, %r3047, %r3047, %r3042;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3050, %r3051, %r3051, %r2893;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3054, %r3055, %r3055, %r3050;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3058, %r3059, %r3059, %r3054;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3062, %r3063, %r3063, %r3058;
	// end inline asm
	mov.u32 	%r3499, %r2134;
	mov.u32 	%r3500, %r2134;
	mov.u32 	%r3501, %r2134;
	mov.u32 	%r3502, %r2134;
	@%p115 bra 	LBB0_118;
	bra.uni 	LBB0_86;
LBB0_118:                               // %oksrem12598
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r3067, %r96, %r181;
	mul.wide.s32 	%rd259, %r3067, 4;
	add.s64 	%rd261, %rd26, %rd259;
	ld.shared.u32 	%r3502, [%rd261];
	add.s32 	%r3068, %r97, %r181;
	mul.wide.u32 	%rd262, %r3068, 4;
	add.s64 	%rd263, %rd26, %rd262;
	ld.shared.u32 	%r3501, [%rd263];
	add.s32 	%r3069, %r98, %r181;
	mul.wide.s32 	%rd264, %r3069, 4;
	add.s64 	%rd265, %rd26, %rd264;
	ld.shared.u32 	%r3500, [%rd265];
	add.s32 	%r3070, %r99, %r181;
	mul.wide.u32 	%rd266, %r3070, 4;
	add.s64 	%rd267, %rd26, %rd266;
	ld.shared.u32 	%r3499, [%rd267];
LBB0_86:                                // %L29772
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3106, %r3103}, {%r300, %r303}, {%r3502}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3115, %r3112}, {%r300, %r303}, {%r3501}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3124, %r3121}, {%r300, %r303}, {%r3500}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3133, %r3130}, {%r300, %r303}, {%r3499}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3099, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3101, %r3099, %r3103;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3104, %r352, %r3106, %r3101;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3108, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3110, %r3108, %r3112;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3113, %r352, %r3115, %r3110;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3117, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3119, %r3117, %r3121;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3122, %r352, %r3124, %r3119;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3126, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3128, %r3126, %r3130;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3131, %r352, %r3133, %r3128;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3135, %r355, %r3106;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3138, %r352, %r3103, %r3135;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3142, %r355, %r3115;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3145, %r352, %r3112, %r3142;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3149, %r355, %r3124;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3152, %r352, %r3121, %r3149;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3156, %r355, %r3133;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3159, %r352, %r3130, %r3156;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3204, %r3208}, {%r396, %r402, %r399, %r405}, {%r3104, %r3138}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3220, %r3224}, {%r396, %r402, %r399, %r405}, {%r3113, %r3145}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3212, %r3216}, {%r396, %r402, %r399, %r405}, {%r3122, %r3152}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3228, %r3232}, {%r396, %r402, %r399, %r405}, {%r3131, %r3159}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3203, %r3204, %r3204, %r3046;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3207, %r3208, %r3208, %r3203;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3211, %r3212, %r3212, %r3207;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3215, %r3216, %r3216, %r3211;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3219, %r3220, %r3220, %r3062;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3223, %r3224, %r3224, %r3219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3227, %r3228, %r3228, %r3223;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3231, %r3232, %r3232, %r3227;
	// end inline asm
	mov.u32 	%r3503, %r2134;
	mov.u32 	%r3504, %r2134;
	mov.u32 	%r3505, %r2134;
	mov.u32 	%r3506, %r2134;
	@%p115 bra 	LBB0_119;
	bra.uni 	LBB0_87;
LBB0_119:                               // %oksrem13133
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r3236, %r96, %r182;
	mul.wide.s32 	%rd268, %r3236, 4;
	add.s64 	%rd270, %rd26, %rd268;
	ld.shared.u32 	%r3506, [%rd270];
	add.s32 	%r3237, %r97, %r182;
	mul.wide.u32 	%rd271, %r3237, 4;
	add.s64 	%rd272, %rd26, %rd271;
	ld.shared.u32 	%r3505, [%rd272];
	add.s32 	%r3238, %r98, %r182;
	mul.wide.s32 	%rd273, %r3238, 4;
	add.s64 	%rd274, %rd26, %rd273;
	ld.shared.u32 	%r3504, [%rd274];
	add.s32 	%r3239, %r99, %r182;
	mul.wide.u32 	%rd275, %r3239, 4;
	add.s64 	%rd276, %rd26, %rd275;
	ld.shared.u32 	%r3503, [%rd276];
LBB0_87:                                // %L30997
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3275, %r3272}, {%r300, %r303}, {%r3506}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3284, %r3281}, {%r300, %r303}, {%r3505}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3293, %r3290}, {%r300, %r303}, {%r3504}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3302, %r3299}, {%r300, %r303}, {%r3503}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3268, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3270, %r3268, %r3272;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3273, %r352, %r3275, %r3270;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3277, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3279, %r3277, %r3281;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3282, %r352, %r3284, %r3279;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3286, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3288, %r3286, %r3290;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3291, %r352, %r3293, %r3288;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3295, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3297, %r3295, %r3299;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3300, %r352, %r3302, %r3297;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3304, %r355, %r3275;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3307, %r352, %r3272, %r3304;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3311, %r355, %r3284;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3314, %r352, %r3281, %r3311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3318, %r355, %r3293;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3321, %r352, %r3290, %r3318;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3325, %r355, %r3302;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3328, %r352, %r3299, %r3325;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3373, %r3377}, {%r396, %r402, %r399, %r405}, {%r3273, %r3307}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3389, %r3393}, {%r396, %r402, %r399, %r405}, {%r3282, %r3314}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3381, %r3385}, {%r396, %r402, %r399, %r405}, {%r3291, %r3321}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3397, %r3401}, {%r396, %r402, %r399, %r405}, {%r3300, %r3328}, {%r2134, %r2134};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3372, %r3373, %r3373, %r3215;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3376, %r3377, %r3377, %r3372;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3380, %r3381, %r3381, %r3376;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3464, %r3385, %r3385, %r3380;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3388, %r3389, %r3389, %r3231;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3392, %r3393, %r3393, %r3388;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3396, %r3397, %r3397, %r3392;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3463, %r3401, %r3401, %r3396;
	// end inline asm
	add.s32 	%r3461, %r3461, 4;
	setp.ne.s32 	%p138, %r3461, 40;
	@%p138 bra 	LBB0_91;
// %bb.88:                              // %L31143
                                        //   in Loop: Header=BB0_83 Depth=2
	@%p65 bra 	LBB0_90;
// %bb.89:                              // %L31202
                                        //   in Loop: Header=BB0_83 Depth=2
	mul.lo.s32 	%r3404, %r3462, 1152;
	add.s32 	%r3405, %r100, %r3404;
	mul.wide.u32 	%rd277, %r3405, 4;
	add.s64 	%rd278, %rd4, %rd277;
	st.global.u32 	[%rd278], %r3464;
	add.s32 	%r3406, %r101, %r3404;
	mul.wide.u32 	%rd279, %r3406, 4;
	add.s64 	%rd280, %rd4, %rd279;
	st.global.u32 	[%rd280], %r3463;
	bra.uni 	LBB0_90;
LBB0_93:                                // %guard_pass14638
	@%p65 bra 	LBB0_95;
// %bb.94:                              // %L31536
	mul.lo.s32 	%r3408, %r3462, 1152;
	add.s32 	%r3409, %r100, %r3408;
	mul.wide.u32 	%rd281, %r3409, 4;
	add.s64 	%rd282, %rd4, %rd281;
	st.global.u32 	[%rd282], %r3464;
	add.s32 	%r3410, %r101, %r3408;
	mul.wide.u32 	%rd283, %r3410, 4;
	add.s64 	%rd284, %rd4, %rd283;
	st.global.u32 	[%rd284], %r3463;
LBB0_95:                                // %L31768
	mov.u32 	%r3411, 0;
	st.global.u32 	[%rd5], %r3411;
	ret;
LBB0_1:                                 // %L8
	ld.param.u64 	%rd13, [_Z15julia_frb_1025413CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0];
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd13;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
