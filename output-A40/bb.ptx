// PTX CompilerJob of bb(CuDeviceVector{Int8x4, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Int32, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Int32, 1}) in world 33499 for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 7.1
.target sm_86
.address_size 64

	// .globl	_Z13julia_bb_360913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE // -- Begin function _Z13julia_bb_360913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[8]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception866[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1873[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z13julia_bb_360913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.visible .entry _Z13julia_bb_360913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE(
	.param .align 8 .b8 _Z13julia_bb_360913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0[8],
	.param .align 8 .b8 _Z13julia_bb_360913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z13julia_bb_360913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z13julia_bb_360913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z13julia_bb_360913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z13julia_bb_360913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<16>;
	.reg .b16 	%rs<23>;
	.reg .b32 	%r<1341>;
	.reg .b64 	%rd<92>;

// %bb.0:                               // %conversion
	ld.param.u64 	%rd15, [_Z13julia_bb_360913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r78, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r78, 16511;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L10
	// begin inline asm
	mov.u32 %r79, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r79, 67711;
	@%p2 bra 	LBB0_4;
	bra.uni 	LBB0_3;
LBB0_4:                                 // %L27
	ld.param.u64 	%rd3, [_Z13julia_bb_360913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3];
	ld.param.u64 	%rd5, [_Z13julia_bb_360913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %ctaid.x;
	or.b32  	%r80, %r3, %r1;
	mad.lo.s32 	%r81, %r4, 768, %r80;
	mul.wide.u32 	%rd20, %r81, 4;
	add.s64 	%rd6, %rd5, %rd20;
	mov.u32 	%r82, 1;
	st.global.u32 	[%rd6], %r82;
	and.b32  	%r5, %r4, 1;
	shr.u32 	%r6, %r4, 1;
	mul.lo.s32 	%r83, %r6, 192;
	shr.u32 	%r7, %r1, 3;
	shl.b32 	%r84, %r2, 2;
	or.b32  	%r85, %r7, %r84;
	mul.hi.u32 	%r86, %r85, -1431655765;
	shr.u32 	%r87, %r86, 6;
	mul.lo.s32 	%r88, %r87, 96;
	sub.s32 	%r8, %r85, %r88;
	mad.lo.s32 	%r89, %r5, 96, %r83;
	add.s32 	%r90, %r89, %r8;
	mul.wide.u32 	%rd21, %r90, 4;
	add.s64 	%rd22, %rd3, %rd21;
	ld.global.u32 	%r9, [%rd22];
	add.s32 	%r10, %r9, -4;
	setp.lt.u32 	%p3, %r10, 31;
	@%p3 bra 	LBB0_6;
	bra.uni 	LBB0_5;
LBB0_6:                                 // %pass110
	ld.param.u64 	%rd1, [_Z13julia_bb_360913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1];
	ld.param.u64 	%rd2, [_Z13julia_bb_360913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2];
	ld.param.u64 	%rd4, [_Z13julia_bb_360913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4];
	add.s32 	%r349, %r9, -3;
	shl.b32 	%r350, %r1, 1;
	shl.b32 	%r351, %r2, 6;
	or.b32  	%r352, %r350, %r351;
	shl.b32 	%r353, %r1, 4;
	and.b32  	%r354, %r353, 16;
	and.b32  	%r355, %r352, 204;
	or.b32  	%r356, %r354, %r355;
	mul.lo.s32 	%r357, %r5, 24576;
	mul.lo.s32 	%r358, %r6, 49152;
	shr.u32 	%r359, %r2, 2;
	cvt.u16.u32 	%rs4, %r359;
	mul.lo.s16 	%rs5, %rs4, 171;
	shr.u16 	%rs6, %rs5, 10;
	mul.lo.s16 	%rs7, %rs6, 6;
	sub.s16 	%rs8, %rs4, %rs7;
	shl.b16 	%rs9, %rs8, 4;
	cvt.u32.u16 	%r360, %rs9;
	and.b32  	%r361, %r360, 240;
	shr.u32 	%r33, %r1, 2;
	and.b32  	%r362, %r33, 6;
	or.b32  	%r363, %r362, %r361;
	cvt.u16.u32 	%rs10, %r363;
	mul.lo.s16 	%rs11, %rs10, 171;
	shr.u16 	%rs12, %rs11, 14;
	mul.lo.s16 	%rs13, %rs12, 96;
	sub.s16 	%rs14, %rs10, %rs13;
	and.b16  	%rs15, %rs14, 246;
	mul.wide.u16 	%r364, %rs15, 256;
	add.s32 	%r365, %r358, %r357;
	or.b32  	%r366, %r365, %r356;
	add.s32 	%r367, %r366, %r364;
	shl.b32 	%r368, %r367, 2;
	cvt.u64.u32 	%rd25, %r368;
	add.s64 	%rd26, %rd25, %rd1;
	ld.global.v4.u32 	{%r93, %r94, %r109, %r110}, [%rd26];
	or.b16  	%rs16, %rs10, 8;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 14;
	mul.lo.s16 	%rs19, %rs18, 96;
	sub.s16 	%rs20, %rs16, %rs19;
	and.b16  	%rs21, %rs20, 254;
	mul.wide.u16 	%r369, %rs21, 256;
	add.s32 	%r370, %r366, %r369;
	shl.b32 	%r371, %r370, 2;
	cvt.u64.u32 	%rd27, %r371;
	add.s64 	%rd28, %rd27, %rd1;
	ld.global.v4.u32 	{%r101, %r102, %r117, %r118}, [%rd28];
	and.b32  	%r372, %r350, 12;
	and.b32  	%r373, %r351, 192;
	or.b32  	%r374, %r373, %r372;
	or.b32  	%r375, %r374, %r354;
	or.b32  	%r376, %r375, %r357;
	add.s32 	%r377, %r358, %r376;
	or.b32  	%r378, %r377, 33;
	add.s32 	%r379, %r378, %r364;
	mul.wide.u32 	%rd29, %r379, 4;
	add.s64 	%rd30, %rd1, %rd29;
	ld.global.v4.u32 	{%r125, %r126, %r141, %r142}, [%rd30+-4];
	add.s32 	%r380, %r378, %r369;
	mul.wide.u32 	%rd31, %r380, 4;
	add.s64 	%rd32, %rd1, %rd31;
	ld.global.v4.u32 	{%r133, %r134, %r149, %r150}, [%rd32+-4];
	or.b32  	%r381, %r33, %r361;
	or.b32  	%r382, %r381, 1;
	mul.hi.u32 	%r383, %r382, -1431655765;
	shr.u32 	%r384, %r383, 6;
	mul.lo.s32 	%r385, %r384, 96;
	sub.s32 	%r386, %r382, %r385;
	shl.b32 	%r387, %r386, 8;
	add.s32 	%r388, %r366, %r387;
	shl.b32 	%r389, %r388, 2;
	cvt.u64.u32 	%rd33, %r389;
	add.s64 	%rd34, %rd33, %rd1;
	ld.global.v4.u32 	{%r157, %r158, %r173, %r174}, [%rd34];
	or.b32  	%r390, %r381, 9;
	mul.hi.u32 	%r391, %r390, -1431655765;
	shr.u32 	%r392, %r391, 6;
	mul.lo.s32 	%r393, %r392, 96;
	sub.s32 	%r394, %r390, %r393;
	shl.b32 	%r395, %r394, 8;
	add.s32 	%r396, %r366, %r395;
	shl.b32 	%r397, %r396, 2;
	cvt.u64.u32 	%rd35, %r397;
	add.s64 	%rd36, %rd35, %rd1;
	ld.global.v4.u32 	{%r165, %r166, %r181, %r182}, [%rd36];
	add.s32 	%r398, %r378, %r387;
	mul.wide.u32 	%rd37, %r398, 4;
	add.s64 	%rd38, %rd1, %rd37;
	ld.global.v4.u32 	{%r189, %r190, %r205, %r206}, [%rd38+-4];
	add.s32 	%r399, %r378, %r395;
	mul.wide.u32 	%rd39, %r399, 4;
	add.s64 	%rd40, %rd1, %rd39;
	ld.global.v4.u32 	{%r197, %r198, %r213, %r214}, [%rd40+-4];
	mov.u32 	%r215, 21520;
	// begin inline asm
	prmt.b32 %r221, %r93, %r94, %r215;
	// end inline asm
	mov.u32 	%r219, 30258;
	// begin inline asm
	prmt.b32 %r222, %r93, %r94, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r229, %r101, %r102, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r230, %r101, %r102, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r237, %r109, %r110, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r238, %r109, %r110, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r245, %r117, %r118, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r246, %r117, %r118, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r253, %r125, %r126, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r254, %r125, %r126, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r261, %r133, %r134, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r262, %r133, %r134, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r269, %r141, %r142, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r270, %r141, %r142, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r277, %r149, %r150, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r278, %r149, %r150, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r285, %r157, %r158, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r286, %r157, %r158, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r293, %r165, %r166, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r294, %r165, %r166, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r301, %r173, %r174, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r302, %r173, %r174, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r309, %r181, %r182, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r310, %r181, %r182, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r317, %r189, %r190, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r318, %r189, %r190, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r325, %r197, %r198, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r326, %r197, %r198, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r333, %r205, %r206, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r334, %r205, %r206, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r341, %r213, %r214, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r342, %r213, %r214, %r219;
	// end inline asm
	mov.u32 	%r343, 25152;
	// begin inline asm
	prmt.b32 %r220, %r221, %r222, %r343;
	// end inline asm
	mov.u32 	%r347, 29521;
	// begin inline asm
	prmt.b32 %r224, %r221, %r222, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r228, %r229, %r230, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r232, %r229, %r230, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r236, %r237, %r238, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r240, %r237, %r238, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r244, %r245, %r246, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r248, %r245, %r246, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r252, %r253, %r254, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r256, %r253, %r254, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r260, %r261, %r262, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r264, %r261, %r262, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r268, %r269, %r270, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r272, %r269, %r270, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r276, %r277, %r278, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r280, %r277, %r278, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r284, %r285, %r286, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r288, %r285, %r286, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r292, %r293, %r294, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r296, %r293, %r294, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r300, %r301, %r302, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r304, %r301, %r302, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r308, %r309, %r310, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r312, %r309, %r310, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r316, %r317, %r318, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r320, %r317, %r318, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r324, %r325, %r326, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r328, %r325, %r326, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r332, %r333, %r334, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r336, %r333, %r334, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r340, %r341, %r342, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r344, %r341, %r342, %r347;
	// end inline asm
	cvt.u16.u32 	%rs22, %r1;
	and.b16  	%rs1, %rs22, 2;
	setp.eq.s16 	%p4, %rs1, 0;
	selp.b32 	%r400, %r252, %r220, %p4;
	shfl.sync.bfly.b32	%r401, %r400, 2, 31, -1;
	selp.b32 	%r402, %r220, %r401, %p4;
	selp.b32 	%r403, %r401, %r252, %p4;
	selp.b32 	%r404, %r260, %r228, %p4;
	shfl.sync.bfly.b32	%r405, %r404, 2, 31, -1;
	selp.b32 	%r406, %r228, %r405, %p4;
	selp.b32 	%r407, %r405, %r260, %p4;
	selp.b32 	%r408, %r256, %r224, %p4;
	shfl.sync.bfly.b32	%r409, %r408, 2, 31, -1;
	selp.b32 	%r410, %r224, %r409, %p4;
	selp.b32 	%r411, %r409, %r256, %p4;
	selp.b32 	%r412, %r264, %r232, %p4;
	shfl.sync.bfly.b32	%r413, %r412, 2, 31, -1;
	selp.b32 	%r414, %r232, %r413, %p4;
	selp.b32 	%r415, %r413, %r264, %p4;
	selp.b32 	%r416, %r268, %r236, %p4;
	shfl.sync.bfly.b32	%r417, %r416, 2, 31, -1;
	selp.b32 	%r418, %r236, %r417, %p4;
	selp.b32 	%r419, %r417, %r268, %p4;
	selp.b32 	%r420, %r276, %r244, %p4;
	shfl.sync.bfly.b32	%r421, %r420, 2, 31, -1;
	selp.b32 	%r422, %r244, %r421, %p4;
	selp.b32 	%r423, %r421, %r276, %p4;
	selp.b32 	%r424, %r272, %r240, %p4;
	shfl.sync.bfly.b32	%r425, %r424, 2, 31, -1;
	selp.b32 	%r426, %r240, %r425, %p4;
	selp.b32 	%r427, %r425, %r272, %p4;
	selp.b32 	%r428, %r280, %r248, %p4;
	shfl.sync.bfly.b32	%r429, %r428, 2, 31, -1;
	selp.b32 	%r430, %r248, %r429, %p4;
	selp.b32 	%r431, %r429, %r280, %p4;
	selp.b32 	%r432, %r316, %r284, %p4;
	shfl.sync.bfly.b32	%r433, %r432, 2, 31, -1;
	selp.b32 	%r434, %r284, %r433, %p4;
	selp.b32 	%r435, %r433, %r316, %p4;
	selp.b32 	%r436, %r324, %r292, %p4;
	shfl.sync.bfly.b32	%r437, %r436, 2, 31, -1;
	selp.b32 	%r438, %r292, %r437, %p4;
	selp.b32 	%r439, %r437, %r324, %p4;
	selp.b32 	%r440, %r320, %r288, %p4;
	shfl.sync.bfly.b32	%r441, %r440, 2, 31, -1;
	selp.b32 	%r442, %r288, %r441, %p4;
	selp.b32 	%r443, %r441, %r320, %p4;
	selp.b32 	%r444, %r328, %r296, %p4;
	shfl.sync.bfly.b32	%r445, %r444, 2, 31, -1;
	selp.b32 	%r446, %r296, %r445, %p4;
	selp.b32 	%r447, %r445, %r328, %p4;
	selp.b32 	%r448, %r332, %r300, %p4;
	shfl.sync.bfly.b32	%r449, %r448, 2, 31, -1;
	selp.b32 	%r450, %r300, %r449, %p4;
	selp.b32 	%r451, %r449, %r332, %p4;
	selp.b32 	%r452, %r340, %r308, %p4;
	shfl.sync.bfly.b32	%r453, %r452, 2, 31, -1;
	selp.b32 	%r454, %r308, %r453, %p4;
	selp.b32 	%r455, %r453, %r340, %p4;
	selp.b32 	%r456, %r336, %r304, %p4;
	shfl.sync.bfly.b32	%r457, %r456, 2, 31, -1;
	selp.b32 	%r458, %r304, %r457, %p4;
	selp.b32 	%r459, %r457, %r336, %p4;
	selp.b32 	%r460, %r344, %r312, %p4;
	shfl.sync.bfly.b32	%r461, %r460, 2, 31, -1;
	selp.b32 	%r462, %r312, %r461, %p4;
	selp.b32 	%r463, %r461, %r344, %p4;
	and.b16  	%rs2, %rs22, 4;
	setp.eq.s16 	%p5, %rs2, 0;
	selp.b32 	%r464, %r434, %r402, %p5;
	shfl.sync.bfly.b32	%r465, %r464, 4, 31, -1;
	selp.b32 	%r34, %r402, %r465, %p5;
	selp.b32 	%r35, %r465, %r434, %p5;
	selp.b32 	%r466, %r438, %r406, %p5;
	shfl.sync.bfly.b32	%r467, %r466, 4, 31, -1;
	selp.b32 	%r36, %r406, %r467, %p5;
	selp.b32 	%r37, %r467, %r438, %p5;
	selp.b32 	%r468, %r442, %r410, %p5;
	shfl.sync.bfly.b32	%r469, %r468, 4, 31, -1;
	selp.b32 	%r38, %r410, %r469, %p5;
	selp.b32 	%r39, %r469, %r442, %p5;
	selp.b32 	%r470, %r446, %r414, %p5;
	shfl.sync.bfly.b32	%r471, %r470, 4, 31, -1;
	selp.b32 	%r40, %r414, %r471, %p5;
	selp.b32 	%r41, %r471, %r446, %p5;
	selp.b32 	%r472, %r450, %r418, %p5;
	shfl.sync.bfly.b32	%r473, %r472, 4, 31, -1;
	selp.b32 	%r42, %r418, %r473, %p5;
	selp.b32 	%r43, %r473, %r450, %p5;
	selp.b32 	%r474, %r454, %r422, %p5;
	shfl.sync.bfly.b32	%r475, %r474, 4, 31, -1;
	selp.b32 	%r44, %r422, %r475, %p5;
	selp.b32 	%r45, %r475, %r454, %p5;
	selp.b32 	%r476, %r458, %r426, %p5;
	shfl.sync.bfly.b32	%r477, %r476, 4, 31, -1;
	selp.b32 	%r46, %r426, %r477, %p5;
	selp.b32 	%r47, %r477, %r458, %p5;
	selp.b32 	%r478, %r462, %r430, %p5;
	shfl.sync.bfly.b32	%r479, %r478, 4, 31, -1;
	selp.b32 	%r48, %r430, %r479, %p5;
	selp.b32 	%r49, %r479, %r462, %p5;
	selp.b32 	%r480, %r435, %r403, %p5;
	shfl.sync.bfly.b32	%r481, %r480, 4, 31, -1;
	selp.b32 	%r50, %r403, %r481, %p5;
	selp.b32 	%r51, %r481, %r435, %p5;
	selp.b32 	%r482, %r439, %r407, %p5;
	shfl.sync.bfly.b32	%r483, %r482, 4, 31, -1;
	selp.b32 	%r52, %r407, %r483, %p5;
	selp.b32 	%r53, %r483, %r439, %p5;
	selp.b32 	%r484, %r443, %r411, %p5;
	shfl.sync.bfly.b32	%r485, %r484, 4, 31, -1;
	selp.b32 	%r54, %r411, %r485, %p5;
	selp.b32 	%r55, %r485, %r443, %p5;
	selp.b32 	%r486, %r447, %r415, %p5;
	shfl.sync.bfly.b32	%r487, %r486, 4, 31, -1;
	selp.b32 	%r56, %r415, %r487, %p5;
	selp.b32 	%r57, %r487, %r447, %p5;
	selp.b32 	%r488, %r451, %r419, %p5;
	shfl.sync.bfly.b32	%r489, %r488, 4, 31, -1;
	selp.b32 	%r58, %r419, %r489, %p5;
	selp.b32 	%r59, %r489, %r451, %p5;
	selp.b32 	%r490, %r455, %r423, %p5;
	shfl.sync.bfly.b32	%r491, %r490, 4, 31, -1;
	selp.b32 	%r60, %r423, %r491, %p5;
	selp.b32 	%r61, %r491, %r455, %p5;
	selp.b32 	%r492, %r459, %r427, %p5;
	shfl.sync.bfly.b32	%r493, %r492, 4, 31, -1;
	selp.b32 	%r62, %r427, %r493, %p5;
	selp.b32 	%r63, %r493, %r459, %p5;
	selp.b32 	%r494, %r463, %r431, %p5;
	shfl.sync.bfly.b32	%r495, %r494, 4, 31, -1;
	selp.b32 	%r64, %r431, %r495, %p5;
	selp.b32 	%r65, %r495, %r463, %p5;
	shl.b32 	%r496, %r1, 2;
	and.b32  	%r497, %r496, 28;
	and.b32  	%r498, %r3, 96;
	or.b32  	%r66, %r497, %r498;
	shl.b32 	%r499, %r4, 11;
	and.b32  	%r500, %r499, 2048;
	shl.b32 	%r501, %r4, 6;
	and.b32  	%r502, %r501, 1920;
	and.b32  	%r67, %r2, 12;
	or.b32  	%r503, %r66, %r500;
	or.b32  	%r68, %r503, %r502;
	shl.b32 	%r504, %r1, 3;
	and.b32  	%r505, %r504, 24;
	or.b32  	%r69, %r505, %r498;
	and.b32  	%r70, %r350, 6;
	and.b32  	%r506, %r2, 3;
	mul.hi.u32 	%r507, %r381, -1431655765;
	shr.u32 	%r508, %r507, 6;
	mul.lo.s32 	%r509, %r508, 96;
	sub.s32 	%r510, %r381, %r509;
	mul.lo.s32 	%r511, %r506, 3200;
	or.b32  	%r71, %r510, %r511;
	or.b32  	%r512, %r381, 8;
	mul.hi.u32 	%r513, %r512, -1431655765;
	shr.u32 	%r514, %r513, 6;
	mul.lo.s32 	%r515, %r514, 96;
	sub.s32 	%r516, %r512, %r515;
	or.b32  	%r72, %r516, %r511;
	and.b32  	%r517, %r1, 7;
	shl.b32 	%r73, %r82, %r10;
	min.u32 	%r74, %r349, 31;
	and.b16  	%rs3, %rs22, 1;
	shl.b32 	%r519, %r4, 14;
	shl.b32 	%r520, %r8, 19;
	shl.b32 	%r521, %r1, 5;
	and.b32  	%r522, %r521, 64;
	or.b32  	%r75, %r354, %r522;
	or.b32  	%r76, %r520, %r519;
	mul.lo.s32 	%r523, %r517, 100;
	add.s32 	%r524, %r523, %r8;
	mul.wide.u32 	%rd41, %r524, 4;
	mov.u64 	%rd42, shmem;
	add.s64 	%rd43, %rd42, 16512;
	add.s64 	%rd7, %rd43, %rd41;
	cvt.u64.u32 	%rd44, %r523;
	cvt.u64.u32 	%rd45, %r8;
	add.s64 	%rd46, %rd45, %rd44;
	shl.b64 	%rd47, %rd46, 2;
	add.s64 	%rd8, %rd43, %rd47;
	add.s32 	%r525, %r523, 800;
	add.s32 	%r526, %r525, %r8;
	mul.wide.u32 	%rd48, %r526, 4;
	add.s64 	%rd9, %rd43, %rd48;
	cvt.u64.u32 	%rd49, %r525;
	add.s64 	%rd50, %rd45, %rd49;
	shl.b64 	%rd51, %rd50, 2;
	add.s64 	%rd10, %rd43, %rd51;
	add.s32 	%r527, %r523, 1600;
	add.s32 	%r528, %r527, %r8;
	mul.wide.u32 	%rd52, %r528, 4;
	add.s64 	%rd11, %rd43, %rd52;
	cvt.u64.u32 	%rd53, %r527;
	add.s64 	%rd54, %rd45, %rd53;
	shl.b64 	%rd55, %rd54, 2;
	add.s64 	%rd12, %rd43, %rd55;
	or.b32  	%r529, %r1, 24;
	mul.lo.s32 	%r530, %r529, 100;
	add.s32 	%r531, %r530, %r8;
	mul.wide.u32 	%rd56, %r531, 4;
	add.s64 	%rd13, %rd43, %rd56;
	cvt.u64.u32 	%rd57, %r530;
	add.s64 	%rd58, %rd45, %rd57;
	shl.b64 	%rd59, %rd58, 2;
	add.s64 	%rd14, %rd43, %rd59;
	and.b32  	%r77, %r504, 32;
	mov.u32 	%r348, 0;
	setp.gt.u32 	%p6, %r2, 15;
	mov.u32 	%r1332, %r348;
LBB0_7:                                 // %L2378
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_8 Depth 2
                                        //       Child Loop BB0_11 Depth 3
	or.b32  	%r533, %r1332, %r7;
	or.b32  	%r12, %r533, %r67;
	or.b32  	%r13, %r12, 16;
	mov.u32 	%r1333, %r348;
	mov.u32 	%r1334, %r348;
	mov.u32 	%r1335, %r348;
	mov.u32 	%r1336, %r348;
	mov.u32 	%r1337, %r348;
	mov.u32 	%r1338, %r348;
	mov.u32 	%r1339, %r348;
LBB0_8:                                 // %L2381
                                        //   Parent Loop BB0_7 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_11 Depth 3
	@%p6 bra 	LBB0_10;
// %bb.9:                               // %L2401
                                        //   in Loop: Header=BB0_8 Depth=2
	add.s32 	%r534, %r1333, %r12;
	shl.b32 	%r535, %r534, 12;
	and.b32  	%r536, %r535, 67039232;
	or.b32  	%r537, %r68, %r536;
	shl.b32 	%r538, %r537, 2;
	cvt.u64.u32 	%rd60, %r538;
	add.s64 	%rd61, %rd2, %rd60;
	ld.global.v4.u32 	{%r539, %r540, %r541, %r542}, [%rd61];
	add.s32 	%r543, %r1333, %r13;
	shl.b32 	%r544, %r543, 12;
	and.b32  	%r545, %r544, 67104768;
	or.b32  	%r546, %r68, %r545;
	shl.b32 	%r547, %r546, 2;
	cvt.u64.u32 	%rd62, %r547;
	add.s64 	%rd63, %rd2, %rd62;
	ld.global.v4.u32 	{%r548, %r549, %r550, %r551}, [%rd63];
	and.b32  	%r552, %r534, 15;
	mul.lo.s32 	%r553, %r552, 129;
	add.s32 	%r554, %r66, %r553;
	mul.wide.u32 	%rd64, %r554, 4;
	add.s64 	%rd66, %rd42, %rd64;
	st.shared.u32 	[%rd66], %r539;
	cvt.u64.u32 	%rd67, %r553;
	cvt.u64.u32 	%rd68, %r66;
	add.s64 	%rd69, %rd68, %rd67;
	shl.b64 	%rd70, %rd69, 2;
	add.s64 	%rd71, %rd42, %rd70;
	st.shared.u32 	[%rd71+4], %r540;
	st.shared.u32 	[%rd71+8], %r541;
	st.shared.u32 	[%rd71+12], %r542;
	and.b32  	%r555, %r543, 31;
	mul.lo.s32 	%r556, %r555, 129;
	add.s32 	%r557, %r66, %r556;
	mul.wide.u32 	%rd72, %r557, 4;
	add.s64 	%rd73, %rd42, %rd72;
	st.shared.u32 	[%rd73], %r548;
	cvt.u64.u32 	%rd74, %r556;
	add.s64 	%rd75, %rd68, %rd74;
	shl.b64 	%rd76, %rd75, 2;
	add.s64 	%rd77, %rd42, %rd76;
	st.shared.u32 	[%rd77+4], %r549;
	st.shared.u32 	[%rd77+8], %r550;
	st.shared.u32 	[%rd77+12], %r551;
LBB0_10:                                // %L4057
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	add.s32 	%r21, %r1333, %r1332;
	mov.u32 	%r571, 0;
	mov.u32 	%r1340, %r571;
LBB0_11:                                // %L4059
                                        //   Parent Loop BB0_7 Depth=1
                                        //     Parent Loop BB0_8 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r1083, %r1340, %r33;
	add.s32 	%r1084, %r21, %r1083;
	shr.s32 	%r1085, %r1084, 31;
	shr.u32 	%r1086, %r1085, 27;
	add.s32 	%r1087, %r1084, %r1086;
	and.b32  	%r1088, %r1087, -32;
	sub.s32 	%r1089, %r1084, %r1088;
	mad.lo.s32 	%r1090, %r1089, 129, %r69;
	mul.wide.s32 	%rd78, %r1090, 4;
	add.s64 	%rd80, %rd42, %rd78;
	ld.shared.u32 	%r560, [%rd80];
	mov.u32 	%r561, 134744072;
	mov.u32 	%r562, 252645135;
	// begin inline asm
	lop3.b32 %r559, %r560, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1091, %r559, 2021161080;
	xor.b32  	%r570, %r1091, -2139062144;
	shr.u32 	%r564, %r560, 4;
	// begin inline asm
	lop3.b32 %r563, %r564, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1092, %r563, 2021161080;
	xor.b32  	%r576, %r1092, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r567, %r568}, {%r34}, {%r570}, {%r571, %r571};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r573, %r574}, {%r38}, {%r576}, {%r571, %r571};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r579, %r580}, {%r34}, {%r576}, {%r571, %r571};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r585, %r586}, {%r38}, {%r570}, {%r579, %r580};
	// end inline asm
	ld.shared.u32 	%r592, [%rd80+4];
	// begin inline asm
	lop3.b32 %r591, %r592, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1093, %r591, 2021161080;
	xor.b32  	%r602, %r1093, -2139062144;
	shr.u32 	%r596, %r592, 4;
	// begin inline asm
	lop3.b32 %r595, %r596, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1094, %r595, 2021161080;
	xor.b32  	%r608, %r1094, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r599, %r600}, {%r42}, {%r602}, {%r567, %r568};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r605, %r606}, {%r46}, {%r608}, {%r573, %r574};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r611, %r612}, {%r42}, {%r608}, {%r585, %r586};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r617, %r618}, {%r46}, {%r602}, {%r611, %r612};
	// end inline asm
	ld.shared.u32 	%r624, [%rd80+8];
	// begin inline asm
	lop3.b32 %r623, %r624, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1095, %r623, 2021161080;
	xor.b32  	%r634, %r1095, -2139062144;
	shr.u32 	%r628, %r624, 4;
	// begin inline asm
	lop3.b32 %r627, %r628, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1096, %r627, 2021161080;
	xor.b32  	%r640, %r1096, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r631, %r632}, {%r50}, {%r634}, {%r599, %r600};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r637, %r638}, {%r54}, {%r640}, {%r605, %r606};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r643, %r644}, {%r50}, {%r640}, {%r617, %r618};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r649, %r650}, {%r54}, {%r634}, {%r643, %r644};
	// end inline asm
	ld.shared.u32 	%r656, [%rd80+12];
	// begin inline asm
	lop3.b32 %r655, %r656, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1097, %r655, 2021161080;
	xor.b32  	%r666, %r1097, -2139062144;
	shr.u32 	%r660, %r656, 4;
	// begin inline asm
	lop3.b32 %r659, %r660, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1098, %r659, 2021161080;
	xor.b32  	%r672, %r1098, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r663, %r664}, {%r58}, {%r666}, {%r631, %r632};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r669, %r670}, {%r62}, {%r672}, {%r637, %r638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r675, %r676}, {%r58}, {%r672}, {%r649, %r650};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r681, %r682}, {%r62}, {%r666}, {%r675, %r676};
	// end inline asm
	ld.shared.u32 	%r688, [%rd80+16];
	// begin inline asm
	lop3.b32 %r687, %r688, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1099, %r687, 2021161080;
	xor.b32  	%r698, %r1099, -2139062144;
	shr.u32 	%r692, %r688, 4;
	// begin inline asm
	lop3.b32 %r691, %r692, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1100, %r691, 2021161080;
	xor.b32  	%r704, %r1100, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r695, %r696}, {%r35}, {%r698}, {%r663, %r664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r701, %r702}, {%r39}, {%r704}, {%r669, %r670};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r707, %r708}, {%r35}, {%r704}, {%r681, %r682};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r713, %r714}, {%r39}, {%r698}, {%r707, %r708};
	// end inline asm
	ld.shared.u32 	%r720, [%rd80+20];
	// begin inline asm
	lop3.b32 %r719, %r720, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1101, %r719, 2021161080;
	xor.b32  	%r730, %r1101, -2139062144;
	shr.u32 	%r724, %r720, 4;
	// begin inline asm
	lop3.b32 %r723, %r724, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1102, %r723, 2021161080;
	xor.b32  	%r736, %r1102, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r727, %r728}, {%r43}, {%r730}, {%r695, %r696};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r733, %r734}, {%r47}, {%r736}, {%r701, %r702};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r739, %r740}, {%r43}, {%r736}, {%r713, %r714};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r745, %r746}, {%r47}, {%r730}, {%r739, %r740};
	// end inline asm
	ld.shared.u32 	%r752, [%rd80+24];
	// begin inline asm
	lop3.b32 %r751, %r752, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1103, %r751, 2021161080;
	xor.b32  	%r762, %r1103, -2139062144;
	shr.u32 	%r756, %r752, 4;
	// begin inline asm
	lop3.b32 %r755, %r756, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1104, %r755, 2021161080;
	xor.b32  	%r768, %r1104, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r759, %r760}, {%r51}, {%r762}, {%r727, %r728};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r765, %r766}, {%r55}, {%r768}, {%r733, %r734};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r771, %r772}, {%r51}, {%r768}, {%r745, %r746};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r777, %r778}, {%r55}, {%r762}, {%r771, %r772};
	// end inline asm
	ld.shared.u32 	%r784, [%rd80+28];
	// begin inline asm
	lop3.b32 %r783, %r784, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1105, %r783, 2021161080;
	xor.b32  	%r794, %r1105, -2139062144;
	shr.u32 	%r788, %r784, 4;
	// begin inline asm
	lop3.b32 %r787, %r788, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1106, %r787, 2021161080;
	xor.b32  	%r800, %r1106, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r791, %r792}, {%r59}, {%r794}, {%r759, %r760};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r797, %r798}, {%r63}, {%r800}, {%r765, %r766};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r803, %r804}, {%r59}, {%r800}, {%r777, %r778};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r809, %r810}, {%r63}, {%r794}, {%r803, %r804};
	// end inline asm
	sub.s32 	%r1107, %r791, %r797;
	add.s32 	%r1108, %r1107, 4;
	shr.s32 	%r817, %r1108, 3;
	add.s32 	%r1109, %r809, 4;
	shr.s32 	%r816, %r1109, 3;
	sub.s32 	%r1110, %r792, %r798;
	add.s32 	%r1111, %r1110, 4;
	shr.s32 	%r820, %r1111, 3;
	add.s32 	%r1112, %r810, 4;
	shr.s32 	%r819, %r1112, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r815, %r816, %r817;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r818, %r819, %r820;
	// end inline asm
	or.b32  	%r1113, %r70, %r1340;
	mul.lo.s32 	%r1114, %r1113, 100;
	add.s32 	%r1115, %r71, %r1114;
	mul.wide.u32 	%rd81, %r1115, 4;
	add.s64 	%rd83, %rd43, %rd81;
	st.shared.u32 	[%rd83], %r815;
	add.s32 	%r1116, %r1114, 100;
	add.s32 	%r1117, %r71, %r1116;
	mul.wide.u32 	%rd84, %r1117, 4;
	add.s64 	%rd85, %rd43, %rd84;
	st.shared.u32 	[%rd85], %r818;
	ld.shared.u32 	%r822, [%rd80];
	// begin inline asm
	lop3.b32 %r821, %r822, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1118, %r821, 2021161080;
	xor.b32  	%r832, %r1118, -2139062144;
	shr.u32 	%r826, %r822, 4;
	// begin inline asm
	lop3.b32 %r825, %r826, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1119, %r825, 2021161080;
	xor.b32  	%r838, %r1119, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r829, %r830}, {%r36}, {%r832}, {%r571, %r571};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r835, %r836}, {%r40}, {%r838}, {%r571, %r571};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r841, %r842}, {%r36}, {%r838}, {%r571, %r571};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r847, %r848}, {%r40}, {%r832}, {%r841, %r842};
	// end inline asm
	ld.shared.u32 	%r854, [%rd80+4];
	// begin inline asm
	lop3.b32 %r853, %r854, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1120, %r853, 2021161080;
	xor.b32  	%r864, %r1120, -2139062144;
	shr.u32 	%r858, %r854, 4;
	// begin inline asm
	lop3.b32 %r857, %r858, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1121, %r857, 2021161080;
	xor.b32  	%r870, %r1121, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r861, %r862}, {%r44}, {%r864}, {%r829, %r830};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r867, %r868}, {%r48}, {%r870}, {%r835, %r836};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r873, %r874}, {%r44}, {%r870}, {%r847, %r848};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r879, %r880}, {%r48}, {%r864}, {%r873, %r874};
	// end inline asm
	ld.shared.u32 	%r886, [%rd80+8];
	// begin inline asm
	lop3.b32 %r885, %r886, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1122, %r885, 2021161080;
	xor.b32  	%r896, %r1122, -2139062144;
	shr.u32 	%r890, %r886, 4;
	// begin inline asm
	lop3.b32 %r889, %r890, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1123, %r889, 2021161080;
	xor.b32  	%r902, %r1123, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r893, %r894}, {%r52}, {%r896}, {%r861, %r862};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r899, %r900}, {%r56}, {%r902}, {%r867, %r868};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r905, %r906}, {%r52}, {%r902}, {%r879, %r880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r911, %r912}, {%r56}, {%r896}, {%r905, %r906};
	// end inline asm
	ld.shared.u32 	%r918, [%rd80+12];
	// begin inline asm
	lop3.b32 %r917, %r918, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1124, %r917, 2021161080;
	xor.b32  	%r928, %r1124, -2139062144;
	shr.u32 	%r922, %r918, 4;
	// begin inline asm
	lop3.b32 %r921, %r922, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1125, %r921, 2021161080;
	xor.b32  	%r934, %r1125, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r925, %r926}, {%r60}, {%r928}, {%r893, %r894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r931, %r932}, {%r64}, {%r934}, {%r899, %r900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r937, %r938}, {%r60}, {%r934}, {%r911, %r912};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r943, %r944}, {%r64}, {%r928}, {%r937, %r938};
	// end inline asm
	ld.shared.u32 	%r950, [%rd80+16];
	// begin inline asm
	lop3.b32 %r949, %r950, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1126, %r949, 2021161080;
	xor.b32  	%r960, %r1126, -2139062144;
	shr.u32 	%r954, %r950, 4;
	// begin inline asm
	lop3.b32 %r953, %r954, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1127, %r953, 2021161080;
	xor.b32  	%r966, %r1127, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r957, %r958}, {%r37}, {%r960}, {%r925, %r926};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r963, %r964}, {%r41}, {%r966}, {%r931, %r932};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r969, %r970}, {%r37}, {%r966}, {%r943, %r944};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r975, %r976}, {%r41}, {%r960}, {%r969, %r970};
	// end inline asm
	ld.shared.u32 	%r982, [%rd80+20];
	// begin inline asm
	lop3.b32 %r981, %r982, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1128, %r981, 2021161080;
	xor.b32  	%r992, %r1128, -2139062144;
	shr.u32 	%r986, %r982, 4;
	// begin inline asm
	lop3.b32 %r985, %r986, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1129, %r985, 2021161080;
	xor.b32  	%r998, %r1129, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r989, %r990}, {%r45}, {%r992}, {%r957, %r958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r995, %r996}, {%r49}, {%r998}, {%r963, %r964};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1001, %r1002}, {%r45}, {%r998}, {%r975, %r976};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1007, %r1008}, {%r49}, {%r992}, {%r1001, %r1002};
	// end inline asm
	ld.shared.u32 	%r1014, [%rd80+24];
	// begin inline asm
	lop3.b32 %r1013, %r1014, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1130, %r1013, 2021161080;
	xor.b32  	%r1024, %r1130, -2139062144;
	shr.u32 	%r1018, %r1014, 4;
	// begin inline asm
	lop3.b32 %r1017, %r1018, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1131, %r1017, 2021161080;
	xor.b32  	%r1030, %r1131, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1021, %r1022}, {%r53}, {%r1024}, {%r989, %r990};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1027, %r1028}, {%r57}, {%r1030}, {%r995, %r996};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1033, %r1034}, {%r53}, {%r1030}, {%r1007, %r1008};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1039, %r1040}, {%r57}, {%r1024}, {%r1033, %r1034};
	// end inline asm
	ld.shared.u32 	%r1046, [%rd80+28];
	// begin inline asm
	lop3.b32 %r1045, %r1046, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1132, %r1045, 2021161080;
	xor.b32  	%r1056, %r1132, -2139062144;
	shr.u32 	%r1050, %r1046, 4;
	// begin inline asm
	lop3.b32 %r1049, %r1050, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1133, %r1049, 2021161080;
	xor.b32  	%r1062, %r1133, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1053, %r1054}, {%r61}, {%r1056}, {%r1021, %r1022};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1059, %r1060}, {%r65}, {%r1062}, {%r1027, %r1028};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1065, %r1066}, {%r61}, {%r1062}, {%r1039, %r1040};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1071, %r1072}, {%r65}, {%r1056}, {%r1065, %r1066};
	// end inline asm
	sub.s32 	%r1134, %r1053, %r1059;
	add.s32 	%r1135, %r1134, 4;
	shr.s32 	%r1079, %r1135, 3;
	add.s32 	%r1136, %r1071, 4;
	shr.s32 	%r1078, %r1136, 3;
	sub.s32 	%r1137, %r1054, %r1060;
	add.s32 	%r1138, %r1137, 4;
	shr.s32 	%r1082, %r1138, 3;
	add.s32 	%r1139, %r1072, 4;
	shr.s32 	%r1081, %r1139, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1077, %r1078, %r1079;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1080, %r1081, %r1082;
	// end inline asm
	add.s32 	%r1140, %r72, %r1114;
	mul.wide.u32 	%rd86, %r1140, 4;
	add.s64 	%rd87, %rd43, %rd86;
	st.shared.u32 	[%rd87], %r1077;
	add.s32 	%r1141, %r72, %r1116;
	mul.wide.u32 	%rd88, %r1141, 4;
	add.s64 	%rd89, %rd43, %rd88;
	st.shared.u32 	[%rd89], %r1080;
	add.s32 	%r1340, %r1340, 8;
	setp.ne.s32 	%p7, %r1340, 32;
	@%p7 bra 	LBB0_11;
// %bb.12:                              // %L7798
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1160, [%rd7];
	ld.shared.u32 	%r1161, [%rd8+12800];
	ld.shared.u32 	%r1162, [%rd8+25600];
	ld.shared.u32 	%r1163, [%rd8+38400];
	ld.shared.u32 	%r1164, [%rd9];
	ld.shared.u32 	%r1165, [%rd10+12800];
	ld.shared.u32 	%r1166, [%rd10+25600];
	ld.shared.u32 	%r1167, [%rd10+38400];
	ld.shared.u32 	%r1168, [%rd11];
	ld.shared.u32 	%r1169, [%rd12+12800];
	ld.shared.u32 	%r1170, [%rd12+25600];
	ld.shared.u32 	%r1171, [%rd12+38400];
	ld.shared.u32 	%r1172, [%rd13];
	ld.shared.u32 	%r1173, [%rd14+12800];
	ld.shared.u32 	%r1174, [%rd14+25600];
	ld.shared.u32 	%r1175, [%rd14+38400];
	cvt.s32.s16 	%r1176, %r1160;
	shr.s32 	%r1177, %r1160, 16;
	cvt.s32.s16 	%r1178, %r1161;
	shr.s32 	%r1179, %r1161, 16;
	cvt.s32.s16 	%r1180, %r1162;
	shr.s32 	%r1181, %r1162, 16;
	cvt.s32.s16 	%r1182, %r1163;
	shr.s32 	%r1183, %r1163, 16;
	cvt.s32.s16 	%r1184, %r1164;
	shr.s32 	%r1185, %r1164, 16;
	cvt.s32.s16 	%r1186, %r1165;
	shr.s32 	%r1187, %r1165, 16;
	cvt.s32.s16 	%r1188, %r1166;
	shr.s32 	%r1189, %r1166, 16;
	cvt.s32.s16 	%r1190, %r1167;
	shr.s32 	%r1191, %r1167, 16;
	cvt.s32.s16 	%r1192, %r1168;
	shr.s32 	%r1193, %r1168, 16;
	cvt.s32.s16 	%r1194, %r1169;
	shr.s32 	%r1195, %r1169, 16;
	cvt.s32.s16 	%r1196, %r1170;
	shr.s32 	%r1197, %r1170, 16;
	cvt.s32.s16 	%r1198, %r1171;
	shr.s32 	%r1199, %r1171, 16;
	cvt.s32.s16 	%r1200, %r1172;
	shr.s32 	%r1201, %r1172, 16;
	cvt.s32.s16 	%r1202, %r1173;
	shr.s32 	%r1203, %r1173, 16;
	cvt.s32.s16 	%r1204, %r1174;
	shr.s32 	%r1205, %r1174, 16;
	cvt.s32.s16 	%r1206, %r1175;
	shr.s32 	%r1207, %r1175, 16;
	add.s32 	%r1208, %r1176, %r73;
	add.s32 	%r1209, %r1208, %r1178;
	add.s32 	%r1210, %r1209, %r1180;
	add.s32 	%r1211, %r1210, %r1182;
	shr.s32 	%r1212, %r1211, %r74;
	add.s32 	%r1213, %r1177, %r73;
	add.s32 	%r1214, %r1213, %r1179;
	add.s32 	%r1215, %r1214, %r1181;
	add.s32 	%r1216, %r1215, %r1183;
	shr.s32 	%r1217, %r1216, %r74;
	add.s32 	%r1218, %r1184, %r73;
	add.s32 	%r1219, %r1218, %r1186;
	add.s32 	%r1220, %r1219, %r1188;
	add.s32 	%r1221, %r1220, %r1190;
	shr.s32 	%r1222, %r1221, %r74;
	add.s32 	%r1223, %r1185, %r73;
	add.s32 	%r1224, %r1223, %r1187;
	add.s32 	%r1225, %r1224, %r1189;
	add.s32 	%r1226, %r1225, %r1191;
	shr.s32 	%r1227, %r1226, %r74;
	add.s32 	%r1228, %r1192, %r73;
	add.s32 	%r1229, %r1228, %r1194;
	add.s32 	%r1230, %r1229, %r1196;
	add.s32 	%r1231, %r1230, %r1198;
	shr.s32 	%r1232, %r1231, %r74;
	add.s32 	%r1233, %r1193, %r73;
	add.s32 	%r1234, %r1233, %r1195;
	add.s32 	%r1235, %r1234, %r1197;
	add.s32 	%r1236, %r1235, %r1199;
	shr.s32 	%r1237, %r1236, %r74;
	add.s32 	%r1238, %r1200, %r73;
	add.s32 	%r1239, %r1238, %r1202;
	add.s32 	%r1240, %r1239, %r1204;
	add.s32 	%r1241, %r1240, %r1206;
	shr.s32 	%r1242, %r1241, %r74;
	add.s32 	%r1243, %r1201, %r73;
	add.s32 	%r1244, %r1243, %r1203;
	add.s32 	%r1245, %r1244, %r1205;
	add.s32 	%r1246, %r1245, %r1207;
	shr.s32 	%r1247, %r1246, %r74;
	max.s32 	%r1248, %r1212, -7;
	min.s32 	%r1147, %r1248, 7;
	max.s32 	%r1249, %r1217, -7;
	min.s32 	%r1154, %r1249, 7;
	max.s32 	%r1250, %r1222, -7;
	min.s32 	%r1146, %r1250, 7;
	max.s32 	%r1251, %r1227, -7;
	min.s32 	%r1153, %r1251, 7;
	max.s32 	%r1252, %r1232, -7;
	min.s32 	%r1144, %r1252, 7;
	max.s32 	%r1253, %r1237, -7;
	min.s32 	%r1151, %r1253, 7;
	max.s32 	%r1254, %r1242, -7;
	min.s32 	%r1143, %r1254, 7;
	max.s32 	%r1255, %r1247, -7;
	min.s32 	%r1150, %r1255, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1142, %r1143, %r1144, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1145, %r1146, %r1147, %r1142;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1149, %r1150, %r1151, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1152, %r1153, %r1154, %r1149;
	// end inline asm
	shl.b32 	%r1159, %r1152, 4;
	// begin inline asm
	lop3.b32 %r1266, %r562, %r1145, %r1159, 202;
	// end inline asm
	setp.eq.s32 	%p8, %r1333, 0;
	selp.b32 	%r1338, %r1266, %r1338, %p8;
	selp.b32 	%r1339, %r1266, %r1339, %p8;
	setp.eq.s32 	%p9, %r1333, 32;
	selp.b32 	%r1334, %r1266, %r1334, %p9;
	selp.b32 	%r1335, %r1266, %r1335, %p9;
	setp.eq.s32 	%p10, %r1333, 64;
	selp.b32 	%r1336, %r1266, %r1336, %p10;
	selp.b32 	%r1337, %r1266, %r1337, %p10;
	add.s32 	%r31, %r1333, 32;
	setp.ne.s32 	%p11, %r1333, 96;
	mov.u32 	%r1333, %r31;
	@%p11 bra 	LBB0_8;
// %bb.13:                              // %L10198
                                        //   in Loop: Header=BB0_7 Depth=1
	setp.eq.s16 	%p12, %rs3, 0;
	// begin inline asm
	prmt.b32 %r1256, %r1338, %r1334, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1260, %r1339, %r1335, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1264, %r1336, %r1266, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1268, %r1337, %r1266, %r347;
	// end inline asm
	selp.b32 	%r1304, %r1260, %r1256, %p12;
	shfl.sync.bfly.b32	%r1305, %r1304, 1, 31, -1;
	selp.b32 	%r1273, %r1256, %r1305, %p12;
	selp.b32 	%r1274, %r1305, %r1260, %p12;
	selp.b32 	%r1306, %r1268, %r1264, %p12;
	shfl.sync.bfly.b32	%r1307, %r1306, 1, 31, -1;
	selp.b32 	%r1281, %r1264, %r1307, %p12;
	selp.b32 	%r1282, %r1307, %r1268, %p12;
	// begin inline asm
	prmt.b32 %r1272, %r1273, %r1274, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1276, %r1273, %r1274, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1280, %r1281, %r1282, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1284, %r1281, %r1282, %r347;
	// end inline asm
	selp.b32 	%r1308, %r1280, %r1272, %p4;
	shfl.sync.bfly.b32	%r1309, %r1308, 2, 31, -1;
	selp.b32 	%r1289, %r1272, %r1309, %p4;
	selp.b32 	%r1290, %r1309, %r1280, %p4;
	selp.b32 	%r1310, %r1284, %r1276, %p4;
	shfl.sync.bfly.b32	%r1311, %r1310, 2, 31, -1;
	selp.b32 	%r1297, %r1276, %r1311, %p4;
	selp.b32 	%r1298, %r1311, %r1284, %p4;
	// begin inline asm
	prmt.b32 %r1288, %r1289, %r1290, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1292, %r1289, %r1290, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1296, %r1297, %r1298, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1300, %r1297, %r1298, %r219;
	// end inline asm
	selp.b32 	%r1312, %r1296, %r1288, %p5;
	shfl.sync.bfly.b32	%r1313, %r1312, 4, 31, -1;
	selp.b32 	%r1314, %r1288, %r1313, %p5;
	selp.b32 	%r1315, %r1313, %r1296, %p5;
	selp.b32 	%r1316, %r1300, %r1292, %p5;
	shfl.sync.bfly.b32	%r1317, %r1316, 4, 31, -1;
	selp.b32 	%r1318, %r1292, %r1317, %p5;
	selp.b32 	%r1319, %r1317, %r1300, %p5;
	selp.b32 	%r1320, %r1318, %r1314, %p12;
	shfl.sync.bfly.b32	%r1321, %r1320, 1, 31, -1;
	selp.b32 	%r1322, %r1314, %r1321, %p12;
	selp.b32 	%r1323, %r1321, %r1318, %p12;
	selp.b32 	%r1324, %r1319, %r1315, %p12;
	shfl.sync.bfly.b32	%r1325, %r1324, 1, 31, -1;
	selp.b32 	%r1326, %r1315, %r1325, %p12;
	selp.b32 	%r1327, %r1325, %r1319, %p12;
	or.b32  	%r1328, %r1332, %r75;
	or.b32  	%r1329, %r1328, %r77;
	add.s32 	%r1330, %r1329, %r76;
	cvt.u64.u32 	%rd90, %r1330;
	add.s64 	%rd91, %rd4, %rd90;
	st.global.v4.u32 	[%rd91], {%r1322, %r1326, %r1323, %r1327};
	add.s32 	%r32, %r1332, 128;
	setp.ne.s32 	%p15, %r1332, 16256;
	mov.u32 	%r1332, %r32;
	@%p15 bra 	LBB0_7;
// %bb.14:                              // %L10578
	mov.u32 	%r1331, 0;
	st.global.u32 	[%rd6], %r1331;
	ret;
LBB0_1:                                 // %L8
	mov.u64 	%rd16, exception1873;
	cvta.global.u64 	%rd17, %rd16;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd17;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd15;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	// begin inline asm
	exit;
	// end inline asm
LBB0_3:                                 // %L25
	mov.u64 	%rd18, exception1873;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd15;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	// begin inline asm
	exit;
	// end inline asm
LBB0_5:                                 // %L251
	mov.u32 	%r91, 2;
	st.global.u32 	[%rd6], %r91;
	mov.u64 	%rd23, exception866;
	cvta.global.u64 	%rd24, %rd23;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd24;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd15;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
