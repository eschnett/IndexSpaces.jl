// PTX CompilerJob of kernel #bb(CuDeviceVector{Int8x4, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Int32, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 7.1
.target sm_86
.address_size 64

	// .globl	_Z13julia_bb_380413CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE // -- Begin function _Z13julia_bb_380413CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[8]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception866[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z13julia_bb_380413CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.visible .entry _Z13julia_bb_380413CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE(
	.param .align 8 .b8 _Z13julia_bb_380413CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0[8],
	.param .align 8 .b8 _Z13julia_bb_380413CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z13julia_bb_380413CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z13julia_bb_380413CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z13julia_bb_380413CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z13julia_bb_380413CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<16>;
	.reg .b16 	%rs<23>;
	.reg .b32 	%r<1329>;
	.reg .b64 	%rd<92>;

// %bb.0:                               // %conversion
	ld.param.u64 	%rd15, [_Z13julia_bb_380413CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r75, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r75, 16511;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L10
	// begin inline asm
	mov.u32 %r76, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r76, 67711;
	@%p2 bra 	LBB0_4;
	bra.uni 	LBB0_3;
LBB0_4:                                 // %L27
	ld.param.u64 	%rd3, [_Z13julia_bb_380413CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3];
	ld.param.u64 	%rd5, [_Z13julia_bb_380413CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %ctaid.x;
	or.b32  	%r77, %r3, %r1;
	mad.lo.s32 	%r78, %r4, 768, %r77;
	mul.wide.u32 	%rd20, %r78, 4;
	add.s64 	%rd6, %rd5, %rd20;
	mov.u32 	%r79, 1;
	st.global.u32 	[%rd6], %r79;
	and.b32  	%r5, %r4, 1;
	mul.lo.s32 	%r80, %r5, 96;
	shr.u32 	%r6, %r1, 3;
	shl.b32 	%r81, %r2, 2;
	or.b32  	%r82, %r6, %r81;
	mul.hi.u32 	%r83, %r82, -1431655765;
	shr.u32 	%r84, %r83, 6;
	mul.lo.s32 	%r85, %r84, 96;
	sub.s32 	%r7, %r82, %r85;
	shr.u32 	%r8, %r4, 1;
	mad.lo.s32 	%r86, %r8, 192, %r80;
	add.s32 	%r87, %r86, %r7;
	mul.wide.u32 	%rd21, %r87, 4;
	add.s64 	%rd22, %rd3, %rd21;
	ld.global.u32 	%r9, [%rd22];
	add.s32 	%r10, %r9, -4;
	setp.lt.u32 	%p3, %r10, 31;
	@%p3 bra 	LBB0_6;
	bra.uni 	LBB0_5;
LBB0_6:                                 // %pass110
	ld.param.u64 	%rd1, [_Z13julia_bb_380413CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1];
	ld.param.u64 	%rd2, [_Z13julia_bb_380413CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2];
	ld.param.u64 	%rd4, [_Z13julia_bb_380413CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4];
	add.s32 	%r346, %r9, -3;
	shl.b32 	%r347, %r1, 1;
	and.b32  	%r348, %r347, 12;
	shl.b32 	%r349, %r1, 4;
	and.b32  	%r350, %r349, 16;
	shl.b32 	%r351, %r2, 6;
	and.b32  	%r352, %r351, 192;
	mul.lo.s32 	%r353, %r5, 24576;
	shr.u32 	%r30, %r1, 2;
	and.b32  	%r354, %r30, 6;
	shr.u32 	%r355, %r2, 2;
	cvt.u16.u32 	%rs4, %r355;
	mul.lo.s16 	%rs5, %rs4, 171;
	shr.u16 	%rs6, %rs5, 10;
	mul.lo.s16 	%rs7, %rs6, 6;
	sub.s16 	%rs8, %rs4, %rs7;
	shl.b16 	%rs9, %rs8, 4;
	cvt.u32.u16 	%r356, %rs9;
	and.b32  	%r357, %r356, 240;
	or.b32  	%r358, %r354, %r357;
	cvt.u16.u32 	%rs10, %r358;
	mul.lo.s16 	%rs11, %rs10, 171;
	shr.u16 	%rs12, %rs11, 14;
	mul.lo.s16 	%rs13, %rs12, 96;
	sub.s16 	%rs14, %rs10, %rs13;
	and.b16  	%rs15, %rs14, 246;
	mul.wide.u16 	%r359, %rs15, 256;
	or.b32  	%r360, %r348, %r350;
	or.b32  	%r361, %r360, %r352;
	or.b32  	%r362, %r361, %r353;
	mad.lo.s32 	%r363, %r8, 49152, %r362;
	add.s32 	%r364, %r363, %r359;
	shl.b32 	%r365, %r364, 2;
	cvt.u64.u32 	%rd25, %r365;
	add.s64 	%rd26, %rd1, %rd25;
	ld.global.v4.u32 	{%r90, %r91, %r106, %r107}, [%rd26];
	or.b16  	%rs16, %rs10, 8;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 14;
	mul.lo.s16 	%rs19, %rs18, 96;
	sub.s16 	%rs20, %rs16, %rs19;
	and.b16  	%rs21, %rs20, 254;
	mul.wide.u16 	%r366, %rs21, 256;
	add.s32 	%r367, %r363, %r366;
	shl.b32 	%r368, %r367, 2;
	cvt.u64.u32 	%rd27, %r368;
	add.s64 	%rd28, %rd1, %rd27;
	ld.global.v4.u32 	{%r98, %r99, %r114, %r115}, [%rd28];
	or.b32  	%r369, %r363, 33;
	add.s32 	%r370, %r369, %r359;
	mul.wide.u32 	%rd29, %r370, 4;
	add.s64 	%rd30, %rd1, %rd29;
	ld.global.v4.u32 	{%r122, %r123, %r138, %r139}, [%rd30+-4];
	add.s32 	%r371, %r369, %r366;
	mul.wide.u32 	%rd31, %r371, 4;
	add.s64 	%rd32, %rd1, %rd31;
	ld.global.v4.u32 	{%r130, %r131, %r146, %r147}, [%rd32+-4];
	or.b32  	%r372, %r30, %r357;
	or.b32  	%r373, %r372, 1;
	mul.hi.u32 	%r374, %r373, -1431655765;
	shr.u32 	%r375, %r374, 6;
	mul.lo.s32 	%r376, %r375, 96;
	sub.s32 	%r377, %r373, %r376;
	shl.b32 	%r378, %r377, 8;
	add.s32 	%r379, %r363, %r378;
	shl.b32 	%r380, %r379, 2;
	cvt.u64.u32 	%rd33, %r380;
	add.s64 	%rd34, %rd1, %rd33;
	ld.global.v4.u32 	{%r154, %r155, %r170, %r171}, [%rd34];
	or.b32  	%r381, %r372, 9;
	mul.hi.u32 	%r382, %r381, -1431655765;
	shr.u32 	%r383, %r382, 6;
	mul.lo.s32 	%r384, %r383, 96;
	sub.s32 	%r385, %r381, %r384;
	shl.b32 	%r386, %r385, 8;
	add.s32 	%r387, %r363, %r386;
	shl.b32 	%r388, %r387, 2;
	cvt.u64.u32 	%rd35, %r388;
	add.s64 	%rd36, %rd1, %rd35;
	ld.global.v4.u32 	{%r162, %r163, %r178, %r179}, [%rd36];
	add.s32 	%r389, %r369, %r378;
	mul.wide.u32 	%rd37, %r389, 4;
	add.s64 	%rd38, %rd1, %rd37;
	ld.global.v4.u32 	{%r186, %r187, %r202, %r203}, [%rd38+-4];
	add.s32 	%r390, %r369, %r386;
	mul.wide.u32 	%rd39, %r390, 4;
	add.s64 	%rd40, %rd1, %rd39;
	ld.global.v4.u32 	{%r194, %r195, %r210, %r211}, [%rd40+-4];
	mov.u32 	%r212, 21520;
	// begin inline asm
	prmt.b32 %r218, %r90, %r91, %r212;
	// end inline asm
	mov.u32 	%r216, 30258;
	// begin inline asm
	prmt.b32 %r219, %r90, %r91, %r216;
	// end inline asm
	// begin inline asm
	prmt.b32 %r226, %r98, %r99, %r212;
	// end inline asm
	// begin inline asm
	prmt.b32 %r227, %r98, %r99, %r216;
	// end inline asm
	// begin inline asm
	prmt.b32 %r234, %r106, %r107, %r212;
	// end inline asm
	// begin inline asm
	prmt.b32 %r235, %r106, %r107, %r216;
	// end inline asm
	// begin inline asm
	prmt.b32 %r242, %r114, %r115, %r212;
	// end inline asm
	// begin inline asm
	prmt.b32 %r243, %r114, %r115, %r216;
	// end inline asm
	// begin inline asm
	prmt.b32 %r250, %r122, %r123, %r212;
	// end inline asm
	// begin inline asm
	prmt.b32 %r251, %r122, %r123, %r216;
	// end inline asm
	// begin inline asm
	prmt.b32 %r258, %r130, %r131, %r212;
	// end inline asm
	// begin inline asm
	prmt.b32 %r259, %r130, %r131, %r216;
	// end inline asm
	// begin inline asm
	prmt.b32 %r266, %r138, %r139, %r212;
	// end inline asm
	// begin inline asm
	prmt.b32 %r267, %r138, %r139, %r216;
	// end inline asm
	// begin inline asm
	prmt.b32 %r274, %r146, %r147, %r212;
	// end inline asm
	// begin inline asm
	prmt.b32 %r275, %r146, %r147, %r216;
	// end inline asm
	// begin inline asm
	prmt.b32 %r282, %r154, %r155, %r212;
	// end inline asm
	// begin inline asm
	prmt.b32 %r283, %r154, %r155, %r216;
	// end inline asm
	// begin inline asm
	prmt.b32 %r290, %r162, %r163, %r212;
	// end inline asm
	// begin inline asm
	prmt.b32 %r291, %r162, %r163, %r216;
	// end inline asm
	// begin inline asm
	prmt.b32 %r298, %r170, %r171, %r212;
	// end inline asm
	// begin inline asm
	prmt.b32 %r299, %r170, %r171, %r216;
	// end inline asm
	// begin inline asm
	prmt.b32 %r306, %r178, %r179, %r212;
	// end inline asm
	// begin inline asm
	prmt.b32 %r307, %r178, %r179, %r216;
	// end inline asm
	// begin inline asm
	prmt.b32 %r314, %r186, %r187, %r212;
	// end inline asm
	// begin inline asm
	prmt.b32 %r315, %r186, %r187, %r216;
	// end inline asm
	// begin inline asm
	prmt.b32 %r322, %r194, %r195, %r212;
	// end inline asm
	// begin inline asm
	prmt.b32 %r323, %r194, %r195, %r216;
	// end inline asm
	// begin inline asm
	prmt.b32 %r330, %r202, %r203, %r212;
	// end inline asm
	// begin inline asm
	prmt.b32 %r331, %r202, %r203, %r216;
	// end inline asm
	// begin inline asm
	prmt.b32 %r338, %r210, %r211, %r212;
	// end inline asm
	// begin inline asm
	prmt.b32 %r339, %r210, %r211, %r216;
	// end inline asm
	mov.u32 	%r340, 25152;
	// begin inline asm
	prmt.b32 %r217, %r218, %r219, %r340;
	// end inline asm
	mov.u32 	%r344, 29521;
	// begin inline asm
	prmt.b32 %r221, %r218, %r219, %r344;
	// end inline asm
	// begin inline asm
	prmt.b32 %r225, %r226, %r227, %r340;
	// end inline asm
	// begin inline asm
	prmt.b32 %r229, %r226, %r227, %r344;
	// end inline asm
	// begin inline asm
	prmt.b32 %r233, %r234, %r235, %r340;
	// end inline asm
	// begin inline asm
	prmt.b32 %r237, %r234, %r235, %r344;
	// end inline asm
	// begin inline asm
	prmt.b32 %r241, %r242, %r243, %r340;
	// end inline asm
	// begin inline asm
	prmt.b32 %r245, %r242, %r243, %r344;
	// end inline asm
	// begin inline asm
	prmt.b32 %r249, %r250, %r251, %r340;
	// end inline asm
	// begin inline asm
	prmt.b32 %r253, %r250, %r251, %r344;
	// end inline asm
	// begin inline asm
	prmt.b32 %r257, %r258, %r259, %r340;
	// end inline asm
	// begin inline asm
	prmt.b32 %r261, %r258, %r259, %r344;
	// end inline asm
	// begin inline asm
	prmt.b32 %r265, %r266, %r267, %r340;
	// end inline asm
	// begin inline asm
	prmt.b32 %r269, %r266, %r267, %r344;
	// end inline asm
	// begin inline asm
	prmt.b32 %r273, %r274, %r275, %r340;
	// end inline asm
	// begin inline asm
	prmt.b32 %r277, %r274, %r275, %r344;
	// end inline asm
	// begin inline asm
	prmt.b32 %r281, %r282, %r283, %r340;
	// end inline asm
	// begin inline asm
	prmt.b32 %r285, %r282, %r283, %r344;
	// end inline asm
	// begin inline asm
	prmt.b32 %r289, %r290, %r291, %r340;
	// end inline asm
	// begin inline asm
	prmt.b32 %r293, %r290, %r291, %r344;
	// end inline asm
	// begin inline asm
	prmt.b32 %r297, %r298, %r299, %r340;
	// end inline asm
	// begin inline asm
	prmt.b32 %r301, %r298, %r299, %r344;
	// end inline asm
	// begin inline asm
	prmt.b32 %r305, %r306, %r307, %r340;
	// end inline asm
	// begin inline asm
	prmt.b32 %r309, %r306, %r307, %r344;
	// end inline asm
	// begin inline asm
	prmt.b32 %r313, %r314, %r315, %r340;
	// end inline asm
	// begin inline asm
	prmt.b32 %r317, %r314, %r315, %r344;
	// end inline asm
	// begin inline asm
	prmt.b32 %r321, %r322, %r323, %r340;
	// end inline asm
	// begin inline asm
	prmt.b32 %r325, %r322, %r323, %r344;
	// end inline asm
	// begin inline asm
	prmt.b32 %r329, %r330, %r331, %r340;
	// end inline asm
	// begin inline asm
	prmt.b32 %r333, %r330, %r331, %r344;
	// end inline asm
	// begin inline asm
	prmt.b32 %r337, %r338, %r339, %r340;
	// end inline asm
	// begin inline asm
	prmt.b32 %r341, %r338, %r339, %r344;
	// end inline asm
	cvt.u16.u32 	%rs22, %r1;
	and.b16  	%rs1, %rs22, 2;
	setp.eq.s16 	%p4, %rs1, 0;
	selp.b32 	%r391, %r249, %r217, %p4;
	shfl.sync.bfly.b32	%r392, %r391, 2, 31, -1;
	selp.b32 	%r393, %r217, %r392, %p4;
	selp.b32 	%r394, %r392, %r249, %p4;
	selp.b32 	%r395, %r257, %r225, %p4;
	shfl.sync.bfly.b32	%r396, %r395, 2, 31, -1;
	selp.b32 	%r397, %r225, %r396, %p4;
	selp.b32 	%r398, %r396, %r257, %p4;
	selp.b32 	%r399, %r253, %r221, %p4;
	shfl.sync.bfly.b32	%r400, %r399, 2, 31, -1;
	selp.b32 	%r401, %r221, %r400, %p4;
	selp.b32 	%r402, %r400, %r253, %p4;
	selp.b32 	%r403, %r261, %r229, %p4;
	shfl.sync.bfly.b32	%r404, %r403, 2, 31, -1;
	selp.b32 	%r405, %r229, %r404, %p4;
	selp.b32 	%r406, %r404, %r261, %p4;
	selp.b32 	%r407, %r265, %r233, %p4;
	shfl.sync.bfly.b32	%r408, %r407, 2, 31, -1;
	selp.b32 	%r409, %r233, %r408, %p4;
	selp.b32 	%r410, %r408, %r265, %p4;
	selp.b32 	%r411, %r273, %r241, %p4;
	shfl.sync.bfly.b32	%r412, %r411, 2, 31, -1;
	selp.b32 	%r413, %r241, %r412, %p4;
	selp.b32 	%r414, %r412, %r273, %p4;
	selp.b32 	%r415, %r269, %r237, %p4;
	shfl.sync.bfly.b32	%r416, %r415, 2, 31, -1;
	selp.b32 	%r417, %r237, %r416, %p4;
	selp.b32 	%r418, %r416, %r269, %p4;
	selp.b32 	%r419, %r277, %r245, %p4;
	shfl.sync.bfly.b32	%r420, %r419, 2, 31, -1;
	selp.b32 	%r421, %r245, %r420, %p4;
	selp.b32 	%r422, %r420, %r277, %p4;
	selp.b32 	%r423, %r313, %r281, %p4;
	shfl.sync.bfly.b32	%r424, %r423, 2, 31, -1;
	selp.b32 	%r425, %r281, %r424, %p4;
	selp.b32 	%r426, %r424, %r313, %p4;
	selp.b32 	%r427, %r321, %r289, %p4;
	shfl.sync.bfly.b32	%r428, %r427, 2, 31, -1;
	selp.b32 	%r429, %r289, %r428, %p4;
	selp.b32 	%r430, %r428, %r321, %p4;
	selp.b32 	%r431, %r317, %r285, %p4;
	shfl.sync.bfly.b32	%r432, %r431, 2, 31, -1;
	selp.b32 	%r433, %r285, %r432, %p4;
	selp.b32 	%r434, %r432, %r317, %p4;
	selp.b32 	%r435, %r325, %r293, %p4;
	shfl.sync.bfly.b32	%r436, %r435, 2, 31, -1;
	selp.b32 	%r437, %r293, %r436, %p4;
	selp.b32 	%r438, %r436, %r325, %p4;
	selp.b32 	%r439, %r329, %r297, %p4;
	shfl.sync.bfly.b32	%r440, %r439, 2, 31, -1;
	selp.b32 	%r441, %r297, %r440, %p4;
	selp.b32 	%r442, %r440, %r329, %p4;
	selp.b32 	%r443, %r337, %r305, %p4;
	shfl.sync.bfly.b32	%r444, %r443, 2, 31, -1;
	selp.b32 	%r445, %r305, %r444, %p4;
	selp.b32 	%r446, %r444, %r337, %p4;
	selp.b32 	%r447, %r333, %r301, %p4;
	shfl.sync.bfly.b32	%r448, %r447, 2, 31, -1;
	selp.b32 	%r449, %r301, %r448, %p4;
	selp.b32 	%r450, %r448, %r333, %p4;
	selp.b32 	%r451, %r341, %r309, %p4;
	shfl.sync.bfly.b32	%r452, %r451, 2, 31, -1;
	selp.b32 	%r453, %r309, %r452, %p4;
	selp.b32 	%r454, %r452, %r341, %p4;
	and.b16  	%rs2, %rs22, 4;
	setp.eq.s16 	%p5, %rs2, 0;
	selp.b32 	%r455, %r425, %r393, %p5;
	shfl.sync.bfly.b32	%r456, %r455, 4, 31, -1;
	selp.b32 	%r31, %r393, %r456, %p5;
	selp.b32 	%r32, %r456, %r425, %p5;
	selp.b32 	%r457, %r429, %r397, %p5;
	shfl.sync.bfly.b32	%r458, %r457, 4, 31, -1;
	selp.b32 	%r33, %r397, %r458, %p5;
	selp.b32 	%r34, %r458, %r429, %p5;
	selp.b32 	%r459, %r433, %r401, %p5;
	shfl.sync.bfly.b32	%r460, %r459, 4, 31, -1;
	selp.b32 	%r35, %r401, %r460, %p5;
	selp.b32 	%r36, %r460, %r433, %p5;
	selp.b32 	%r461, %r437, %r405, %p5;
	shfl.sync.bfly.b32	%r462, %r461, 4, 31, -1;
	selp.b32 	%r37, %r405, %r462, %p5;
	selp.b32 	%r38, %r462, %r437, %p5;
	selp.b32 	%r463, %r441, %r409, %p5;
	shfl.sync.bfly.b32	%r464, %r463, 4, 31, -1;
	selp.b32 	%r39, %r409, %r464, %p5;
	selp.b32 	%r40, %r464, %r441, %p5;
	selp.b32 	%r465, %r445, %r413, %p5;
	shfl.sync.bfly.b32	%r466, %r465, 4, 31, -1;
	selp.b32 	%r41, %r413, %r466, %p5;
	selp.b32 	%r42, %r466, %r445, %p5;
	selp.b32 	%r467, %r449, %r417, %p5;
	shfl.sync.bfly.b32	%r468, %r467, 4, 31, -1;
	selp.b32 	%r43, %r417, %r468, %p5;
	selp.b32 	%r44, %r468, %r449, %p5;
	selp.b32 	%r469, %r453, %r421, %p5;
	shfl.sync.bfly.b32	%r470, %r469, 4, 31, -1;
	selp.b32 	%r45, %r421, %r470, %p5;
	selp.b32 	%r46, %r470, %r453, %p5;
	selp.b32 	%r471, %r426, %r394, %p5;
	shfl.sync.bfly.b32	%r472, %r471, 4, 31, -1;
	selp.b32 	%r47, %r394, %r472, %p5;
	selp.b32 	%r48, %r472, %r426, %p5;
	selp.b32 	%r473, %r430, %r398, %p5;
	shfl.sync.bfly.b32	%r474, %r473, 4, 31, -1;
	selp.b32 	%r49, %r398, %r474, %p5;
	selp.b32 	%r50, %r474, %r430, %p5;
	selp.b32 	%r475, %r434, %r402, %p5;
	shfl.sync.bfly.b32	%r476, %r475, 4, 31, -1;
	selp.b32 	%r51, %r402, %r476, %p5;
	selp.b32 	%r52, %r476, %r434, %p5;
	selp.b32 	%r477, %r438, %r406, %p5;
	shfl.sync.bfly.b32	%r478, %r477, 4, 31, -1;
	selp.b32 	%r53, %r406, %r478, %p5;
	selp.b32 	%r54, %r478, %r438, %p5;
	selp.b32 	%r479, %r442, %r410, %p5;
	shfl.sync.bfly.b32	%r480, %r479, 4, 31, -1;
	selp.b32 	%r55, %r410, %r480, %p5;
	selp.b32 	%r56, %r480, %r442, %p5;
	selp.b32 	%r481, %r446, %r414, %p5;
	shfl.sync.bfly.b32	%r482, %r481, 4, 31, -1;
	selp.b32 	%r57, %r414, %r482, %p5;
	selp.b32 	%r58, %r482, %r446, %p5;
	selp.b32 	%r483, %r450, %r418, %p5;
	shfl.sync.bfly.b32	%r484, %r483, 4, 31, -1;
	selp.b32 	%r59, %r418, %r484, %p5;
	selp.b32 	%r60, %r484, %r450, %p5;
	selp.b32 	%r485, %r454, %r422, %p5;
	shfl.sync.bfly.b32	%r486, %r485, 4, 31, -1;
	selp.b32 	%r61, %r422, %r486, %p5;
	selp.b32 	%r62, %r486, %r454, %p5;
	shl.b32 	%r487, %r1, 2;
	and.b32  	%r488, %r487, 28;
	and.b32  	%r489, %r3, 96;
	or.b32  	%r63, %r488, %r489;
	shl.b32 	%r490, %r4, 11;
	and.b32  	%r491, %r490, 2048;
	and.b32  	%r64, %r2, 12;
	shl.b32 	%r492, %r4, 6;
	and.b32  	%r493, %r492, 1920;
	or.b32  	%r494, %r63, %r491;
	or.b32  	%r65, %r494, %r493;
	shl.b32 	%r495, %r1, 3;
	and.b32  	%r496, %r495, 24;
	or.b32  	%r66, %r496, %r489;
	mul.hi.u32 	%r497, %r372, -1431655765;
	shr.u32 	%r498, %r497, 6;
	mul.lo.s32 	%r499, %r498, 96;
	sub.s32 	%r500, %r372, %r499;
	and.b32  	%r501, %r2, 3;
	and.b32  	%r67, %r347, 6;
	mul.lo.s32 	%r502, %r501, 3200;
	or.b32  	%r68, %r500, %r502;
	or.b32  	%r503, %r372, 8;
	mul.hi.u32 	%r504, %r503, -1431655765;
	shr.u32 	%r505, %r504, 6;
	mul.lo.s32 	%r506, %r505, 96;
	sub.s32 	%r507, %r503, %r506;
	or.b32  	%r69, %r507, %r502;
	and.b32  	%r508, %r1, 7;
	shl.b32 	%r70, %r79, %r10;
	min.u32 	%r71, %r346, 31;
	and.b16  	%rs3, %rs22, 1;
	shl.b32 	%r510, %r1, 5;
	and.b32  	%r511, %r510, 64;
	or.b32  	%r72, %r511, %r350;
	shl.b32 	%r512, %r4, 15;
	shl.b32 	%r513, %r7, 20;
	or.b32  	%r73, %r512, %r513;
	or.b32  	%r514, %r1, 24;
	mul.lo.s32 	%r515, %r508, 100;
	add.s32 	%r516, %r515, %r7;
	mul.wide.u32 	%rd41, %r516, 4;
	mov.u64 	%rd42, shmem;
	add.s64 	%rd43, %rd42, 16512;
	add.s64 	%rd7, %rd43, %rd41;
	cvt.u64.u32 	%rd44, %r515;
	cvt.u64.u32 	%rd45, %r7;
	add.s64 	%rd46, %rd45, %rd44;
	shl.b64 	%rd47, %rd46, 2;
	add.s64 	%rd8, %rd43, %rd47;
	add.s32 	%r517, %r515, 800;
	add.s32 	%r518, %r517, %r7;
	mul.wide.u32 	%rd48, %r518, 4;
	add.s64 	%rd9, %rd43, %rd48;
	cvt.u64.u32 	%rd49, %r517;
	add.s64 	%rd50, %rd45, %rd49;
	shl.b64 	%rd51, %rd50, 2;
	add.s64 	%rd10, %rd43, %rd51;
	add.s32 	%r519, %r515, 1600;
	add.s32 	%r520, %r519, %r7;
	mul.wide.u32 	%rd52, %r520, 4;
	add.s64 	%rd11, %rd43, %rd52;
	cvt.u64.u32 	%rd53, %r519;
	add.s64 	%rd54, %rd45, %rd53;
	shl.b64 	%rd55, %rd54, 2;
	add.s64 	%rd12, %rd43, %rd55;
	mul.lo.s32 	%r521, %r514, 100;
	add.s32 	%r522, %r521, %r7;
	mul.wide.u32 	%rd56, %r522, 4;
	add.s64 	%rd13, %rd43, %rd56;
	cvt.u64.u32 	%rd57, %r521;
	add.s64 	%rd58, %rd45, %rd57;
	shl.b64 	%rd59, %rd58, 2;
	add.s64 	%rd14, %rd43, %rd59;
	and.b32  	%r74, %r495, 32;
	mov.u32 	%r345, 0;
	setp.gt.u32 	%p6, %r2, 15;
	mov.u32 	%r1320, %r345;
LBB0_7:                                 // %L2378
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_8 Depth 2
                                        //       Child Loop BB0_11 Depth 3
	mov.u32 	%r1321, %r345;
	mov.u32 	%r1322, %r345;
	mov.u32 	%r1323, %r345;
	mov.u32 	%r1324, %r345;
	mov.u32 	%r1325, %r345;
	mov.u32 	%r1326, %r345;
	mov.u32 	%r1327, %r345;
LBB0_8:                                 // %L2381
                                        //   Parent Loop BB0_7 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_11 Depth 3
	@%p6 bra 	LBB0_10;
// %bb.9:                               // %L2401
                                        //   in Loop: Header=BB0_8 Depth=2
	or.b32  	%r524, %r1321, %r6;
	add.s32 	%r525, %r524, %r1320;
	or.b32  	%r526, %r525, %r64;
	shl.b32 	%r527, %r526, 12;
	and.b32  	%r528, %r527, 134148096;
	or.b32  	%r529, %r65, %r528;
	shl.b32 	%r530, %r529, 2;
	cvt.u64.u32 	%rd60, %r530;
	add.s64 	%rd61, %rd2, %rd60;
	ld.global.v4.u32 	{%r531, %r532, %r533, %r534}, [%rd61];
	or.b32  	%r535, %r524, 16;
	add.s32 	%r536, %r535, %r1320;
	or.b32  	%r537, %r536, %r64;
	shl.b32 	%r538, %r537, 12;
	and.b32  	%r539, %r538, 134213632;
	or.b32  	%r540, %r65, %r539;
	shl.b32 	%r541, %r540, 2;
	cvt.u64.u32 	%rd62, %r541;
	add.s64 	%rd63, %rd2, %rd62;
	ld.global.v4.u32 	{%r542, %r543, %r544, %r545}, [%rd63];
	and.b32  	%r546, %r526, 15;
	mul.lo.s32 	%r547, %r546, 129;
	add.s32 	%r548, %r63, %r547;
	mul.wide.u32 	%rd64, %r548, 4;
	add.s64 	%rd66, %rd42, %rd64;
	st.shared.u32 	[%rd66], %r531;
	cvt.u64.u32 	%rd67, %r547;
	cvt.u64.u32 	%rd68, %r63;
	add.s64 	%rd69, %rd68, %rd67;
	shl.b64 	%rd70, %rd69, 2;
	add.s64 	%rd71, %rd42, %rd70;
	st.shared.u32 	[%rd71+4], %r532;
	st.shared.u32 	[%rd71+8], %r533;
	st.shared.u32 	[%rd71+12], %r534;
	and.b32  	%r549, %r537, 31;
	mul.lo.s32 	%r550, %r549, 129;
	add.s32 	%r551, %r63, %r550;
	mul.wide.u32 	%rd72, %r551, 4;
	add.s64 	%rd73, %rd42, %rd72;
	st.shared.u32 	[%rd73], %r542;
	cvt.u64.u32 	%rd74, %r550;
	add.s64 	%rd75, %rd68, %rd74;
	shl.b64 	%rd76, %rd75, 2;
	add.s64 	%rd77, %rd42, %rd76;
	st.shared.u32 	[%rd77+4], %r543;
	st.shared.u32 	[%rd77+8], %r544;
	st.shared.u32 	[%rd77+12], %r545;
LBB0_10:                                // %L4057
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	mov.u32 	%r565, 0;
	mov.u32 	%r1328, %r565;
LBB0_11:                                // %L4059
                                        //   Parent Loop BB0_7 Depth=1
                                        //     Parent Loop BB0_8 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r1077, %r1328, %r30;
	mad.lo.s32 	%r1078, %r1077, 129, %r66;
	mul.wide.u32 	%rd78, %r1078, 4;
	add.s64 	%rd80, %rd42, %rd78;
	ld.shared.u32 	%r554, [%rd80];
	mov.u32 	%r555, 134744072;
	mov.u32 	%r556, 252645135;
	// begin inline asm
	lop3.b32 %r553, %r554, %r555, %r556, 40;
	// end inline asm
	add.s32 	%r1079, %r553, 2021161080;
	xor.b32  	%r564, %r1079, -2139062144;
	shr.u32 	%r558, %r554, 4;
	// begin inline asm
	lop3.b32 %r557, %r558, %r555, %r556, 40;
	// end inline asm
	add.s32 	%r1080, %r557, 2021161080;
	xor.b32  	%r570, %r1080, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r561, %r562}, {%r31}, {%r564}, {%r565, %r565};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r567, %r568}, {%r35}, {%r570}, {%r565, %r565};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r573, %r574}, {%r31}, {%r570}, {%r565, %r565};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r579, %r580}, {%r35}, {%r564}, {%r573, %r574};
	// end inline asm
	ld.shared.u32 	%r586, [%rd80+4];
	// begin inline asm
	lop3.b32 %r585, %r586, %r555, %r556, 40;
	// end inline asm
	add.s32 	%r1081, %r585, 2021161080;
	xor.b32  	%r596, %r1081, -2139062144;
	shr.u32 	%r590, %r586, 4;
	// begin inline asm
	lop3.b32 %r589, %r590, %r555, %r556, 40;
	// end inline asm
	add.s32 	%r1082, %r589, 2021161080;
	xor.b32  	%r602, %r1082, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r593, %r594}, {%r39}, {%r596}, {%r561, %r562};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r599, %r600}, {%r43}, {%r602}, {%r567, %r568};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r605, %r606}, {%r39}, {%r602}, {%r579, %r580};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r611, %r612}, {%r43}, {%r596}, {%r605, %r606};
	// end inline asm
	ld.shared.u32 	%r618, [%rd80+8];
	// begin inline asm
	lop3.b32 %r617, %r618, %r555, %r556, 40;
	// end inline asm
	add.s32 	%r1083, %r617, 2021161080;
	xor.b32  	%r628, %r1083, -2139062144;
	shr.u32 	%r622, %r618, 4;
	// begin inline asm
	lop3.b32 %r621, %r622, %r555, %r556, 40;
	// end inline asm
	add.s32 	%r1084, %r621, 2021161080;
	xor.b32  	%r634, %r1084, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r625, %r626}, {%r47}, {%r628}, {%r593, %r594};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r631, %r632}, {%r51}, {%r634}, {%r599, %r600};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r637, %r638}, {%r47}, {%r634}, {%r611, %r612};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r643, %r644}, {%r51}, {%r628}, {%r637, %r638};
	// end inline asm
	ld.shared.u32 	%r650, [%rd80+12];
	// begin inline asm
	lop3.b32 %r649, %r650, %r555, %r556, 40;
	// end inline asm
	add.s32 	%r1085, %r649, 2021161080;
	xor.b32  	%r660, %r1085, -2139062144;
	shr.u32 	%r654, %r650, 4;
	// begin inline asm
	lop3.b32 %r653, %r654, %r555, %r556, 40;
	// end inline asm
	add.s32 	%r1086, %r653, 2021161080;
	xor.b32  	%r666, %r1086, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r657, %r658}, {%r55}, {%r660}, {%r625, %r626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r663, %r664}, {%r59}, {%r666}, {%r631, %r632};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r669, %r670}, {%r55}, {%r666}, {%r643, %r644};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r675, %r676}, {%r59}, {%r660}, {%r669, %r670};
	// end inline asm
	ld.shared.u32 	%r682, [%rd80+16];
	// begin inline asm
	lop3.b32 %r681, %r682, %r555, %r556, 40;
	// end inline asm
	add.s32 	%r1087, %r681, 2021161080;
	xor.b32  	%r692, %r1087, -2139062144;
	shr.u32 	%r686, %r682, 4;
	// begin inline asm
	lop3.b32 %r685, %r686, %r555, %r556, 40;
	// end inline asm
	add.s32 	%r1088, %r685, 2021161080;
	xor.b32  	%r698, %r1088, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r689, %r690}, {%r32}, {%r692}, {%r657, %r658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r695, %r696}, {%r36}, {%r698}, {%r663, %r664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r701, %r702}, {%r32}, {%r698}, {%r675, %r676};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r707, %r708}, {%r36}, {%r692}, {%r701, %r702};
	// end inline asm
	ld.shared.u32 	%r714, [%rd80+20];
	// begin inline asm
	lop3.b32 %r713, %r714, %r555, %r556, 40;
	// end inline asm
	add.s32 	%r1089, %r713, 2021161080;
	xor.b32  	%r724, %r1089, -2139062144;
	shr.u32 	%r718, %r714, 4;
	// begin inline asm
	lop3.b32 %r717, %r718, %r555, %r556, 40;
	// end inline asm
	add.s32 	%r1090, %r717, 2021161080;
	xor.b32  	%r730, %r1090, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r721, %r722}, {%r40}, {%r724}, {%r689, %r690};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r727, %r728}, {%r44}, {%r730}, {%r695, %r696};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r733, %r734}, {%r40}, {%r730}, {%r707, %r708};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r739, %r740}, {%r44}, {%r724}, {%r733, %r734};
	// end inline asm
	ld.shared.u32 	%r746, [%rd80+24];
	// begin inline asm
	lop3.b32 %r745, %r746, %r555, %r556, 40;
	// end inline asm
	add.s32 	%r1091, %r745, 2021161080;
	xor.b32  	%r756, %r1091, -2139062144;
	shr.u32 	%r750, %r746, 4;
	// begin inline asm
	lop3.b32 %r749, %r750, %r555, %r556, 40;
	// end inline asm
	add.s32 	%r1092, %r749, 2021161080;
	xor.b32  	%r762, %r1092, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r753, %r754}, {%r48}, {%r756}, {%r721, %r722};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r759, %r760}, {%r52}, {%r762}, {%r727, %r728};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r765, %r766}, {%r48}, {%r762}, {%r739, %r740};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r771, %r772}, {%r52}, {%r756}, {%r765, %r766};
	// end inline asm
	ld.shared.u32 	%r778, [%rd80+28];
	// begin inline asm
	lop3.b32 %r777, %r778, %r555, %r556, 40;
	// end inline asm
	add.s32 	%r1093, %r777, 2021161080;
	xor.b32  	%r788, %r1093, -2139062144;
	shr.u32 	%r782, %r778, 4;
	// begin inline asm
	lop3.b32 %r781, %r782, %r555, %r556, 40;
	// end inline asm
	add.s32 	%r1094, %r781, 2021161080;
	xor.b32  	%r794, %r1094, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r785, %r786}, {%r56}, {%r788}, {%r753, %r754};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r791, %r792}, {%r60}, {%r794}, {%r759, %r760};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r797, %r798}, {%r56}, {%r794}, {%r771, %r772};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r803, %r804}, {%r60}, {%r788}, {%r797, %r798};
	// end inline asm
	sub.s32 	%r1095, %r785, %r791;
	add.s32 	%r1096, %r1095, 4;
	shr.s32 	%r811, %r1096, 3;
	add.s32 	%r1097, %r803, 4;
	shr.s32 	%r810, %r1097, 3;
	sub.s32 	%r1098, %r786, %r792;
	add.s32 	%r1099, %r1098, 4;
	shr.s32 	%r814, %r1099, 3;
	add.s32 	%r1100, %r804, 4;
	shr.s32 	%r813, %r1100, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r809, %r810, %r811;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r812, %r813, %r814;
	// end inline asm
	or.b32  	%r1101, %r67, %r1328;
	mul.lo.s32 	%r1102, %r1101, 100;
	add.s32 	%r1103, %r68, %r1102;
	mul.wide.u32 	%rd81, %r1103, 4;
	add.s64 	%rd83, %rd43, %rd81;
	st.shared.u32 	[%rd83], %r809;
	add.s32 	%r1104, %r1102, 100;
	add.s32 	%r1105, %r68, %r1104;
	mul.wide.u32 	%rd84, %r1105, 4;
	add.s64 	%rd85, %rd43, %rd84;
	st.shared.u32 	[%rd85], %r812;
	ld.shared.u32 	%r816, [%rd80];
	// begin inline asm
	lop3.b32 %r815, %r816, %r555, %r556, 40;
	// end inline asm
	add.s32 	%r1106, %r815, 2021161080;
	xor.b32  	%r826, %r1106, -2139062144;
	shr.u32 	%r820, %r816, 4;
	// begin inline asm
	lop3.b32 %r819, %r820, %r555, %r556, 40;
	// end inline asm
	add.s32 	%r1107, %r819, 2021161080;
	xor.b32  	%r832, %r1107, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r823, %r824}, {%r33}, {%r826}, {%r565, %r565};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r829, %r830}, {%r37}, {%r832}, {%r565, %r565};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r835, %r836}, {%r33}, {%r832}, {%r565, %r565};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r841, %r842}, {%r37}, {%r826}, {%r835, %r836};
	// end inline asm
	ld.shared.u32 	%r848, [%rd80+4];
	// begin inline asm
	lop3.b32 %r847, %r848, %r555, %r556, 40;
	// end inline asm
	add.s32 	%r1108, %r847, 2021161080;
	xor.b32  	%r858, %r1108, -2139062144;
	shr.u32 	%r852, %r848, 4;
	// begin inline asm
	lop3.b32 %r851, %r852, %r555, %r556, 40;
	// end inline asm
	add.s32 	%r1109, %r851, 2021161080;
	xor.b32  	%r864, %r1109, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r855, %r856}, {%r41}, {%r858}, {%r823, %r824};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r861, %r862}, {%r45}, {%r864}, {%r829, %r830};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r867, %r868}, {%r41}, {%r864}, {%r841, %r842};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r873, %r874}, {%r45}, {%r858}, {%r867, %r868};
	// end inline asm
	ld.shared.u32 	%r880, [%rd80+8];
	// begin inline asm
	lop3.b32 %r879, %r880, %r555, %r556, 40;
	// end inline asm
	add.s32 	%r1110, %r879, 2021161080;
	xor.b32  	%r890, %r1110, -2139062144;
	shr.u32 	%r884, %r880, 4;
	// begin inline asm
	lop3.b32 %r883, %r884, %r555, %r556, 40;
	// end inline asm
	add.s32 	%r1111, %r883, 2021161080;
	xor.b32  	%r896, %r1111, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r887, %r888}, {%r49}, {%r890}, {%r855, %r856};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r893, %r894}, {%r53}, {%r896}, {%r861, %r862};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r899, %r900}, {%r49}, {%r896}, {%r873, %r874};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r905, %r906}, {%r53}, {%r890}, {%r899, %r900};
	// end inline asm
	ld.shared.u32 	%r912, [%rd80+12];
	// begin inline asm
	lop3.b32 %r911, %r912, %r555, %r556, 40;
	// end inline asm
	add.s32 	%r1112, %r911, 2021161080;
	xor.b32  	%r922, %r1112, -2139062144;
	shr.u32 	%r916, %r912, 4;
	// begin inline asm
	lop3.b32 %r915, %r916, %r555, %r556, 40;
	// end inline asm
	add.s32 	%r1113, %r915, 2021161080;
	xor.b32  	%r928, %r1113, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r919, %r920}, {%r57}, {%r922}, {%r887, %r888};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r925, %r926}, {%r61}, {%r928}, {%r893, %r894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r931, %r932}, {%r57}, {%r928}, {%r905, %r906};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r937, %r938}, {%r61}, {%r922}, {%r931, %r932};
	// end inline asm
	ld.shared.u32 	%r944, [%rd80+16];
	// begin inline asm
	lop3.b32 %r943, %r944, %r555, %r556, 40;
	// end inline asm
	add.s32 	%r1114, %r943, 2021161080;
	xor.b32  	%r954, %r1114, -2139062144;
	shr.u32 	%r948, %r944, 4;
	// begin inline asm
	lop3.b32 %r947, %r948, %r555, %r556, 40;
	// end inline asm
	add.s32 	%r1115, %r947, 2021161080;
	xor.b32  	%r960, %r1115, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r951, %r952}, {%r34}, {%r954}, {%r919, %r920};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r957, %r958}, {%r38}, {%r960}, {%r925, %r926};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r963, %r964}, {%r34}, {%r960}, {%r937, %r938};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r969, %r970}, {%r38}, {%r954}, {%r963, %r964};
	// end inline asm
	ld.shared.u32 	%r976, [%rd80+20];
	// begin inline asm
	lop3.b32 %r975, %r976, %r555, %r556, 40;
	// end inline asm
	add.s32 	%r1116, %r975, 2021161080;
	xor.b32  	%r986, %r1116, -2139062144;
	shr.u32 	%r980, %r976, 4;
	// begin inline asm
	lop3.b32 %r979, %r980, %r555, %r556, 40;
	// end inline asm
	add.s32 	%r1117, %r979, 2021161080;
	xor.b32  	%r992, %r1117, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r983, %r984}, {%r42}, {%r986}, {%r951, %r952};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r989, %r990}, {%r46}, {%r992}, {%r957, %r958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r995, %r996}, {%r42}, {%r992}, {%r969, %r970};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1001, %r1002}, {%r46}, {%r986}, {%r995, %r996};
	// end inline asm
	ld.shared.u32 	%r1008, [%rd80+24];
	// begin inline asm
	lop3.b32 %r1007, %r1008, %r555, %r556, 40;
	// end inline asm
	add.s32 	%r1118, %r1007, 2021161080;
	xor.b32  	%r1018, %r1118, -2139062144;
	shr.u32 	%r1012, %r1008, 4;
	// begin inline asm
	lop3.b32 %r1011, %r1012, %r555, %r556, 40;
	// end inline asm
	add.s32 	%r1119, %r1011, 2021161080;
	xor.b32  	%r1024, %r1119, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1015, %r1016}, {%r50}, {%r1018}, {%r983, %r984};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1021, %r1022}, {%r54}, {%r1024}, {%r989, %r990};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1027, %r1028}, {%r50}, {%r1024}, {%r1001, %r1002};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1033, %r1034}, {%r54}, {%r1018}, {%r1027, %r1028};
	// end inline asm
	ld.shared.u32 	%r1040, [%rd80+28];
	// begin inline asm
	lop3.b32 %r1039, %r1040, %r555, %r556, 40;
	// end inline asm
	add.s32 	%r1120, %r1039, 2021161080;
	xor.b32  	%r1050, %r1120, -2139062144;
	shr.u32 	%r1044, %r1040, 4;
	// begin inline asm
	lop3.b32 %r1043, %r1044, %r555, %r556, 40;
	// end inline asm
	add.s32 	%r1121, %r1043, 2021161080;
	xor.b32  	%r1056, %r1121, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1047, %r1048}, {%r58}, {%r1050}, {%r1015, %r1016};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1053, %r1054}, {%r62}, {%r1056}, {%r1021, %r1022};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1059, %r1060}, {%r58}, {%r1056}, {%r1033, %r1034};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1065, %r1066}, {%r62}, {%r1050}, {%r1059, %r1060};
	// end inline asm
	sub.s32 	%r1122, %r1047, %r1053;
	add.s32 	%r1123, %r1122, 4;
	shr.s32 	%r1073, %r1123, 3;
	add.s32 	%r1124, %r1065, 4;
	shr.s32 	%r1072, %r1124, 3;
	sub.s32 	%r1125, %r1048, %r1054;
	add.s32 	%r1126, %r1125, 4;
	shr.s32 	%r1076, %r1126, 3;
	add.s32 	%r1127, %r1066, 4;
	shr.s32 	%r1075, %r1127, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1071, %r1072, %r1073;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1074, %r1075, %r1076;
	// end inline asm
	add.s32 	%r1128, %r69, %r1102;
	mul.wide.u32 	%rd86, %r1128, 4;
	add.s64 	%rd87, %rd43, %rd86;
	st.shared.u32 	[%rd87], %r1071;
	add.s32 	%r1129, %r69, %r1104;
	mul.wide.u32 	%rd88, %r1129, 4;
	add.s64 	%rd89, %rd43, %rd88;
	st.shared.u32 	[%rd89], %r1074;
	add.s32 	%r1328, %r1328, 8;
	setp.ne.s32 	%p7, %r1328, 32;
	@%p7 bra 	LBB0_11;
// %bb.12:                              // %L7798
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1148, [%rd7];
	ld.shared.u32 	%r1149, [%rd8+12800];
	ld.shared.u32 	%r1150, [%rd8+25600];
	ld.shared.u32 	%r1151, [%rd8+38400];
	ld.shared.u32 	%r1152, [%rd9];
	ld.shared.u32 	%r1153, [%rd10+12800];
	ld.shared.u32 	%r1154, [%rd10+25600];
	ld.shared.u32 	%r1155, [%rd10+38400];
	ld.shared.u32 	%r1156, [%rd11];
	ld.shared.u32 	%r1157, [%rd12+12800];
	ld.shared.u32 	%r1158, [%rd12+25600];
	ld.shared.u32 	%r1159, [%rd12+38400];
	ld.shared.u32 	%r1160, [%rd13];
	ld.shared.u32 	%r1161, [%rd14+12800];
	ld.shared.u32 	%r1162, [%rd14+25600];
	ld.shared.u32 	%r1163, [%rd14+38400];
	cvt.s32.s16 	%r1164, %r1148;
	shr.s32 	%r1165, %r1148, 16;
	cvt.s32.s16 	%r1166, %r1149;
	shr.s32 	%r1167, %r1149, 16;
	cvt.s32.s16 	%r1168, %r1150;
	shr.s32 	%r1169, %r1150, 16;
	cvt.s32.s16 	%r1170, %r1151;
	shr.s32 	%r1171, %r1151, 16;
	cvt.s32.s16 	%r1172, %r1152;
	shr.s32 	%r1173, %r1152, 16;
	cvt.s32.s16 	%r1174, %r1153;
	shr.s32 	%r1175, %r1153, 16;
	cvt.s32.s16 	%r1176, %r1154;
	shr.s32 	%r1177, %r1154, 16;
	cvt.s32.s16 	%r1178, %r1155;
	shr.s32 	%r1179, %r1155, 16;
	cvt.s32.s16 	%r1180, %r1156;
	shr.s32 	%r1181, %r1156, 16;
	cvt.s32.s16 	%r1182, %r1157;
	shr.s32 	%r1183, %r1157, 16;
	cvt.s32.s16 	%r1184, %r1158;
	shr.s32 	%r1185, %r1158, 16;
	cvt.s32.s16 	%r1186, %r1159;
	shr.s32 	%r1187, %r1159, 16;
	cvt.s32.s16 	%r1188, %r1160;
	shr.s32 	%r1189, %r1160, 16;
	cvt.s32.s16 	%r1190, %r1161;
	shr.s32 	%r1191, %r1161, 16;
	cvt.s32.s16 	%r1192, %r1162;
	shr.s32 	%r1193, %r1162, 16;
	cvt.s32.s16 	%r1194, %r1163;
	shr.s32 	%r1195, %r1163, 16;
	add.s32 	%r1196, %r1164, %r70;
	add.s32 	%r1197, %r1196, %r1166;
	add.s32 	%r1198, %r1197, %r1168;
	add.s32 	%r1199, %r1198, %r1170;
	shr.s32 	%r1200, %r1199, %r71;
	add.s32 	%r1201, %r1165, %r70;
	add.s32 	%r1202, %r1201, %r1167;
	add.s32 	%r1203, %r1202, %r1169;
	add.s32 	%r1204, %r1203, %r1171;
	shr.s32 	%r1205, %r1204, %r71;
	add.s32 	%r1206, %r1172, %r70;
	add.s32 	%r1207, %r1206, %r1174;
	add.s32 	%r1208, %r1207, %r1176;
	add.s32 	%r1209, %r1208, %r1178;
	shr.s32 	%r1210, %r1209, %r71;
	add.s32 	%r1211, %r1173, %r70;
	add.s32 	%r1212, %r1211, %r1175;
	add.s32 	%r1213, %r1212, %r1177;
	add.s32 	%r1214, %r1213, %r1179;
	shr.s32 	%r1215, %r1214, %r71;
	add.s32 	%r1216, %r1180, %r70;
	add.s32 	%r1217, %r1216, %r1182;
	add.s32 	%r1218, %r1217, %r1184;
	add.s32 	%r1219, %r1218, %r1186;
	shr.s32 	%r1220, %r1219, %r71;
	add.s32 	%r1221, %r1181, %r70;
	add.s32 	%r1222, %r1221, %r1183;
	add.s32 	%r1223, %r1222, %r1185;
	add.s32 	%r1224, %r1223, %r1187;
	shr.s32 	%r1225, %r1224, %r71;
	add.s32 	%r1226, %r1188, %r70;
	add.s32 	%r1227, %r1226, %r1190;
	add.s32 	%r1228, %r1227, %r1192;
	add.s32 	%r1229, %r1228, %r1194;
	shr.s32 	%r1230, %r1229, %r71;
	add.s32 	%r1231, %r1189, %r70;
	add.s32 	%r1232, %r1231, %r1191;
	add.s32 	%r1233, %r1232, %r1193;
	add.s32 	%r1234, %r1233, %r1195;
	shr.s32 	%r1235, %r1234, %r71;
	max.s32 	%r1236, %r1200, -7;
	min.s32 	%r1135, %r1236, 7;
	max.s32 	%r1237, %r1205, -7;
	min.s32 	%r1142, %r1237, 7;
	max.s32 	%r1238, %r1210, -7;
	min.s32 	%r1134, %r1238, 7;
	max.s32 	%r1239, %r1215, -7;
	min.s32 	%r1141, %r1239, 7;
	max.s32 	%r1240, %r1220, -7;
	min.s32 	%r1132, %r1240, 7;
	max.s32 	%r1241, %r1225, -7;
	min.s32 	%r1139, %r1241, 7;
	max.s32 	%r1242, %r1230, -7;
	min.s32 	%r1131, %r1242, 7;
	max.s32 	%r1243, %r1235, -7;
	min.s32 	%r1138, %r1243, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1130, %r1131, %r1132, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1133, %r1134, %r1135, %r1130;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1137, %r1138, %r1139, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1140, %r1141, %r1142, %r1137;
	// end inline asm
	shl.b32 	%r1147, %r1140, 4;
	// begin inline asm
	lop3.b32 %r1254, %r556, %r1133, %r1147, 202;
	// end inline asm
	setp.eq.s32 	%p8, %r1321, 0;
	selp.b32 	%r1326, %r1254, %r1326, %p8;
	selp.b32 	%r1327, %r1254, %r1327, %p8;
	setp.eq.s32 	%p9, %r1321, 32;
	selp.b32 	%r1322, %r1254, %r1322, %p9;
	selp.b32 	%r1323, %r1254, %r1323, %p9;
	setp.eq.s32 	%p10, %r1321, 64;
	selp.b32 	%r1324, %r1254, %r1324, %p10;
	selp.b32 	%r1325, %r1254, %r1325, %p10;
	add.s32 	%r28, %r1321, 32;
	setp.ne.s32 	%p11, %r1321, 96;
	mov.u32 	%r1321, %r28;
	@%p11 bra 	LBB0_8;
// %bb.13:                              // %L10198
                                        //   in Loop: Header=BB0_7 Depth=1
	setp.eq.s16 	%p12, %rs3, 0;
	// begin inline asm
	prmt.b32 %r1244, %r1326, %r1322, %r340;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1248, %r1327, %r1323, %r344;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1252, %r1324, %r1254, %r340;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1256, %r1325, %r1254, %r344;
	// end inline asm
	selp.b32 	%r1292, %r1248, %r1244, %p12;
	shfl.sync.bfly.b32	%r1293, %r1292, 1, 31, -1;
	selp.b32 	%r1261, %r1244, %r1293, %p12;
	selp.b32 	%r1262, %r1293, %r1248, %p12;
	selp.b32 	%r1294, %r1256, %r1252, %p12;
	shfl.sync.bfly.b32	%r1295, %r1294, 1, 31, -1;
	selp.b32 	%r1269, %r1252, %r1295, %p12;
	selp.b32 	%r1270, %r1295, %r1256, %p12;
	// begin inline asm
	prmt.b32 %r1260, %r1261, %r1262, %r340;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1264, %r1261, %r1262, %r344;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1268, %r1269, %r1270, %r340;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1272, %r1269, %r1270, %r344;
	// end inline asm
	selp.b32 	%r1296, %r1268, %r1260, %p4;
	shfl.sync.bfly.b32	%r1297, %r1296, 2, 31, -1;
	selp.b32 	%r1277, %r1260, %r1297, %p4;
	selp.b32 	%r1278, %r1297, %r1268, %p4;
	selp.b32 	%r1298, %r1272, %r1264, %p4;
	shfl.sync.bfly.b32	%r1299, %r1298, 2, 31, -1;
	selp.b32 	%r1285, %r1264, %r1299, %p4;
	selp.b32 	%r1286, %r1299, %r1272, %p4;
	// begin inline asm
	prmt.b32 %r1276, %r1277, %r1278, %r212;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1280, %r1277, %r1278, %r216;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1284, %r1285, %r1286, %r212;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1288, %r1285, %r1286, %r216;
	// end inline asm
	selp.b32 	%r1300, %r1284, %r1276, %p5;
	shfl.sync.bfly.b32	%r1301, %r1300, 4, 31, -1;
	selp.b32 	%r1302, %r1276, %r1301, %p5;
	selp.b32 	%r1303, %r1301, %r1284, %p5;
	selp.b32 	%r1304, %r1288, %r1280, %p5;
	shfl.sync.bfly.b32	%r1305, %r1304, 4, 31, -1;
	selp.b32 	%r1306, %r1280, %r1305, %p5;
	selp.b32 	%r1307, %r1305, %r1288, %p5;
	selp.b32 	%r1308, %r1306, %r1302, %p12;
	shfl.sync.bfly.b32	%r1309, %r1308, 1, 31, -1;
	selp.b32 	%r1310, %r1302, %r1309, %p12;
	selp.b32 	%r1311, %r1309, %r1306, %p12;
	selp.b32 	%r1312, %r1307, %r1303, %p12;
	shfl.sync.bfly.b32	%r1313, %r1312, 1, 31, -1;
	selp.b32 	%r1314, %r1303, %r1313, %p12;
	selp.b32 	%r1315, %r1313, %r1307, %p12;
	or.b32  	%r1316, %r1320, %r72;
	or.b32  	%r1317, %r1316, %r74;
	add.s32 	%r1318, %r1317, %r73;
	cvt.u64.u32 	%rd90, %r1318;
	add.s64 	%rd91, %rd4, %rd90;
	st.global.v4.u32 	[%rd91], {%r1310, %r1314, %r1311, %r1315};
	add.s32 	%r29, %r1320, 128;
	setp.ne.s32 	%p15, %r1320, 32640;
	mov.u32 	%r1320, %r29;
	@%p15 bra 	LBB0_7;
// %bb.14:                              // %L10578
	mov.u32 	%r1319, 0;
	st.global.u32 	[%rd6], %r1319;
	ret;
LBB0_1:                                 // %L8
	mov.u64 	%rd16, exception1;
	cvta.global.u64 	%rd17, %rd16;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd17;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd15;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	// begin inline asm
	exit;
	// end inline asm
LBB0_3:                                 // %L25
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd15;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	// begin inline asm
	exit;
	// end inline asm
LBB0_5:                                 // %L251
	mov.u32 	%r88, 2;
	st.global.u32 	[%rd6], %r88;
	mov.u64 	%rd23, exception866;
	cvta.global.u64 	%rd24, %rd23;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd24;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd15;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
