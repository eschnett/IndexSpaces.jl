// PTX CompilerJob of bb(CuDeviceVector{Int8x4, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Int32, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Int32, 1}) in world 33550 for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 7.1
.target sm_86
.address_size 64

	// .globl	_Z13julia_bb_359613CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE // -- Begin function _Z13julia_bb_359613CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[8]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception925[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z13julia_bb_359613CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.visible .entry _Z13julia_bb_359613CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE(
	.param .align 8 .b8 _Z13julia_bb_359613CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0[8],
	.param .align 8 .b8 _Z13julia_bb_359613CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z13julia_bb_359613CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z13julia_bb_359613CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z13julia_bb_359613CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z13julia_bb_359613CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<16>;
	.reg .b16 	%rs<23>;
	.reg .b32 	%r<1338>;
	.reg .b64 	%rd<92>;

// %bb.0:                               // %conversion
	ld.param.u64 	%rd15, [_Z13julia_bb_359613CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r78, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r78, 16511;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L10
	// begin inline asm
	mov.u32 %r79, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r79, 67711;
	@%p2 bra 	LBB0_4;
	bra.uni 	LBB0_3;
LBB0_4:                                 // %L27
	ld.param.u64 	%rd3, [_Z13julia_bb_359613CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3];
	ld.param.u64 	%rd5, [_Z13julia_bb_359613CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5];
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %tid.x;
	mad.lo.s32 	%r80, %r1, 768, %r3;
	or.b32  	%r81, %r80, %r4;
	mul.wide.u32 	%rd20, %r81, 4;
	add.s64 	%rd6, %rd5, %rd20;
	mov.u32 	%r82, 1;
	st.global.u32 	[%rd6], %r82;
	shl.b32 	%r83, %r2, 2;
	shr.u32 	%r5, %r4, 3;
	or.b32  	%r84, %r83, %r5;
	mul.hi.u32 	%r85, %r84, -1431655765;
	shr.u32 	%r86, %r85, 6;
	mul.lo.s32 	%r87, %r86, 96;
	sub.s32 	%r6, %r84, %r87;
	shr.u32 	%r7, %r1, 5;
	bfe.u32 	%r8, %r1, 4, 1;
	mad.lo.s32 	%r88, %r7, 192, %r6;
	mad.lo.s32 	%r89, %r8, 96, %r88;
	mul.wide.u32 	%rd21, %r89, 4;
	add.s64 	%rd22, %rd3, %rd21;
	ld.global.u32 	%r9, [%rd22];
	add.s32 	%r10, %r9, -4;
	setp.lt.u32 	%p3, %r10, 31;
	@%p3 bra 	LBB0_6;
	bra.uni 	LBB0_5;
LBB0_6:                                 // %L344
	ld.param.u64 	%rd1, [_Z13julia_bb_359613CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1];
	ld.param.u64 	%rd2, [_Z13julia_bb_359613CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2];
	ld.param.u64 	%rd4, [_Z13julia_bb_359613CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4];
	add.s32 	%r348, %r9, -3;
	shr.u32 	%r349, %r2, 2;
	cvt.u16.u32 	%rs4, %r349;
	mul.lo.s16 	%rs5, %rs4, 171;
	shr.u16 	%rs6, %rs5, 10;
	mul.lo.s16 	%rs7, %rs6, 6;
	sub.s16 	%rs8, %rs4, %rs7;
	shl.b16 	%rs9, %rs8, 4;
	cvt.u32.u16 	%r350, %rs9;
	and.b32  	%r351, %r350, 240;
	shr.u32 	%r11, %r4, 2;
	and.b32  	%r352, %r11, 6;
	or.b32  	%r353, %r352, %r351;
	cvt.u16.u32 	%rs10, %r353;
	mul.lo.s16 	%rs11, %rs10, 171;
	shr.u16 	%rs12, %rs11, 14;
	mul.lo.s16 	%rs13, %rs12, 96;
	sub.s16 	%rs14, %rs10, %rs13;
	and.b16  	%rs15, %rs14, 246;
	mul.wide.u16 	%r354, %rs15, 256;
	mul.lo.s32 	%r355, %r7, 49152;
	mul.lo.s32 	%r356, %r8, 24576;
	shl.b32 	%r357, %r4, 1;
	shl.b32 	%r358, %r2, 6;
	or.b32  	%r359, %r357, %r358;
	shl.b32 	%r360, %r4, 4;
	and.b32  	%r361, %r360, 16;
	and.b32  	%r362, %r359, 204;
	or.b32  	%r363, %r361, %r362;
	add.s32 	%r364, %r356, %r355;
	or.b32  	%r365, %r364, %r363;
	or.b32  	%r366, %r365, 1;
	add.s32 	%r367, %r366, %r354;
	mul.wide.u32 	%rd25, %r367, 4;
	add.s64 	%rd26, %rd1, %rd25;
	ld.global.v4.u32 	{%r92, %r93, %r108, %r109}, [%rd26+-4];
	or.b16  	%rs16, %rs10, 8;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 14;
	mul.lo.s16 	%rs19, %rs18, 96;
	sub.s16 	%rs20, %rs16, %rs19;
	and.b16  	%rs21, %rs20, 254;
	mul.wide.u16 	%r368, %rs21, 256;
	add.s32 	%r369, %r366, %r368;
	mul.wide.u32 	%rd27, %r369, 4;
	add.s64 	%rd28, %rd1, %rd27;
	ld.global.v4.u32 	{%r100, %r101, %r116, %r117}, [%rd28+-4];
	and.b32  	%r370, %r357, 12;
	and.b32  	%r371, %r358, 192;
	or.b32  	%r372, %r371, %r370;
	or.b32  	%r373, %r372, %r361;
	or.b32  	%r374, %r373, %r355;
	add.s32 	%r375, %r356, %r374;
	or.b32  	%r376, %r375, 33;
	add.s32 	%r377, %r376, %r354;
	mul.wide.u32 	%rd29, %r377, 4;
	add.s64 	%rd30, %rd1, %rd29;
	ld.global.v4.u32 	{%r124, %r125, %r140, %r141}, [%rd30+-4];
	add.s32 	%r378, %r376, %r368;
	mul.wide.u32 	%rd31, %r378, 4;
	add.s64 	%rd32, %rd1, %rd31;
	ld.global.v4.u32 	{%r132, %r133, %r148, %r149}, [%rd32+-4];
	or.b32  	%r379, %r11, %r351;
	or.b32  	%r380, %r379, 1;
	mul.hi.u32 	%r381, %r380, -1431655765;
	shr.u32 	%r382, %r381, 6;
	mul.lo.s32 	%r383, %r382, 96;
	sub.s32 	%r384, %r380, %r383;
	shl.b32 	%r385, %r384, 8;
	add.s32 	%r386, %r366, %r385;
	mul.wide.u32 	%rd33, %r386, 4;
	add.s64 	%rd34, %rd1, %rd33;
	ld.global.v4.u32 	{%r156, %r157, %r172, %r173}, [%rd34+-4];
	or.b32  	%r387, %r379, 9;
	mul.hi.u32 	%r388, %r387, -1431655765;
	shr.u32 	%r389, %r388, 6;
	mul.lo.s32 	%r390, %r389, 96;
	sub.s32 	%r391, %r387, %r390;
	shl.b32 	%r392, %r391, 8;
	add.s32 	%r393, %r366, %r392;
	mul.wide.u32 	%rd35, %r393, 4;
	add.s64 	%rd36, %rd1, %rd35;
	ld.global.v4.u32 	{%r164, %r165, %r180, %r181}, [%rd36+-4];
	add.s32 	%r394, %r376, %r385;
	mul.wide.u32 	%rd37, %r394, 4;
	add.s64 	%rd38, %rd1, %rd37;
	ld.global.v4.u32 	{%r188, %r189, %r204, %r205}, [%rd38+-4];
	add.s32 	%r395, %r376, %r392;
	mul.wide.u32 	%rd39, %r395, 4;
	add.s64 	%rd40, %rd1, %rd39;
	ld.global.v4.u32 	{%r196, %r197, %r212, %r213}, [%rd40+-4];
	mov.u32 	%r94, 21520;
	// begin inline asm
	prmt.b32 %r220, %r92, %r93, %r94;
	// end inline asm
	mov.u32 	%r98, 30258;
	// begin inline asm
	prmt.b32 %r221, %r92, %r93, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r228, %r100, %r101, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r229, %r100, %r101, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r236, %r108, %r109, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r237, %r108, %r109, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r244, %r116, %r117, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r245, %r116, %r117, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r252, %r124, %r125, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r253, %r124, %r125, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r260, %r132, %r133, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r261, %r132, %r133, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r268, %r140, %r141, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r269, %r140, %r141, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r276, %r148, %r149, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r277, %r148, %r149, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r284, %r156, %r157, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r285, %r156, %r157, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r292, %r164, %r165, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r293, %r164, %r165, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r300, %r172, %r173, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r301, %r172, %r173, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r308, %r180, %r181, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r309, %r180, %r181, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r316, %r188, %r189, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r317, %r188, %r189, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r324, %r196, %r197, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r325, %r196, %r197, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r332, %r204, %r205, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r333, %r204, %r205, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r340, %r212, %r213, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r341, %r212, %r213, %r98;
	// end inline asm
	mov.u32 	%r222, 25152;
	// begin inline asm
	prmt.b32 %r219, %r220, %r221, %r222;
	// end inline asm
	mov.u32 	%r226, 29521;
	// begin inline asm
	prmt.b32 %r223, %r220, %r221, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r227, %r228, %r229, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r231, %r228, %r229, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r235, %r236, %r237, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r239, %r236, %r237, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r243, %r244, %r245, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r247, %r244, %r245, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r251, %r252, %r253, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r255, %r252, %r253, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r259, %r260, %r261, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r263, %r260, %r261, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r267, %r268, %r269, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r271, %r268, %r269, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r275, %r276, %r277, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r279, %r276, %r277, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r283, %r284, %r285, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r287, %r284, %r285, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r291, %r292, %r293, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r295, %r292, %r293, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r299, %r300, %r301, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r303, %r300, %r301, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r307, %r308, %r309, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r311, %r308, %r309, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r315, %r316, %r317, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r319, %r316, %r317, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r323, %r324, %r325, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r327, %r324, %r325, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r331, %r332, %r333, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r335, %r332, %r333, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r339, %r340, %r341, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r343, %r340, %r341, %r226;
	// end inline asm
	cvt.u16.u32 	%rs22, %r4;
	and.b16  	%rs1, %rs22, 2;
	setp.eq.s16 	%p4, %rs1, 0;
	selp.b32 	%r396, %r251, %r219, %p4;
	shfl.sync.bfly.b32	%r397, %r396, 2, 31, -1;
	selp.b32 	%r398, %r219, %r397, %p4;
	selp.b32 	%r399, %r397, %r251, %p4;
	selp.b32 	%r400, %r259, %r227, %p4;
	shfl.sync.bfly.b32	%r401, %r400, 2, 31, -1;
	selp.b32 	%r402, %r227, %r401, %p4;
	selp.b32 	%r403, %r401, %r259, %p4;
	selp.b32 	%r404, %r255, %r223, %p4;
	shfl.sync.bfly.b32	%r405, %r404, 2, 31, -1;
	selp.b32 	%r406, %r223, %r405, %p4;
	selp.b32 	%r407, %r405, %r255, %p4;
	selp.b32 	%r408, %r263, %r231, %p4;
	shfl.sync.bfly.b32	%r409, %r408, 2, 31, -1;
	selp.b32 	%r410, %r231, %r409, %p4;
	selp.b32 	%r411, %r409, %r263, %p4;
	selp.b32 	%r412, %r267, %r235, %p4;
	shfl.sync.bfly.b32	%r413, %r412, 2, 31, -1;
	selp.b32 	%r414, %r235, %r413, %p4;
	selp.b32 	%r415, %r413, %r267, %p4;
	selp.b32 	%r416, %r275, %r243, %p4;
	shfl.sync.bfly.b32	%r417, %r416, 2, 31, -1;
	selp.b32 	%r418, %r243, %r417, %p4;
	selp.b32 	%r419, %r417, %r275, %p4;
	selp.b32 	%r420, %r271, %r239, %p4;
	shfl.sync.bfly.b32	%r421, %r420, 2, 31, -1;
	selp.b32 	%r422, %r239, %r421, %p4;
	selp.b32 	%r423, %r421, %r271, %p4;
	selp.b32 	%r424, %r279, %r247, %p4;
	shfl.sync.bfly.b32	%r425, %r424, 2, 31, -1;
	selp.b32 	%r426, %r247, %r425, %p4;
	selp.b32 	%r427, %r425, %r279, %p4;
	selp.b32 	%r428, %r315, %r283, %p4;
	shfl.sync.bfly.b32	%r429, %r428, 2, 31, -1;
	selp.b32 	%r430, %r283, %r429, %p4;
	selp.b32 	%r431, %r429, %r315, %p4;
	selp.b32 	%r432, %r323, %r291, %p4;
	shfl.sync.bfly.b32	%r433, %r432, 2, 31, -1;
	selp.b32 	%r434, %r291, %r433, %p4;
	selp.b32 	%r435, %r433, %r323, %p4;
	selp.b32 	%r436, %r319, %r287, %p4;
	shfl.sync.bfly.b32	%r437, %r436, 2, 31, -1;
	selp.b32 	%r438, %r287, %r437, %p4;
	selp.b32 	%r439, %r437, %r319, %p4;
	selp.b32 	%r440, %r327, %r295, %p4;
	shfl.sync.bfly.b32	%r441, %r440, 2, 31, -1;
	selp.b32 	%r442, %r295, %r441, %p4;
	selp.b32 	%r443, %r441, %r327, %p4;
	selp.b32 	%r444, %r331, %r299, %p4;
	shfl.sync.bfly.b32	%r445, %r444, 2, 31, -1;
	selp.b32 	%r446, %r299, %r445, %p4;
	selp.b32 	%r447, %r445, %r331, %p4;
	selp.b32 	%r448, %r339, %r307, %p4;
	shfl.sync.bfly.b32	%r449, %r448, 2, 31, -1;
	selp.b32 	%r450, %r307, %r449, %p4;
	selp.b32 	%r451, %r449, %r339, %p4;
	selp.b32 	%r452, %r335, %r303, %p4;
	shfl.sync.bfly.b32	%r453, %r452, 2, 31, -1;
	selp.b32 	%r454, %r303, %r453, %p4;
	selp.b32 	%r455, %r453, %r335, %p4;
	selp.b32 	%r456, %r343, %r311, %p4;
	shfl.sync.bfly.b32	%r457, %r456, 2, 31, -1;
	selp.b32 	%r458, %r311, %r457, %p4;
	selp.b32 	%r459, %r457, %r343, %p4;
	and.b16  	%rs2, %rs22, 4;
	setp.eq.s16 	%p5, %rs2, 0;
	selp.b32 	%r460, %r430, %r398, %p5;
	shfl.sync.bfly.b32	%r461, %r460, 4, 31, -1;
	selp.b32 	%r572, %r398, %r461, %p5;
	selp.b32 	%r700, %r461, %r430, %p5;
	selp.b32 	%r462, %r434, %r402, %p5;
	shfl.sync.bfly.b32	%r463, %r462, 4, 31, -1;
	selp.b32 	%r834, %r402, %r463, %p5;
	selp.b32 	%r962, %r463, %r434, %p5;
	selp.b32 	%r464, %r438, %r406, %p5;
	shfl.sync.bfly.b32	%r465, %r464, 4, 31, -1;
	selp.b32 	%r578, %r406, %r465, %p5;
	selp.b32 	%r706, %r465, %r438, %p5;
	selp.b32 	%r466, %r442, %r410, %p5;
	shfl.sync.bfly.b32	%r467, %r466, 4, 31, -1;
	selp.b32 	%r840, %r410, %r467, %p5;
	selp.b32 	%r968, %r467, %r442, %p5;
	selp.b32 	%r468, %r446, %r414, %p5;
	shfl.sync.bfly.b32	%r469, %r468, 4, 31, -1;
	selp.b32 	%r604, %r414, %r469, %p5;
	selp.b32 	%r732, %r469, %r446, %p5;
	selp.b32 	%r470, %r450, %r418, %p5;
	shfl.sync.bfly.b32	%r471, %r470, 4, 31, -1;
	selp.b32 	%r866, %r418, %r471, %p5;
	selp.b32 	%r994, %r471, %r450, %p5;
	selp.b32 	%r472, %r454, %r422, %p5;
	shfl.sync.bfly.b32	%r473, %r472, 4, 31, -1;
	selp.b32 	%r610, %r422, %r473, %p5;
	selp.b32 	%r738, %r473, %r454, %p5;
	selp.b32 	%r474, %r458, %r426, %p5;
	shfl.sync.bfly.b32	%r475, %r474, 4, 31, -1;
	selp.b32 	%r872, %r426, %r475, %p5;
	selp.b32 	%r1000, %r475, %r458, %p5;
	selp.b32 	%r476, %r431, %r399, %p5;
	shfl.sync.bfly.b32	%r477, %r476, 4, 31, -1;
	selp.b32 	%r636, %r399, %r477, %p5;
	selp.b32 	%r764, %r477, %r431, %p5;
	selp.b32 	%r478, %r435, %r403, %p5;
	shfl.sync.bfly.b32	%r479, %r478, 4, 31, -1;
	selp.b32 	%r898, %r403, %r479, %p5;
	selp.b32 	%r1026, %r479, %r435, %p5;
	selp.b32 	%r480, %r439, %r407, %p5;
	shfl.sync.bfly.b32	%r481, %r480, 4, 31, -1;
	selp.b32 	%r642, %r407, %r481, %p5;
	selp.b32 	%r770, %r481, %r439, %p5;
	selp.b32 	%r482, %r443, %r411, %p5;
	shfl.sync.bfly.b32	%r483, %r482, 4, 31, -1;
	selp.b32 	%r904, %r411, %r483, %p5;
	selp.b32 	%r1032, %r483, %r443, %p5;
	selp.b32 	%r484, %r447, %r415, %p5;
	shfl.sync.bfly.b32	%r485, %r484, 4, 31, -1;
	selp.b32 	%r668, %r415, %r485, %p5;
	selp.b32 	%r796, %r485, %r447, %p5;
	selp.b32 	%r486, %r451, %r419, %p5;
	shfl.sync.bfly.b32	%r487, %r486, 4, 31, -1;
	selp.b32 	%r930, %r419, %r487, %p5;
	selp.b32 	%r1058, %r487, %r451, %p5;
	selp.b32 	%r488, %r455, %r423, %p5;
	shfl.sync.bfly.b32	%r489, %r488, 4, 31, -1;
	selp.b32 	%r674, %r423, %r489, %p5;
	selp.b32 	%r802, %r489, %r455, %p5;
	selp.b32 	%r490, %r459, %r427, %p5;
	shfl.sync.bfly.b32	%r491, %r490, 4, 31, -1;
	selp.b32 	%r936, %r427, %r491, %p5;
	selp.b32 	%r1064, %r491, %r459, %p5;
	shl.b32 	%r492, %r1, 2;
	and.b32  	%r44, %r492, 1920;
	shl.b32 	%r493, %r1, 11;
	and.b32  	%r45, %r493, 30720;
	and.b32  	%r46, %r2, 12;
	shl.b32 	%r494, %r4, 2;
	and.b32  	%r495, %r494, 28;
	shl.b32 	%r496, %r1, 7;
	and.b32  	%r47, %r496, 2048;
	and.b32  	%r497, %r3, 96;
	or.b32  	%r48, %r495, %r497;
	shl.b32 	%r498, %r4, 3;
	and.b32  	%r499, %r498, 24;
	or.b32  	%r49, %r499, %r497;
	and.b32  	%r50, %r357, 6;
	and.b32  	%r500, %r2, 3;
	mul.hi.u32 	%r501, %r379, -1431655765;
	shr.u32 	%r502, %r501, 6;
	mul.lo.s32 	%r503, %r502, 96;
	sub.s32 	%r504, %r379, %r503;
	mul.lo.s32 	%r505, %r500, 3200;
	or.b32  	%r51, %r504, %r505;
	or.b32  	%r506, %r379, 8;
	mul.hi.u32 	%r507, %r506, -1431655765;
	shr.u32 	%r508, %r507, 6;
	mul.lo.s32 	%r509, %r508, 96;
	sub.s32 	%r510, %r506, %r509;
	or.b32  	%r52, %r510, %r505;
	and.b32  	%r511, %r4, 7;
	or.b32  	%r512, %r4, 24;
	shl.b32 	%r53, %r82, %r10;
	min.u32 	%r54, %r348, 31;
	and.b16  	%rs3, %rs22, 1;
	shl.b32 	%r514, %r6, 18;
	shl.b32 	%r515, %r1, 9;
	shl.b32 	%r516, %r4, 5;
	and.b32  	%r517, %r516, 64;
	and.b32  	%r518, %r515, 253952;
	or.b32  	%r55, %r518, %r514;
	mul.lo.s32 	%r519, %r511, 100;
	add.s32 	%r520, %r519, %r6;
	mul.wide.u32 	%rd41, %r520, 4;
	mov.u64 	%rd42, shmem;
	add.s64 	%rd43, %rd42, 16512;
	add.s64 	%rd7, %rd43, %rd41;
	cvt.u64.u32 	%rd44, %r519;
	cvt.u64.u32 	%rd45, %r6;
	add.s64 	%rd46, %rd45, %rd44;
	shl.b64 	%rd47, %rd46, 2;
	add.s64 	%rd8, %rd43, %rd47;
	add.s32 	%r521, %r519, 800;
	add.s32 	%r522, %r521, %r6;
	mul.wide.u32 	%rd48, %r522, 4;
	add.s64 	%rd9, %rd43, %rd48;
	cvt.u64.u32 	%rd49, %r521;
	add.s64 	%rd50, %rd45, %rd49;
	shl.b64 	%rd51, %rd50, 2;
	add.s64 	%rd10, %rd43, %rd51;
	add.s32 	%r523, %r519, 1600;
	add.s32 	%r524, %r523, %r6;
	mul.wide.u32 	%rd52, %r524, 4;
	add.s64 	%rd11, %rd43, %rd52;
	cvt.u64.u32 	%rd53, %r523;
	add.s64 	%rd54, %rd45, %rd53;
	shl.b64 	%rd55, %rd54, 2;
	add.s64 	%rd12, %rd43, %rd55;
	mul.lo.s32 	%r525, %r512, 100;
	add.s32 	%r526, %r525, %r6;
	mul.wide.u32 	%rd56, %r526, 4;
	add.s64 	%rd13, %rd43, %rd56;
	cvt.u64.u32 	%rd57, %r525;
	add.s64 	%rd58, %rd45, %rd57;
	shl.b64 	%rd59, %rd58, 2;
	add.s64 	%rd14, %rd43, %rd59;
	or.b32  	%r527, %r517, %r45;
	and.b32  	%r528, %r498, 32;
	or.b32  	%r529, %r527, %r361;
	or.b32  	%r56, %r529, %r528;
	mov.u32 	%r347, 0;
	setp.gt.u32 	%p6, %r2, 15;
	mov.u32 	%r1329, %r347;
LBB0_7:                                 // %L2387
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_8 Depth 2
                                        //       Child Loop BB0_11 Depth 3
	add.s32 	%r531, %r1329, %r45;
	or.b32  	%r532, %r531, %r46;
	or.b32  	%r58, %r532, %r5;
	or.b32  	%r59, %r58, 16;
	mov.u32 	%r1330, %r347;
	mov.u32 	%r1331, %r347;
	mov.u32 	%r1332, %r347;
	mov.u32 	%r1333, %r347;
	mov.u32 	%r1334, %r347;
	mov.u32 	%r1335, %r347;
	mov.u32 	%r1336, %r347;
LBB0_8:                                 // %L2390
                                        //   Parent Loop BB0_7 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_11 Depth 3
	@%p6 bra 	LBB0_10;
// %bb.9:                               // %L2410
                                        //   in Loop: Header=BB0_8 Depth=2
	add.s32 	%r533, %r1330, %r58;
	shl.b32 	%r534, %r533, 12;
	and.b32  	%r535, %r534, 134148096;
	or.b32  	%r536, %r535, %r44;
	or.b32  	%r537, %r536, %r47;
	or.b32  	%r538, %r537, %r48;
	shl.b32 	%r539, %r538, 2;
	cvt.u64.u32 	%rd60, %r539;
	add.s64 	%rd61, %rd2, %rd60;
	ld.global.v4.u32 	{%r540, %r541, %r542, %r543}, [%rd61];
	add.s32 	%r544, %r1330, %r59;
	shl.b32 	%r545, %r544, 12;
	and.b32  	%r546, %r545, 134213632;
	or.b32  	%r547, %r546, %r44;
	or.b32  	%r548, %r547, %r47;
	or.b32  	%r549, %r548, %r48;
	shl.b32 	%r550, %r549, 2;
	cvt.u64.u32 	%rd62, %r550;
	add.s64 	%rd63, %rd2, %rd62;
	ld.global.v4.u32 	{%r551, %r552, %r553, %r554}, [%rd63];
	and.b32  	%r555, %r533, 15;
	mul.lo.s32 	%r556, %r555, 129;
	add.s32 	%r557, %r48, %r556;
	mul.wide.u32 	%rd64, %r557, 4;
	add.s64 	%rd66, %rd42, %rd64;
	st.shared.u32 	[%rd66], %r540;
	cvt.u64.u32 	%rd67, %r556;
	cvt.u64.u32 	%rd68, %r48;
	add.s64 	%rd69, %rd68, %rd67;
	shl.b64 	%rd70, %rd69, 2;
	add.s64 	%rd71, %rd42, %rd70;
	st.shared.u32 	[%rd71+4], %r541;
	st.shared.u32 	[%rd71+8], %r542;
	st.shared.u32 	[%rd71+12], %r543;
	and.b32  	%r558, %r544, 31;
	mul.lo.s32 	%r559, %r558, 129;
	add.s32 	%r560, %r48, %r559;
	mul.wide.u32 	%rd72, %r560, 4;
	add.s64 	%rd73, %rd42, %rd72;
	st.shared.u32 	[%rd73], %r551;
	cvt.u64.u32 	%rd74, %r559;
	add.s64 	%rd75, %rd68, %rd74;
	shl.b64 	%rd76, %rd75, 2;
	add.s64 	%rd77, %rd42, %rd76;
	st.shared.u32 	[%rd77+4], %r552;
	st.shared.u32 	[%rd77+8], %r553;
	st.shared.u32 	[%rd77+12], %r554;
LBB0_10:                                // %L4288
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	mov.u32 	%r574, 0;
	mov.u32 	%r1337, %r574;
LBB0_11:                                // %L4290
                                        //   Parent Loop BB0_7 Depth=1
                                        //     Parent Loop BB0_8 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r1086, %r11, %r1337;
	mad.lo.s32 	%r1087, %r1086, 129, %r49;
	mul.wide.u32 	%rd78, %r1087, 4;
	add.s64 	%rd80, %rd42, %rd78;
	ld.shared.u32 	%r563, [%rd80];
	mov.u32 	%r564, 134744072;
	mov.u32 	%r565, 252645135;
	// begin inline asm
	lop3.b32 %r562, %r563, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1088, %r562, 2021161080;
	xor.b32  	%r573, %r1088, -2139062144;
	shr.u32 	%r567, %r563, 4;
	// begin inline asm
	lop3.b32 %r566, %r567, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1089, %r566, 2021161080;
	xor.b32  	%r579, %r1089, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r570, %r571}, {%r572}, {%r573}, {%r574, %r574};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r576, %r577}, {%r578}, {%r579}, {%r574, %r574};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r582, %r583}, {%r572}, {%r579}, {%r574, %r574};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r588, %r589}, {%r578}, {%r573}, {%r582, %r583};
	// end inline asm
	ld.shared.u32 	%r595, [%rd80+4];
	// begin inline asm
	lop3.b32 %r594, %r595, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1090, %r594, 2021161080;
	xor.b32  	%r605, %r1090, -2139062144;
	shr.u32 	%r599, %r595, 4;
	// begin inline asm
	lop3.b32 %r598, %r599, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1091, %r598, 2021161080;
	xor.b32  	%r611, %r1091, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r602, %r603}, {%r604}, {%r605}, {%r570, %r571};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r608, %r609}, {%r610}, {%r611}, {%r576, %r577};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r614, %r615}, {%r604}, {%r611}, {%r588, %r589};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r620, %r621}, {%r610}, {%r605}, {%r614, %r615};
	// end inline asm
	ld.shared.u32 	%r627, [%rd80+8];
	// begin inline asm
	lop3.b32 %r626, %r627, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1092, %r626, 2021161080;
	xor.b32  	%r637, %r1092, -2139062144;
	shr.u32 	%r631, %r627, 4;
	// begin inline asm
	lop3.b32 %r630, %r631, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1093, %r630, 2021161080;
	xor.b32  	%r643, %r1093, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r634, %r635}, {%r636}, {%r637}, {%r602, %r603};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r640, %r641}, {%r642}, {%r643}, {%r608, %r609};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r646, %r647}, {%r636}, {%r643}, {%r620, %r621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r652, %r653}, {%r642}, {%r637}, {%r646, %r647};
	// end inline asm
	ld.shared.u32 	%r659, [%rd80+12];
	// begin inline asm
	lop3.b32 %r658, %r659, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1094, %r658, 2021161080;
	xor.b32  	%r669, %r1094, -2139062144;
	shr.u32 	%r663, %r659, 4;
	// begin inline asm
	lop3.b32 %r662, %r663, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1095, %r662, 2021161080;
	xor.b32  	%r675, %r1095, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r666, %r667}, {%r668}, {%r669}, {%r634, %r635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r672, %r673}, {%r674}, {%r675}, {%r640, %r641};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r678, %r679}, {%r668}, {%r675}, {%r652, %r653};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r684, %r685}, {%r674}, {%r669}, {%r678, %r679};
	// end inline asm
	ld.shared.u32 	%r691, [%rd80+16];
	// begin inline asm
	lop3.b32 %r690, %r691, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1096, %r690, 2021161080;
	xor.b32  	%r701, %r1096, -2139062144;
	shr.u32 	%r695, %r691, 4;
	// begin inline asm
	lop3.b32 %r694, %r695, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1097, %r694, 2021161080;
	xor.b32  	%r707, %r1097, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r698, %r699}, {%r700}, {%r701}, {%r666, %r667};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r704, %r705}, {%r706}, {%r707}, {%r672, %r673};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r710, %r711}, {%r700}, {%r707}, {%r684, %r685};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r716, %r717}, {%r706}, {%r701}, {%r710, %r711};
	// end inline asm
	ld.shared.u32 	%r723, [%rd80+20];
	// begin inline asm
	lop3.b32 %r722, %r723, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1098, %r722, 2021161080;
	xor.b32  	%r733, %r1098, -2139062144;
	shr.u32 	%r727, %r723, 4;
	// begin inline asm
	lop3.b32 %r726, %r727, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1099, %r726, 2021161080;
	xor.b32  	%r739, %r1099, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r730, %r731}, {%r732}, {%r733}, {%r698, %r699};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r736, %r737}, {%r738}, {%r739}, {%r704, %r705};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r742, %r743}, {%r732}, {%r739}, {%r716, %r717};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r748, %r749}, {%r738}, {%r733}, {%r742, %r743};
	// end inline asm
	ld.shared.u32 	%r755, [%rd80+24];
	// begin inline asm
	lop3.b32 %r754, %r755, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1100, %r754, 2021161080;
	xor.b32  	%r765, %r1100, -2139062144;
	shr.u32 	%r759, %r755, 4;
	// begin inline asm
	lop3.b32 %r758, %r759, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1101, %r758, 2021161080;
	xor.b32  	%r771, %r1101, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r762, %r763}, {%r764}, {%r765}, {%r730, %r731};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r768, %r769}, {%r770}, {%r771}, {%r736, %r737};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r774, %r775}, {%r764}, {%r771}, {%r748, %r749};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r780, %r781}, {%r770}, {%r765}, {%r774, %r775};
	// end inline asm
	ld.shared.u32 	%r787, [%rd80+28];
	// begin inline asm
	lop3.b32 %r786, %r787, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1102, %r786, 2021161080;
	xor.b32  	%r797, %r1102, -2139062144;
	shr.u32 	%r791, %r787, 4;
	// begin inline asm
	lop3.b32 %r790, %r791, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1103, %r790, 2021161080;
	xor.b32  	%r803, %r1103, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r794, %r795}, {%r796}, {%r797}, {%r762, %r763};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r800, %r801}, {%r802}, {%r803}, {%r768, %r769};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r806, %r807}, {%r796}, {%r803}, {%r780, %r781};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r812, %r813}, {%r802}, {%r797}, {%r806, %r807};
	// end inline asm
	sub.s32 	%r1104, %r794, %r800;
	add.s32 	%r1105, %r1104, 4;
	shr.s32 	%r820, %r1105, 3;
	add.s32 	%r1106, %r812, 4;
	shr.s32 	%r819, %r1106, 3;
	sub.s32 	%r1107, %r795, %r801;
	add.s32 	%r1108, %r1107, 4;
	shr.s32 	%r823, %r1108, 3;
	add.s32 	%r1109, %r813, 4;
	shr.s32 	%r822, %r1109, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r818, %r819, %r820;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r821, %r822, %r823;
	// end inline asm
	or.b32  	%r1110, %r50, %r1337;
	mul.lo.s32 	%r1111, %r1110, 100;
	add.s32 	%r1112, %r51, %r1111;
	mul.wide.u32 	%rd81, %r1112, 4;
	add.s64 	%rd83, %rd43, %rd81;
	st.shared.u32 	[%rd83], %r818;
	add.s32 	%r1113, %r1111, 100;
	add.s32 	%r1114, %r51, %r1113;
	mul.wide.u32 	%rd84, %r1114, 4;
	add.s64 	%rd85, %rd43, %rd84;
	st.shared.u32 	[%rd85], %r821;
	ld.shared.u32 	%r825, [%rd80];
	// begin inline asm
	lop3.b32 %r824, %r825, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1115, %r824, 2021161080;
	xor.b32  	%r835, %r1115, -2139062144;
	shr.u32 	%r829, %r825, 4;
	// begin inline asm
	lop3.b32 %r828, %r829, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1116, %r828, 2021161080;
	xor.b32  	%r841, %r1116, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r832, %r833}, {%r834}, {%r835}, {%r574, %r574};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r838, %r839}, {%r840}, {%r841}, {%r574, %r574};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r844, %r845}, {%r834}, {%r841}, {%r574, %r574};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r850, %r851}, {%r840}, {%r835}, {%r844, %r845};
	// end inline asm
	ld.shared.u32 	%r857, [%rd80+4];
	// begin inline asm
	lop3.b32 %r856, %r857, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1117, %r856, 2021161080;
	xor.b32  	%r867, %r1117, -2139062144;
	shr.u32 	%r861, %r857, 4;
	// begin inline asm
	lop3.b32 %r860, %r861, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1118, %r860, 2021161080;
	xor.b32  	%r873, %r1118, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r864, %r865}, {%r866}, {%r867}, {%r832, %r833};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r870, %r871}, {%r872}, {%r873}, {%r838, %r839};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r876, %r877}, {%r866}, {%r873}, {%r850, %r851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r882, %r883}, {%r872}, {%r867}, {%r876, %r877};
	// end inline asm
	ld.shared.u32 	%r889, [%rd80+8];
	// begin inline asm
	lop3.b32 %r888, %r889, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1119, %r888, 2021161080;
	xor.b32  	%r899, %r1119, -2139062144;
	shr.u32 	%r893, %r889, 4;
	// begin inline asm
	lop3.b32 %r892, %r893, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1120, %r892, 2021161080;
	xor.b32  	%r905, %r1120, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r896, %r897}, {%r898}, {%r899}, {%r864, %r865};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r902, %r903}, {%r904}, {%r905}, {%r870, %r871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r908, %r909}, {%r898}, {%r905}, {%r882, %r883};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r914, %r915}, {%r904}, {%r899}, {%r908, %r909};
	// end inline asm
	ld.shared.u32 	%r921, [%rd80+12];
	// begin inline asm
	lop3.b32 %r920, %r921, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1121, %r920, 2021161080;
	xor.b32  	%r931, %r1121, -2139062144;
	shr.u32 	%r925, %r921, 4;
	// begin inline asm
	lop3.b32 %r924, %r925, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1122, %r924, 2021161080;
	xor.b32  	%r937, %r1122, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r928, %r929}, {%r930}, {%r931}, {%r896, %r897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r934, %r935}, {%r936}, {%r937}, {%r902, %r903};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r940, %r941}, {%r930}, {%r937}, {%r914, %r915};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r946, %r947}, {%r936}, {%r931}, {%r940, %r941};
	// end inline asm
	ld.shared.u32 	%r953, [%rd80+16];
	// begin inline asm
	lop3.b32 %r952, %r953, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1123, %r952, 2021161080;
	xor.b32  	%r963, %r1123, -2139062144;
	shr.u32 	%r957, %r953, 4;
	// begin inline asm
	lop3.b32 %r956, %r957, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1124, %r956, 2021161080;
	xor.b32  	%r969, %r1124, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r960, %r961}, {%r962}, {%r963}, {%r928, %r929};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r966, %r967}, {%r968}, {%r969}, {%r934, %r935};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r972, %r973}, {%r962}, {%r969}, {%r946, %r947};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r978, %r979}, {%r968}, {%r963}, {%r972, %r973};
	// end inline asm
	ld.shared.u32 	%r985, [%rd80+20];
	// begin inline asm
	lop3.b32 %r984, %r985, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1125, %r984, 2021161080;
	xor.b32  	%r995, %r1125, -2139062144;
	shr.u32 	%r989, %r985, 4;
	// begin inline asm
	lop3.b32 %r988, %r989, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1126, %r988, 2021161080;
	xor.b32  	%r1001, %r1126, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r992, %r993}, {%r994}, {%r995}, {%r960, %r961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r998, %r999}, {%r1000}, {%r1001}, {%r966, %r967};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1004, %r1005}, {%r994}, {%r1001}, {%r978, %r979};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1010, %r1011}, {%r1000}, {%r995}, {%r1004, %r1005};
	// end inline asm
	ld.shared.u32 	%r1017, [%rd80+24];
	// begin inline asm
	lop3.b32 %r1016, %r1017, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1127, %r1016, 2021161080;
	xor.b32  	%r1027, %r1127, -2139062144;
	shr.u32 	%r1021, %r1017, 4;
	// begin inline asm
	lop3.b32 %r1020, %r1021, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1128, %r1020, 2021161080;
	xor.b32  	%r1033, %r1128, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1024, %r1025}, {%r1026}, {%r1027}, {%r992, %r993};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1030, %r1031}, {%r1032}, {%r1033}, {%r998, %r999};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1036, %r1037}, {%r1026}, {%r1033}, {%r1010, %r1011};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1042, %r1043}, {%r1032}, {%r1027}, {%r1036, %r1037};
	// end inline asm
	ld.shared.u32 	%r1049, [%rd80+28];
	// begin inline asm
	lop3.b32 %r1048, %r1049, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1129, %r1048, 2021161080;
	xor.b32  	%r1059, %r1129, -2139062144;
	shr.u32 	%r1053, %r1049, 4;
	// begin inline asm
	lop3.b32 %r1052, %r1053, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1130, %r1052, 2021161080;
	xor.b32  	%r1065, %r1130, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1056, %r1057}, {%r1058}, {%r1059}, {%r1024, %r1025};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1062, %r1063}, {%r1064}, {%r1065}, {%r1030, %r1031};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1068, %r1069}, {%r1058}, {%r1065}, {%r1042, %r1043};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1074, %r1075}, {%r1064}, {%r1059}, {%r1068, %r1069};
	// end inline asm
	sub.s32 	%r1131, %r1056, %r1062;
	add.s32 	%r1132, %r1131, 4;
	shr.s32 	%r1082, %r1132, 3;
	add.s32 	%r1133, %r1074, 4;
	shr.s32 	%r1081, %r1133, 3;
	sub.s32 	%r1134, %r1057, %r1063;
	add.s32 	%r1135, %r1134, 4;
	shr.s32 	%r1085, %r1135, 3;
	add.s32 	%r1136, %r1075, 4;
	shr.s32 	%r1084, %r1136, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1080, %r1081, %r1082;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1083, %r1084, %r1085;
	// end inline asm
	add.s32 	%r1137, %r52, %r1111;
	mul.wide.u32 	%rd86, %r1137, 4;
	add.s64 	%rd87, %rd43, %rd86;
	st.shared.u32 	[%rd87], %r1080;
	add.s32 	%r1138, %r52, %r1113;
	mul.wide.u32 	%rd88, %r1138, 4;
	add.s64 	%rd89, %rd43, %rd88;
	st.shared.u32 	[%rd89], %r1083;
	add.s32 	%r1337, %r1337, 8;
	setp.ne.s32 	%p7, %r1337, 32;
	@%p7 bra 	LBB0_11;
// %bb.12:                              // %L8469
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1157, [%rd7];
	ld.shared.u32 	%r1158, [%rd8+12800];
	ld.shared.u32 	%r1159, [%rd8+25600];
	ld.shared.u32 	%r1160, [%rd8+38400];
	ld.shared.u32 	%r1161, [%rd9];
	ld.shared.u32 	%r1162, [%rd10+12800];
	ld.shared.u32 	%r1163, [%rd10+25600];
	ld.shared.u32 	%r1164, [%rd10+38400];
	ld.shared.u32 	%r1165, [%rd11];
	ld.shared.u32 	%r1166, [%rd12+12800];
	ld.shared.u32 	%r1167, [%rd12+25600];
	ld.shared.u32 	%r1168, [%rd12+38400];
	ld.shared.u32 	%r1169, [%rd13];
	ld.shared.u32 	%r1170, [%rd14+12800];
	ld.shared.u32 	%r1171, [%rd14+25600];
	ld.shared.u32 	%r1172, [%rd14+38400];
	cvt.s32.s16 	%r1173, %r1157;
	shr.s32 	%r1174, %r1157, 16;
	cvt.s32.s16 	%r1175, %r1158;
	shr.s32 	%r1176, %r1158, 16;
	cvt.s32.s16 	%r1177, %r1159;
	shr.s32 	%r1178, %r1159, 16;
	cvt.s32.s16 	%r1179, %r1160;
	shr.s32 	%r1180, %r1160, 16;
	cvt.s32.s16 	%r1181, %r1161;
	shr.s32 	%r1182, %r1161, 16;
	cvt.s32.s16 	%r1183, %r1162;
	shr.s32 	%r1184, %r1162, 16;
	cvt.s32.s16 	%r1185, %r1163;
	shr.s32 	%r1186, %r1163, 16;
	cvt.s32.s16 	%r1187, %r1164;
	shr.s32 	%r1188, %r1164, 16;
	cvt.s32.s16 	%r1189, %r1165;
	shr.s32 	%r1190, %r1165, 16;
	cvt.s32.s16 	%r1191, %r1166;
	shr.s32 	%r1192, %r1166, 16;
	cvt.s32.s16 	%r1193, %r1167;
	shr.s32 	%r1194, %r1167, 16;
	cvt.s32.s16 	%r1195, %r1168;
	shr.s32 	%r1196, %r1168, 16;
	cvt.s32.s16 	%r1197, %r1169;
	shr.s32 	%r1198, %r1169, 16;
	cvt.s32.s16 	%r1199, %r1170;
	shr.s32 	%r1200, %r1170, 16;
	cvt.s32.s16 	%r1201, %r1171;
	shr.s32 	%r1202, %r1171, 16;
	cvt.s32.s16 	%r1203, %r1172;
	shr.s32 	%r1204, %r1172, 16;
	add.s32 	%r1205, %r1173, %r53;
	add.s32 	%r1206, %r1205, %r1175;
	add.s32 	%r1207, %r1206, %r1177;
	add.s32 	%r1208, %r1207, %r1179;
	shr.s32 	%r1209, %r1208, %r54;
	add.s32 	%r1210, %r1174, %r53;
	add.s32 	%r1211, %r1210, %r1176;
	add.s32 	%r1212, %r1211, %r1178;
	add.s32 	%r1213, %r1212, %r1180;
	shr.s32 	%r1214, %r1213, %r54;
	add.s32 	%r1215, %r1181, %r53;
	add.s32 	%r1216, %r1215, %r1183;
	add.s32 	%r1217, %r1216, %r1185;
	add.s32 	%r1218, %r1217, %r1187;
	shr.s32 	%r1219, %r1218, %r54;
	add.s32 	%r1220, %r1182, %r53;
	add.s32 	%r1221, %r1220, %r1184;
	add.s32 	%r1222, %r1221, %r1186;
	add.s32 	%r1223, %r1222, %r1188;
	shr.s32 	%r1224, %r1223, %r54;
	add.s32 	%r1225, %r1189, %r53;
	add.s32 	%r1226, %r1225, %r1191;
	add.s32 	%r1227, %r1226, %r1193;
	add.s32 	%r1228, %r1227, %r1195;
	shr.s32 	%r1229, %r1228, %r54;
	add.s32 	%r1230, %r1190, %r53;
	add.s32 	%r1231, %r1230, %r1192;
	add.s32 	%r1232, %r1231, %r1194;
	add.s32 	%r1233, %r1232, %r1196;
	shr.s32 	%r1234, %r1233, %r54;
	add.s32 	%r1235, %r1197, %r53;
	add.s32 	%r1236, %r1235, %r1199;
	add.s32 	%r1237, %r1236, %r1201;
	add.s32 	%r1238, %r1237, %r1203;
	shr.s32 	%r1239, %r1238, %r54;
	add.s32 	%r1240, %r1198, %r53;
	add.s32 	%r1241, %r1240, %r1200;
	add.s32 	%r1242, %r1241, %r1202;
	add.s32 	%r1243, %r1242, %r1204;
	shr.s32 	%r1244, %r1243, %r54;
	max.s32 	%r1245, %r1209, -7;
	min.s32 	%r1144, %r1245, 7;
	max.s32 	%r1246, %r1214, -7;
	min.s32 	%r1151, %r1246, 7;
	max.s32 	%r1247, %r1219, -7;
	min.s32 	%r1143, %r1247, 7;
	max.s32 	%r1248, %r1224, -7;
	min.s32 	%r1150, %r1248, 7;
	max.s32 	%r1249, %r1229, -7;
	min.s32 	%r1141, %r1249, 7;
	max.s32 	%r1250, %r1234, -7;
	min.s32 	%r1148, %r1250, 7;
	max.s32 	%r1251, %r1239, -7;
	min.s32 	%r1140, %r1251, 7;
	max.s32 	%r1252, %r1244, -7;
	min.s32 	%r1147, %r1252, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1139, %r1140, %r1141, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1142, %r1143, %r1144, %r1139;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1146, %r1147, %r1148, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1149, %r1150, %r1151, %r1146;
	// end inline asm
	shl.b32 	%r1156, %r1149, 4;
	// begin inline asm
	lop3.b32 %r1263, %r565, %r1142, %r1156, 202;
	// end inline asm
	setp.eq.s32 	%p8, %r1330, 0;
	selp.b32 	%r1335, %r1263, %r1335, %p8;
	selp.b32 	%r1336, %r1263, %r1336, %p8;
	setp.eq.s32 	%p9, %r1330, 32;
	selp.b32 	%r1331, %r1263, %r1331, %p9;
	selp.b32 	%r1332, %r1263, %r1332, %p9;
	setp.eq.s32 	%p10, %r1330, 64;
	selp.b32 	%r1333, %r1263, %r1333, %p10;
	selp.b32 	%r1334, %r1263, %r1334, %p10;
	add.s32 	%r76, %r1330, 32;
	setp.ne.s32 	%p11, %r1330, 96;
	mov.u32 	%r1330, %r76;
	@%p11 bra 	LBB0_8;
// %bb.13:                              // %L11221
                                        //   in Loop: Header=BB0_7 Depth=1
	setp.eq.s16 	%p12, %rs3, 0;
	// begin inline asm
	prmt.b32 %r1253, %r1335, %r1331, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1257, %r1336, %r1332, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1261, %r1333, %r1263, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1265, %r1334, %r1263, %r226;
	// end inline asm
	selp.b32 	%r1301, %r1257, %r1253, %p12;
	shfl.sync.bfly.b32	%r1302, %r1301, 1, 31, -1;
	selp.b32 	%r1270, %r1253, %r1302, %p12;
	selp.b32 	%r1271, %r1302, %r1257, %p12;
	selp.b32 	%r1303, %r1265, %r1261, %p12;
	shfl.sync.bfly.b32	%r1304, %r1303, 1, 31, -1;
	selp.b32 	%r1278, %r1261, %r1304, %p12;
	selp.b32 	%r1279, %r1304, %r1265, %p12;
	// begin inline asm
	prmt.b32 %r1269, %r1270, %r1271, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1273, %r1270, %r1271, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1277, %r1278, %r1279, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1281, %r1278, %r1279, %r226;
	// end inline asm
	selp.b32 	%r1305, %r1277, %r1269, %p4;
	shfl.sync.bfly.b32	%r1306, %r1305, 2, 31, -1;
	selp.b32 	%r1286, %r1269, %r1306, %p4;
	selp.b32 	%r1287, %r1306, %r1277, %p4;
	selp.b32 	%r1307, %r1281, %r1273, %p4;
	shfl.sync.bfly.b32	%r1308, %r1307, 2, 31, -1;
	selp.b32 	%r1294, %r1273, %r1308, %p4;
	selp.b32 	%r1295, %r1308, %r1281, %p4;
	// begin inline asm
	prmt.b32 %r1285, %r1286, %r1287, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1289, %r1286, %r1287, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1293, %r1294, %r1295, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1297, %r1294, %r1295, %r98;
	// end inline asm
	selp.b32 	%r1309, %r1293, %r1285, %p5;
	shfl.sync.bfly.b32	%r1310, %r1309, 4, 31, -1;
	selp.b32 	%r1311, %r1285, %r1310, %p5;
	selp.b32 	%r1312, %r1310, %r1293, %p5;
	selp.b32 	%r1313, %r1297, %r1289, %p5;
	shfl.sync.bfly.b32	%r1314, %r1313, 4, 31, -1;
	selp.b32 	%r1315, %r1289, %r1314, %p5;
	selp.b32 	%r1316, %r1314, %r1297, %p5;
	selp.b32 	%r1317, %r1315, %r1311, %p12;
	shfl.sync.bfly.b32	%r1318, %r1317, 1, 31, -1;
	selp.b32 	%r1319, %r1311, %r1318, %p12;
	selp.b32 	%r1320, %r1318, %r1315, %p12;
	selp.b32 	%r1321, %r1316, %r1312, %p12;
	shfl.sync.bfly.b32	%r1322, %r1321, 1, 31, -1;
	selp.b32 	%r1323, %r1312, %r1322, %p12;
	selp.b32 	%r1324, %r1322, %r1316, %p12;
	add.s32 	%r1325, %r56, %r1329;
	shr.u32 	%r1326, %r1325, 2;
	add.s32 	%r1327, %r55, %r1326;
	mul.wide.u32 	%rd90, %r1327, 4;
	add.s64 	%rd91, %rd4, %rd90;
	st.global.v4.u32 	[%rd91], {%r1319, %r1323, %r1320, %r1324};
	add.s32 	%r77, %r1329, 128;
	setp.ne.s32 	%p15, %r1329, 1920;
	mov.u32 	%r1329, %r77;
	@%p15 bra 	LBB0_7;
// %bb.14:                              // %L11624
	mov.u32 	%r1328, 0;
	st.global.u32 	[%rd6], %r1328;
	ret;
LBB0_1:                                 // %L8
	mov.u64 	%rd16, exception1;
	cvta.global.u64 	%rd17, %rd16;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd17;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd15;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	// begin inline asm
	exit;
	// end inline asm
LBB0_3:                                 // %L25
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd15;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	// begin inline asm
	exit;
	// end inline asm
LBB0_5:                                 // %L252
	mov.u32 	%r90, 2;
	st.global.u32 	[%rd6], %r90;
	mov.u64 	%rd23, exception925;
	cvta.global.u64 	%rd24, %rd23;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd24;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd15;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
