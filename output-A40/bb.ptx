// PTX CompilerJob of bb(CuDeviceVector{Int8x4, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Int32, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Int32, 1}) in world 33534 for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 7.1
.target sm_86
.address_size 64

	// .globl	_Z13julia_bb_361013CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE // -- Begin function _Z13julia_bb_361013CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[8]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception866[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z13julia_bb_361013CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.visible .entry _Z13julia_bb_361013CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE(
	.param .align 8 .b8 _Z13julia_bb_361013CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0[8],
	.param .align 8 .b8 _Z13julia_bb_361013CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z13julia_bb_361013CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z13julia_bb_361013CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z13julia_bb_361013CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z13julia_bb_361013CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<16>;
	.reg .b16 	%rs<23>;
	.reg .b32 	%r<1328>;
	.reg .b64 	%rd<88>;

// %bb.0:                               // %conversion
	ld.param.u64 	%rd17, [_Z13julia_bb_361013CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r77, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r77, 16511;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L10
	// begin inline asm
	mov.u32 %r78, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r78, 67711;
	@%p2 bra 	LBB0_4;
	bra.uni 	LBB0_3;
LBB0_4:                                 // %L27
	ld.param.u64 	%rd3, [_Z13julia_bb_361013CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3];
	ld.param.u64 	%rd5, [_Z13julia_bb_361013CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %tid.x;
	mad.lo.s32 	%r79, %r3, 768, %r2;
	or.b32  	%r80, %r79, %r4;
	mul.wide.u32 	%rd22, %r80, 4;
	add.s64 	%rd6, %rd5, %rd22;
	mov.u32 	%r81, 1;
	st.global.u32 	[%rd6], %r81;
	shl.b32 	%r82, %r1, 2;
	and.b32  	%r5, %r3, 1;
	mul.lo.s32 	%r83, %r5, 96;
	shr.u32 	%r6, %r3, 1;
	shr.u32 	%r7, %r4, 3;
	or.b32  	%r84, %r82, %r7;
	mul.hi.u32 	%r85, %r84, -1431655765;
	shr.u32 	%r86, %r85, 6;
	mul.lo.s32 	%r87, %r86, 96;
	sub.s32 	%r8, %r84, %r87;
	mad.lo.s32 	%r88, %r6, 192, %r83;
	add.s32 	%r89, %r88, %r8;
	mul.wide.u32 	%rd23, %r89, 4;
	add.s64 	%rd24, %rd3, %rd23;
	ld.global.u32 	%r9, [%rd24];
	add.s32 	%r10, %r9, -4;
	setp.lt.u32 	%p3, %r10, 31;
	@%p3 bra 	LBB0_6;
	bra.uni 	LBB0_5;
LBB0_6:                                 // %L343
	ld.param.u64 	%rd1, [_Z13julia_bb_361013CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1];
	ld.param.u64 	%rd2, [_Z13julia_bb_361013CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2];
	ld.param.u64 	%rd4, [_Z13julia_bb_361013CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4];
	add.s32 	%r348, %r9, -3;
	mul.lo.s32 	%r349, %r5, 24576;
	shl.b32 	%r350, %r4, 4;
	and.b32  	%r11, %r350, 16;
	shl.b32 	%r351, %r1, 6;
	shl.b32 	%r352, %r4, 1;
	and.b32  	%r353, %r352, 12;
	and.b32  	%r354, %r351, 192;
	shr.u32 	%r12, %r4, 2;
	and.b32  	%r355, %r12, 6;
	shr.u32 	%r356, %r1, 2;
	cvt.u16.u32 	%rs4, %r356;
	mul.lo.s16 	%rs5, %rs4, 171;
	shr.u16 	%rs6, %rs5, 10;
	mul.lo.s16 	%rs7, %rs6, 6;
	sub.s16 	%rs8, %rs4, %rs7;
	shl.b16 	%rs9, %rs8, 4;
	cvt.u32.u16 	%r357, %rs9;
	and.b32  	%r358, %r357, 240;
	or.b32  	%r359, %r355, %r358;
	cvt.u16.u32 	%rs10, %r359;
	mul.lo.s16 	%rs11, %rs10, 171;
	shr.u16 	%rs12, %rs11, 14;
	mul.lo.s16 	%rs13, %rs12, 96;
	sub.s16 	%rs14, %rs10, %rs13;
	and.b16  	%rs15, %rs14, 246;
	mul.wide.u16 	%r360, %rs15, 256;
	or.b32  	%r361, %r354, %r11;
	or.b32  	%r362, %r361, %r349;
	mad.lo.s32 	%r363, %r6, 49152, %r362;
	add.s32 	%r364, %r363, %r353;
	add.s32 	%r365, %r364, 1;
	add.s32 	%r366, %r365, %r360;
	mul.wide.u32 	%rd27, %r366, 4;
	add.s64 	%rd28, %rd1, %rd27;
	ld.global.v4.u32 	{%r92, %r93, %r108, %r109}, [%rd28+-4];
	or.b16  	%rs16, %rs10, 8;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 14;
	mul.lo.s16 	%rs19, %rs18, 96;
	sub.s16 	%rs20, %rs16, %rs19;
	and.b16  	%rs21, %rs20, 254;
	mul.wide.u16 	%r367, %rs21, 256;
	add.s32 	%r368, %r365, %r367;
	mul.wide.u32 	%rd29, %r368, 4;
	add.s64 	%rd30, %rd1, %rd29;
	ld.global.v4.u32 	{%r100, %r101, %r116, %r117}, [%rd30+-4];
	or.b32  	%r369, %r363, %r353;
	or.b32  	%r370, %r369, 32;
	add.s32 	%r371, %r370, %r360;
	shl.b32 	%r372, %r371, 2;
	cvt.u64.u32 	%rd31, %r372;
	add.s64 	%rd32, %rd1, %rd31;
	ld.global.v4.u32 	{%r124, %r125, %r140, %r141}, [%rd32];
	add.s32 	%r373, %r370, %r367;
	shl.b32 	%r374, %r373, 2;
	cvt.u64.u32 	%rd33, %r374;
	add.s64 	%rd34, %rd1, %rd33;
	ld.global.v4.u32 	{%r132, %r133, %r148, %r149}, [%rd34];
	or.b32  	%r375, %r12, %r358;
	or.b32  	%r376, %r375, 1;
	mul.hi.u32 	%r377, %r376, -1431655765;
	shr.u32 	%r378, %r377, 6;
	mul.lo.s32 	%r379, %r378, 96;
	sub.s32 	%r380, %r376, %r379;
	shl.b32 	%r381, %r380, 8;
	add.s32 	%r382, %r365, %r381;
	mul.wide.u32 	%rd35, %r382, 4;
	add.s64 	%rd36, %rd1, %rd35;
	ld.global.v4.u32 	{%r156, %r157, %r172, %r173}, [%rd36+-4];
	or.b32  	%r383, %r375, 9;
	mul.hi.u32 	%r384, %r383, -1431655765;
	shr.u32 	%r385, %r384, 6;
	mul.lo.s32 	%r386, %r385, 96;
	sub.s32 	%r387, %r383, %r386;
	shl.b32 	%r388, %r387, 8;
	add.s32 	%r389, %r365, %r388;
	mul.wide.u32 	%rd37, %r389, 4;
	add.s64 	%rd38, %rd1, %rd37;
	ld.global.v4.u32 	{%r164, %r165, %r180, %r181}, [%rd38+-4];
	add.s32 	%r390, %r370, %r381;
	shl.b32 	%r391, %r390, 2;
	cvt.u64.u32 	%rd39, %r391;
	add.s64 	%rd40, %rd1, %rd39;
	ld.global.v4.u32 	{%r188, %r189, %r204, %r205}, [%rd40];
	add.s32 	%r392, %r370, %r388;
	shl.b32 	%r393, %r392, 2;
	cvt.u64.u32 	%rd41, %r393;
	add.s64 	%rd42, %rd1, %rd41;
	ld.global.v4.u32 	{%r196, %r197, %r212, %r213}, [%rd42];
	mov.u32 	%r94, 21520;
	// begin inline asm
	prmt.b32 %r220, %r92, %r93, %r94;
	// end inline asm
	mov.u32 	%r98, 30258;
	// begin inline asm
	prmt.b32 %r221, %r92, %r93, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r228, %r100, %r101, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r229, %r100, %r101, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r236, %r108, %r109, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r237, %r108, %r109, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r244, %r116, %r117, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r245, %r116, %r117, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r252, %r124, %r125, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r253, %r124, %r125, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r260, %r132, %r133, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r261, %r132, %r133, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r268, %r140, %r141, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r269, %r140, %r141, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r276, %r148, %r149, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r277, %r148, %r149, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r284, %r156, %r157, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r285, %r156, %r157, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r292, %r164, %r165, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r293, %r164, %r165, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r300, %r172, %r173, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r301, %r172, %r173, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r308, %r180, %r181, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r309, %r180, %r181, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r316, %r188, %r189, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r317, %r188, %r189, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r324, %r196, %r197, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r325, %r196, %r197, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r332, %r204, %r205, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r333, %r204, %r205, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r340, %r212, %r213, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r341, %r212, %r213, %r98;
	// end inline asm
	mov.u32 	%r222, 25152;
	// begin inline asm
	prmt.b32 %r219, %r220, %r221, %r222;
	// end inline asm
	mov.u32 	%r226, 29521;
	// begin inline asm
	prmt.b32 %r223, %r220, %r221, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r227, %r228, %r229, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r231, %r228, %r229, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r235, %r236, %r237, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r239, %r236, %r237, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r243, %r244, %r245, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r247, %r244, %r245, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r251, %r252, %r253, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r255, %r252, %r253, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r259, %r260, %r261, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r263, %r260, %r261, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r267, %r268, %r269, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r271, %r268, %r269, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r275, %r276, %r277, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r279, %r276, %r277, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r283, %r284, %r285, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r287, %r284, %r285, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r291, %r292, %r293, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r295, %r292, %r293, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r299, %r300, %r301, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r303, %r300, %r301, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r307, %r308, %r309, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r311, %r308, %r309, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r315, %r316, %r317, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r319, %r316, %r317, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r323, %r324, %r325, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r327, %r324, %r325, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r331, %r332, %r333, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r335, %r332, %r333, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r339, %r340, %r341, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r343, %r340, %r341, %r226;
	// end inline asm
	cvt.u16.u32 	%rs22, %r4;
	and.b16  	%rs1, %rs22, 2;
	setp.eq.s16 	%p4, %rs1, 0;
	selp.b32 	%r394, %r251, %r219, %p4;
	shfl.sync.bfly.b32	%r395, %r394, 2, 31, -1;
	selp.b32 	%r396, %r219, %r395, %p4;
	selp.b32 	%r397, %r395, %r251, %p4;
	selp.b32 	%r398, %r259, %r227, %p4;
	shfl.sync.bfly.b32	%r399, %r398, 2, 31, -1;
	selp.b32 	%r400, %r227, %r399, %p4;
	selp.b32 	%r401, %r399, %r259, %p4;
	selp.b32 	%r402, %r255, %r223, %p4;
	shfl.sync.bfly.b32	%r403, %r402, 2, 31, -1;
	selp.b32 	%r404, %r223, %r403, %p4;
	selp.b32 	%r405, %r403, %r255, %p4;
	selp.b32 	%r406, %r263, %r231, %p4;
	shfl.sync.bfly.b32	%r407, %r406, 2, 31, -1;
	selp.b32 	%r408, %r231, %r407, %p4;
	selp.b32 	%r409, %r407, %r263, %p4;
	selp.b32 	%r410, %r267, %r235, %p4;
	shfl.sync.bfly.b32	%r411, %r410, 2, 31, -1;
	selp.b32 	%r412, %r235, %r411, %p4;
	selp.b32 	%r413, %r411, %r267, %p4;
	selp.b32 	%r414, %r275, %r243, %p4;
	shfl.sync.bfly.b32	%r415, %r414, 2, 31, -1;
	selp.b32 	%r416, %r243, %r415, %p4;
	selp.b32 	%r417, %r415, %r275, %p4;
	selp.b32 	%r418, %r271, %r239, %p4;
	shfl.sync.bfly.b32	%r419, %r418, 2, 31, -1;
	selp.b32 	%r420, %r239, %r419, %p4;
	selp.b32 	%r421, %r419, %r271, %p4;
	selp.b32 	%r422, %r279, %r247, %p4;
	shfl.sync.bfly.b32	%r423, %r422, 2, 31, -1;
	selp.b32 	%r424, %r247, %r423, %p4;
	selp.b32 	%r425, %r423, %r279, %p4;
	selp.b32 	%r426, %r315, %r283, %p4;
	shfl.sync.bfly.b32	%r427, %r426, 2, 31, -1;
	selp.b32 	%r428, %r283, %r427, %p4;
	selp.b32 	%r429, %r427, %r315, %p4;
	selp.b32 	%r430, %r323, %r291, %p4;
	shfl.sync.bfly.b32	%r431, %r430, 2, 31, -1;
	selp.b32 	%r432, %r291, %r431, %p4;
	selp.b32 	%r433, %r431, %r323, %p4;
	selp.b32 	%r434, %r319, %r287, %p4;
	shfl.sync.bfly.b32	%r435, %r434, 2, 31, -1;
	selp.b32 	%r436, %r287, %r435, %p4;
	selp.b32 	%r437, %r435, %r319, %p4;
	selp.b32 	%r438, %r327, %r295, %p4;
	shfl.sync.bfly.b32	%r439, %r438, 2, 31, -1;
	selp.b32 	%r440, %r295, %r439, %p4;
	selp.b32 	%r441, %r439, %r327, %p4;
	selp.b32 	%r442, %r331, %r299, %p4;
	shfl.sync.bfly.b32	%r443, %r442, 2, 31, -1;
	selp.b32 	%r444, %r299, %r443, %p4;
	selp.b32 	%r445, %r443, %r331, %p4;
	selp.b32 	%r446, %r339, %r307, %p4;
	shfl.sync.bfly.b32	%r447, %r446, 2, 31, -1;
	selp.b32 	%r448, %r307, %r447, %p4;
	selp.b32 	%r449, %r447, %r339, %p4;
	selp.b32 	%r450, %r335, %r303, %p4;
	shfl.sync.bfly.b32	%r451, %r450, 2, 31, -1;
	selp.b32 	%r452, %r303, %r451, %p4;
	selp.b32 	%r453, %r451, %r335, %p4;
	selp.b32 	%r454, %r343, %r311, %p4;
	shfl.sync.bfly.b32	%r455, %r454, 2, 31, -1;
	selp.b32 	%r456, %r311, %r455, %p4;
	selp.b32 	%r457, %r455, %r343, %p4;
	and.b16  	%rs2, %rs22, 4;
	setp.eq.s16 	%p5, %rs2, 0;
	selp.b32 	%r458, %r428, %r396, %p5;
	shfl.sync.bfly.b32	%r459, %r458, 4, 31, -1;
	selp.b32 	%r561, %r396, %r459, %p5;
	selp.b32 	%r689, %r459, %r428, %p5;
	selp.b32 	%r460, %r432, %r400, %p5;
	shfl.sync.bfly.b32	%r461, %r460, 4, 31, -1;
	selp.b32 	%r823, %r400, %r461, %p5;
	selp.b32 	%r951, %r461, %r432, %p5;
	selp.b32 	%r462, %r436, %r404, %p5;
	shfl.sync.bfly.b32	%r463, %r462, 4, 31, -1;
	selp.b32 	%r567, %r404, %r463, %p5;
	selp.b32 	%r695, %r463, %r436, %p5;
	selp.b32 	%r464, %r440, %r408, %p5;
	shfl.sync.bfly.b32	%r465, %r464, 4, 31, -1;
	selp.b32 	%r829, %r408, %r465, %p5;
	selp.b32 	%r957, %r465, %r440, %p5;
	selp.b32 	%r466, %r444, %r412, %p5;
	shfl.sync.bfly.b32	%r467, %r466, 4, 31, -1;
	selp.b32 	%r593, %r412, %r467, %p5;
	selp.b32 	%r721, %r467, %r444, %p5;
	selp.b32 	%r468, %r448, %r416, %p5;
	shfl.sync.bfly.b32	%r469, %r468, 4, 31, -1;
	selp.b32 	%r855, %r416, %r469, %p5;
	selp.b32 	%r983, %r469, %r448, %p5;
	selp.b32 	%r470, %r452, %r420, %p5;
	shfl.sync.bfly.b32	%r471, %r470, 4, 31, -1;
	selp.b32 	%r599, %r420, %r471, %p5;
	selp.b32 	%r727, %r471, %r452, %p5;
	selp.b32 	%r472, %r456, %r424, %p5;
	shfl.sync.bfly.b32	%r473, %r472, 4, 31, -1;
	selp.b32 	%r861, %r424, %r473, %p5;
	selp.b32 	%r989, %r473, %r456, %p5;
	selp.b32 	%r474, %r429, %r397, %p5;
	shfl.sync.bfly.b32	%r475, %r474, 4, 31, -1;
	selp.b32 	%r625, %r397, %r475, %p5;
	selp.b32 	%r753, %r475, %r429, %p5;
	selp.b32 	%r476, %r433, %r401, %p5;
	shfl.sync.bfly.b32	%r477, %r476, 4, 31, -1;
	selp.b32 	%r887, %r401, %r477, %p5;
	selp.b32 	%r1015, %r477, %r433, %p5;
	selp.b32 	%r478, %r437, %r405, %p5;
	shfl.sync.bfly.b32	%r479, %r478, 4, 31, -1;
	selp.b32 	%r631, %r405, %r479, %p5;
	selp.b32 	%r759, %r479, %r437, %p5;
	selp.b32 	%r480, %r441, %r409, %p5;
	shfl.sync.bfly.b32	%r481, %r480, 4, 31, -1;
	selp.b32 	%r893, %r409, %r481, %p5;
	selp.b32 	%r1021, %r481, %r441, %p5;
	selp.b32 	%r482, %r445, %r413, %p5;
	shfl.sync.bfly.b32	%r483, %r482, 4, 31, -1;
	selp.b32 	%r657, %r413, %r483, %p5;
	selp.b32 	%r785, %r483, %r445, %p5;
	selp.b32 	%r484, %r449, %r417, %p5;
	shfl.sync.bfly.b32	%r485, %r484, 4, 31, -1;
	selp.b32 	%r919, %r417, %r485, %p5;
	selp.b32 	%r1047, %r485, %r449, %p5;
	selp.b32 	%r486, %r453, %r421, %p5;
	shfl.sync.bfly.b32	%r487, %r486, 4, 31, -1;
	selp.b32 	%r663, %r421, %r487, %p5;
	selp.b32 	%r791, %r487, %r453, %p5;
	selp.b32 	%r488, %r457, %r425, %p5;
	shfl.sync.bfly.b32	%r489, %r488, 4, 31, -1;
	selp.b32 	%r925, %r425, %r489, %p5;
	selp.b32 	%r1053, %r489, %r457, %p5;
	shl.b32 	%r490, %r3, 6;
	and.b32  	%r491, %r490, 1920;
	shl.b32 	%r492, %r3, 11;
	and.b32  	%r493, %r492, 2048;
	shl.b32 	%r494, %r4, 2;
	and.b32  	%r495, %r494, 28;
	and.b32  	%r496, %r1, 12;
	or.b32  	%r45, %r496, %r7;
	and.b32  	%r497, %r2, 96;
	or.b32  	%r46, %r495, %r497;
	or.b32  	%r47, %r491, %r493;
	shl.b32 	%r498, %r4, 3;
	and.b32  	%r499, %r498, 24;
	or.b32  	%r48, %r497, %r499;
	and.b32  	%r49, %r352, 6;
	and.b32  	%r500, %r1, 3;
	mul.lo.s32 	%r501, %r500, 3200;
	mul.hi.u32 	%r502, %r375, -1431655765;
	shr.u32 	%r503, %r502, 6;
	mul.lo.s32 	%r504, %r503, 96;
	sub.s32 	%r505, %r375, %r504;
	or.b32  	%r50, %r505, %r501;
	or.b32  	%r506, %r375, 8;
	mul.hi.u32 	%r507, %r506, -1431655765;
	shr.u32 	%r508, %r507, 6;
	mul.lo.s32 	%r509, %r508, 96;
	sub.s32 	%r510, %r506, %r509;
	or.b32  	%r51, %r510, %r501;
	and.b32  	%r511, %r4, 7;
	shl.b32 	%r52, %r81, %r10;
	min.u32 	%r53, %r348, 31;
	and.b16  	%rs3, %rs22, 1;
	shl.b32 	%r513, %r3, 15;
	shl.b32 	%r514, %r4, 5;
	and.b32  	%r54, %r514, 64;
	shl.b32 	%r515, %r8, 20;
	or.b32  	%r55, %r513, %r515;
	mul.lo.s32 	%r516, %r45, 129;
	add.s32 	%r517, %r46, %r516;
	mul.wide.u32 	%rd43, %r517, 4;
	mov.u64 	%rd44, shmem;
	add.s64 	%rd7, %rd44, %rd43;
	cvt.u64.u32 	%rd45, %r516;
	cvt.u64.u32 	%rd46, %r46;
	add.s64 	%rd47, %rd46, %rd45;
	shl.b64 	%rd48, %rd47, 2;
	add.s64 	%rd8, %rd44, %rd48;
	mul.lo.s32 	%r518, %r511, 100;
	add.s32 	%r519, %r518, %r8;
	mul.wide.u32 	%rd49, %r519, 4;
	add.s64 	%rd50, %rd44, 16512;
	add.s64 	%rd9, %rd50, %rd49;
	cvt.u64.u32 	%rd51, %r518;
	cvt.u64.u32 	%rd52, %r8;
	add.s64 	%rd53, %rd52, %rd51;
	shl.b64 	%rd54, %rd53, 2;
	add.s64 	%rd10, %rd50, %rd54;
	add.s32 	%r520, %r518, 800;
	add.s32 	%r521, %r520, %r8;
	mul.wide.u32 	%rd55, %r521, 4;
	add.s64 	%rd11, %rd50, %rd55;
	cvt.u64.u32 	%rd56, %r520;
	add.s64 	%rd57, %rd52, %rd56;
	shl.b64 	%rd58, %rd57, 2;
	add.s64 	%rd12, %rd50, %rd58;
	add.s32 	%r522, %r518, 1600;
	add.s32 	%r523, %r522, %r8;
	mul.wide.u32 	%rd59, %r523, 4;
	add.s64 	%rd13, %rd50, %rd59;
	cvt.u64.u32 	%rd60, %r522;
	add.s64 	%rd61, %rd52, %rd60;
	shl.b64 	%rd62, %rd61, 2;
	add.s64 	%rd14, %rd50, %rd62;
	or.b32  	%r524, %r4, 24;
	mul.lo.s32 	%r525, %r524, 100;
	add.s32 	%r526, %r525, %r8;
	mul.wide.u32 	%rd63, %r526, 4;
	add.s64 	%rd15, %rd50, %rd63;
	cvt.u64.u32 	%rd64, %r525;
	add.s64 	%rd65, %rd52, %rd64;
	shl.b64 	%rd66, %rd65, 2;
	add.s64 	%rd16, %rd50, %rd66;
	and.b32  	%r56, %r498, 32;
	mov.u32 	%r347, 0;
	setp.gt.u32 	%p6, %r1, 15;
	mov.u32 	%r1319, %r347;
LBB0_7:                                 // %L2378
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_8 Depth 2
                                        //       Child Loop BB0_11 Depth 3
	mov.u32 	%r1320, %r347;
	mov.u32 	%r1321, %r347;
	mov.u32 	%r1322, %r347;
	mov.u32 	%r1323, %r347;
	mov.u32 	%r1324, %r347;
	mov.u32 	%r1325, %r347;
	mov.u32 	%r1326, %r347;
LBB0_8:                                 // %L2381
                                        //   Parent Loop BB0_7 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_11 Depth 3
	@%p6 bra 	LBB0_10;
// %bb.9:                               // %L2401
                                        //   in Loop: Header=BB0_8 Depth=2
	add.s32 	%r65, %r1320, %r1319;
	or.b32  	%r528, %r45, %r65;
	shl.b32 	%r529, %r528, 12;
	and.b32  	%r530, %r529, 134148096;
	or.b32  	%r531, %r530, %r47;
	or.b32  	%r532, %r531, %r46;
	shl.b32 	%r533, %r532, 2;
	cvt.u64.u32 	%rd67, %r533;
	add.s64 	%rd68, %rd2, %rd67;
	ld.global.v4.u32 	{%r534, %r535, %r536, %r537}, [%rd68];
	or.b32  	%r538, %r528, 16;
	shl.b32 	%r539, %r538, 12;
	and.b32  	%r540, %r539, 134213632;
	or.b32  	%r541, %r540, %r47;
	or.b32  	%r542, %r541, %r46;
	shl.b32 	%r543, %r542, 2;
	cvt.u64.u32 	%rd69, %r543;
	add.s64 	%rd70, %rd2, %rd69;
	ld.global.v4.u32 	{%r544, %r545, %r546, %r547}, [%rd70];
	st.shared.u32 	[%rd7], %r534;
	st.shared.u32 	[%rd8+4], %r535;
	st.shared.u32 	[%rd8+8], %r536;
	st.shared.u32 	[%rd8+12], %r537;
	and.b32  	%r548, %r538, 31;
	mad.lo.s32 	%r549, %r548, 129, %r46;
	mul.wide.u32 	%rd71, %r549, 4;
	add.s64 	%rd73, %rd44, %rd71;
	st.shared.u32 	[%rd73], %r544;
	st.shared.u32 	[%rd73+4], %r545;
	st.shared.u32 	[%rd73+8], %r546;
	st.shared.u32 	[%rd73+12], %r547;
LBB0_10:                                // %L4057
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	mov.u32 	%r563, 0;
	mov.u32 	%r1327, %r563;
LBB0_11:                                // %L4059
                                        //   Parent Loop BB0_7 Depth=1
                                        //     Parent Loop BB0_8 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r1075, %r1327, %r12;
	mad.lo.s32 	%r1076, %r1075, 129, %r48;
	mul.wide.u32 	%rd74, %r1076, 4;
	add.s64 	%rd76, %rd44, %rd74;
	ld.shared.u32 	%r552, [%rd76];
	mov.u32 	%r553, 134744072;
	mov.u32 	%r554, 252645135;
	// begin inline asm
	lop3.b32 %r551, %r552, %r553, %r554, 40;
	// end inline asm
	add.s32 	%r1077, %r551, 2021161080;
	xor.b32  	%r562, %r1077, -2139062144;
	shr.u32 	%r556, %r552, 4;
	// begin inline asm
	lop3.b32 %r555, %r556, %r553, %r554, 40;
	// end inline asm
	add.s32 	%r1078, %r555, 2021161080;
	xor.b32  	%r568, %r1078, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r559, %r560}, {%r561}, {%r562}, {%r563, %r563};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r565, %r566}, {%r567}, {%r568}, {%r563, %r563};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r571, %r572}, {%r561}, {%r568}, {%r563, %r563};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r577, %r578}, {%r567}, {%r562}, {%r571, %r572};
	// end inline asm
	ld.shared.u32 	%r584, [%rd76+4];
	// begin inline asm
	lop3.b32 %r583, %r584, %r553, %r554, 40;
	// end inline asm
	add.s32 	%r1079, %r583, 2021161080;
	xor.b32  	%r594, %r1079, -2139062144;
	shr.u32 	%r588, %r584, 4;
	// begin inline asm
	lop3.b32 %r587, %r588, %r553, %r554, 40;
	// end inline asm
	add.s32 	%r1080, %r587, 2021161080;
	xor.b32  	%r600, %r1080, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r591, %r592}, {%r593}, {%r594}, {%r559, %r560};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r597, %r598}, {%r599}, {%r600}, {%r565, %r566};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r603, %r604}, {%r593}, {%r600}, {%r577, %r578};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r609, %r610}, {%r599}, {%r594}, {%r603, %r604};
	// end inline asm
	ld.shared.u32 	%r616, [%rd76+8];
	// begin inline asm
	lop3.b32 %r615, %r616, %r553, %r554, 40;
	// end inline asm
	add.s32 	%r1081, %r615, 2021161080;
	xor.b32  	%r626, %r1081, -2139062144;
	shr.u32 	%r620, %r616, 4;
	// begin inline asm
	lop3.b32 %r619, %r620, %r553, %r554, 40;
	// end inline asm
	add.s32 	%r1082, %r619, 2021161080;
	xor.b32  	%r632, %r1082, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r623, %r624}, {%r625}, {%r626}, {%r591, %r592};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r629, %r630}, {%r631}, {%r632}, {%r597, %r598};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r635, %r636}, {%r625}, {%r632}, {%r609, %r610};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r641, %r642}, {%r631}, {%r626}, {%r635, %r636};
	// end inline asm
	ld.shared.u32 	%r648, [%rd76+12];
	// begin inline asm
	lop3.b32 %r647, %r648, %r553, %r554, 40;
	// end inline asm
	add.s32 	%r1083, %r647, 2021161080;
	xor.b32  	%r658, %r1083, -2139062144;
	shr.u32 	%r652, %r648, 4;
	// begin inline asm
	lop3.b32 %r651, %r652, %r553, %r554, 40;
	// end inline asm
	add.s32 	%r1084, %r651, 2021161080;
	xor.b32  	%r664, %r1084, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r655, %r656}, {%r657}, {%r658}, {%r623, %r624};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r661, %r662}, {%r663}, {%r664}, {%r629, %r630};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r667, %r668}, {%r657}, {%r664}, {%r641, %r642};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r673, %r674}, {%r663}, {%r658}, {%r667, %r668};
	// end inline asm
	ld.shared.u32 	%r680, [%rd76+16];
	// begin inline asm
	lop3.b32 %r679, %r680, %r553, %r554, 40;
	// end inline asm
	add.s32 	%r1085, %r679, 2021161080;
	xor.b32  	%r690, %r1085, -2139062144;
	shr.u32 	%r684, %r680, 4;
	// begin inline asm
	lop3.b32 %r683, %r684, %r553, %r554, 40;
	// end inline asm
	add.s32 	%r1086, %r683, 2021161080;
	xor.b32  	%r696, %r1086, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r687, %r688}, {%r689}, {%r690}, {%r655, %r656};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r693, %r694}, {%r695}, {%r696}, {%r661, %r662};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r699, %r700}, {%r689}, {%r696}, {%r673, %r674};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r705, %r706}, {%r695}, {%r690}, {%r699, %r700};
	// end inline asm
	ld.shared.u32 	%r712, [%rd76+20];
	// begin inline asm
	lop3.b32 %r711, %r712, %r553, %r554, 40;
	// end inline asm
	add.s32 	%r1087, %r711, 2021161080;
	xor.b32  	%r722, %r1087, -2139062144;
	shr.u32 	%r716, %r712, 4;
	// begin inline asm
	lop3.b32 %r715, %r716, %r553, %r554, 40;
	// end inline asm
	add.s32 	%r1088, %r715, 2021161080;
	xor.b32  	%r728, %r1088, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r719, %r720}, {%r721}, {%r722}, {%r687, %r688};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r725, %r726}, {%r727}, {%r728}, {%r693, %r694};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r731, %r732}, {%r721}, {%r728}, {%r705, %r706};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r737, %r738}, {%r727}, {%r722}, {%r731, %r732};
	// end inline asm
	ld.shared.u32 	%r744, [%rd76+24];
	// begin inline asm
	lop3.b32 %r743, %r744, %r553, %r554, 40;
	// end inline asm
	add.s32 	%r1089, %r743, 2021161080;
	xor.b32  	%r754, %r1089, -2139062144;
	shr.u32 	%r748, %r744, 4;
	// begin inline asm
	lop3.b32 %r747, %r748, %r553, %r554, 40;
	// end inline asm
	add.s32 	%r1090, %r747, 2021161080;
	xor.b32  	%r760, %r1090, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r751, %r752}, {%r753}, {%r754}, {%r719, %r720};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r757, %r758}, {%r759}, {%r760}, {%r725, %r726};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r763, %r764}, {%r753}, {%r760}, {%r737, %r738};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r769, %r770}, {%r759}, {%r754}, {%r763, %r764};
	// end inline asm
	ld.shared.u32 	%r776, [%rd76+28];
	// begin inline asm
	lop3.b32 %r775, %r776, %r553, %r554, 40;
	// end inline asm
	add.s32 	%r1091, %r775, 2021161080;
	xor.b32  	%r786, %r1091, -2139062144;
	shr.u32 	%r780, %r776, 4;
	// begin inline asm
	lop3.b32 %r779, %r780, %r553, %r554, 40;
	// end inline asm
	add.s32 	%r1092, %r779, 2021161080;
	xor.b32  	%r792, %r1092, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r783, %r784}, {%r785}, {%r786}, {%r751, %r752};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r789, %r790}, {%r791}, {%r792}, {%r757, %r758};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r795, %r796}, {%r785}, {%r792}, {%r769, %r770};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r801, %r802}, {%r791}, {%r786}, {%r795, %r796};
	// end inline asm
	sub.s32 	%r1093, %r783, %r789;
	add.s32 	%r1094, %r1093, 4;
	shr.s32 	%r809, %r1094, 3;
	add.s32 	%r1095, %r801, 4;
	shr.s32 	%r808, %r1095, 3;
	sub.s32 	%r1096, %r784, %r790;
	add.s32 	%r1097, %r1096, 4;
	shr.s32 	%r812, %r1097, 3;
	add.s32 	%r1098, %r802, 4;
	shr.s32 	%r811, %r1098, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r807, %r808, %r809;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r810, %r811, %r812;
	// end inline asm
	or.b32  	%r1099, %r49, %r1327;
	mul.lo.s32 	%r1100, %r1099, 100;
	add.s32 	%r1101, %r50, %r1100;
	mul.wide.u32 	%rd77, %r1101, 4;
	add.s64 	%rd79, %rd50, %rd77;
	st.shared.u32 	[%rd79], %r807;
	add.s32 	%r1102, %r1100, 100;
	add.s32 	%r1103, %r50, %r1102;
	mul.wide.u32 	%rd80, %r1103, 4;
	add.s64 	%rd81, %rd50, %rd80;
	st.shared.u32 	[%rd81], %r810;
	ld.shared.u32 	%r814, [%rd76];
	// begin inline asm
	lop3.b32 %r813, %r814, %r553, %r554, 40;
	// end inline asm
	add.s32 	%r1104, %r813, 2021161080;
	xor.b32  	%r824, %r1104, -2139062144;
	shr.u32 	%r818, %r814, 4;
	// begin inline asm
	lop3.b32 %r817, %r818, %r553, %r554, 40;
	// end inline asm
	add.s32 	%r1105, %r817, 2021161080;
	xor.b32  	%r830, %r1105, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r821, %r822}, {%r823}, {%r824}, {%r563, %r563};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r827, %r828}, {%r829}, {%r830}, {%r563, %r563};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r833, %r834}, {%r823}, {%r830}, {%r563, %r563};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r839, %r840}, {%r829}, {%r824}, {%r833, %r834};
	// end inline asm
	ld.shared.u32 	%r846, [%rd76+4];
	// begin inline asm
	lop3.b32 %r845, %r846, %r553, %r554, 40;
	// end inline asm
	add.s32 	%r1106, %r845, 2021161080;
	xor.b32  	%r856, %r1106, -2139062144;
	shr.u32 	%r850, %r846, 4;
	// begin inline asm
	lop3.b32 %r849, %r850, %r553, %r554, 40;
	// end inline asm
	add.s32 	%r1107, %r849, 2021161080;
	xor.b32  	%r862, %r1107, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r853, %r854}, {%r855}, {%r856}, {%r821, %r822};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r859, %r860}, {%r861}, {%r862}, {%r827, %r828};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r865, %r866}, {%r855}, {%r862}, {%r839, %r840};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r871, %r872}, {%r861}, {%r856}, {%r865, %r866};
	// end inline asm
	ld.shared.u32 	%r878, [%rd76+8];
	// begin inline asm
	lop3.b32 %r877, %r878, %r553, %r554, 40;
	// end inline asm
	add.s32 	%r1108, %r877, 2021161080;
	xor.b32  	%r888, %r1108, -2139062144;
	shr.u32 	%r882, %r878, 4;
	// begin inline asm
	lop3.b32 %r881, %r882, %r553, %r554, 40;
	// end inline asm
	add.s32 	%r1109, %r881, 2021161080;
	xor.b32  	%r894, %r1109, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r885, %r886}, {%r887}, {%r888}, {%r853, %r854};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r891, %r892}, {%r893}, {%r894}, {%r859, %r860};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r897, %r898}, {%r887}, {%r894}, {%r871, %r872};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r903, %r904}, {%r893}, {%r888}, {%r897, %r898};
	// end inline asm
	ld.shared.u32 	%r910, [%rd76+12];
	// begin inline asm
	lop3.b32 %r909, %r910, %r553, %r554, 40;
	// end inline asm
	add.s32 	%r1110, %r909, 2021161080;
	xor.b32  	%r920, %r1110, -2139062144;
	shr.u32 	%r914, %r910, 4;
	// begin inline asm
	lop3.b32 %r913, %r914, %r553, %r554, 40;
	// end inline asm
	add.s32 	%r1111, %r913, 2021161080;
	xor.b32  	%r926, %r1111, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r917, %r918}, {%r919}, {%r920}, {%r885, %r886};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r923, %r924}, {%r925}, {%r926}, {%r891, %r892};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r929, %r930}, {%r919}, {%r926}, {%r903, %r904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r935, %r936}, {%r925}, {%r920}, {%r929, %r930};
	// end inline asm
	ld.shared.u32 	%r942, [%rd76+16];
	// begin inline asm
	lop3.b32 %r941, %r942, %r553, %r554, 40;
	// end inline asm
	add.s32 	%r1112, %r941, 2021161080;
	xor.b32  	%r952, %r1112, -2139062144;
	shr.u32 	%r946, %r942, 4;
	// begin inline asm
	lop3.b32 %r945, %r946, %r553, %r554, 40;
	// end inline asm
	add.s32 	%r1113, %r945, 2021161080;
	xor.b32  	%r958, %r1113, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r949, %r950}, {%r951}, {%r952}, {%r917, %r918};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r955, %r956}, {%r957}, {%r958}, {%r923, %r924};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r961, %r962}, {%r951}, {%r958}, {%r935, %r936};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r967, %r968}, {%r957}, {%r952}, {%r961, %r962};
	// end inline asm
	ld.shared.u32 	%r974, [%rd76+20];
	// begin inline asm
	lop3.b32 %r973, %r974, %r553, %r554, 40;
	// end inline asm
	add.s32 	%r1114, %r973, 2021161080;
	xor.b32  	%r984, %r1114, -2139062144;
	shr.u32 	%r978, %r974, 4;
	// begin inline asm
	lop3.b32 %r977, %r978, %r553, %r554, 40;
	// end inline asm
	add.s32 	%r1115, %r977, 2021161080;
	xor.b32  	%r990, %r1115, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r981, %r982}, {%r983}, {%r984}, {%r949, %r950};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r987, %r988}, {%r989}, {%r990}, {%r955, %r956};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r993, %r994}, {%r983}, {%r990}, {%r967, %r968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r999, %r1000}, {%r989}, {%r984}, {%r993, %r994};
	// end inline asm
	ld.shared.u32 	%r1006, [%rd76+24];
	// begin inline asm
	lop3.b32 %r1005, %r1006, %r553, %r554, 40;
	// end inline asm
	add.s32 	%r1116, %r1005, 2021161080;
	xor.b32  	%r1016, %r1116, -2139062144;
	shr.u32 	%r1010, %r1006, 4;
	// begin inline asm
	lop3.b32 %r1009, %r1010, %r553, %r554, 40;
	// end inline asm
	add.s32 	%r1117, %r1009, 2021161080;
	xor.b32  	%r1022, %r1117, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1013, %r1014}, {%r1015}, {%r1016}, {%r981, %r982};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1019, %r1020}, {%r1021}, {%r1022}, {%r987, %r988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1025, %r1026}, {%r1015}, {%r1022}, {%r999, %r1000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1031, %r1032}, {%r1021}, {%r1016}, {%r1025, %r1026};
	// end inline asm
	ld.shared.u32 	%r1038, [%rd76+28];
	// begin inline asm
	lop3.b32 %r1037, %r1038, %r553, %r554, 40;
	// end inline asm
	add.s32 	%r1118, %r1037, 2021161080;
	xor.b32  	%r1048, %r1118, -2139062144;
	shr.u32 	%r1042, %r1038, 4;
	// begin inline asm
	lop3.b32 %r1041, %r1042, %r553, %r554, 40;
	// end inline asm
	add.s32 	%r1119, %r1041, 2021161080;
	xor.b32  	%r1054, %r1119, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1045, %r1046}, {%r1047}, {%r1048}, {%r1013, %r1014};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1051, %r1052}, {%r1053}, {%r1054}, {%r1019, %r1020};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1057, %r1058}, {%r1047}, {%r1054}, {%r1031, %r1032};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1063, %r1064}, {%r1053}, {%r1048}, {%r1057, %r1058};
	// end inline asm
	sub.s32 	%r1120, %r1045, %r1051;
	add.s32 	%r1121, %r1120, 4;
	shr.s32 	%r1071, %r1121, 3;
	add.s32 	%r1122, %r1063, 4;
	shr.s32 	%r1070, %r1122, 3;
	sub.s32 	%r1123, %r1046, %r1052;
	add.s32 	%r1124, %r1123, 4;
	shr.s32 	%r1074, %r1124, 3;
	add.s32 	%r1125, %r1064, 4;
	shr.s32 	%r1073, %r1125, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1069, %r1070, %r1071;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1072, %r1073, %r1074;
	// end inline asm
	add.s32 	%r1126, %r51, %r1100;
	mul.wide.u32 	%rd82, %r1126, 4;
	add.s64 	%rd83, %rd50, %rd82;
	st.shared.u32 	[%rd83], %r1069;
	add.s32 	%r1127, %r51, %r1102;
	mul.wide.u32 	%rd84, %r1127, 4;
	add.s64 	%rd85, %rd50, %rd84;
	st.shared.u32 	[%rd85], %r1072;
	add.s32 	%r1327, %r1327, 8;
	setp.ne.s32 	%p7, %r1327, 32;
	@%p7 bra 	LBB0_11;
// %bb.12:                              // %L7798
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1146, [%rd9];
	ld.shared.u32 	%r1147, [%rd10+12800];
	ld.shared.u32 	%r1148, [%rd10+25600];
	ld.shared.u32 	%r1149, [%rd10+38400];
	ld.shared.u32 	%r1150, [%rd11];
	ld.shared.u32 	%r1151, [%rd12+12800];
	ld.shared.u32 	%r1152, [%rd12+25600];
	ld.shared.u32 	%r1153, [%rd12+38400];
	ld.shared.u32 	%r1154, [%rd13];
	ld.shared.u32 	%r1155, [%rd14+12800];
	ld.shared.u32 	%r1156, [%rd14+25600];
	ld.shared.u32 	%r1157, [%rd14+38400];
	ld.shared.u32 	%r1158, [%rd15];
	ld.shared.u32 	%r1159, [%rd16+12800];
	ld.shared.u32 	%r1160, [%rd16+25600];
	ld.shared.u32 	%r1161, [%rd16+38400];
	cvt.s32.s16 	%r1162, %r1146;
	shr.s32 	%r1163, %r1146, 16;
	cvt.s32.s16 	%r1164, %r1147;
	shr.s32 	%r1165, %r1147, 16;
	cvt.s32.s16 	%r1166, %r1148;
	shr.s32 	%r1167, %r1148, 16;
	cvt.s32.s16 	%r1168, %r1149;
	shr.s32 	%r1169, %r1149, 16;
	cvt.s32.s16 	%r1170, %r1150;
	shr.s32 	%r1171, %r1150, 16;
	cvt.s32.s16 	%r1172, %r1151;
	shr.s32 	%r1173, %r1151, 16;
	cvt.s32.s16 	%r1174, %r1152;
	shr.s32 	%r1175, %r1152, 16;
	cvt.s32.s16 	%r1176, %r1153;
	shr.s32 	%r1177, %r1153, 16;
	cvt.s32.s16 	%r1178, %r1154;
	shr.s32 	%r1179, %r1154, 16;
	cvt.s32.s16 	%r1180, %r1155;
	shr.s32 	%r1181, %r1155, 16;
	cvt.s32.s16 	%r1182, %r1156;
	shr.s32 	%r1183, %r1156, 16;
	cvt.s32.s16 	%r1184, %r1157;
	shr.s32 	%r1185, %r1157, 16;
	cvt.s32.s16 	%r1186, %r1158;
	shr.s32 	%r1187, %r1158, 16;
	cvt.s32.s16 	%r1188, %r1159;
	shr.s32 	%r1189, %r1159, 16;
	cvt.s32.s16 	%r1190, %r1160;
	shr.s32 	%r1191, %r1160, 16;
	cvt.s32.s16 	%r1192, %r1161;
	shr.s32 	%r1193, %r1161, 16;
	add.s32 	%r1194, %r1162, %r52;
	add.s32 	%r1195, %r1194, %r1164;
	add.s32 	%r1196, %r1195, %r1166;
	add.s32 	%r1197, %r1196, %r1168;
	shr.s32 	%r1198, %r1197, %r53;
	add.s32 	%r1199, %r1163, %r52;
	add.s32 	%r1200, %r1199, %r1165;
	add.s32 	%r1201, %r1200, %r1167;
	add.s32 	%r1202, %r1201, %r1169;
	shr.s32 	%r1203, %r1202, %r53;
	add.s32 	%r1204, %r1170, %r52;
	add.s32 	%r1205, %r1204, %r1172;
	add.s32 	%r1206, %r1205, %r1174;
	add.s32 	%r1207, %r1206, %r1176;
	shr.s32 	%r1208, %r1207, %r53;
	add.s32 	%r1209, %r1171, %r52;
	add.s32 	%r1210, %r1209, %r1173;
	add.s32 	%r1211, %r1210, %r1175;
	add.s32 	%r1212, %r1211, %r1177;
	shr.s32 	%r1213, %r1212, %r53;
	add.s32 	%r1214, %r1178, %r52;
	add.s32 	%r1215, %r1214, %r1180;
	add.s32 	%r1216, %r1215, %r1182;
	add.s32 	%r1217, %r1216, %r1184;
	shr.s32 	%r1218, %r1217, %r53;
	add.s32 	%r1219, %r1179, %r52;
	add.s32 	%r1220, %r1219, %r1181;
	add.s32 	%r1221, %r1220, %r1183;
	add.s32 	%r1222, %r1221, %r1185;
	shr.s32 	%r1223, %r1222, %r53;
	add.s32 	%r1224, %r1186, %r52;
	add.s32 	%r1225, %r1224, %r1188;
	add.s32 	%r1226, %r1225, %r1190;
	add.s32 	%r1227, %r1226, %r1192;
	shr.s32 	%r1228, %r1227, %r53;
	add.s32 	%r1229, %r1187, %r52;
	add.s32 	%r1230, %r1229, %r1189;
	add.s32 	%r1231, %r1230, %r1191;
	add.s32 	%r1232, %r1231, %r1193;
	shr.s32 	%r1233, %r1232, %r53;
	max.s32 	%r1234, %r1198, -7;
	min.s32 	%r1133, %r1234, 7;
	max.s32 	%r1235, %r1203, -7;
	min.s32 	%r1140, %r1235, 7;
	max.s32 	%r1236, %r1208, -7;
	min.s32 	%r1132, %r1236, 7;
	max.s32 	%r1237, %r1213, -7;
	min.s32 	%r1139, %r1237, 7;
	max.s32 	%r1238, %r1218, -7;
	min.s32 	%r1130, %r1238, 7;
	max.s32 	%r1239, %r1223, -7;
	min.s32 	%r1137, %r1239, 7;
	max.s32 	%r1240, %r1228, -7;
	min.s32 	%r1129, %r1240, 7;
	max.s32 	%r1241, %r1233, -7;
	min.s32 	%r1136, %r1241, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1128, %r1129, %r1130, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1131, %r1132, %r1133, %r1128;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1135, %r1136, %r1137, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1138, %r1139, %r1140, %r1135;
	// end inline asm
	shl.b32 	%r1145, %r1138, 4;
	// begin inline asm
	lop3.b32 %r1252, %r554, %r1131, %r1145, 202;
	// end inline asm
	setp.eq.s32 	%p8, %r1320, 0;
	selp.b32 	%r1325, %r1252, %r1325, %p8;
	selp.b32 	%r1326, %r1252, %r1326, %p8;
	setp.eq.s32 	%p9, %r1320, 32;
	selp.b32 	%r1321, %r1252, %r1321, %p9;
	selp.b32 	%r1322, %r1252, %r1322, %p9;
	setp.eq.s32 	%p10, %r1320, 64;
	selp.b32 	%r1323, %r1252, %r1323, %p10;
	selp.b32 	%r1324, %r1252, %r1324, %p10;
	add.s32 	%r75, %r1320, 32;
	setp.ne.s32 	%p11, %r1320, 96;
	mov.u32 	%r1320, %r75;
	@%p11 bra 	LBB0_8;
// %bb.13:                              // %L10198
                                        //   in Loop: Header=BB0_7 Depth=1
	setp.eq.s16 	%p12, %rs3, 0;
	// begin inline asm
	prmt.b32 %r1242, %r1325, %r1321, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1246, %r1326, %r1322, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1250, %r1323, %r1252, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1254, %r1324, %r1252, %r226;
	// end inline asm
	selp.b32 	%r1290, %r1246, %r1242, %p12;
	shfl.sync.bfly.b32	%r1291, %r1290, 1, 31, -1;
	selp.b32 	%r1259, %r1242, %r1291, %p12;
	selp.b32 	%r1260, %r1291, %r1246, %p12;
	selp.b32 	%r1292, %r1254, %r1250, %p12;
	shfl.sync.bfly.b32	%r1293, %r1292, 1, 31, -1;
	selp.b32 	%r1267, %r1250, %r1293, %p12;
	selp.b32 	%r1268, %r1293, %r1254, %p12;
	// begin inline asm
	prmt.b32 %r1258, %r1259, %r1260, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1262, %r1259, %r1260, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1266, %r1267, %r1268, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1270, %r1267, %r1268, %r226;
	// end inline asm
	selp.b32 	%r1294, %r1266, %r1258, %p4;
	shfl.sync.bfly.b32	%r1295, %r1294, 2, 31, -1;
	selp.b32 	%r1275, %r1258, %r1295, %p4;
	selp.b32 	%r1276, %r1295, %r1266, %p4;
	selp.b32 	%r1296, %r1270, %r1262, %p4;
	shfl.sync.bfly.b32	%r1297, %r1296, 2, 31, -1;
	selp.b32 	%r1283, %r1262, %r1297, %p4;
	selp.b32 	%r1284, %r1297, %r1270, %p4;
	// begin inline asm
	prmt.b32 %r1274, %r1275, %r1276, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1278, %r1275, %r1276, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1282, %r1283, %r1284, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1286, %r1283, %r1284, %r98;
	// end inline asm
	selp.b32 	%r1298, %r1282, %r1274, %p5;
	shfl.sync.bfly.b32	%r1299, %r1298, 4, 31, -1;
	selp.b32 	%r1300, %r1274, %r1299, %p5;
	selp.b32 	%r1301, %r1299, %r1282, %p5;
	selp.b32 	%r1302, %r1286, %r1278, %p5;
	shfl.sync.bfly.b32	%r1303, %r1302, 4, 31, -1;
	selp.b32 	%r1304, %r1278, %r1303, %p5;
	selp.b32 	%r1305, %r1303, %r1286, %p5;
	selp.b32 	%r1306, %r1304, %r1300, %p12;
	shfl.sync.bfly.b32	%r1307, %r1306, 1, 31, -1;
	selp.b32 	%r1308, %r1300, %r1307, %p12;
	selp.b32 	%r1309, %r1307, %r1304, %p12;
	selp.b32 	%r1310, %r1305, %r1301, %p12;
	shfl.sync.bfly.b32	%r1311, %r1310, 1, 31, -1;
	selp.b32 	%r1312, %r1301, %r1311, %p12;
	selp.b32 	%r1313, %r1311, %r1305, %p12;
	or.b32  	%r1314, %r1319, %r54;
	or.b32  	%r1315, %r1314, %r11;
	or.b32  	%r1316, %r1315, %r56;
	add.s32 	%r1317, %r1316, %r55;
	cvt.u64.u32 	%rd86, %r1317;
	add.s64 	%rd87, %rd4, %rd86;
	st.global.v4.u32 	[%rd87], {%r1308, %r1312, %r1309, %r1313};
	add.s32 	%r76, %r1319, 128;
	setp.ne.s32 	%p15, %r1319, 32640;
	mov.u32 	%r1319, %r76;
	@%p15 bra 	LBB0_7;
// %bb.14:                              // %L10578
	mov.u32 	%r1318, 0;
	st.global.u32 	[%rd6], %r1318;
	ret;
LBB0_1:                                 // %L8
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd17;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	// begin inline asm
	exit;
	// end inline asm
LBB0_3:                                 // %L25
	mov.u64 	%rd20, exception1;
	cvta.global.u64 	%rd21, %rd20;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd21;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd17;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	// begin inline asm
	exit;
	// end inline asm
LBB0_5:                                 // %L251
	mov.u32 	%r90, 2;
	st.global.u32 	[%rd6], %r90;
	mov.u64 	%rd25, exception866;
	cvta.global.u64 	%rd26, %rd25;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd26;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd17;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
