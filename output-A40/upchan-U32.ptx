// PTX CompilerJob of upchan(CuDeviceVector{Int32, 1}, CuDeviceVector{Float16x2, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Int32, 1}) in world 33600 for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 7.1
.target sm_86
.address_size 64

	// .globl	_Z17julia_upchan_405313CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE // -- Begin function _Z17julia_upchan_405313CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.func julia_AssertionError_6573
()
.noreturn
{
	trap;
}
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[8]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception1273[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z17julia_upchan_405313CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.visible .entry _Z17julia_upchan_405313CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE(
	.param .align 8 .b8 _Z17julia_upchan_405313CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0[8],
	.param .align 8 .b8 _Z17julia_upchan_405313CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z17julia_upchan_405313CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z17julia_upchan_405313CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z17julia_upchan_405313CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z17julia_upchan_405313CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<226>;
	.reg .b16 	%rs<297>;
	.reg .b32 	%r<2458>;
	.reg .f32 	%f<937>;
	.reg .b64 	%rd<132>;

// %bb.0:                               // %conversion
	ld.param.u64 	%rd53, [_Z17julia_upchan_405313CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r142, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r142, 67839;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L10
	ld.param.u64 	%rd58, [_Z17julia_upchan_405313CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5];
	ld.param.u64 	%rd54, [_Z17julia_upchan_405313CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %ctaid.x;
	shl.b32 	%r5, %r4, 9;
	or.b32  	%r143, %r3, %r1;
	or.b32  	%r144, %r143, %r5;
	mul.wide.u32 	%rd64, %r144, 4;
	add.s64 	%rd4, %rd58, %rd64;
	mov.u32 	%r145, 1;
	st.global.u32 	[%rd4], %r145;
	ld.global.u32 	%r6, [%rd54];
	and.b32  	%r146, %r6, -32513;
	setp.eq.s32 	%p2, %r146, 0;
	@%p2 bra 	LBB0_4;
	bra.uni 	LBB0_3;
LBB0_4:                                 // %pass71
	bfe.u32 	%r102, %r1, 1, 1;
	and.b32  	%r103, %r1, 1;
	bfe.u32 	%r105, %r1, 2, 1;
	shl.b32 	%r153, %r105, 1;
	shl.b32 	%r154, %r103, 2;
	shl.b32 	%r155, %r102, 3;
	or.b32  	%r156, %r154, %r155;
	or.b32  	%r157, %r153, %r156;
	shr.u32 	%r106, %r1, 4;
	or.b32  	%r107, %r106, %r157;
	or.b32  	%r108, %r107, 16;
	mov.f32 	%f184, 0f40000000;
	mov.f32 	%f185, 0f42FE0000;
	div.approx.f32 	%f145, %f185, %f184;
	cvt.rn.f32.s32 	%f186, %r107;
	sub.f32 	%f187, %f186, %f145;
	mov.f32 	%f188, 0f43010000;
	div.approx.f32 	%f189, %f187, %f188;
	abs.f32 	%f190, %f189;
	setp.gt.f32 	%p3, %f190, 0f4B800000;
	mul.f32 	%f191, %f189, 0f00000000;
	selp.f32 	%f192, %f191, %f189, %p3;
	add.f32 	%f193, %f192, %f192;
	mov.b32 	%r158, %f193;
	and.b32  	%r159, %r158, -2147483648;
	or.b32  	%r160, %r159, 1056964608;
	mov.b32 	%f194, %r160;
	add.f32 	%f195, %f193, %f194;
	cvt.rzi.f32.f32 	%f196, %f195;
	abs.f32 	%f197, %f193;
	setp.gt.f32 	%p4, %f197, 0f4B000000;
	selp.f32 	%f198, %f193, %f196, %p4;
	cvt.rzi.f32.f32 	%f199, %f193;
	setp.lt.f32 	%p5, %f197, 0f3F000000;
	selp.f32 	%f200, %f199, %f198, %p5;
	fma.rn.f32 	%f201, %f200, 0fBF000000, %f192;
	mul.f32 	%f202, %f201, %f201;
	mov.f32 	%f216, 0f42000000;
	div.approx.f32 	%f147, %f187, %f216;
	setp.ne.f32 	%p8, %f147, 0f00000000;
	mov.f32 	%f904, 0f3F800000;
	mov.f32 	%f897, %f904;
	@%p8 bra 	LBB0_5;
	bra.uni 	LBB0_6;
LBB0_5:                                 // %L443
	sin.approx.f32 	%f217, %f147;
	div.approx.f32 	%f897, %f217, %f147;
LBB0_6:                                 // %L446
	cvt.rzi.s32.f32 	%r161, %f200;
	fma.rn.f32 	%f203, %f202, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f204, %f202, 0f3E684E12, 0fBFAAD2E0;
	cvt.rn.f32.s32 	%f220, %r108;
	sub.f32 	%f221, %f220, %f145;
	div.approx.f32 	%f223, %f221, %f188;
	abs.f32 	%f224, %f223;
	setp.gt.f32 	%p9, %f224, 0f4B800000;
	mul.f32 	%f225, %f223, 0f00000000;
	selp.f32 	%f226, %f225, %f223, %p9;
	add.f32 	%f227, %f226, %f226;
	mov.b32 	%r165, %f227;
	and.b32  	%r166, %r165, -2147483648;
	or.b32  	%r167, %r166, 1056964608;
	mov.b32 	%f228, %r167;
	add.f32 	%f229, %f227, %f228;
	cvt.rzi.f32.f32 	%f230, %f229;
	abs.f32 	%f231, %f227;
	setp.gt.f32 	%p10, %f231, 0f4B000000;
	selp.f32 	%f232, %f227, %f230, %p10;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p11, %f231, 0f3F000000;
	selp.f32 	%f234, %f233, %f232, %p11;
	cvt.rzi.s32.f32 	%r168, %f234;
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f226;
	mul.f32 	%f236, %f235, %f235;
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	div.approx.f32 	%f5, %f221, %f216;
	setp.eq.f32 	%p14, %f5, 0f00000000;
	mov.f32 	%f898, %f904;
	@%p14 bra 	LBB0_8;
// %bb.7:                               // %L463
	sin.approx.f32 	%f251, %f5;
	div.approx.f32 	%f898, %f251, %f5;
LBB0_8:                                 // %L466
	add.s32 	%r162, %r161, 1;
	fma.rn.f32 	%f205, %f203, %f202, 0fC0A55DF6;
	fma.rn.f32 	%f206, %f204, %f202, 0f4081E0CF;
	fma.rn.f32 	%f207, %f202, %f201, 0f00000000;
	add.s32 	%r169, %r168, 1;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	or.b32  	%r175, %r107, 32;
	or.b32  	%r8, %r107, 48;
	cvt.rn.f32.s32 	%f255, %r175;
	sub.f32 	%f256, %f255, %f145;
	div.approx.f32 	%f258, %f256, %f188;
	abs.f32 	%f259, %f258;
	setp.gt.f32 	%p15, %f259, 0f4B800000;
	mul.f32 	%f260, %f258, 0f00000000;
	selp.f32 	%f261, %f260, %f258, %p15;
	add.f32 	%f262, %f261, %f261;
	mov.b32 	%r176, %f262;
	and.b32  	%r177, %r176, -2147483648;
	or.b32  	%r178, %r177, 1056964608;
	mov.b32 	%f263, %r178;
	add.f32 	%f264, %f262, %f263;
	cvt.rzi.f32.f32 	%f265, %f264;
	abs.f32 	%f266, %f262;
	setp.gt.f32 	%p16, %f266, 0f4B000000;
	selp.f32 	%f267, %f262, %f265, %p16;
	cvt.rzi.f32.f32 	%f268, %f262;
	setp.lt.f32 	%p17, %f266, 0f3F000000;
	selp.f32 	%f269, %f268, %f267, %p17;
	cvt.rzi.s32.f32 	%r179, %f269;
	fma.rn.f32 	%f270, %f269, 0fBF000000, %f261;
	add.s32 	%r180, %r179, 1;
	mul.f32 	%f271, %f270, %f270;
	fma.rn.f32 	%f272, %f271, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f273, %f271, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f274, %f272, %f271, 0fC0A55DF6;
	fma.rn.f32 	%f275, %f273, %f271, 0f4081E0CF;
	fma.rn.f32 	%f276, %f271, %f270, 0f00000000;
	div.approx.f32 	%f9, %f256, %f216;
	setp.eq.f32 	%p20, %f9, 0f00000000;
	mov.f32 	%f899, %f904;
	@%p20 bra 	LBB0_10;
// %bb.9:                               // %L544
	sin.approx.f32 	%f286, %f9;
	div.approx.f32 	%f899, %f286, %f9;
LBB0_10:                                // %L547
	fma.rn.f32 	%f208, %f206, %f202, 0fC09DE9E6;
	fma.rn.f32 	%f209, %f205, %f207, 0f00000000;
	and.b32  	%r163, %r162, 1;
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r170, %r169, 1;
	fma.rn.f32 	%f277, %f275, %f271, 0fC09DE9E6;
	fma.rn.f32 	%f278, %f274, %f276, 0f00000000;
	and.b32  	%r181, %r180, 1;
	cvt.rn.f32.s32 	%f289, %r8;
	sub.f32 	%f290, %f289, %f145;
	div.approx.f32 	%f292, %f290, %f188;
	abs.f32 	%f293, %f292;
	setp.gt.f32 	%p21, %f293, 0f4B800000;
	mul.f32 	%f294, %f292, 0f00000000;
	selp.f32 	%f295, %f294, %f292, %p21;
	add.f32 	%f296, %f295, %f295;
	mov.b32 	%r183, %f296;
	and.b32  	%r184, %r183, -2147483648;
	or.b32  	%r185, %r184, 1056964608;
	mov.b32 	%f297, %r185;
	add.f32 	%f298, %f296, %f297;
	cvt.rzi.f32.f32 	%f299, %f298;
	abs.f32 	%f300, %f296;
	setp.gt.f32 	%p22, %f300, 0f4B000000;
	selp.f32 	%f301, %f296, %f299, %p22;
	cvt.rzi.f32.f32 	%f302, %f296;
	setp.lt.f32 	%p23, %f300, 0f3F000000;
	selp.f32 	%f303, %f302, %f301, %p23;
	cvt.rzi.s32.f32 	%r186, %f303;
	fma.rn.f32 	%f304, %f303, 0fBF000000, %f295;
	add.s32 	%r187, %r186, 1;
	mul.f32 	%f305, %f304, %f304;
	fma.rn.f32 	%f306, %f305, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f307, %f305, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f308, %f306, %f305, 0fC0A55DF6;
	fma.rn.f32 	%f309, %f307, %f305, 0f4081E0CF;
	fma.rn.f32 	%f310, %f305, %f304, 0f00000000;
	fma.rn.f32 	%f311, %f309, %f305, 0fC09DE9E6;
	fma.rn.f32 	%f312, %f308, %f310, 0f00000000;
	and.b32  	%r188, %r187, 1;
	div.approx.f32 	%f14, %f290, %f216;
	setp.eq.f32 	%p26, %f14, 0f00000000;
	mov.f32 	%f900, %f904;
	@%p26 bra 	LBB0_12;
// %bb.11:                              // %L564
	sin.approx.f32 	%f320, %f14;
	div.approx.f32 	%f900, %f320, %f14;
LBB0_12:                                // %L567
	fma.rn.f32 	%f210, %f208, %f202, 0f3F800000;
	fma.rn.f32 	%f211, %f201, 0f40490FDB, %f209;
	setp.eq.b32 	%p6, %r163, 1;
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p12, %r170, 1;
	fma.rn.f32 	%f279, %f277, %f271, 0f3F800000;
	fma.rn.f32 	%f280, %f270, 0f40490FDB, %f278;
	setp.eq.b32 	%p18, %r181, 1;
	fma.rn.f32 	%f313, %f311, %f305, 0f3F800000;
	fma.rn.f32 	%f314, %f304, 0f40490FDB, %f312;
	setp.eq.b32 	%p24, %r188, 1;
	or.b32  	%r193, %r107, 64;
	or.b32  	%r10, %r107, 80;
	cvt.rn.f32.s32 	%f324, %r193;
	sub.f32 	%f325, %f324, %f145;
	div.approx.f32 	%f327, %f325, %f188;
	abs.f32 	%f328, %f327;
	setp.gt.f32 	%p27, %f328, 0f4B800000;
	mul.f32 	%f329, %f327, 0f00000000;
	selp.f32 	%f330, %f329, %f327, %p27;
	add.f32 	%f331, %f330, %f330;
	mov.b32 	%r194, %f331;
	and.b32  	%r195, %r194, -2147483648;
	or.b32  	%r196, %r195, 1056964608;
	mov.b32 	%f332, %r196;
	add.f32 	%f333, %f331, %f332;
	cvt.rzi.f32.f32 	%f334, %f333;
	abs.f32 	%f335, %f331;
	setp.gt.f32 	%p28, %f335, 0f4B000000;
	selp.f32 	%f336, %f331, %f334, %p28;
	cvt.rzi.f32.f32 	%f337, %f331;
	setp.lt.f32 	%p29, %f335, 0f3F000000;
	selp.f32 	%f338, %f337, %f336, %p29;
	cvt.rzi.s32.f32 	%r197, %f338;
	fma.rn.f32 	%f339, %f338, 0fBF000000, %f330;
	add.s32 	%r198, %r197, 1;
	mul.f32 	%f340, %f339, %f339;
	fma.rn.f32 	%f341, %f340, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f342, %f340, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f343, %f341, %f340, 0fC0A55DF6;
	fma.rn.f32 	%f344, %f342, %f340, 0f4081E0CF;
	fma.rn.f32 	%f345, %f340, %f339, 0f00000000;
	fma.rn.f32 	%f346, %f344, %f340, 0fC09DE9E6;
	fma.rn.f32 	%f347, %f343, %f345, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f340, 0f3F800000;
	fma.rn.f32 	%f349, %f339, 0f40490FDB, %f347;
	and.b32  	%r199, %r198, 1;
	setp.eq.b32 	%p30, %r199, 1;
	div.approx.f32 	%f18, %f325, %f216;
	setp.eq.f32 	%p32, %f18, 0f00000000;
	mov.f32 	%f901, %f904;
	@%p32 bra 	LBB0_14;
// %bb.13:                              // %L645
	sin.approx.f32 	%f355, %f18;
	div.approx.f32 	%f901, %f355, %f18;
LBB0_14:                                // %L648
	shl.b32 	%r97, %r1, 1;
	selp.f32 	%f212, %f210, %f211, %p6;
	and.b32  	%r164, %r162, 2;
	mov.f32 	%f213, 0f00000000;
	selp.f32 	%f246, %f244, %f245, %p12;
	and.b32  	%r171, %r169, 2;
	selp.f32 	%f281, %f279, %f280, %p18;
	and.b32  	%r182, %r180, 2;
	selp.f32 	%f315, %f313, %f314, %p24;
	and.b32  	%r189, %r187, 2;
	selp.f32 	%f350, %f348, %f349, %p30;
	and.b32  	%r200, %r198, 2;
	cvt.rn.f32.s32 	%f358, %r10;
	sub.f32 	%f359, %f358, %f145;
	div.approx.f32 	%f361, %f359, %f188;
	abs.f32 	%f362, %f361;
	setp.gt.f32 	%p33, %f362, 0f4B800000;
	mul.f32 	%f363, %f361, 0f00000000;
	selp.f32 	%f364, %f363, %f361, %p33;
	add.f32 	%f365, %f364, %f364;
	mov.b32 	%r201, %f365;
	and.b32  	%r202, %r201, -2147483648;
	or.b32  	%r203, %r202, 1056964608;
	mov.b32 	%f366, %r203;
	add.f32 	%f367, %f365, %f366;
	cvt.rzi.f32.f32 	%f368, %f367;
	abs.f32 	%f369, %f365;
	setp.gt.f32 	%p34, %f369, 0f4B000000;
	selp.f32 	%f370, %f365, %f368, %p34;
	cvt.rzi.f32.f32 	%f371, %f365;
	setp.lt.f32 	%p35, %f369, 0f3F000000;
	selp.f32 	%f372, %f371, %f370, %p35;
	cvt.rzi.s32.f32 	%r204, %f372;
	fma.rn.f32 	%f373, %f372, 0fBF000000, %f364;
	add.s32 	%r205, %r204, 1;
	mul.f32 	%f374, %f373, %f373;
	fma.rn.f32 	%f375, %f374, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f376, %f374, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f377, %f375, %f374, 0fC0A55DF6;
	fma.rn.f32 	%f378, %f376, %f374, 0f4081E0CF;
	fma.rn.f32 	%f379, %f374, %f373, 0f00000000;
	fma.rn.f32 	%f380, %f378, %f374, 0fC09DE9E6;
	fma.rn.f32 	%f381, %f377, %f379, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f374, 0f3F800000;
	fma.rn.f32 	%f383, %f373, 0f40490FDB, %f381;
	and.b32  	%r206, %r205, 1;
	setp.eq.b32 	%p36, %r206, 1;
	selp.f32 	%f384, %f382, %f383, %p36;
	and.b32  	%r207, %r205, 2;
	div.approx.f32 	%f23, %f359, %f216;
	setp.eq.f32 	%p38, %f23, 0f00000000;
	mov.f32 	%f902, %f904;
	@%p38 bra 	LBB0_16;
// %bb.15:                              // %L665
	sin.approx.f32 	%f389, %f23;
	div.approx.f32 	%f902, %f389, %f23;
LBB0_16:                                // %L668
	and.b32  	%r148, %r97, 8;
	shl.b32 	%r98, %r1, 2;
	and.b32  	%r150, %r1, 18;
	setp.eq.s32 	%p7, %r164, 0;
	sub.f32 	%f214, %f213, %f212;
	setp.eq.s32 	%p13, %r171, 0;
	sub.f32 	%f248, %f213, %f246;
	setp.eq.s32 	%p19, %r182, 0;
	sub.f32 	%f283, %f213, %f281;
	setp.eq.s32 	%p25, %r189, 0;
	sub.f32 	%f317, %f213, %f315;
	setp.eq.s32 	%p31, %r200, 0;
	sub.f32 	%f352, %f213, %f350;
	setp.eq.s32 	%p37, %r207, 0;
	sub.f32 	%f386, %f213, %f384;
	or.b32  	%r211, %r107, 96;
	or.b32  	%r12, %r107, 112;
	cvt.rn.f32.s32 	%f393, %r211;
	sub.f32 	%f394, %f393, %f145;
	div.approx.f32 	%f396, %f394, %f188;
	abs.f32 	%f397, %f396;
	setp.gt.f32 	%p39, %f397, 0f4B800000;
	mul.f32 	%f398, %f396, 0f00000000;
	selp.f32 	%f399, %f398, %f396, %p39;
	add.f32 	%f400, %f399, %f399;
	mov.b32 	%r212, %f400;
	and.b32  	%r213, %r212, -2147483648;
	or.b32  	%r214, %r213, 1056964608;
	mov.b32 	%f401, %r214;
	add.f32 	%f402, %f400, %f401;
	cvt.rzi.f32.f32 	%f403, %f402;
	abs.f32 	%f404, %f400;
	setp.gt.f32 	%p40, %f404, 0f4B000000;
	selp.f32 	%f405, %f400, %f403, %p40;
	cvt.rzi.f32.f32 	%f406, %f400;
	setp.lt.f32 	%p41, %f404, 0f3F000000;
	selp.f32 	%f407, %f406, %f405, %p41;
	cvt.rzi.s32.f32 	%r215, %f407;
	fma.rn.f32 	%f408, %f407, 0fBF000000, %f399;
	add.s32 	%r216, %r215, 1;
	mul.f32 	%f409, %f408, %f408;
	fma.rn.f32 	%f410, %f409, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f411, %f409, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f412, %f410, %f409, 0fC0A55DF6;
	fma.rn.f32 	%f413, %f411, %f409, 0f4081E0CF;
	fma.rn.f32 	%f414, %f409, %f408, 0f00000000;
	fma.rn.f32 	%f415, %f413, %f409, 0fC09DE9E6;
	fma.rn.f32 	%f416, %f412, %f414, 0f00000000;
	fma.rn.f32 	%f417, %f415, %f409, 0f3F800000;
	fma.rn.f32 	%f418, %f408, 0f40490FDB, %f416;
	and.b32  	%r217, %r216, 1;
	setp.eq.b32 	%p42, %r217, 1;
	selp.f32 	%f419, %f417, %f418, %p42;
	and.b32  	%r218, %r216, 2;
	setp.eq.s32 	%p43, %r218, 0;
	sub.f32 	%f421, %f213, %f419;
	div.approx.f32 	%f27, %f394, %f216;
	setp.eq.f32 	%p44, %f27, 0f00000000;
	mov.f32 	%f903, %f904;
	@%p44 bra 	LBB0_18;
// %bb.17:                              // %L746
	sin.approx.f32 	%f424, %f27;
	div.approx.f32 	%f903, %f424, %f27;
LBB0_18:                                // %L749
	and.b32  	%r149, %r98, 4;
	or.b32  	%r151, %r150, %r148;
	selp.f32 	%f215, %f212, %f214, %p7;
	selp.f32 	%f249, %f246, %f248, %p13;
	selp.f32 	%f284, %f281, %f283, %p19;
	selp.f32 	%f318, %f315, %f317, %p25;
	selp.f32 	%f353, %f350, %f352, %p31;
	selp.f32 	%f387, %f384, %f386, %p37;
	selp.f32 	%f422, %f419, %f421, %p43;
	cvt.rn.f32.s32 	%f427, %r12;
	sub.f32 	%f428, %f427, %f145;
	div.approx.f32 	%f430, %f428, %f188;
	abs.f32 	%f431, %f430;
	setp.gt.f32 	%p45, %f431, 0f4B800000;
	mul.f32 	%f432, %f430, 0f00000000;
	selp.f32 	%f433, %f432, %f430, %p45;
	add.f32 	%f434, %f433, %f433;
	mov.b32 	%r219, %f434;
	and.b32  	%r220, %r219, -2147483648;
	or.b32  	%r221, %r220, 1056964608;
	mov.b32 	%f435, %r221;
	add.f32 	%f436, %f434, %f435;
	cvt.rzi.f32.f32 	%f437, %f436;
	abs.f32 	%f438, %f434;
	setp.gt.f32 	%p46, %f438, 0f4B000000;
	selp.f32 	%f439, %f434, %f437, %p46;
	cvt.rzi.f32.f32 	%f440, %f434;
	setp.lt.f32 	%p47, %f438, 0f3F000000;
	selp.f32 	%f441, %f440, %f439, %p47;
	cvt.rzi.s32.f32 	%r222, %f441;
	fma.rn.f32 	%f442, %f441, 0fBF000000, %f433;
	add.s32 	%r223, %r222, 1;
	mul.f32 	%f443, %f442, %f442;
	fma.rn.f32 	%f444, %f443, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f445, %f443, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f446, %f444, %f443, 0fC0A55DF6;
	fma.rn.f32 	%f447, %f445, %f443, 0f4081E0CF;
	fma.rn.f32 	%f448, %f443, %f442, 0f00000000;
	fma.rn.f32 	%f449, %f447, %f443, 0fC09DE9E6;
	fma.rn.f32 	%f450, %f446, %f448, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f443, 0f3F800000;
	fma.rn.f32 	%f452, %f442, 0f40490FDB, %f450;
	and.b32  	%r224, %r223, 1;
	setp.eq.b32 	%p48, %r224, 1;
	selp.f32 	%f453, %f451, %f452, %p48;
	and.b32  	%r225, %r223, 2;
	setp.eq.s32 	%p49, %r225, 0;
	sub.f32 	%f455, %f213, %f453;
	selp.f32 	%f456, %f453, %f455, %p49;
	div.approx.f32 	%f32, %f428, %f216;
	setp.eq.f32 	%p50, %f32, 0f00000000;
	@%p50 bra 	LBB0_20;
// %bb.19:                              // %L766
	sin.approx.f32 	%f458, %f32;
	div.approx.f32 	%f904, %f458, %f32;
LBB0_20:                                // %L769
	or.b32  	%r152, %r151, %r149;
	mul.f32 	%f146, %f215, %f215;
	mul.f32 	%f4, %f249, %f249;
	mul.f32 	%f8, %f284, %f284;
	mul.f32 	%f13, %f318, %f318;
	mul.f32 	%f17, %f353, %f353;
	mul.f32 	%f22, %f387, %f387;
	mul.f32 	%f26, %f422, %f422;
	mul.f32 	%f31, %f456, %f456;
	mul.lo.s32 	%r14, %r107, 31;
	cvt.rn.f32.s32 	%f461, %r14;
	div.approx.f32 	%f35, %f461, %f216;
	abs.f32 	%f907, %f35;
	setp.lt.f32 	%p51, %f907, 0f40000000;
	@%p51 bra 	LBB0_32;
// %bb.21:
	setp.gtu.f32 	%p52, %f907, 0f4B800000;
	@%p52 bra 	LBB0_28;
	bra.uni 	LBB0_22;
LBB0_28:
	mov.b32 	%r16, %f907;
	and.b32  	%r229, %r16, 8388607;
	or.b32  	%r2428, %r229, 1065353216;
	mov.b32 	%f906, %r2428;
	add.s32 	%r230, %r16, -1073741824;
	and.b32  	%r2429, %r230, -8388608;
	setp.eq.s32 	%p58, %r2429, 0;
	@%p58 bra 	LBB0_31;
// %bb.29:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f472, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f471,%f472;
	// end inline asm
LBB0_30:                                // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r231, %r2429, 192937984;
	add.s32 	%r232, %r231, %r2428;
	mov.b32 	%f473, %r232;
	mul.f32 	%f474, %f471, %f473;
	sub.f32 	%f475, %f473, %f474;
	fma.rn.f32 	%f476, %f475, %f471, %f474;
	sub.f32 	%f477, %f473, %f476;
	fma.rz.f32 	%f478, %f477, %f471, %f476;
	cvt.rzi.f32.f32 	%f479, %f478;
	sub.f32 	%f906, %f473, %f479;
	sub.s32 	%r2429, %r2429, %r231;
	mov.b32 	%r2428, %f906;
	setp.ne.s32 	%p59, %r2429, 0;
	setp.ne.s32 	%p60, %r2428, 0;
	and.pred  	%p61, %p59, %p60;
	@%p61 bra 	LBB0_30;
LBB0_31:                                // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p62, %r16, 2139095039;
	selp.f32 	%f480, 0f7FFFFFFF, 0f4B800000, %p62;
	mul.f32 	%f481, %f906, 0f34000000;
	mul.f32 	%f907, %f480, %f481;
	bra.uni 	LBB0_32;
LBB0_22:                                // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f464, %f907, %f184;
	cvt.rzi.f32.f32 	%f905, %f464;
	fma.rn.f32 	%f38, %f905, 0fC0000000, %f907;
	mov.b32 	%r15, %f38;
	setp.lt.u32 	%p53, %r15, 1073741824;
	@%p53 bra 	LBB0_27;
// %bb.23:
	setp.lt.u32 	%p54, %r15, -2147483647;
	@%p54 bra 	LBB0_25;
// %bb.24:
	add.f32 	%f469, %f905, 0fBF800000;
	setp.lt.f32 	%p57, %f38, 0fC0000000;
	add.f32 	%f470, %f469, 0fBF800000;
	selp.f32 	%f905, %f470, %f469, %p57;
	bra.uni 	LBB0_27;
LBB0_25:
	add.f32 	%f905, %f905, 0f3F800000;
	setp.ltu.f32 	%p55, %f38, 0f40800000;
	@%p55 bra 	LBB0_27;
// %bb.26:                              // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f465, %f905, 0f3F800000;
	fma.rn.f32 	%f467, %f184, 0fC0400000, %f38;
	setp.ge.f32 	%p56, %f467, 0f00000000;
	add.f32 	%f468, %f465, 0f3F800000;
	selp.f32 	%f905, %f468, %f465, %p56;
LBB0_27:                                // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f907, %f905, 0fC0000000, %f907;
LBB0_32:                                // %__internal_fmodf_kernel.exit.i
	shr.u32 	%r99, %r152, 1;
	mul.f32 	%f219, %f146, 0f3C8A83B8;
	mul.f32 	%f253, %f4, 0f3C8A83B8;
	mul.f32 	%f288, %f8, 0f3C8A83B8;
	mul.f32 	%f322, %f13, 0f3C8A83B8;
	mul.f32 	%f357, %f17, 0f3C8A83B8;
	mul.f32 	%f391, %f22, 0f3C8A83B8;
	mul.f32 	%f426, %f26, 0f3C8A83B8;
	mul.f32 	%f459, %f31, 0f3C8A83B8;
	abs.f32 	%f482, %f907;
	setp.gtu.f32 	%p63, %f482, 0f7F800000;
	@%p63 bra 	LBB0_34;
// %bb.33:
	mov.b32 	%r233, %f35;
	and.b32  	%r234, %r233, -2147483648;
	mov.b32 	%r235, %f907;
	or.b32  	%r236, %r234, %r235;
	mov.b32 	%f907, %r236;
LBB0_34:                                // %__nv_fmodf.exit
	ld.param.u64 	%rd1, [_Z17julia_upchan_405313CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2];
	mul.wide.u32 	%rd67, %r99, 4;
	mul.f32 	%f3, %f219, %f897;
	mul.f32 	%f254, %f253, %f898;
	mul.f32 	%f12, %f288, %f899;
	mul.f32 	%f323, %f322, %f900;
	mul.f32 	%f21, %f357, %f901;
	mul.f32 	%f392, %f391, %f902;
	mul.f32 	%f30, %f426, %f903;
	mul.f32 	%f460, %f459, %f904;
	add.f32 	%f483, %f907, %f907;
	mov.b32 	%r237, %f483;
	and.b32  	%r238, %r237, -2147483648;
	or.b32  	%r239, %r238, 1056964608;
	mov.b32 	%f484, %r239;
	add.f32 	%f485, %f483, %f484;
	cvt.rzi.f32.f32 	%f486, %f485;
	abs.f32 	%f487, %f483;
	setp.gt.f32 	%p64, %f487, 0f4B000000;
	selp.f32 	%f488, %f483, %f486, %p64;
	cvt.rzi.f32.f32 	%f489, %f483;
	setp.lt.f32 	%p65, %f487, 0f3F000000;
	selp.f32 	%f490, %f489, %f488, %p65;
	cvt.rzi.s32.f32 	%r240, %f490;
	fma.rn.f32 	%f491, %f490, 0fBF000000, %f907;
	mul.f32 	%f492, %f491, 0f34222169;
	fma.rn.f32 	%f493, %f491, 0f40490FDA, %f492;
	mul.f32 	%f494, %f493, %f493;
	fma.rn.f32 	%f495, %f494, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f496, %f495, %f494, 0f3D2AAABB;
	fma.rn.f32 	%f497, %f496, %f494, 0fBEFFFFFF;
	fma.rn.f32 	%f498, %f497, %f494, 0f3F800000;
	fma.rn.f32 	%f499, %f494, %f493, 0f00000000;
	fma.rn.f32 	%f500, %f494, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f501, %f500, %f494, 0fBE2AAAA8;
	fma.rn.f32 	%f502, %f501, %f499, %f493;
	and.b32  	%r241, %r240, 1;
	setp.eq.b32 	%p66, %r241, 1;
	selp.f32 	%f503, %f498, %f502, %p66;
	selp.f32 	%f504, %f502, %f498, %p66;
	and.b32  	%r242, %r240, 2;
	setp.eq.s32 	%p67, %r242, 0;
	neg.f32 	%f505, %f503;
	selp.f32 	%f506, %f503, %f505, %p67;
	add.s32 	%r243, %r240, 1;
	and.b32  	%r244, %r243, 2;
	setp.eq.s32 	%p68, %r244, 0;
	sub.f32 	%f508, %f213, %f504;
	selp.f32 	%f509, %f504, %f508, %p68;
	cvt.rzi.f32.f32 	%f510, %f907;
	setp.eq.f32 	%p69, %f510, %f907;
	mul.f32 	%f511, %f907, 0f00000000;
	selp.f32 	%f52, %f511, %f506, %p69;
	abs.f32 	%f512, %f907;
	setp.gt.f32 	%p70, %f512, 0f4B800000;
	add.f32 	%f513, %f52, 0f3F800000;
	add.s32 	%r245, %r14, 496;
	cvt.rn.f32.s32 	%f514, %r245;
	div.approx.f32 	%f54, %f514, %f216;
	abs.f32 	%f911, %f54;
	setp.lt.f32 	%p71, %f911, 0f40000000;
	@%p71 bra 	LBB0_46;
// %bb.35:
	setp.gtu.f32 	%p72, %f911, 0f4B800000;
	@%p72 bra 	LBB0_42;
	bra.uni 	LBB0_36;
LBB0_42:
	mov.b32 	%r24, %f911;
	and.b32  	%r246, %r24, 8388607;
	or.b32  	%r2430, %r246, 1065353216;
	mov.b32 	%f910, %r2430;
	add.s32 	%r247, %r24, -1073741824;
	and.b32  	%r2431, %r247, -8388608;
	setp.eq.s32 	%p78, %r2431, 0;
	@%p78 bra 	LBB0_45;
// %bb.43:                              // %__nv_fmaf_rn.exit4.i.i.i866.preheader
	mov.f32 	%f525, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f524,%f525;
	// end inline asm
LBB0_44:                                // %__nv_fmaf_rn.exit4.i.i.i866
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r248, %r2431, 192937984;
	add.s32 	%r249, %r248, %r2430;
	mov.b32 	%f526, %r249;
	mul.f32 	%f527, %f524, %f526;
	sub.f32 	%f528, %f526, %f527;
	fma.rn.f32 	%f529, %f528, %f524, %f527;
	sub.f32 	%f530, %f526, %f529;
	fma.rz.f32 	%f531, %f530, %f524, %f529;
	cvt.rzi.f32.f32 	%f532, %f531;
	sub.f32 	%f910, %f526, %f532;
	sub.s32 	%r2431, %r2431, %r248;
	mov.b32 	%r2430, %f910;
	setp.ne.s32 	%p79, %r2431, 0;
	setp.ne.s32 	%p80, %r2430, 0;
	and.pred  	%p81, %p79, %p80;
	@%p81 bra 	LBB0_44;
LBB0_45:                                // %__internal_fmodf_slowpath_mod.exit.i.i868
	setp.gt.u32 	%p82, %r24, 2139095039;
	selp.f32 	%f533, 0f7FFFFFFF, 0f4B800000, %p82;
	mul.f32 	%f534, %f910, 0f34000000;
	mul.f32 	%f911, %f533, %f534;
	bra.uni 	LBB0_46;
LBB0_36:                                // %__nv_fast_fdividef.exit.i.i.i838
	div.approx.f32 	%f517, %f911, %f184;
	cvt.rzi.f32.f32 	%f909, %f517;
	fma.rn.f32 	%f57, %f909, 0fC0000000, %f911;
	mov.b32 	%r23, %f57;
	setp.lt.u32 	%p73, %r23, 1073741824;
	@%p73 bra 	LBB0_41;
// %bb.37:
	setp.lt.u32 	%p74, %r23, -2147483647;
	@%p74 bra 	LBB0_39;
// %bb.38:
	add.f32 	%f522, %f909, 0fBF800000;
	setp.lt.f32 	%p77, %f57, 0fC0000000;
	add.f32 	%f523, %f522, 0fBF800000;
	selp.f32 	%f909, %f523, %f522, %p77;
	bra.uni 	LBB0_41;
LBB0_39:
	add.f32 	%f909, %f909, 0f3F800000;
	setp.ltu.f32 	%p75, %f57, 0f40800000;
	@%p75 bra 	LBB0_41;
// %bb.40:                              // %__nv_fmaf_rn.exit.i.i.i843
	add.f32 	%f518, %f909, 0f3F800000;
	fma.rn.f32 	%f520, %f184, 0fC0400000, %f57;
	setp.ge.f32 	%p76, %f520, 0f00000000;
	add.f32 	%f521, %f518, 0f3F800000;
	selp.f32 	%f909, %f521, %f518, %p76;
LBB0_41:                                // %__internal_fmodf_fastpath_quot.exit.i.i847
	fma.rn.f32 	%f911, %f909, 0fC0000000, %f911;
LBB0_46:                                // %__internal_fmodf_kernel.exit.i872
	add.s64 	%rd68, %rd1, %rd67;
	mov.b32 	%r174, %f254;
	mov.b32 	%r173, %f3;
	mov.b32 	%r192, %f323;
	mov.b32 	%r191, %f12;
	mov.b32 	%r210, %f392;
	mov.b32 	%r209, %f21;
	mov.b32 	%r228, %f460;
	mov.b32 	%r227, %f30;
	selp.f32 	%f53, %f513, %f509, %p70;
	abs.f32 	%f535, %f911;
	setp.gtu.f32 	%p83, %f535, 0f7F800000;
	@%p83 bra 	LBB0_48;
// %bb.47:
	mov.b32 	%r250, %f54;
	and.b32  	%r251, %r250, -2147483648;
	mov.b32 	%r252, %f911;
	or.b32  	%r253, %r251, %r252;
	mov.b32 	%f911, %r253;
LBB0_48:                                // %__nv_fmodf.exit873
	ld.param.u64 	%rd2, [_Z17julia_upchan_405313CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3];
	ld.param.u64 	%rd3, [_Z17julia_upchan_405313CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4];
	ld.global.u32 	%r100, [%rd68];
	shr.u32 	%r101, %r1, 1;
	shr.u32 	%r104, %r1, 2;
	// begin inline asm
	cvt.rn.f16x2.f32 %r172, %r174, %r173;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r190, %r192, %r191;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r208, %r210, %r209;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r226, %r228, %r227;
	// end inline asm
	add.f32 	%f536, %f911, %f911;
	mov.b32 	%r260, %f536;
	and.b32  	%r261, %r260, -2147483648;
	or.b32  	%r262, %r261, 1056964608;
	mov.b32 	%f537, %r262;
	add.f32 	%f538, %f536, %f537;
	cvt.rzi.f32.f32 	%f539, %f538;
	abs.f32 	%f540, %f536;
	setp.gt.f32 	%p84, %f540, 0f4B000000;
	selp.f32 	%f541, %f536, %f539, %p84;
	cvt.rzi.f32.f32 	%f542, %f536;
	setp.lt.f32 	%p85, %f540, 0f3F000000;
	selp.f32 	%f543, %f542, %f541, %p85;
	cvt.rzi.s32.f32 	%r263, %f543;
	fma.rn.f32 	%f544, %f543, 0fBF000000, %f911;
	mul.f32 	%f545, %f544, 0f34222169;
	fma.rn.f32 	%f546, %f544, 0f40490FDA, %f545;
	mul.f32 	%f547, %f546, %f546;
	fma.rn.f32 	%f548, %f547, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f549, %f548, %f547, 0f3D2AAABB;
	fma.rn.f32 	%f550, %f549, %f547, 0fBEFFFFFF;
	fma.rn.f32 	%f551, %f550, %f547, 0f3F800000;
	fma.rn.f32 	%f552, %f547, %f546, 0f00000000;
	fma.rn.f32 	%f553, %f547, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f554, %f553, %f547, 0fBE2AAAA8;
	fma.rn.f32 	%f555, %f554, %f552, %f546;
	and.b32  	%r264, %r263, 1;
	setp.eq.b32 	%p86, %r264, 1;
	selp.f32 	%f556, %f551, %f555, %p86;
	selp.f32 	%f557, %f555, %f551, %p86;
	and.b32  	%r265, %r263, 2;
	setp.eq.s32 	%p87, %r265, 0;
	neg.f32 	%f558, %f556;
	selp.f32 	%f559, %f556, %f558, %p87;
	add.s32 	%r266, %r263, 1;
	and.b32  	%r267, %r266, 2;
	setp.eq.s32 	%p88, %r267, 0;
	sub.f32 	%f561, %f213, %f557;
	selp.f32 	%f562, %f557, %f561, %p88;
	cvt.rzi.f32.f32 	%f563, %f911;
	setp.eq.f32 	%p89, %f563, %f911;
	mul.f32 	%f564, %f911, 0f00000000;
	selp.f32 	%f565, %f564, %f559, %p89;
	abs.f32 	%f566, %f911;
	setp.gt.f32 	%p90, %f566, 0f4B800000;
	add.f32 	%f567, %f565, 0f3F800000;
	selp.f32 	%f568, %f567, %f562, %p90;
	mov.b32 	%r256, %f568;
	mov.b32 	%r255, %f53;
	// begin inline asm
	cvt.rn.f16x2.f32 %r31, %r256, %r255;
	// end inline asm
	mov.b32 	%r259, %f565;
	mov.b32 	%r258, %f52;
	// begin inline asm
	cvt.rn.f16x2.f32 %r32, %r259, %r258;
	// end inline asm
	mov.u64 	%rd118, 2;
	mov.u64 	%rd119, %rd118;
LBB0_49:                                // %L881.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd119, %rd119, %rd119;
	add.s64 	%rd118, %rd118, -1;
	setp.ne.s64 	%p91, %rd118, 0;
	@%p91 bra 	LBB0_49;
// %bb.50:                              // %L883
	and.b64  	%rd70, %rd119, 9223372036854775807;
	setp.ne.s64 	%p92, %rd70, 16;
	@%p92 bra 	LBB0_126;
// %bb.51:                              // %L890
	and.b32  	%r268, %r1, 3;
	mul.lo.s32 	%r269, %r268, %r104;
	shl.b32 	%r270, %r269, 1;
	neg.s32 	%r33, %r270;
	cvt.rn.f32.s32 	%f569, %r33;
	mov.f32 	%f570, 0f41000000;
	div.approx.f32 	%f71, %f569, %f570;
	abs.f32 	%f915, %f71;
	setp.lt.f32 	%p93, %f915, 0f40000000;
	@%p93 bra 	LBB0_63;
// %bb.52:
	setp.gtu.f32 	%p94, %f915, 0f4B800000;
	@%p94 bra 	LBB0_59;
	bra.uni 	LBB0_53;
LBB0_59:
	mov.b32 	%r35, %f915;
	and.b32  	%r271, %r35, 8388607;
	or.b32  	%r2432, %r271, 1065353216;
	mov.b32 	%f914, %r2432;
	add.s32 	%r272, %r35, -1073741824;
	and.b32  	%r2433, %r272, -8388608;
	setp.eq.s32 	%p100, %r2433, 0;
	@%p100 bra 	LBB0_62;
// %bb.60:                              // %__nv_fmaf_rn.exit4.i.i.i912.preheader
	mov.f32 	%f580, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f579,%f580;
	// end inline asm
LBB0_61:                                // %__nv_fmaf_rn.exit4.i.i.i912
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r273, %r2433, 192937984;
	add.s32 	%r274, %r273, %r2432;
	mov.b32 	%f581, %r274;
	mul.f32 	%f582, %f579, %f581;
	sub.f32 	%f583, %f581, %f582;
	fma.rn.f32 	%f584, %f583, %f579, %f582;
	sub.f32 	%f585, %f581, %f584;
	fma.rz.f32 	%f586, %f585, %f579, %f584;
	cvt.rzi.f32.f32 	%f587, %f586;
	sub.f32 	%f914, %f581, %f587;
	sub.s32 	%r2433, %r2433, %r273;
	mov.b32 	%r2432, %f914;
	setp.ne.s32 	%p101, %r2433, 0;
	setp.ne.s32 	%p102, %r2432, 0;
	and.pred  	%p103, %p101, %p102;
	@%p103 bra 	LBB0_61;
LBB0_62:                                // %__internal_fmodf_slowpath_mod.exit.i.i914
	setp.gt.u32 	%p104, %r35, 2139095039;
	selp.f32 	%f588, 0f7FFFFFFF, 0f4B800000, %p104;
	mul.f32 	%f589, %f914, 0f34000000;
	mul.f32 	%f915, %f588, %f589;
	bra.uni 	LBB0_63;
LBB0_53:                                // %__nv_fast_fdividef.exit.i.i.i884
	div.approx.f32 	%f572, %f915, %f184;
	cvt.rzi.f32.f32 	%f913, %f572;
	fma.rn.f32 	%f74, %f913, 0fC0000000, %f915;
	mov.b32 	%r34, %f74;
	setp.lt.u32 	%p95, %r34, 1073741824;
	@%p95 bra 	LBB0_58;
// %bb.54:
	setp.lt.u32 	%p96, %r34, -2147483647;
	@%p96 bra 	LBB0_56;
// %bb.55:
	add.f32 	%f577, %f913, 0fBF800000;
	setp.lt.f32 	%p99, %f74, 0fC0000000;
	add.f32 	%f578, %f577, 0fBF800000;
	selp.f32 	%f913, %f578, %f577, %p99;
	bra.uni 	LBB0_58;
LBB0_56:
	add.f32 	%f913, %f913, 0f3F800000;
	setp.ltu.f32 	%p97, %f74, 0f40800000;
	@%p97 bra 	LBB0_58;
// %bb.57:                              // %__nv_fmaf_rn.exit.i.i.i889
	add.f32 	%f573, %f913, 0f3F800000;
	fma.rn.f32 	%f575, %f184, 0fC0400000, %f74;
	setp.ge.f32 	%p98, %f575, 0f00000000;
	add.f32 	%f576, %f573, 0f3F800000;
	selp.f32 	%f913, %f576, %f573, %p98;
LBB0_58:                                // %__internal_fmodf_fastpath_quot.exit.i.i893
	fma.rn.f32 	%f915, %f913, 0fC0000000, %f915;
LBB0_63:                                // %__internal_fmodf_kernel.exit.i918
	abs.f32 	%f590, %f915;
	setp.gtu.f32 	%p105, %f590, 0f7F800000;
	@%p105 bra 	LBB0_65;
// %bb.64:
	mov.b32 	%r275, %f71;
	and.b32  	%r276, %r275, -2147483648;
	mov.b32 	%r277, %f915;
	or.b32  	%r278, %r276, %r277;
	mov.b32 	%f915, %r278;
LBB0_65:                                // %__nv_fmodf.exit919
	add.f32 	%f591, %f915, %f915;
	mov.b32 	%r279, %f591;
	and.b32  	%r280, %r279, -2147483648;
	or.b32  	%r281, %r280, 1056964608;
	mov.b32 	%f592, %r281;
	add.f32 	%f593, %f591, %f592;
	cvt.rzi.f32.f32 	%f594, %f593;
	abs.f32 	%f595, %f591;
	setp.gt.f32 	%p106, %f595, 0f4B000000;
	selp.f32 	%f596, %f591, %f594, %p106;
	cvt.rzi.f32.f32 	%f597, %f591;
	setp.lt.f32 	%p107, %f595, 0f3F000000;
	selp.f32 	%f598, %f597, %f596, %p107;
	cvt.rzi.s32.f32 	%r282, %f598;
	fma.rn.f32 	%f599, %f598, 0fBF000000, %f915;
	mul.f32 	%f600, %f599, 0f34222169;
	fma.rn.f32 	%f601, %f599, 0f40490FDA, %f600;
	mul.f32 	%f602, %f601, %f601;
	fma.rn.f32 	%f603, %f602, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f604, %f603, %f602, 0f3D2AAABB;
	fma.rn.f32 	%f605, %f604, %f602, 0fBEFFFFFF;
	fma.rn.f32 	%f606, %f605, %f602, 0f3F800000;
	fma.rn.f32 	%f607, %f602, %f601, 0f00000000;
	fma.rn.f32 	%f608, %f602, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f609, %f608, %f602, 0fBE2AAAA8;
	fma.rn.f32 	%f610, %f609, %f607, %f601;
	and.b32  	%r283, %r282, 1;
	setp.eq.b32 	%p108, %r283, 1;
	selp.f32 	%f611, %f606, %f610, %p108;
	selp.f32 	%f612, %f610, %f606, %p108;
	and.b32  	%r284, %r282, 2;
	setp.eq.s32 	%p109, %r284, 0;
	neg.f32 	%f613, %f611;
	selp.f32 	%f614, %f611, %f613, %p109;
	add.s32 	%r285, %r282, 1;
	and.b32  	%r286, %r285, 2;
	setp.eq.s32 	%p110, %r286, 0;
	sub.f32 	%f616, %f213, %f612;
	selp.f32 	%f617, %f612, %f616, %p110;
	cvt.rzi.f32.f32 	%f618, %f915;
	setp.eq.f32 	%p111, %f618, %f915;
	mul.f32 	%f619, %f915, 0f00000000;
	selp.f32 	%f88, %f619, %f614, %p111;
	abs.f32 	%f620, %f915;
	setp.gt.f32 	%p112, %f620, 0f4B800000;
	add.f32 	%f621, %f88, 0f3F800000;
	shl.b32 	%r287, %r104, 3;
	sub.s32 	%r288, %r33, %r287;
	cvt.rn.f32.s32 	%f622, %r288;
	div.approx.f32 	%f90, %f622, %f570;
	abs.f32 	%f919, %f90;
	setp.lt.f32 	%p113, %f919, 0f40000000;
	@%p113 bra 	LBB0_77;
// %bb.66:
	setp.gtu.f32 	%p114, %f919, 0f4B800000;
	@%p114 bra 	LBB0_73;
	bra.uni 	LBB0_67;
LBB0_73:
	mov.b32 	%r43, %f919;
	and.b32  	%r289, %r43, 8388607;
	or.b32  	%r2434, %r289, 1065353216;
	mov.b32 	%f918, %r2434;
	add.s32 	%r290, %r43, -1073741824;
	and.b32  	%r2435, %r290, -8388608;
	setp.eq.s32 	%p120, %r2435, 0;
	@%p120 bra 	LBB0_76;
// %bb.74:                              // %__nv_fmaf_rn.exit4.i.i.i958.preheader
	mov.f32 	%f633, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f632,%f633;
	// end inline asm
LBB0_75:                                // %__nv_fmaf_rn.exit4.i.i.i958
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r291, %r2435, 192937984;
	add.s32 	%r292, %r291, %r2434;
	mov.b32 	%f634, %r292;
	mul.f32 	%f635, %f632, %f634;
	sub.f32 	%f636, %f634, %f635;
	fma.rn.f32 	%f637, %f636, %f632, %f635;
	sub.f32 	%f638, %f634, %f637;
	fma.rz.f32 	%f639, %f638, %f632, %f637;
	cvt.rzi.f32.f32 	%f640, %f639;
	sub.f32 	%f918, %f634, %f640;
	sub.s32 	%r2435, %r2435, %r291;
	mov.b32 	%r2434, %f918;
	setp.ne.s32 	%p121, %r2435, 0;
	setp.ne.s32 	%p122, %r2434, 0;
	and.pred  	%p123, %p121, %p122;
	@%p123 bra 	LBB0_75;
LBB0_76:                                // %__internal_fmodf_slowpath_mod.exit.i.i960
	setp.gt.u32 	%p124, %r43, 2139095039;
	selp.f32 	%f641, 0f7FFFFFFF, 0f4B800000, %p124;
	mul.f32 	%f642, %f918, 0f34000000;
	mul.f32 	%f919, %f641, %f642;
	bra.uni 	LBB0_77;
LBB0_67:                                // %__nv_fast_fdividef.exit.i.i.i930
	div.approx.f32 	%f625, %f919, %f184;
	cvt.rzi.f32.f32 	%f917, %f625;
	fma.rn.f32 	%f93, %f917, 0fC0000000, %f919;
	mov.b32 	%r42, %f93;
	setp.lt.u32 	%p115, %r42, 1073741824;
	@%p115 bra 	LBB0_72;
// %bb.68:
	setp.lt.u32 	%p116, %r42, -2147483647;
	@%p116 bra 	LBB0_70;
// %bb.69:
	add.f32 	%f630, %f917, 0fBF800000;
	setp.lt.f32 	%p119, %f93, 0fC0000000;
	add.f32 	%f631, %f630, 0fBF800000;
	selp.f32 	%f917, %f631, %f630, %p119;
	bra.uni 	LBB0_72;
LBB0_70:
	add.f32 	%f917, %f917, 0f3F800000;
	setp.ltu.f32 	%p117, %f93, 0f40800000;
	@%p117 bra 	LBB0_72;
// %bb.71:                              // %__nv_fmaf_rn.exit.i.i.i935
	add.f32 	%f626, %f917, 0f3F800000;
	fma.rn.f32 	%f628, %f184, 0fC0400000, %f93;
	setp.ge.f32 	%p118, %f628, 0f00000000;
	add.f32 	%f629, %f626, 0f3F800000;
	selp.f32 	%f917, %f629, %f626, %p118;
LBB0_72:                                // %__internal_fmodf_fastpath_quot.exit.i.i939
	fma.rn.f32 	%f919, %f917, 0fC0000000, %f919;
LBB0_77:                                // %__internal_fmodf_kernel.exit.i964
	selp.f32 	%f89, %f621, %f617, %p112;
	abs.f32 	%f643, %f919;
	setp.gtu.f32 	%p125, %f643, 0f7F800000;
	@%p125 bra 	LBB0_79;
// %bb.78:
	mov.b32 	%r293, %f90;
	and.b32  	%r294, %r293, -2147483648;
	mov.b32 	%r295, %f919;
	or.b32  	%r296, %r294, %r295;
	mov.b32 	%f919, %r296;
LBB0_79:                                // %__nv_fmodf.exit965
	add.f32 	%f644, %f919, %f919;
	mov.b32 	%r309, %f644;
	and.b32  	%r310, %r309, -2147483648;
	or.b32  	%r311, %r310, 1056964608;
	mov.b32 	%f645, %r311;
	add.f32 	%f646, %f644, %f645;
	cvt.rzi.f32.f32 	%f647, %f646;
	abs.f32 	%f648, %f644;
	setp.gt.f32 	%p126, %f648, 0f4B000000;
	selp.f32 	%f649, %f644, %f647, %p126;
	cvt.rzi.f32.f32 	%f650, %f644;
	setp.lt.f32 	%p127, %f648, 0f3F000000;
	selp.f32 	%f651, %f650, %f649, %p127;
	cvt.rzi.s32.f32 	%r312, %f651;
	fma.rn.f32 	%f652, %f651, 0fBF000000, %f919;
	mul.f32 	%f653, %f652, 0f34222169;
	fma.rn.f32 	%f654, %f652, 0f40490FDA, %f653;
	mul.f32 	%f655, %f654, %f654;
	fma.rn.f32 	%f656, %f655, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f657, %f656, %f655, 0f3D2AAABB;
	fma.rn.f32 	%f658, %f657, %f655, 0fBEFFFFFF;
	fma.rn.f32 	%f659, %f658, %f655, 0f3F800000;
	fma.rn.f32 	%f660, %f655, %f654, 0f00000000;
	fma.rn.f32 	%f661, %f655, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f662, %f661, %f655, 0fBE2AAAA8;
	fma.rn.f32 	%f663, %f662, %f660, %f654;
	and.b32  	%r313, %r312, 1;
	setp.eq.b32 	%p128, %r313, 1;
	selp.f32 	%f664, %f659, %f663, %p128;
	selp.f32 	%f665, %f663, %f659, %p128;
	and.b32  	%r314, %r312, 2;
	setp.eq.s32 	%p129, %r314, 0;
	neg.f32 	%f666, %f664;
	selp.f32 	%f667, %f664, %f666, %p129;
	add.s32 	%r315, %r312, 1;
	and.b32  	%r316, %r315, 2;
	setp.eq.s32 	%p130, %r316, 0;
	sub.f32 	%f669, %f213, %f665;
	selp.f32 	%f670, %f665, %f669, %p130;
	cvt.rzi.f32.f32 	%f671, %f919;
	setp.eq.f32 	%p131, %f671, %f919;
	mul.f32 	%f672, %f919, 0f00000000;
	selp.f32 	%f673, %f672, %f667, %p131;
	abs.f32 	%f674, %f919;
	setp.gt.f32 	%p132, %f674, 0f4B800000;
	add.f32 	%f675, %f673, 0f3F800000;
	selp.f32 	%f676, %f675, %f670, %p132;
	mov.b32 	%r299, %f676;
	mov.b32 	%r298, %f89;
	// begin inline asm
	cvt.rn.f16x2.f32 %r50, %r299, %r298;
	// end inline asm
	mov.b32 	%r305, %f673;
	xor.b32  	%r302, %r305, -2147483648;
	mov.b32 	%r304, %f88;
	xor.b32  	%r301, %r304, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r51, %r302, %r301;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r52, %r305, %r304;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r53, %r299, %r298;
	// end inline asm
	mov.u64 	%rd120, 2;
	mov.u64 	%rd121, %rd120;
LBB0_80:                                // %L1043.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd121, %rd121, %rd121;
	add.s64 	%rd120, %rd120, -1;
	setp.ne.s64 	%p133, %rd120, 0;
	@%p133 bra 	LBB0_80;
// %bb.81:                              // %L1045
	and.b64  	%rd74, %rd121, 9223372036854775807;
	setp.ne.s64 	%p134, %rd74, 16;
	@%p134 bra 	LBB0_125;
// %bb.82:                              // %L1052
	shl.b32 	%r317, %r102, 1;
	neg.s32 	%r54, %r317;
	mov.u64 	%rd122, 2;
	mov.u64 	%rd123, %rd122;
LBB0_83:                                // %L1111.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd123, %rd123, %rd123;
	add.s64 	%rd122, %rd122, -1;
	setp.ne.s64 	%p135, %rd122, 0;
	@%p135 bra 	LBB0_83;
// %bb.84:                              // %L1113
	mul.lo.s32 	%r55, %r54, %r104;
	cvt.rn.f32.s32 	%f677, %r55;
	shl.b64 	%rd78, %rd123, 1;
	cvt.rn.f32.s64 	%f678, %rd78;
	div.approx.f32 	%f107, %f677, %f678;
	abs.f32 	%f923, %f107;
	setp.lt.f32 	%p136, %f923, 0f40000000;
	@%p136 bra 	LBB0_96;
// %bb.85:
	setp.gtu.f32 	%p137, %f923, 0f4B800000;
	@%p137 bra 	LBB0_92;
	bra.uni 	LBB0_86;
LBB0_92:
	mov.b32 	%r57, %f923;
	and.b32  	%r318, %r57, 8388607;
	or.b32  	%r2436, %r318, 1065353216;
	mov.b32 	%f922, %r2436;
	add.s32 	%r319, %r57, -1073741824;
	and.b32  	%r2437, %r319, -8388608;
	setp.eq.s32 	%p143, %r2437, 0;
	@%p143 bra 	LBB0_95;
// %bb.93:                              // %__nv_fmaf_rn.exit4.i.i.i1004.preheader
	mov.f32 	%f688, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f687,%f688;
	// end inline asm
LBB0_94:                                // %__nv_fmaf_rn.exit4.i.i.i1004
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r320, %r2437, 192937984;
	add.s32 	%r321, %r320, %r2436;
	mov.b32 	%f689, %r321;
	mul.f32 	%f690, %f687, %f689;
	sub.f32 	%f691, %f689, %f690;
	fma.rn.f32 	%f692, %f691, %f687, %f690;
	sub.f32 	%f693, %f689, %f692;
	fma.rz.f32 	%f694, %f693, %f687, %f692;
	cvt.rzi.f32.f32 	%f695, %f694;
	sub.f32 	%f922, %f689, %f695;
	sub.s32 	%r2437, %r2437, %r320;
	mov.b32 	%r2436, %f922;
	setp.ne.s32 	%p144, %r2437, 0;
	setp.ne.s32 	%p145, %r2436, 0;
	and.pred  	%p146, %p144, %p145;
	@%p146 bra 	LBB0_94;
LBB0_95:                                // %__internal_fmodf_slowpath_mod.exit.i.i1006
	setp.gt.u32 	%p147, %r57, 2139095039;
	selp.f32 	%f696, 0f7FFFFFFF, 0f4B800000, %p147;
	mul.f32 	%f697, %f922, 0f34000000;
	mul.f32 	%f923, %f696, %f697;
	bra.uni 	LBB0_96;
LBB0_86:                                // %__nv_fast_fdividef.exit.i.i.i976
	div.approx.f32 	%f680, %f923, %f184;
	cvt.rzi.f32.f32 	%f921, %f680;
	fma.rn.f32 	%f110, %f921, 0fC0000000, %f923;
	mov.b32 	%r56, %f110;
	setp.lt.u32 	%p138, %r56, 1073741824;
	@%p138 bra 	LBB0_91;
// %bb.87:
	setp.lt.u32 	%p139, %r56, -2147483647;
	@%p139 bra 	LBB0_89;
// %bb.88:
	add.f32 	%f685, %f921, 0fBF800000;
	setp.lt.f32 	%p142, %f110, 0fC0000000;
	add.f32 	%f686, %f685, 0fBF800000;
	selp.f32 	%f921, %f686, %f685, %p142;
	bra.uni 	LBB0_91;
LBB0_89:
	add.f32 	%f921, %f921, 0f3F800000;
	setp.ltu.f32 	%p140, %f110, 0f40800000;
	@%p140 bra 	LBB0_91;
// %bb.90:                              // %__nv_fmaf_rn.exit.i.i.i981
	add.f32 	%f681, %f921, 0f3F800000;
	fma.rn.f32 	%f683, %f184, 0fC0400000, %f110;
	setp.ge.f32 	%p141, %f683, 0f00000000;
	add.f32 	%f684, %f681, 0f3F800000;
	selp.f32 	%f921, %f684, %f681, %p141;
LBB0_91:                                // %__internal_fmodf_fastpath_quot.exit.i.i985
	fma.rn.f32 	%f923, %f921, 0fC0000000, %f923;
LBB0_96:                                // %__internal_fmodf_kernel.exit.i1010
	abs.f32 	%f698, %f923;
	setp.gtu.f32 	%p148, %f698, 0f7F800000;
	@%p148 bra 	LBB0_98;
// %bb.97:
	mov.b32 	%r322, %f107;
	and.b32  	%r323, %r322, -2147483648;
	mov.b32 	%r324, %f923;
	or.b32  	%r325, %r323, %r324;
	mov.b32 	%f923, %r325;
LBB0_98:                                // %__nv_fmodf.exit1011
	add.f32 	%f699, %f923, %f923;
	mov.b32 	%r326, %f699;
	and.b32  	%r327, %r326, -2147483648;
	or.b32  	%r328, %r327, 1056964608;
	mov.b32 	%f700, %r328;
	add.f32 	%f701, %f699, %f700;
	cvt.rzi.f32.f32 	%f702, %f701;
	abs.f32 	%f703, %f699;
	setp.gt.f32 	%p149, %f703, 0f4B000000;
	selp.f32 	%f704, %f699, %f702, %p149;
	cvt.rzi.f32.f32 	%f705, %f699;
	setp.lt.f32 	%p150, %f703, 0f3F000000;
	selp.f32 	%f706, %f705, %f704, %p150;
	cvt.rzi.s32.f32 	%r329, %f706;
	fma.rn.f32 	%f707, %f706, 0fBF000000, %f923;
	mul.f32 	%f708, %f707, 0f34222169;
	fma.rn.f32 	%f709, %f707, 0f40490FDA, %f708;
	mul.f32 	%f710, %f709, %f709;
	fma.rn.f32 	%f711, %f710, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f712, %f711, %f710, 0f3D2AAABB;
	fma.rn.f32 	%f713, %f712, %f710, 0fBEFFFFFF;
	fma.rn.f32 	%f714, %f713, %f710, 0f3F800000;
	fma.rn.f32 	%f715, %f710, %f709, 0f00000000;
	fma.rn.f32 	%f716, %f710, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f717, %f716, %f710, 0fBE2AAAA8;
	fma.rn.f32 	%f718, %f717, %f715, %f709;
	and.b32  	%r330, %r329, 1;
	setp.eq.b32 	%p151, %r330, 1;
	selp.f32 	%f719, %f714, %f718, %p151;
	selp.f32 	%f720, %f718, %f714, %p151;
	and.b32  	%r331, %r329, 2;
	setp.eq.s32 	%p152, %r331, 0;
	neg.f32 	%f721, %f719;
	selp.f32 	%f722, %f719, %f721, %p152;
	add.s32 	%r332, %r329, 1;
	and.b32  	%r333, %r332, 2;
	setp.eq.s32 	%p153, %r333, 0;
	sub.f32 	%f724, %f213, %f720;
	selp.f32 	%f725, %f720, %f724, %p153;
	cvt.rzi.f32.f32 	%f726, %f923;
	setp.eq.f32 	%p154, %f726, %f923;
	mul.f32 	%f727, %f923, 0f00000000;
	selp.f32 	%f124, %f727, %f722, %p154;
	abs.f32 	%f728, %f923;
	setp.gt.f32 	%p155, %f728, 0f4B800000;
	add.f32 	%f729, %f124, 0f3F800000;
	selp.f32 	%f125, %f729, %f725, %p155;
	mov.u64 	%rd124, 2;
	mov.u64 	%rd125, %rd124;
LBB0_99:                                // %L1152.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd125, %rd125, %rd125;
	add.s64 	%rd124, %rd124, -1;
	setp.ne.s64 	%p156, %rd124, 0;
	@%p156 bra 	LBB0_99;
// %bb.100:                             // %L1154
	shl.b32 	%r334, %r104, 2;
	sub.s32 	%r335, %r55, %r334;
	cvt.rn.f32.s32 	%f730, %r335;
	shl.b64 	%rd80, %rd125, 1;
	cvt.rn.f32.s64 	%f731, %rd80;
	div.approx.f32 	%f126, %f730, %f731;
	abs.f32 	%f927, %f126;
	setp.lt.f32 	%p157, %f927, 0f40000000;
	@%p157 bra 	LBB0_112;
// %bb.101:
	setp.gtu.f32 	%p158, %f927, 0f4B800000;
	@%p158 bra 	LBB0_108;
	bra.uni 	LBB0_102;
LBB0_108:
	mov.b32 	%r65, %f927;
	and.b32  	%r336, %r65, 8388607;
	or.b32  	%r2438, %r336, 1065353216;
	mov.b32 	%f926, %r2438;
	add.s32 	%r337, %r65, -1073741824;
	and.b32  	%r2439, %r337, -8388608;
	setp.eq.s32 	%p164, %r2439, 0;
	@%p164 bra 	LBB0_111;
// %bb.109:                             // %__nv_fmaf_rn.exit4.i.i.i1050.preheader
	mov.f32 	%f741, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f740,%f741;
	// end inline asm
LBB0_110:                               // %__nv_fmaf_rn.exit4.i.i.i1050
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r338, %r2439, 192937984;
	add.s32 	%r339, %r338, %r2438;
	mov.b32 	%f742, %r339;
	mul.f32 	%f743, %f740, %f742;
	sub.f32 	%f744, %f742, %f743;
	fma.rn.f32 	%f745, %f744, %f740, %f743;
	sub.f32 	%f746, %f742, %f745;
	fma.rz.f32 	%f747, %f746, %f740, %f745;
	cvt.rzi.f32.f32 	%f748, %f747;
	sub.f32 	%f926, %f742, %f748;
	sub.s32 	%r2439, %r2439, %r338;
	mov.b32 	%r2438, %f926;
	setp.ne.s32 	%p165, %r2439, 0;
	setp.ne.s32 	%p166, %r2438, 0;
	and.pred  	%p167, %p165, %p166;
	@%p167 bra 	LBB0_110;
LBB0_111:                               // %__internal_fmodf_slowpath_mod.exit.i.i1052
	setp.gt.u32 	%p168, %r65, 2139095039;
	selp.f32 	%f749, 0f7FFFFFFF, 0f4B800000, %p168;
	mul.f32 	%f750, %f926, 0f34000000;
	mul.f32 	%f927, %f749, %f750;
	bra.uni 	LBB0_112;
LBB0_102:                               // %__nv_fast_fdividef.exit.i.i.i1022
	div.approx.f32 	%f733, %f927, %f184;
	cvt.rzi.f32.f32 	%f925, %f733;
	fma.rn.f32 	%f129, %f925, 0fC0000000, %f927;
	mov.b32 	%r64, %f129;
	setp.lt.u32 	%p159, %r64, 1073741824;
	@%p159 bra 	LBB0_107;
// %bb.103:
	setp.lt.u32 	%p160, %r64, -2147483647;
	@%p160 bra 	LBB0_105;
// %bb.104:
	add.f32 	%f738, %f925, 0fBF800000;
	setp.lt.f32 	%p163, %f129, 0fC0000000;
	add.f32 	%f739, %f738, 0fBF800000;
	selp.f32 	%f925, %f739, %f738, %p163;
	bra.uni 	LBB0_107;
LBB0_105:
	add.f32 	%f925, %f925, 0f3F800000;
	setp.ltu.f32 	%p161, %f129, 0f40800000;
	@%p161 bra 	LBB0_107;
// %bb.106:                             // %__nv_fmaf_rn.exit.i.i.i1027
	add.f32 	%f734, %f925, 0f3F800000;
	fma.rn.f32 	%f736, %f184, 0fC0400000, %f129;
	setp.ge.f32 	%p162, %f736, 0f00000000;
	add.f32 	%f737, %f734, 0f3F800000;
	selp.f32 	%f925, %f737, %f734, %p162;
LBB0_107:                               // %__internal_fmodf_fastpath_quot.exit.i.i1031
	fma.rn.f32 	%f927, %f925, 0fC0000000, %f927;
LBB0_112:                               // %__internal_fmodf_kernel.exit.i1056
	abs.f32 	%f751, %f927;
	setp.gtu.f32 	%p169, %f751, 0f7F800000;
	@%p169 bra 	LBB0_114;
// %bb.113:
	mov.b32 	%r340, %f126;
	and.b32  	%r341, %r340, -2147483648;
	mov.b32 	%r342, %f927;
	or.b32  	%r343, %r341, %r342;
	mov.b32 	%f927, %r343;
LBB0_114:                               // %__nv_fmodf.exit1057
	add.f32 	%f752, %f927, %f927;
	mov.b32 	%r350, %f752;
	and.b32  	%r351, %r350, -2147483648;
	or.b32  	%r352, %r351, 1056964608;
	mov.b32 	%f753, %r352;
	add.f32 	%f754, %f752, %f753;
	cvt.rzi.f32.f32 	%f755, %f754;
	abs.f32 	%f756, %f752;
	setp.gt.f32 	%p170, %f756, 0f4B000000;
	selp.f32 	%f757, %f752, %f755, %p170;
	cvt.rzi.f32.f32 	%f758, %f752;
	setp.lt.f32 	%p171, %f756, 0f3F000000;
	selp.f32 	%f759, %f758, %f757, %p171;
	cvt.rzi.s32.f32 	%r353, %f759;
	fma.rn.f32 	%f760, %f759, 0fBF000000, %f927;
	mul.f32 	%f761, %f760, 0f34222169;
	fma.rn.f32 	%f762, %f760, 0f40490FDA, %f761;
	mul.f32 	%f763, %f762, %f762;
	fma.rn.f32 	%f764, %f763, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f765, %f764, %f763, 0f3D2AAABB;
	fma.rn.f32 	%f766, %f765, %f763, 0fBEFFFFFF;
	fma.rn.f32 	%f767, %f766, %f763, 0f3F800000;
	fma.rn.f32 	%f768, %f763, %f762, 0f00000000;
	fma.rn.f32 	%f769, %f763, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f770, %f769, %f763, 0fBE2AAAA8;
	fma.rn.f32 	%f771, %f770, %f768, %f762;
	and.b32  	%r354, %r353, 1;
	setp.eq.b32 	%p172, %r354, 1;
	selp.f32 	%f772, %f767, %f771, %p172;
	selp.f32 	%f773, %f771, %f767, %p172;
	and.b32  	%r355, %r353, 2;
	setp.eq.s32 	%p173, %r355, 0;
	neg.f32 	%f774, %f772;
	selp.f32 	%f775, %f772, %f774, %p173;
	add.s32 	%r356, %r353, 1;
	and.b32  	%r357, %r356, 2;
	setp.eq.s32 	%p174, %r357, 0;
	sub.f32 	%f777, %f213, %f773;
	selp.f32 	%f778, %f773, %f777, %p174;
	cvt.rzi.f32.f32 	%f779, %f927;
	setp.eq.f32 	%p175, %f779, %f927;
	mul.f32 	%f780, %f927, 0f00000000;
	selp.f32 	%f781, %f780, %f775, %p175;
	abs.f32 	%f782, %f927;
	setp.gt.f32 	%p176, %f782, 0f4B800000;
	add.f32 	%f783, %f781, 0f3F800000;
	selp.f32 	%f784, %f783, %f778, %p176;
	mov.b32 	%r346, %f784;
	mov.b32 	%r345, %f125;
	// begin inline asm
	cvt.rn.f16x2.f32 %r72, %r346, %r345;
	// end inline asm
	mov.b32 	%r349, %f781;
	mov.b32 	%r348, %f124;
	// begin inline asm
	cvt.rn.f16x2.f32 %r73, %r349, %r348;
	// end inline asm
	mov.u64 	%rd126, 2;
	mov.u64 	%rd127, %rd126;
LBB0_115:                               // %L1195.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd127, %rd127, %rd127;
	add.s64 	%rd126, %rd126, -1;
	setp.ne.s64 	%p177, %rd126, 0;
	@%p177 bra 	LBB0_115;
// %bb.116:                             // %L1197
	and.b64  	%rd82, %rd127, 9223372036854775807;
	setp.ne.s64 	%p178, %rd82, 16;
	@%p178 bra 	LBB0_124;
// %bb.117:                             // %L1204
	shr.u32 	%r74, %r1, 3;
	and.b32  	%r358, %r74, 2;
	or.b32  	%r75, %r105, %r358;
	mul.lo.s32 	%r77, %r54, %r75;
	cvt.rn.f32.s32 	%f785, %r77;
	mov.f32 	%f786, 0f40800000;
	div.approx.f32 	%f143, %f785, %f786;
	abs.f32 	%f931, %f143;
	setp.lt.f32 	%p179, %f931, 0f40000000;
	@%p179 bra 	LBB0_134;
// %bb.118:
	setp.gtu.f32 	%p180, %f931, 0f4B800000;
	@%p180 bra 	LBB0_130;
	bra.uni 	LBB0_119;
LBB0_130:
	mov.b32 	%r110, %f931;
	and.b32  	%r359, %r110, 8388607;
	or.b32  	%r2454, %r359, 1065353216;
	mov.b32 	%f930, %r2454;
	add.s32 	%r360, %r110, -1073741824;
	and.b32  	%r2455, %r360, -8388608;
	setp.eq.s32 	%p186, %r2455, 0;
	@%p186 bra 	LBB0_133;
// %bb.131:                             // %__nv_fmaf_rn.exit4.i.i.i1096.preheader
	mov.f32 	%f796, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f795,%f796;
	// end inline asm
LBB0_132:                               // %__nv_fmaf_rn.exit4.i.i.i1096
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r361, %r2455, 192937984;
	add.s32 	%r362, %r361, %r2454;
	mov.b32 	%f797, %r362;
	mul.f32 	%f798, %f795, %f797;
	sub.f32 	%f799, %f797, %f798;
	fma.rn.f32 	%f800, %f799, %f795, %f798;
	sub.f32 	%f801, %f797, %f800;
	fma.rz.f32 	%f802, %f801, %f795, %f800;
	cvt.rzi.f32.f32 	%f803, %f802;
	sub.f32 	%f930, %f797, %f803;
	sub.s32 	%r2455, %r2455, %r361;
	mov.b32 	%r2454, %f930;
	setp.ne.s32 	%p187, %r2455, 0;
	setp.ne.s32 	%p188, %r2454, 0;
	and.pred  	%p189, %p187, %p188;
	@%p189 bra 	LBB0_132;
LBB0_133:                               // %__internal_fmodf_slowpath_mod.exit.i.i1098
	setp.gt.u32 	%p190, %r110, 2139095039;
	selp.f32 	%f804, 0f7FFFFFFF, 0f4B800000, %p190;
	mul.f32 	%f805, %f930, 0f34000000;
	mul.f32 	%f931, %f804, %f805;
	bra.uni 	LBB0_134;
LBB0_119:                               // %__nv_fast_fdividef.exit.i.i.i1068
	div.approx.f32 	%f788, %f931, %f184;
	cvt.rzi.f32.f32 	%f929, %f788;
	fma.rn.f32 	%f149, %f929, 0fC0000000, %f931;
	mov.b32 	%r109, %f149;
	setp.lt.u32 	%p181, %r109, 1073741824;
	@%p181 bra 	LBB0_129;
// %bb.120:
	setp.lt.u32 	%p182, %r109, -2147483647;
	@%p182 bra 	LBB0_127;
// %bb.121:
	add.f32 	%f793, %f929, 0fBF800000;
	setp.lt.f32 	%p185, %f149, 0fC0000000;
	add.f32 	%f794, %f793, 0fBF800000;
	selp.f32 	%f929, %f794, %f793, %p185;
	bra.uni 	LBB0_129;
LBB0_127:
	add.f32 	%f929, %f929, 0f3F800000;
	setp.ltu.f32 	%p183, %f149, 0f40800000;
	@%p183 bra 	LBB0_129;
// %bb.128:                             // %__nv_fmaf_rn.exit.i.i.i1073
	add.f32 	%f789, %f929, 0f3F800000;
	fma.rn.f32 	%f791, %f184, 0fC0400000, %f149;
	setp.ge.f32 	%p184, %f791, 0f00000000;
	add.f32 	%f792, %f789, 0f3F800000;
	selp.f32 	%f929, %f792, %f789, %p184;
LBB0_129:                               // %__internal_fmodf_fastpath_quot.exit.i.i1077
	fma.rn.f32 	%f931, %f929, 0fC0000000, %f931;
LBB0_134:                               // %__internal_fmodf_kernel.exit.i1102
	xor.b32  	%r76, %r74, %r1;
	abs.f32 	%f806, %f931;
	setp.gtu.f32 	%p191, %f806, 0f7F800000;
	@%p191 bra 	LBB0_136;
// %bb.135:
	mov.b32 	%r363, %f143;
	and.b32  	%r364, %r363, -2147483648;
	mov.b32 	%r365, %f931;
	or.b32  	%r366, %r364, %r365;
	mov.b32 	%f931, %r366;
LBB0_136:                               // %__nv_fmodf.exit1103
	add.f32 	%f807, %f931, %f931;
	mov.b32 	%r367, %f807;
	and.b32  	%r368, %r367, -2147483648;
	or.b32  	%r369, %r368, 1056964608;
	mov.b32 	%f808, %r369;
	add.f32 	%f809, %f807, %f808;
	cvt.rzi.f32.f32 	%f810, %f809;
	abs.f32 	%f811, %f807;
	setp.gt.f32 	%p192, %f811, 0f4B000000;
	selp.f32 	%f812, %f807, %f810, %p192;
	cvt.rzi.f32.f32 	%f813, %f807;
	setp.lt.f32 	%p193, %f811, 0f3F000000;
	selp.f32 	%f814, %f813, %f812, %p193;
	cvt.rzi.s32.f32 	%r370, %f814;
	fma.rn.f32 	%f815, %f814, 0fBF000000, %f931;
	mul.f32 	%f816, %f815, 0f34222169;
	fma.rn.f32 	%f817, %f815, 0f40490FDA, %f816;
	mul.f32 	%f818, %f817, %f817;
	fma.rn.f32 	%f819, %f818, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f820, %f819, %f818, 0f3D2AAABB;
	fma.rn.f32 	%f821, %f820, %f818, 0fBEFFFFFF;
	fma.rn.f32 	%f822, %f821, %f818, 0f3F800000;
	fma.rn.f32 	%f823, %f818, %f817, 0f00000000;
	fma.rn.f32 	%f824, %f818, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f825, %f824, %f818, 0fBE2AAAA8;
	fma.rn.f32 	%f826, %f825, %f823, %f817;
	and.b32  	%r371, %r370, 1;
	setp.eq.b32 	%p194, %r371, 1;
	selp.f32 	%f827, %f822, %f826, %p194;
	selp.f32 	%f828, %f826, %f822, %p194;
	and.b32  	%r372, %r370, 2;
	setp.eq.s32 	%p195, %r372, 0;
	neg.f32 	%f829, %f827;
	selp.f32 	%f830, %f827, %f829, %p195;
	add.s32 	%r373, %r370, 1;
	and.b32  	%r374, %r373, 2;
	setp.eq.s32 	%p196, %r374, 0;
	sub.f32 	%f832, %f213, %f828;
	selp.f32 	%f833, %f828, %f832, %p196;
	cvt.rzi.f32.f32 	%f834, %f931;
	setp.eq.f32 	%p197, %f834, %f931;
	mul.f32 	%f835, %f931, 0f00000000;
	selp.f32 	%f836, %f835, %f830, %p197;
	abs.f32 	%f837, %f931;
	setp.gt.f32 	%p198, %f837, 0f4B800000;
	add.f32 	%f838, %f836, 0f3F800000;
	selp.f32 	%f839, %f838, %f833, %p198;
	and.b32  	%r375, %r76, 1;
	setp.eq.b32 	%p199, %r375, 1;
	selp.f32 	%f163, 0f00000000, 0f3F800000, %p199;
	shl.b32 	%r376, %r75, 2;
	sub.s32 	%r377, %r77, %r376;
	cvt.rn.f32.s32 	%f840, %r377;
	div.approx.f32 	%f166, %f840, %f786;
	abs.f32 	%f935, %f166;
	setp.lt.f32 	%p200, %f935, 0f40000000;
	@%p200 bra 	LBB0_148;
// %bb.137:
	setp.gtu.f32 	%p201, %f935, 0f4B800000;
	@%p201 bra 	LBB0_144;
	bra.uni 	LBB0_138;
LBB0_144:
	mov.b32 	%r118, %f935;
	and.b32  	%r378, %r118, 8388607;
	or.b32  	%r2456, %r378, 1065353216;
	mov.b32 	%f934, %r2456;
	add.s32 	%r379, %r118, -1073741824;
	and.b32  	%r2457, %r379, -8388608;
	setp.eq.s32 	%p207, %r2457, 0;
	@%p207 bra 	LBB0_147;
// %bb.145:                             // %__nv_fmaf_rn.exit4.i.i.i1142.preheader
	mov.f32 	%f851, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f850,%f851;
	// end inline asm
LBB0_146:                               // %__nv_fmaf_rn.exit4.i.i.i1142
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r380, %r2457, 192937984;
	add.s32 	%r381, %r380, %r2456;
	mov.b32 	%f852, %r381;
	mul.f32 	%f853, %f850, %f852;
	sub.f32 	%f854, %f852, %f853;
	fma.rn.f32 	%f855, %f854, %f850, %f853;
	sub.f32 	%f856, %f852, %f855;
	fma.rz.f32 	%f857, %f856, %f850, %f855;
	cvt.rzi.f32.f32 	%f858, %f857;
	sub.f32 	%f934, %f852, %f858;
	sub.s32 	%r2457, %r2457, %r380;
	mov.b32 	%r2456, %f934;
	setp.ne.s32 	%p208, %r2457, 0;
	setp.ne.s32 	%p209, %r2456, 0;
	and.pred  	%p210, %p208, %p209;
	@%p210 bra 	LBB0_146;
LBB0_147:                               // %__internal_fmodf_slowpath_mod.exit.i.i1144
	setp.gt.u32 	%p211, %r118, 2139095039;
	selp.f32 	%f859, 0f7FFFFFFF, 0f4B800000, %p211;
	mul.f32 	%f860, %f934, 0f34000000;
	mul.f32 	%f935, %f859, %f860;
	bra.uni 	LBB0_148;
LBB0_138:                               // %__nv_fast_fdividef.exit.i.i.i1114
	div.approx.f32 	%f843, %f935, %f184;
	cvt.rzi.f32.f32 	%f933, %f843;
	fma.rn.f32 	%f169, %f933, 0fC0000000, %f935;
	mov.b32 	%r117, %f169;
	setp.lt.u32 	%p202, %r117, 1073741824;
	@%p202 bra 	LBB0_143;
// %bb.139:
	setp.lt.u32 	%p203, %r117, -2147483647;
	@%p203 bra 	LBB0_141;
// %bb.140:
	add.f32 	%f848, %f933, 0fBF800000;
	setp.lt.f32 	%p206, %f169, 0fC0000000;
	add.f32 	%f849, %f848, 0fBF800000;
	selp.f32 	%f933, %f849, %f848, %p206;
	bra.uni 	LBB0_143;
LBB0_141:
	add.f32 	%f933, %f933, 0f3F800000;
	setp.ltu.f32 	%p204, %f169, 0f40800000;
	@%p204 bra 	LBB0_143;
// %bb.142:                             // %__nv_fmaf_rn.exit.i.i.i1119
	add.f32 	%f844, %f933, 0f3F800000;
	fma.rn.f32 	%f846, %f184, 0fC0400000, %f169;
	setp.ge.f32 	%p205, %f846, 0f00000000;
	add.f32 	%f847, %f844, 0f3F800000;
	selp.f32 	%f933, %f847, %f844, %p205;
LBB0_143:                               // %__internal_fmodf_fastpath_quot.exit.i.i1123
	fma.rn.f32 	%f935, %f933, 0fC0000000, %f935;
LBB0_148:                               // %__internal_fmodf_kernel.exit.i1148
	mul.f32 	%f164, %f839, %f163;
	mul.f32 	%f165, %f836, %f163;
	abs.f32 	%f861, %f935;
	setp.gtu.f32 	%p212, %f861, 0f7F800000;
	@%p212 bra 	LBB0_150;
// %bb.149:
	mov.b32 	%r382, %f166;
	and.b32  	%r383, %r382, -2147483648;
	mov.b32 	%r384, %f935;
	or.b32  	%r385, %r383, %r384;
	mov.b32 	%f935, %r385;
LBB0_150:                               // %__nv_fmodf.exit1149
	add.f32 	%f862, %f935, %f935;
	mov.b32 	%r399, %f862;
	and.b32  	%r400, %r399, -2147483648;
	or.b32  	%r401, %r400, 1056964608;
	mov.b32 	%f863, %r401;
	add.f32 	%f864, %f862, %f863;
	cvt.rzi.f32.f32 	%f865, %f864;
	abs.f32 	%f866, %f862;
	setp.gt.f32 	%p213, %f866, 0f4B000000;
	selp.f32 	%f867, %f862, %f865, %p213;
	cvt.rzi.f32.f32 	%f868, %f862;
	setp.lt.f32 	%p214, %f866, 0f3F000000;
	selp.f32 	%f869, %f868, %f867, %p214;
	cvt.rzi.s32.f32 	%r402, %f869;
	fma.rn.f32 	%f870, %f869, 0fBF000000, %f935;
	mul.f32 	%f871, %f870, 0f34222169;
	fma.rn.f32 	%f872, %f870, 0f40490FDA, %f871;
	mul.f32 	%f873, %f872, %f872;
	fma.rn.f32 	%f874, %f873, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f875, %f874, %f873, 0f3D2AAABB;
	fma.rn.f32 	%f876, %f875, %f873, 0fBEFFFFFF;
	fma.rn.f32 	%f877, %f876, %f873, 0f3F800000;
	fma.rn.f32 	%f878, %f873, %f872, 0f00000000;
	fma.rn.f32 	%f879, %f873, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f880, %f879, %f873, 0fBE2AAAA8;
	fma.rn.f32 	%f881, %f880, %f878, %f872;
	and.b32  	%r403, %r402, 1;
	setp.eq.b32 	%p215, %r403, 1;
	selp.f32 	%f882, %f877, %f881, %p215;
	selp.f32 	%f883, %f881, %f877, %p215;
	and.b32  	%r404, %r402, 2;
	setp.eq.s32 	%p216, %r404, 0;
	neg.f32 	%f884, %f882;
	selp.f32 	%f885, %f882, %f884, %p216;
	add.s32 	%r405, %r402, 1;
	and.b32  	%r406, %r405, 2;
	setp.eq.s32 	%p217, %r406, 0;
	sub.f32 	%f887, %f213, %f883;
	selp.f32 	%f888, %f883, %f887, %p217;
	cvt.rzi.f32.f32 	%f889, %f935;
	setp.eq.f32 	%p218, %f889, %f935;
	mul.f32 	%f890, %f935, 0f00000000;
	selp.f32 	%f891, %f890, %f885, %p218;
	abs.f32 	%f892, %f935;
	setp.gt.f32 	%p219, %f892, 0f4B800000;
	add.f32 	%f893, %f891, 0f3F800000;
	selp.f32 	%f894, %f893, %f888, %p219;
	mul.f32 	%f895, %f894, %f163;
	mul.f32 	%f896, %f891, %f163;
	mov.b32 	%r388, %f895;
	mov.b32 	%r387, %f164;
	// begin inline asm
	cvt.rn.f16x2.f32 %r125, %r388, %r387;
	// end inline asm
	mov.b32 	%r394, %f896;
	xor.b32  	%r391, %r394, -2147483648;
	mov.b32 	%r393, %f165;
	xor.b32  	%r390, %r393, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r126, %r391, %r390;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r127, %r394, %r393;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r128, %r388, %r387;
	// end inline asm
	and.b32  	%r407, %r101, 8;
	and.b32  	%r408, %r97, 16;
	and.b32  	%r409, %r2, 7;
	shl.b32 	%r410, %r2, 2;
	and.b32  	%r411, %r410, 32;
	or.b32  	%r412, %r407, %r409;
	or.b32  	%r413, %r412, %r408;
	or.b32  	%r129, %r413, %r411;
	and.b32  	%r130, %r5, 2048;
	and.b32  	%r414, %r98, 28;
	shl.b32 	%r415, %r4, 5;
	and.b32  	%r416, %r415, 96;
	or.b32  	%r131, %r414, %r416;
	shl.b32 	%r417, %r4, 4;
	and.b32  	%r132, %r417, 1920;
	and.b32  	%r133, %r1, 8;
	mul.lo.s32 	%r418, %r106, 65;
	bfe.u32 	%r419, %r2, 1, 1;
	mul.lo.s32 	%r420, %r419, 260;
	bfe.u32 	%r421, %r2, 2, 1;
	mul.lo.s32 	%r422, %r421, 130;
	shr.u32 	%r423, %r2, 3;
	mul.lo.s32 	%r424, %r423, 1057;
	shl.b32 	%r425, %r1, 4;
	or.b32  	%r426, %r425, %r133;
	shr.u32 	%r427, %r426, 2;
	and.b32  	%r428, %r427, 30;
	and.b32  	%r429, %r2, 1;
	mul.lo.s32 	%r430, %r429, 520;
	add.s32 	%r431, %r424, %r418;
	add.s32 	%r432, %r431, %r430;
	add.s32 	%r433, %r432, %r420;
	add.s32 	%r434, %r433, %r422;
	add.s32 	%r435, %r434, %r428;
	mul.wide.u32 	%rd85, %r435, 4;
	mov.u64 	%rd86, shmem;
	add.s64 	%rd37, %rd86, %rd85;
	add.s32 	%r436, %r418, 32;
	add.s32 	%r437, %r436, %r424;
	add.s32 	%r438, %r437, %r430;
	add.s32 	%r439, %r438, %r420;
	add.s32 	%r440, %r439, %r422;
	add.s32 	%r441, %r440, %r428;
	mul.wide.u32 	%rd87, %r441, 4;
	add.s64 	%rd38, %rd86, %rd87;
	add.s32 	%r442, %r418, 1;
	add.s32 	%r443, %r442, %r424;
	add.s32 	%r444, %r443, %r430;
	add.s32 	%r445, %r444, %r420;
	add.s32 	%r446, %r445, %r422;
	add.s32 	%r447, %r446, %r428;
	mul.wide.u32 	%rd88, %r447, 4;
	add.s64 	%rd39, %rd86, %rd88;
	add.s32 	%r448, %r418, 33;
	add.s32 	%r449, %r448, %r424;
	add.s32 	%r450, %r449, %r430;
	add.s32 	%r451, %r450, %r420;
	add.s32 	%r452, %r451, %r422;
	add.s32 	%r453, %r452, %r428;
	mul.wide.u32 	%rd89, %r453, 4;
	add.s64 	%rd40, %rd86, %rd89;
	or.b32  	%r454, %r423, 4;
	mul.lo.s32 	%r455, %r454, 1057;
	add.s32 	%r456, %r430, %r418;
	add.s32 	%r457, %r456, %r420;
	add.s32 	%r458, %r457, %r422;
	add.s32 	%r459, %r458, %r455;
	add.s32 	%r460, %r459, %r428;
	mul.wide.s32 	%rd90, %r460, 4;
	add.s64 	%rd41, %rd86, %rd90;
	add.s32 	%r461, %r436, %r430;
	add.s32 	%r462, %r461, %r420;
	add.s32 	%r463, %r462, %r422;
	add.s32 	%r464, %r463, %r455;
	add.s32 	%r465, %r464, %r428;
	mul.wide.s32 	%rd91, %r465, 4;
	add.s64 	%rd42, %rd86, %rd91;
	add.s32 	%r466, %r442, %r430;
	add.s32 	%r467, %r466, %r420;
	add.s32 	%r468, %r467, %r422;
	add.s32 	%r469, %r468, %r455;
	add.s32 	%r470, %r469, %r428;
	mul.wide.s32 	%rd92, %r470, 4;
	add.s64 	%rd43, %rd86, %rd92;
	add.s32 	%r471, %r448, %r430;
	add.s32 	%r472, %r471, %r420;
	add.s32 	%r473, %r472, %r422;
	add.s32 	%r474, %r473, %r455;
	add.s32 	%r475, %r474, %r428;
	mul.wide.s32 	%rd93, %r475, 4;
	add.s64 	%rd44, %rd86, %rd93;
	and.b32  	%r476, %r3, 32;
	shl.b32 	%r477, %r1, 3;
	and.b32  	%r478, %r477, 64;
	shl.b32 	%r479, %r2, 1;
	or.b32  	%r480, %r478, %r479;
	shr.u32 	%r481, %r480, 2;
	mad.lo.s32 	%r482, %r103, 130, %r476;
	mad.lo.s32 	%r483, %r106, 520, %r482;
	mad.lo.s32 	%r484, %r102, 65, %r483;
	mad.lo.s32 	%r485, %r105, 260, %r484;
	add.s32 	%r486, %r485, %r481;
	or.b32  	%r487, %r481, 8;
	add.s32 	%r488, %r485, %r487;
	mul.lo.s32 	%r489, %r99, 65;
	or.b32  	%r490, %r481, %r476;
	add.s32 	%r491, %r490, %r489;
	or.b32  	%r492, %r487, %r476;
	add.s32 	%r493, %r492, %r489;
	shl.b32 	%r494, %r4, 16;
	and.b32  	%r134, %r494, 262144;
	shl.b32 	%r495, %r2, 16;
	and.b32  	%r135, %r495, 524288;
	and.b32  	%r496, %r425, 112;
	shl.b32 	%r497, %r4, 7;
	and.b32  	%r498, %r497, 384;
	or.b32  	%r136, %r496, %r498;
	and.b32  	%r499, %r410, 28;
	or.b32  	%r500, %r499, %r74;
	shl.b32 	%r501, %r4, 2;
	and.b32  	%r502, %r501, 480;
	or.b32  	%r503, %r500, %r502;
	shl.b32 	%r137, %r503, 9;
	shl.b32 	%r504, %r4, 14;
	and.b32  	%r138, %r504, 65536;
	shl.b32 	%r505, %r2, 14;
	and.b32  	%r139, %r505, 131072;
	shl.b32 	%r140, %r503, 7;
	and.b32  	%r506, %r479, 14;
	or.b32  	%r507, %r506, %r106;
	mul.lo.s32 	%r508, %r507, 65;
	add.s32 	%r509, %r508, %r424;
	add.s32 	%r510, %r509, %r428;
	mul.wide.u32 	%rd94, %r510, 4;
	add.s64 	%rd45, %rd86, %rd94;
	cvt.u64.u32 	%rd95, %r428;
	cvt.u64.u32 	%rd96, %r508;
	cvt.u64.u32 	%rd97, %r424;
	add.s64 	%rd98, %rd97, %rd96;
	add.s64 	%rd99, %rd98, %rd95;
	shl.b64 	%rd100, %rd99, 2;
	add.s64 	%rd46, %rd86, %rd100;
	add.s32 	%r511, %r508, %r455;
	add.s32 	%r512, %r511, %r428;
	mul.wide.u32 	%rd101, %r512, 4;
	add.s64 	%rd47, %rd86, %rd101;
	cvt.u64.u32 	%rd102, %r455;
	add.s64 	%rd103, %rd102, %rd96;
	add.s64 	%rd104, %rd103, %rd95;
	shl.b64 	%rd105, %rd104, 2;
	add.s64 	%rd48, %rd86, %rd105;
	mul.wide.u32 	%rd106, %r493, 4;
	add.s64 	%rd49, %rd86, %rd106;
	mul.wide.u32 	%rd107, %r491, 4;
	add.s64 	%rd50, %rd86, %rd107;
	mul.wide.u32 	%rd108, %r488, 4;
	add.s64 	%rd51, %rd86, %rd108;
	mul.wide.u32 	%rd109, %r486, 4;
	add.s64 	%rd52, %rd86, %rd109;
	mov.u32 	%r2448, 0;
	setp.eq.s32 	%p220, %r133, 0;
	mov.u16 	%rs288, 25600;
	mov.u16 	%rs236, 21504;
	mov.u16 	%rs296, 18432;
	mov.u16 	%rs274, -14592;
	mov.u32 	%r2449, %r2448;
	mov.u32 	%r2450, %r2448;
	mov.u32 	%r2451, %r2448;
	mov.u32 	%r2452, %r2448;
	mov.u32 	%r2453, %r2448;
	mov.u32 	%r2446, %r2448;
LBB0_122:                               // %L1299
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_123 Depth 2
	or.b32  	%r546, %r129, %r2446;
	shl.b32 	%r547, %r546, 12;
	or.b32  	%r548, %r547, %r130;
	or.b32  	%r549, %r548, %r131;
	or.b32  	%r550, %r549, %r132;
	mul.wide.s32 	%rd110, %r550, 4;
	add.s64 	%rd111, %rd2, %rd110;
	ld.global.v4.u32 	{%r551, %r552, %r553, %r554}, [%rd111];
	or.b32  	%r555, %r550, 524288;
	mul.wide.s32 	%rd112, %r555, 4;
	add.s64 	%rd113, %rd2, %rd112;
	ld.global.v4.u32 	{%r556, %r557, %r558, %r559}, [%rd113];
	selp.b32 	%r560, %r553, %r551, %p220;
	shfl.sync.bfly.b32	%r561, %r560, 8, 31, -1;
	selp.b32 	%r514, %r551, %r561, %p220;
	selp.b32 	%r515, %r561, %r553, %p220;
	selp.b32 	%r562, %r554, %r552, %p220;
	shfl.sync.bfly.b32	%r563, %r562, 8, 31, -1;
	selp.b32 	%r522, %r552, %r563, %p220;
	selp.b32 	%r523, %r563, %r554, %p220;
	selp.b32 	%r564, %r558, %r556, %p220;
	shfl.sync.bfly.b32	%r565, %r564, 8, 31, -1;
	selp.b32 	%r530, %r556, %r565, %p220;
	selp.b32 	%r531, %r565, %r558, %p220;
	selp.b32 	%r566, %r559, %r557, %p220;
	shfl.sync.bfly.b32	%r567, %r566, 8, 31, -1;
	selp.b32 	%r538, %r557, %r567, %p220;
	selp.b32 	%r539, %r567, %r559, %p220;
	mov.u32 	%r540, 21520;
	// begin inline asm
	prmt.b32 %r513, %r514, %r515, %r540;
	// end inline asm
	mov.u32 	%r544, 30258;
	// begin inline asm
	prmt.b32 %r517, %r514, %r515, %r544;
	// end inline asm
	// begin inline asm
	prmt.b32 %r521, %r522, %r523, %r540;
	// end inline asm
	// begin inline asm
	prmt.b32 %r525, %r522, %r523, %r544;
	// end inline asm
	// begin inline asm
	prmt.b32 %r529, %r530, %r531, %r540;
	// end inline asm
	// begin inline asm
	prmt.b32 %r533, %r530, %r531, %r544;
	// end inline asm
	// begin inline asm
	prmt.b32 %r537, %r538, %r539, %r540;
	// end inline asm
	// begin inline asm
	prmt.b32 %r541, %r538, %r539, %r544;
	// end inline asm
	st.shared.u32 	[%rd37], %r513;
	st.shared.u32 	[%rd38], %r517;
	st.shared.u32 	[%rd39], %r521;
	st.shared.u32 	[%rd40], %r525;
	st.shared.u32 	[%rd41], %r529;
	st.shared.u32 	[%rd42], %r533;
	st.shared.u32 	[%rd43], %r537;
	st.shared.u32 	[%rd44], %r541;
	bar.sync 	0;
	mov.u32 	%r2447, 256;
	mov.u64 	%rd128, %rd52;
	mov.u64 	%rd129, %rd51;
	mov.u64 	%rd130, %rd50;
	mov.u64 	%rd131, %rd49;
LBB0_123:                               // %L6801
                                        //   Parent Loop BB0_122 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov.u32 	%r91, %r2453;
	mov.u32 	%r90, %r2452;
	ld.shared.u32 	%r92, [%rd128];
	ld.shared.u32 	%r93, [%rd129];
	// begin inline asm
	mov.b32 %r573, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r584, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r572, %r92, -2004318072;
	mov.u32 	%r571, 983055;
	// begin inline asm
	lop3.b32 %r570, %r571, %r572, %r573, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r574, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r575, %r573, %r574;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r578, %r570, %r575;
	// end inline asm
	mov.u32 	%r582, 15728880;
	// begin inline asm
	lop3.b32 %r581, %r582, %r572, %r584, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r585, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r586, %r584, %r585;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r589, %r581, %r586;
	// end inline asm
	shr.u32 	%r594, %r572, 8;
	// begin inline asm
	lop3.b32 %r592, %r571, %r594, %r573, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r596, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r597, %r573, %r596;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r600, %r592, %r597;
	// end inline asm
	// begin inline asm
	lop3.b32 %r603, %r582, %r594, %r584, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r607, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r608, %r584, %r607;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r611, %r603, %r608;
	// end inline asm
	// begin inline asm
	mov.b32 %r619, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r630, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r618, %r93, -2004318072;
	// begin inline asm
	lop3.b32 %r616, %r571, %r618, %r619, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r620, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r621, %r619, %r620;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r624, %r616, %r621;
	// end inline asm
	// begin inline asm
	lop3.b32 %r627, %r582, %r618, %r630, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r631, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r632, %r630, %r631;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r635, %r627, %r632;
	// end inline asm
	shr.u32 	%r640, %r618, 8;
	// begin inline asm
	lop3.b32 %r638, %r571, %r640, %r619, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r642, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r643, %r619, %r642;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r646, %r638, %r643;
	// end inline asm
	// begin inline asm
	lop3.b32 %r649, %r582, %r640, %r630, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r653, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r654, %r630, %r653;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r657, %r649, %r654;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r660, %r226;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r662, %r660, %r578;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r665, %r226;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r667, %r665, %r589;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r670, %r226;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r672, %r670, %r600;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r675, %r226;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r677, %r675, %r611;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r680, %r226;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r682, %r680, %r624;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r685, %r226;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r687, %r685, %r635;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r690, %r226;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r692, %r690, %r646;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r695, %r226;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r697, %r695, %r657;
	// end inline asm
	// begin inline asm
	mov.b32 %r705, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r716, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r704, %r2448, -2004318072;
	// begin inline asm
	lop3.b32 %r702, %r571, %r704, %r705, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r706, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r707, %r705, %r706;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r710, %r702, %r707;
	// end inline asm
	// begin inline asm
	lop3.b32 %r713, %r582, %r704, %r716, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r717, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r718, %r716, %r717;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r721, %r713, %r718;
	// end inline asm
	shr.u32 	%r726, %r704, 8;
	// begin inline asm
	lop3.b32 %r724, %r571, %r726, %r705, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r728, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r729, %r705, %r728;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r732, %r724, %r729;
	// end inline asm
	// begin inline asm
	lop3.b32 %r735, %r582, %r726, %r716, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r739, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r740, %r716, %r739;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r743, %r735, %r740;
	// end inline asm
	// begin inline asm
	mov.b32 %r751, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r762, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r750, %r2449, -2004318072;
	// begin inline asm
	lop3.b32 %r748, %r571, %r750, %r751, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r752, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r753, %r751, %r752;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r756, %r748, %r753;
	// end inline asm
	// begin inline asm
	lop3.b32 %r759, %r582, %r750, %r762, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r763, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r764, %r762, %r763;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r767, %r759, %r764;
	// end inline asm
	shr.u32 	%r772, %r750, 8;
	// begin inline asm
	lop3.b32 %r770, %r571, %r772, %r751, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r774, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r775, %r751, %r774;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r778, %r770, %r775;
	// end inline asm
	// begin inline asm
	lop3.b32 %r781, %r582, %r772, %r762, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r785, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r786, %r762, %r785;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r789, %r781, %r786;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r792, %r172, %r710, %r662;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r796, %r172, %r721, %r667;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r800, %r172, %r732, %r672;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r804, %r172, %r743, %r677;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r808, %r172, %r756, %r682;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r812, %r172, %r767, %r687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r816, %r172, %r778, %r692;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r820, %r172, %r789, %r697;
	// end inline asm
	// begin inline asm
	mov.b32 %r829, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r840, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r828, %r2450, -2004318072;
	// begin inline asm
	lop3.b32 %r826, %r571, %r828, %r829, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r830, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r831, %r829, %r830;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r834, %r826, %r831;
	// end inline asm
	// begin inline asm
	lop3.b32 %r837, %r582, %r828, %r840, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r841, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r842, %r840, %r841;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r845, %r837, %r842;
	// end inline asm
	shr.u32 	%r850, %r828, 8;
	// begin inline asm
	lop3.b32 %r848, %r571, %r850, %r829, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r852, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r853, %r829, %r852;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r856, %r848, %r853;
	// end inline asm
	// begin inline asm
	lop3.b32 %r859, %r582, %r850, %r840, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r863, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r864, %r840, %r863;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r867, %r859, %r864;
	// end inline asm
	// begin inline asm
	mov.b32 %r875, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r886, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r874, %r2451, -2004318072;
	// begin inline asm
	lop3.b32 %r872, %r571, %r874, %r875, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r876, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r877, %r875, %r876;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r880, %r872, %r877;
	// end inline asm
	// begin inline asm
	lop3.b32 %r883, %r582, %r874, %r886, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r887, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r888, %r886, %r887;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r891, %r883, %r888;
	// end inline asm
	shr.u32 	%r896, %r874, 8;
	// begin inline asm
	lop3.b32 %r894, %r571, %r896, %r875, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r898, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r899, %r875, %r898;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r902, %r894, %r899;
	// end inline asm
	// begin inline asm
	lop3.b32 %r905, %r582, %r896, %r886, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r909, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r910, %r886, %r909;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r913, %r905, %r910;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r916, %r190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r918, %r916, %r834, %r792;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r922, %r190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r924, %r922, %r845, %r796;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r928, %r190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r930, %r928, %r856, %r800;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r934, %r190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r936, %r934, %r867, %r804;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r940, %r190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r942, %r940, %r880, %r808;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r946, %r190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r948, %r946, %r891, %r812;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r952, %r190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r954, %r952, %r902, %r816;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r958, %r190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r960, %r958, %r913, %r820;
	// end inline asm
	// begin inline asm
	mov.b32 %r969, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r980, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r968, %r90, -2004318072;
	// begin inline asm
	lop3.b32 %r966, %r571, %r968, %r969, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r970, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r971, %r969, %r970;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r974, %r966, %r971;
	// end inline asm
	// begin inline asm
	lop3.b32 %r977, %r582, %r968, %r980, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r981, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r982, %r980, %r981;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r985, %r977, %r982;
	// end inline asm
	shr.u32 	%r990, %r968, 8;
	// begin inline asm
	lop3.b32 %r988, %r571, %r990, %r969, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r992, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r993, %r969, %r992;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r996, %r988, %r993;
	// end inline asm
	// begin inline asm
	lop3.b32 %r999, %r582, %r990, %r980, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1003, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1004, %r980, %r1003;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1007, %r999, %r1004;
	// end inline asm
	// begin inline asm
	mov.b32 %r1015, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1026, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1014, %r91, -2004318072;
	// begin inline asm
	lop3.b32 %r1012, %r571, %r1014, %r1015, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1016, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1017, %r1015, %r1016;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1020, %r1012, %r1017;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1023, %r582, %r1014, %r1026, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1027, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1028, %r1026, %r1027;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1031, %r1023, %r1028;
	// end inline asm
	shr.u32 	%r1036, %r1014, 8;
	// begin inline asm
	lop3.b32 %r1034, %r571, %r1036, %r1015, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1038, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1039, %r1015, %r1038;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1042, %r1034, %r1039;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1045, %r582, %r1036, %r1026, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1049, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1050, %r1026, %r1049;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1053, %r1045, %r1050;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1095, %r208, %r974, %r918;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1092, %r208, %r985, %r924;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1104, %r208, %r996, %r930;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1101, %r208, %r1007, %r936;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1113, %r208, %r1020, %r942;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1110, %r208, %r1031, %r948;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1122, %r208, %r1042, %r954;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1119, %r208, %r1053, %r960;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1088, %r32;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1090, %r1088, %r1092;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1093, %r31, %r1095, %r1090;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1097, %r32;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1099, %r1097, %r1101;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1102, %r31, %r1104, %r1099;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1106, %r32;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1108, %r1106, %r1110;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1111, %r31, %r1113, %r1108;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1115, %r32;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1117, %r1115, %r1119;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1120, %r31, %r1122, %r1117;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1124, %r32, %r1095;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1127, %r31, %r1092, %r1124;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1131, %r32, %r1104;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1134, %r31, %r1101, %r1131;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1138, %r32, %r1113;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1141, %r31, %r1110, %r1138;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1145, %r32, %r1122;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1148, %r31, %r1119, %r1145;
	// end inline asm
	mov.u32 	%r2193, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1199, %r1196}, {%r50, %r52, %r51, %r53}, {%r1093, %r1127}, {%r2193, %r2193};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1208, %r1205}, {%r50, %r52, %r51, %r53}, {%r1102, %r1134}, {%r2193, %r2193};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1217, %r1214}, {%r50, %r52, %r51, %r53}, {%r1111, %r1141}, {%r2193, %r2193};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1226, %r1223}, {%r50, %r52, %r51, %r53}, {%r1120, %r1148}, {%r2193, %r2193};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1192, %r73;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1194, %r1192, %r1196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1197, %r72, %r1199, %r1194;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1201, %r73;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1203, %r1201, %r1205;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1206, %r72, %r1208, %r1203;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1210, %r73;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1212, %r1210, %r1214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1215, %r72, %r1217, %r1212;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1219, %r73;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1221, %r1219, %r1223;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1224, %r72, %r1226, %r1221;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1228, %r73, %r1199;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1231, %r72, %r1196, %r1228;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1235, %r73, %r1208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1238, %r72, %r1205, %r1235;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1242, %r73, %r1217;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1245, %r72, %r1214, %r1242;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1249, %r73, %r1226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1252, %r72, %r1223, %r1249;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1256, %r1257}, {%r125, %r127, %r126, %r128}, {%r1197, %r1231}, {%r2193, %r2193};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1266, %r1267}, {%r125, %r127, %r126, %r128}, {%r1206, %r1238}, {%r2193, %r2193};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1276, %r1277}, {%r125, %r127, %r126, %r128}, {%r1215, %r1245}, {%r2193, %r2193};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1286, %r1287}, {%r125, %r127, %r126, %r128}, {%r1224, %r1252}, {%r2193, %r2193};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1296, %r100, %r1256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1299, %r100, %r1257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1302, %r100, %r1266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1305, %r100, %r1267;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1308, %r100, %r1276;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1311, %r100, %r1277;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1314, %r100, %r1286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1317, %r100, %r1287;
	// end inline asm
	// begin inline asm
	mov.b32 %r1320, {%rs274, %rs274};
	// end inline asm
	mov.u16 	%rs99, 18176;
	// begin inline asm
	mov.b32 %r1321, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1322, %r1296, %r1320;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1325, %r1322, %r1321;
	// end inline asm
	// begin inline asm
	mov.b32 %r1328, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1329, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1330, %r1299, %r1328;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1333, %r1330, %r1329;
	// end inline asm
	// begin inline asm
	mov.b32 %r1336, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1337, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1338, %r1302, %r1336;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1341, %r1338, %r1337;
	// end inline asm
	// begin inline asm
	mov.b32 %r1344, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1345, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1346, %r1305, %r1344;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1349, %r1346, %r1345;
	// end inline asm
	// begin inline asm
	mov.b32 %r1352, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1353, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1354, %r1308, %r1352;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1357, %r1354, %r1353;
	// end inline asm
	// begin inline asm
	mov.b32 %r1360, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1361, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1362, %r1311, %r1360;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1365, %r1362, %r1361;
	// end inline asm
	// begin inline asm
	mov.b32 %r1368, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1369, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1370, %r1314, %r1368;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1373, %r1370, %r1369;
	// end inline asm
	// begin inline asm
	mov.b32 %r1376, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1377, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1378, %r1317, %r1376;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1381, %r1378, %r1377;
	// end inline asm
	// begin inline asm
	mov.b32 %r1387, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1385, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1386, %r1387, %r1385;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1389, %r1325, %r1386;
	// end inline asm
	// begin inline asm
	mov.b32 %r1392, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1393, %r1387, %r1392;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1396, %r1333, %r1393;
	// end inline asm
	// begin inline asm
	mov.b32 %r1399, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1400, %r1387, %r1399;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1403, %r1341, %r1400;
	// end inline asm
	// begin inline asm
	mov.b32 %r1406, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1407, %r1387, %r1406;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1410, %r1349, %r1407;
	// end inline asm
	mov.u32 	%r1416, 25152;
	// begin inline asm
	prmt.b32 %r1413, %r1389, %r1403, %r1416;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1417, %r1396, %r1410, %r1416;
	// end inline asm
	shl.b32 	%r1424, %r1417, 4;
	mov.u32 	%r1422, 252645135;
	// begin inline asm
	lop3.b32 %r1421, %r1422, %r1413, %r1424, 202;
	// end inline asm
	xor.b32  	%r2364, %r1421, -2004318072;
	// begin inline asm
	mov.b32 %r1428, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1426, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1427, %r1428, %r1426;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1430, %r1357, %r1427;
	// end inline asm
	// begin inline asm
	mov.b32 %r1433, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1434, %r1428, %r1433;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1437, %r1365, %r1434;
	// end inline asm
	// begin inline asm
	mov.b32 %r1440, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1441, %r1428, %r1440;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1444, %r1373, %r1441;
	// end inline asm
	// begin inline asm
	mov.b32 %r1447, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1448, %r1428, %r1447;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1451, %r1381, %r1448;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1454, %r1430, %r1444, %r1416;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1458, %r1437, %r1451, %r1416;
	// end inline asm
	shl.b32 	%r1465, %r1458, 4;
	// begin inline asm
	lop3.b32 %r1462, %r1422, %r1454, %r1465, 202;
	// end inline asm
	xor.b32  	%r2365, %r1462, -2004318072;
	st.shared.u32 	[%rd130], %r2364;
	st.shared.u32 	[%rd131], %r2365;
	ld.shared.u32 	%r2452, [%rd128];
	ld.shared.u32 	%r2453, [%rd129];
	// begin inline asm
	mov.b32 %r1471, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1482, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1470, %r2452, -2004318072;
	// begin inline asm
	lop3.b32 %r1468, %r571, %r1470, %r1471, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1472, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1473, %r1471, %r1472;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1476, %r1468, %r1473;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1479, %r582, %r1470, %r1482, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1483, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1484, %r1482, %r1483;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1487, %r1479, %r1484;
	// end inline asm
	shr.u32 	%r1492, %r1470, 8;
	// begin inline asm
	lop3.b32 %r1490, %r571, %r1492, %r1471, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1494, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1495, %r1471, %r1494;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1498, %r1490, %r1495;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1501, %r582, %r1492, %r1482, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1505, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1506, %r1482, %r1505;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1509, %r1501, %r1506;
	// end inline asm
	// begin inline asm
	mov.b32 %r1517, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1528, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1516, %r2453, -2004318072;
	// begin inline asm
	lop3.b32 %r1514, %r571, %r1516, %r1517, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1518, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1519, %r1517, %r1518;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1522, %r1514, %r1519;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1525, %r582, %r1516, %r1528, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1529, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1530, %r1528, %r1529;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1533, %r1525, %r1530;
	// end inline asm
	shr.u32 	%r1538, %r1516, 8;
	// begin inline asm
	lop3.b32 %r1536, %r571, %r1538, %r1517, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1540, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1541, %r1517, %r1540;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1544, %r1536, %r1541;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1547, %r582, %r1538, %r1528, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1551, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1552, %r1528, %r1551;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1555, %r1547, %r1552;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1558, %r226;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1560, %r1558, %r1476;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1563, %r226;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1565, %r1563, %r1487;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1568, %r226;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1570, %r1568, %r1498;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1573, %r226;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1575, %r1573, %r1509;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1578, %r226;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1580, %r1578, %r1522;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1583, %r226;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1585, %r1583, %r1533;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1588, %r226;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1590, %r1588, %r1544;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1593, %r226;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1595, %r1593, %r1555;
	// end inline asm
	// begin inline asm
	mov.b32 %r1603, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1614, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1600, %r571, %r828, %r1603, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1604, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1605, %r1603, %r1604;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1608, %r1600, %r1605;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1611, %r582, %r828, %r1614, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1615, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1616, %r1614, %r1615;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1619, %r1611, %r1616;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1622, %r571, %r850, %r1603, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1626, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1627, %r1603, %r1626;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1630, %r1622, %r1627;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1633, %r582, %r850, %r1614, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1637, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1638, %r1614, %r1637;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1641, %r1633, %r1638;
	// end inline asm
	// begin inline asm
	mov.b32 %r1649, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1660, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1646, %r571, %r874, %r1649, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1650, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1651, %r1649, %r1650;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1654, %r1646, %r1651;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1657, %r582, %r874, %r1660, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1661, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1662, %r1660, %r1661;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1665, %r1657, %r1662;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1668, %r571, %r896, %r1649, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1672, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1673, %r1649, %r1672;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1676, %r1668, %r1673;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1679, %r582, %r896, %r1660, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1683, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1684, %r1660, %r1683;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1687, %r1679, %r1684;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1690, %r172, %r1608, %r1560;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1694, %r172, %r1619, %r1565;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1698, %r172, %r1630, %r1570;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1702, %r172, %r1641, %r1575;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1706, %r172, %r1654, %r1580;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1710, %r172, %r1665, %r1585;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1714, %r172, %r1676, %r1590;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1718, %r172, %r1687, %r1595;
	// end inline asm
	// begin inline asm
	mov.b32 %r1727, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1738, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1724, %r571, %r968, %r1727, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1728, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1729, %r1727, %r1728;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1732, %r1724, %r1729;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1735, %r582, %r968, %r1738, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1739, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1740, %r1738, %r1739;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1743, %r1735, %r1740;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1746, %r571, %r990, %r1727, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1750, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1751, %r1727, %r1750;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1754, %r1746, %r1751;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1757, %r582, %r990, %r1738, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1761, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1762, %r1738, %r1761;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1765, %r1757, %r1762;
	// end inline asm
	// begin inline asm
	mov.b32 %r1773, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1784, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1770, %r571, %r1014, %r1773, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1774, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1775, %r1773, %r1774;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1778, %r1770, %r1775;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1781, %r582, %r1014, %r1784, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1785, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1786, %r1784, %r1785;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1789, %r1781, %r1786;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1792, %r571, %r1036, %r1773, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1796, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1797, %r1773, %r1796;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1800, %r1792, %r1797;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1803, %r582, %r1036, %r1784, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1807, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1808, %r1784, %r1807;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1811, %r1803, %r1808;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1814, %r190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1816, %r1814, %r1732, %r1690;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1820, %r190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1822, %r1820, %r1743, %r1694;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1826, %r190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1828, %r1826, %r1754, %r1698;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1832, %r190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1834, %r1832, %r1765, %r1702;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1838, %r190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1840, %r1838, %r1778, %r1706;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1844, %r190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1846, %r1844, %r1789, %r1710;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1850, %r190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1852, %r1850, %r1800, %r1714;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1856, %r190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1858, %r1856, %r1811, %r1718;
	// end inline asm
	// begin inline asm
	mov.b32 %r1867, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1878, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1864, %r571, %r572, %r1867, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1868, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1869, %r1867, %r1868;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1872, %r1864, %r1869;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1875, %r582, %r572, %r1878, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1879, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1880, %r1878, %r1879;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1883, %r1875, %r1880;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1886, %r571, %r594, %r1867, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1890, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1891, %r1867, %r1890;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1894, %r1886, %r1891;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1897, %r582, %r594, %r1878, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1901, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1902, %r1878, %r1901;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1905, %r1897, %r1902;
	// end inline asm
	// begin inline asm
	mov.b32 %r1913, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1924, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1910, %r571, %r618, %r1913, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1914, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1915, %r1913, %r1914;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1918, %r1910, %r1915;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1921, %r582, %r618, %r1924, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1925, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1926, %r1924, %r1925;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1929, %r1921, %r1926;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1932, %r571, %r640, %r1913, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1936, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1937, %r1913, %r1936;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1940, %r1932, %r1937;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1943, %r582, %r640, %r1924, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1947, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1948, %r1924, %r1947;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1951, %r1943, %r1948;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1993, %r208, %r1872, %r1816;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1990, %r208, %r1883, %r1822;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2002, %r208, %r1894, %r1828;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1999, %r208, %r1905, %r1834;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2011, %r208, %r1918, %r1840;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2008, %r208, %r1929, %r1846;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2020, %r208, %r1940, %r1852;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2017, %r208, %r1951, %r1858;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1986, %r32;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1988, %r1986, %r1990;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1991, %r31, %r1993, %r1988;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1995, %r32;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1997, %r1995, %r1999;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2000, %r31, %r2002, %r1997;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2004, %r32;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2006, %r2004, %r2008;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2009, %r31, %r2011, %r2006;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2013, %r32;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2015, %r2013, %r2017;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2018, %r31, %r2020, %r2015;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2022, %r32, %r1993;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2025, %r31, %r1990, %r2022;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2029, %r32, %r2002;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2032, %r31, %r1999, %r2029;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2036, %r32, %r2011;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2039, %r31, %r2008, %r2036;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2043, %r32, %r2020;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2046, %r31, %r2017, %r2043;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2097, %r2094}, {%r50, %r52, %r51, %r53}, {%r1991, %r2025}, {%r2193, %r2193};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2106, %r2103}, {%r50, %r52, %r51, %r53}, {%r2000, %r2032}, {%r2193, %r2193};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2115, %r2112}, {%r50, %r52, %r51, %r53}, {%r2009, %r2039}, {%r2193, %r2193};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2124, %r2121}, {%r50, %r52, %r51, %r53}, {%r2018, %r2046}, {%r2193, %r2193};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2090, %r73;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2092, %r2090, %r2094;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2095, %r72, %r2097, %r2092;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2099, %r73;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2101, %r2099, %r2103;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2104, %r72, %r2106, %r2101;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2108, %r73;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2110, %r2108, %r2112;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2113, %r72, %r2115, %r2110;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2117, %r73;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2119, %r2117, %r2121;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2122, %r72, %r2124, %r2119;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2126, %r73, %r2097;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2129, %r72, %r2094, %r2126;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2133, %r73, %r2106;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2136, %r72, %r2103, %r2133;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2140, %r73, %r2115;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2143, %r72, %r2112, %r2140;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2147, %r73, %r2124;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2150, %r72, %r2121, %r2147;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2154, %r2155}, {%r125, %r127, %r126, %r128}, {%r2095, %r2129}, {%r2193, %r2193};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2164, %r2165}, {%r125, %r127, %r126, %r128}, {%r2104, %r2136}, {%r2193, %r2193};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2174, %r2175}, {%r125, %r127, %r126, %r128}, {%r2113, %r2143}, {%r2193, %r2193};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2184, %r2185}, {%r125, %r127, %r126, %r128}, {%r2122, %r2150}, {%r2193, %r2193};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2194, %r100, %r2154;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2197, %r100, %r2155;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2200, %r100, %r2164;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2203, %r100, %r2165;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2206, %r100, %r2174;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2209, %r100, %r2175;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2212, %r100, %r2184;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2215, %r100, %r2185;
	// end inline asm
	// begin inline asm
	mov.b32 %r2218, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2219, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2220, %r2194, %r2218;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2223, %r2220, %r2219;
	// end inline asm
	// begin inline asm
	mov.b32 %r2226, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2227, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2228, %r2197, %r2226;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2231, %r2228, %r2227;
	// end inline asm
	// begin inline asm
	mov.b32 %r2234, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2235, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2236, %r2200, %r2234;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2239, %r2236, %r2235;
	// end inline asm
	// begin inline asm
	mov.b32 %r2242, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2243, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2244, %r2203, %r2242;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2247, %r2244, %r2243;
	// end inline asm
	// begin inline asm
	mov.b32 %r2250, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2251, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2252, %r2206, %r2250;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2255, %r2252, %r2251;
	// end inline asm
	// begin inline asm
	mov.b32 %r2258, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2259, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2260, %r2209, %r2258;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2263, %r2260, %r2259;
	// end inline asm
	// begin inline asm
	mov.b32 %r2266, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2267, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2268, %r2212, %r2266;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2271, %r2268, %r2267;
	// end inline asm
	// begin inline asm
	mov.b32 %r2274, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2275, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2276, %r2215, %r2274;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2279, %r2276, %r2275;
	// end inline asm
	// begin inline asm
	mov.b32 %r2285, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r2283, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2284, %r2285, %r2283;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2287, %r2223, %r2284;
	// end inline asm
	// begin inline asm
	mov.b32 %r2290, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2291, %r2285, %r2290;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2294, %r2231, %r2291;
	// end inline asm
	// begin inline asm
	mov.b32 %r2297, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2298, %r2285, %r2297;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2301, %r2239, %r2298;
	// end inline asm
	// begin inline asm
	mov.b32 %r2304, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2305, %r2285, %r2304;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2308, %r2247, %r2305;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2311, %r2287, %r2301, %r1416;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2315, %r2294, %r2308, %r1416;
	// end inline asm
	shl.b32 	%r2322, %r2315, 4;
	// begin inline asm
	lop3.b32 %r2319, %r1422, %r2311, %r2322, 202;
	// end inline asm
	xor.b32  	%r2366, %r2319, -2004318072;
	// begin inline asm
	mov.b32 %r2326, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r2324, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2325, %r2326, %r2324;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2328, %r2255, %r2325;
	// end inline asm
	// begin inline asm
	mov.b32 %r2331, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2332, %r2326, %r2331;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2335, %r2263, %r2332;
	// end inline asm
	// begin inline asm
	mov.b32 %r2338, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2339, %r2326, %r2338;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2342, %r2271, %r2339;
	// end inline asm
	// begin inline asm
	mov.b32 %r2345, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2346, %r2326, %r2345;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2349, %r2279, %r2346;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2352, %r2328, %r2342, %r1416;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2356, %r2335, %r2349, %r1416;
	// end inline asm
	shl.b32 	%r2363, %r2356, 4;
	// begin inline asm
	lop3.b32 %r2360, %r1422, %r2352, %r2363, 202;
	// end inline asm
	xor.b32  	%r2367, %r2360, -2004318072;
	st.shared.u32 	[%rd130], %r2366;
	st.shared.u32 	[%rd131], %r2367;
	add.s32 	%r2447, %r2447, -32;
	add.s64 	%rd131, %rd131, 4228;
	add.s64 	%rd130, %rd130, 4228;
	add.s64 	%rd129, %rd129, 4228;
	add.s64 	%rd128, %rd128, 4228;
	setp.eq.s32 	%p221, %r2447, 0;
	mov.u32 	%r2448, %r90;
	mov.u32 	%r2449, %r91;
	mov.u32 	%r2450, %r92;
	mov.u32 	%r2451, %r93;
	@%p221 bra 	LBB0_151;
	bra.uni 	LBB0_123;
LBB0_151:                               // %guard_pass5785
                                        //   in Loop: Header=BB0_122 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r2373, [%rd45];
	ld.shared.u32 	%r2374, [%rd46+128];
	ld.shared.u32 	%r2381, [%rd46+4];
	ld.shared.u32 	%r2382, [%rd46+132];
	ld.shared.u32 	%r2389, [%rd47];
	ld.shared.u32 	%r2390, [%rd48+128];
	ld.shared.u32 	%r2397, [%rd48+4];
	ld.shared.u32 	%r2398, [%rd48+132];
	// begin inline asm
	prmt.b32 %r2368, %r2373, %r2374, %r540;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2372, %r2373, %r2374, %r544;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2376, %r2381, %r2382, %r540;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2380, %r2381, %r2382, %r544;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2384, %r2389, %r2390, %r540;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2388, %r2389, %r2390, %r544;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2392, %r2397, %r2398, %r540;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2396, %r2397, %r2398, %r544;
	// end inline asm
	selp.b32 	%r2400, %r2372, %r2368, %p220;
	shfl.sync.bfly.b32	%r2401, %r2400, 8, 31, -1;
	selp.b32 	%r2402, %r2368, %r2401, %p220;
	selp.b32 	%r2403, %r2401, %r2372, %p220;
	selp.b32 	%r2404, %r2380, %r2376, %p220;
	shfl.sync.bfly.b32	%r2405, %r2404, 8, 31, -1;
	selp.b32 	%r2406, %r2376, %r2405, %p220;
	selp.b32 	%r2407, %r2405, %r2380, %p220;
	selp.b32 	%r2408, %r2388, %r2384, %p220;
	shfl.sync.bfly.b32	%r2409, %r2408, 8, 31, -1;
	selp.b32 	%r2410, %r2384, %r2409, %p220;
	selp.b32 	%r2411, %r2409, %r2388, %p220;
	selp.b32 	%r2412, %r2396, %r2392, %p220;
	shfl.sync.bfly.b32	%r2413, %r2412, 8, 31, -1;
	selp.b32 	%r2414, %r2392, %r2413, %p220;
	selp.b32 	%r2415, %r2413, %r2396, %p220;
	shl.b32 	%r2416, %r2446, 14;
	or.b32  	%r2417, %r2416, %r135;
	or.b32  	%r2418, %r2417, %r134;
	or.b32  	%r2419, %r2418, %r136;
	or.b32  	%r2420, %r2419, %r137;
	cvt.u64.u32 	%rd114, %r2420;
	add.s64 	%rd115, %rd3, %rd114;
	st.global.v4.u32 	[%rd115], {%r2402, %r2406, %r2403, %r2407};
	shl.b32 	%r2421, %r2446, 12;
	or.b32  	%r2422, %r2421, %r139;
	or.b32  	%r2423, %r2422, %r138;
	or.b32  	%r2424, %r2423, %r131;
	or.b32  	%r2425, %r2424, %r140;
	or.b32  	%r2426, %r2425, 524288;
	mul.wide.s32 	%rd116, %r2426, 4;
	add.s64 	%rd117, %rd3, %rd116;
	st.global.v4.u32 	[%rd117], {%r2410, %r2414, %r2411, %r2415};
	add.s32 	%r141, %r2446, 256;
	setp.le.s32 	%p223, %r6, %r141;
	setp.eq.s32 	%p224, %r2446, 32512;
	or.pred  	%p225, %p224, %p223;
	mov.u32 	%r2448, %r90;
	mov.u32 	%r2449, %r91;
	mov.u32 	%r2450, %r92;
	mov.u32 	%r2451, %r93;
	mov.u32 	%r2446, %r141;
	@%p225 bra 	LBB0_152;
	bra.uni 	LBB0_122;
LBB0_152:                               // %L15268
	st.global.u32 	[%rd4], %r2193;
	ret;
LBB0_1:                                 // %L8
	mov.u64 	%rd62, exception1;
	cvta.global.u64 	%rd63, %rd62;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd63;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd53;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	// begin inline asm
	exit;
	// end inline asm
LBB0_3:                                 // %L178
	mov.u32 	%r147, 2;
	st.global.u32 	[%rd4], %r147;
	mov.u64 	%rd65, exception1273;
	cvta.global.u64 	%rd66, %rd65;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd66;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd53;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	// begin inline asm
	exit;
	// end inline asm
LBB0_126:                               // %L15366
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_6573, 
	(
	);
	} // callseq 4
	mov.u64 	%rd71, exception1;
	cvta.global.u64 	%rd72, %rd71;
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd72;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 5
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd53;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 6
	// begin inline asm
	exit;
	// end inline asm
LBB0_125:                               // %L15363
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_6573, 
	(
	);
	} // callseq 7
	mov.u64 	%rd75, exception1;
	cvta.global.u64 	%rd76, %rd75;
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd76;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 8
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd53;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 9
	// begin inline asm
	exit;
	// end inline asm
LBB0_124:                               // %L15360
	{ // callseq 10, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_6573, 
	(
	);
	} // callseq 10
	mov.u64 	%rd83, exception1;
	cvta.global.u64 	%rd84, %rd83;
	{ // callseq 11, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd84;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 11
	{ // callseq 12, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd53;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 12
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
