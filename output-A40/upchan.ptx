// PTX CompilerJob of kernel #upchan(CuDeviceVector{Float16x2, 1}, CuDeviceVector{Float16x2, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 7.1
.target sm_86
.address_size 64

	// .globl	_Z17julia_upchan_368413CuDeviceArrayI9Float16x2Li1ELi1EES_IS0_Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE // -- Begin function _Z17julia_upchan_368413CuDeviceArrayI9Float16x2Li1ELi1EES_IS0_Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[8]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z17julia_upchan_368413CuDeviceArrayI9Float16x2Li1ELi1EES_IS0_Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.visible .entry _Z17julia_upchan_368413CuDeviceArrayI9Float16x2Li1ELi1EES_IS0_Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE(
	.param .align 8 .b8 _Z17julia_upchan_368413CuDeviceArrayI9Float16x2Li1ELi1EES_IS0_Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0[8],
	.param .align 8 .b8 _Z17julia_upchan_368413CuDeviceArrayI9Float16x2Li1ELi1EES_IS0_Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z17julia_upchan_368413CuDeviceArrayI9Float16x2Li1ELi1EES_IS0_Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z17julia_upchan_368413CuDeviceArrayI9Float16x2Li1ELi1EES_IS0_Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z17julia_upchan_368413CuDeviceArrayI9Float16x2Li1ELi1EES_IS0_Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z17julia_upchan_368413CuDeviceArrayI9Float16x2Li1ELi1EES_IS0_Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<63>;
	.reg .b16 	%rs<96>;
	.reg .b32 	%r<873>;
	.reg .f32 	%f<281>;
	.reg .b64 	%rd<93>;

// %bb.0:                               // %conversion
	// begin inline asm
	mov.u32 %r32, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r32, 69887;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L10
	ld.param.u64 	%rd29, [_Z17julia_upchan_368413CuDeviceArrayI9Float16x2Li1ELi1EES_IS0_Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5];
	ld.param.u64 	%rd25, [_Z17julia_upchan_368413CuDeviceArrayI9Float16x2Li1ELi1EES_IS0_Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2];
	ld.param.u64 	%rd21, [_Z17julia_upchan_368413CuDeviceArrayI9Float16x2Li1ELi1EES_IS0_Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1];
	ld.param.u64 	%rd1, [_Z17julia_upchan_368413CuDeviceArrayI9Float16x2Li1ELi1EES_IS0_Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3];
	ld.param.u64 	%rd2, [_Z17julia_upchan_368413CuDeviceArrayI9Float16x2Li1ELi1EES_IS0_Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4];
	mov.u32 	%r70, %tid.y;
	shl.b32 	%r71, %r70, 5;
	mov.u32 	%r72, %ctaid.x;
	shl.b32 	%r73, %r72, 9;
	mov.u32 	%r74, %tid.x;
	or.b32  	%r75, %r73, %r74;
	or.b32  	%r76, %r75, %r71;
	mul.wide.u32 	%rd35, %r76, 4;
	add.s64 	%rd3, %rd29, %rd35;
	mov.u32 	%r77, 1;
	st.global.u32 	[%rd3], %r77;
	shl.b32 	%r78, %r74, 1;
	and.b32  	%r79, %r78, 8;
	shl.b32 	%r80, %r74, 2;
	cvt.u16.u32 	%rs1, %r74;
	shr.u16 	%rs2, %rs1, 8;
	shl.b16 	%rs3, %rs1, 8;
	or.b16  	%rs4, %rs3, %rs2;
	shl.b16 	%rs5, %rs4, 4;
	shr.u16 	%rs6, %rs4, 4;
	and.b16  	%rs7, %rs6, 3840;
	or.b16  	%rs8, %rs7, %rs5;
	and.b16  	%rs9, %rs8, 13107;
	shl.b16 	%rs10, %rs9, 2;
	shr.u16 	%rs11, %rs8, 2;
	and.b16  	%rs12, %rs11, 13107;
	or.b16  	%rs13, %rs12, %rs10;
	and.b16  	%rs14, %rs13, 21845;
	shl.b16 	%rs15, %rs14, 1;
	shr.u16 	%rs16, %rs13, 1;
	and.b16  	%rs17, %rs16, 21845;
	or.b16  	%rs18, %rs17, %rs15;
	shr.u16 	%rs19, %rs18, 13;
	and.b16  	%rs20, %rs19, 6;
	cvt.u32.u16 	%r81, %rs20;
	or.b32  	%r82, %r79, %r81;
	shr.u32 	%r83, %r82, 1;
	mul.wide.u32 	%rd36, %r83, 4;
	add.s64 	%rd37, %rd21, %rd36;
	ld.global.u32 	%r681, [%rd37];
	shr.u32 	%r84, %r74, 2;
	bfe.u32 	%r85, %r74, 2, 1;
	and.b32  	%r86, %r78, 6;
	or.b32  	%r87, %r85, %r86;
	mul.wide.u32 	%rd38, %r87, 4;
	add.s64 	%rd39, %rd25, %rd38;
	ld.global.u32 	%r437, [%rd39];
	ld.global.u32 	%r499, [%rd39+32];
	ld.global.u32 	%r561, [%rd39+64];
	ld.global.u32 	%r379, [%rd39+96];
	and.b32  	%r88, %r78, 2;
	and.b32  	%r89, %r78, 4;
	or.b32  	%r90, %r85, %r88;
	or.b32  	%r91, %r90, %r89;
	mul.lo.s32 	%r92, %r91, 15;
	cvt.rn.f32.u32 	%f1, %r92;
	mov.f32 	%f2, 0f41800000;
	div.approx.f32 	%f3, %f1, %f2;
	add.f32 	%f4, %f3, %f3;
	mov.b32 	%r93, %f4;
	and.b32  	%r94, %r93, -2147483648;
	or.b32  	%r95, %r94, 1056964608;
	mov.b32 	%f5, %r95;
	add.f32 	%f6, %f4, %f5;
	cvt.rzi.f32.f32 	%f7, %f6;
	abs.f32 	%f8, %f4;
	setp.gt.f32 	%p2, %f8, 0f4B000000;
	selp.f32 	%f9, %f4, %f7, %p2;
	cvt.rzi.f32.f32 	%f10, %f4;
	setp.lt.f32 	%p3, %f8, 0f3F000000;
	selp.f32 	%f11, %f10, %f9, %p3;
	cvt.rzi.s32.f32 	%r96, %f11;
	fma.rn.f32 	%f12, %f11, 0fBF000000, %f3;
	mul.f32 	%f13, %f12, 0f34222169;
	fma.rn.f32 	%f14, %f12, 0f40490FDA, %f13;
	mul.f32 	%f15, %f14, %f14;
	fma.rn.f32 	%f16, %f15, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f17, %f16, %f15, 0f3D2AAABB;
	fma.rn.f32 	%f18, %f17, %f15, 0fBEFFFFFF;
	fma.rn.f32 	%f19, %f18, %f15, 0f3F800000;
	fma.rn.f32 	%f20, %f15, %f14, 0f00000000;
	fma.rn.f32 	%f21, %f15, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f22, %f21, %f15, 0fBE2AAAA8;
	fma.rn.f32 	%f23, %f22, %f20, %f14;
	and.b32  	%r97, %r96, 1;
	setp.eq.b32 	%p4, %r97, 1;
	selp.f32 	%f24, %f19, %f23, %p4;
	selp.f32 	%f25, %f23, %f19, %p4;
	and.b32  	%r98, %r96, 2;
	setp.eq.s32 	%p5, %r98, 0;
	neg.f32 	%f26, %f24;
	selp.f32 	%f27, %f24, %f26, %p5;
	add.s32 	%r99, %r96, 1;
	and.b32  	%r100, %r99, 2;
	setp.eq.s32 	%p6, %r100, 0;
	mov.f32 	%f28, 0f00000000;
	sub.f32 	%f29, %f28, %f25;
	selp.f32 	%f30, %f25, %f29, %p6;
	cvt.rzi.f32.f32 	%f31, %f3;
	setp.eq.f32 	%p7, %f31, %f3;
	mul.f32 	%f32, %f3, 0f00000000;
	selp.f32 	%f33, %f32, %f27, %p7;
	abs.f32 	%f34, %f3;
	setp.gt.f32 	%p8, %f34, 0f4B800000;
	add.f32 	%f35, %f33, 0f3F800000;
	selp.f32 	%f36, %f35, %f30, %p8;
	add.s32 	%r101, %r92, 120;
	cvt.rn.f32.u32 	%f37, %r101;
	div.approx.f32 	%f38, %f37, %f2;
	add.f32 	%f39, %f38, %f38;
	mov.b32 	%r102, %f39;
	and.b32  	%r103, %r102, -2147483648;
	or.b32  	%r104, %r103, 1056964608;
	mov.b32 	%f40, %r104;
	add.f32 	%f41, %f39, %f40;
	cvt.rzi.f32.f32 	%f42, %f41;
	abs.f32 	%f43, %f39;
	setp.gt.f32 	%p9, %f43, 0f4B000000;
	selp.f32 	%f44, %f39, %f42, %p9;
	cvt.rzi.f32.f32 	%f45, %f39;
	setp.lt.f32 	%p10, %f43, 0f3F000000;
	selp.f32 	%f46, %f45, %f44, %p10;
	cvt.rzi.s32.f32 	%r105, %f46;
	fma.rn.f32 	%f47, %f46, 0fBF000000, %f38;
	mul.f32 	%f48, %f47, 0f34222169;
	fma.rn.f32 	%f49, %f47, 0f40490FDA, %f48;
	mul.f32 	%f50, %f49, %f49;
	fma.rn.f32 	%f51, %f50, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f52, %f51, %f50, 0f3D2AAABB;
	fma.rn.f32 	%f53, %f52, %f50, 0fBEFFFFFF;
	fma.rn.f32 	%f54, %f53, %f50, 0f3F800000;
	fma.rn.f32 	%f55, %f50, %f49, 0f00000000;
	fma.rn.f32 	%f56, %f50, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f57, %f56, %f50, 0fBE2AAAA8;
	fma.rn.f32 	%f58, %f57, %f55, %f49;
	and.b32  	%r106, %r105, 1;
	setp.eq.b32 	%p11, %r106, 1;
	selp.f32 	%f59, %f54, %f58, %p11;
	selp.f32 	%f60, %f58, %f54, %p11;
	and.b32  	%r107, %r105, 2;
	setp.eq.s32 	%p12, %r107, 0;
	neg.f32 	%f61, %f59;
	selp.f32 	%f62, %f59, %f61, %p12;
	add.s32 	%r108, %r105, 1;
	and.b32  	%r109, %r108, 2;
	setp.eq.s32 	%p13, %r109, 0;
	sub.f32 	%f63, %f28, %f60;
	selp.f32 	%f64, %f60, %f63, %p13;
	cvt.rzi.f32.f32 	%f65, %f38;
	setp.eq.f32 	%p14, %f65, %f38;
	mul.f32 	%f66, %f38, 0f00000000;
	selp.f32 	%f67, %f66, %f62, %p14;
	abs.f32 	%f68, %f38;
	setp.gt.f32 	%p15, %f68, 0f4B800000;
	add.f32 	%f69, %f67, 0f3F800000;
	selp.f32 	%f70, %f69, %f64, %p15;
	mov.b32 	%r34, %f36;
	mov.b32 	%r35, %f70;
	// begin inline asm
	cvt.rn.f16x2.f32 %r583, %r35, %r34;
	// end inline asm
	mov.b32 	%r37, %f33;
	mov.b32 	%r38, %f67;
	// begin inline asm
	cvt.rn.f16x2.f32 %r577, %r38, %r37;
	// end inline asm
	and.b32  	%r110, %r74, 3;
	and.b32  	%r111, %r84, 2;
	or.b32  	%r112, %r110, 4;
	and.b32  	%r8, %r84, 4;
	mul.wide.u32 	%rd40, %r110, %r84;
	shl.b64 	%rd41, %rd40, 1;
	neg.s64 	%rd42, %rd41;
	cvt.rn.f32.s64 	%f71, %rd42;
	mov.f32 	%f72, 0f43800000;
	div.approx.f32 	%f73, %f71, %f72;
	add.f32 	%f74, %f73, %f73;
	mov.b32 	%r113, %f74;
	and.b32  	%r114, %r113, -2147483648;
	or.b32  	%r115, %r114, 1056964608;
	mov.b32 	%f75, %r115;
	add.f32 	%f76, %f74, %f75;
	cvt.rzi.f32.f32 	%f77, %f76;
	abs.f32 	%f78, %f74;
	setp.gt.f32 	%p16, %f78, 0f4B000000;
	selp.f32 	%f79, %f74, %f77, %p16;
	cvt.rzi.f32.f32 	%f80, %f74;
	setp.lt.f32 	%p17, %f78, 0f3F000000;
	selp.f32 	%f81, %f80, %f79, %p17;
	cvt.rzi.s32.f32 	%r116, %f81;
	fma.rn.f32 	%f82, %f81, 0fBF000000, %f73;
	mul.f32 	%f83, %f82, 0f34222169;
	fma.rn.f32 	%f84, %f82, 0f40490FDA, %f83;
	mul.f32 	%f85, %f84, %f84;
	fma.rn.f32 	%f86, %f85, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f87, %f86, %f85, 0f3D2AAABB;
	fma.rn.f32 	%f88, %f87, %f85, 0fBEFFFFFF;
	fma.rn.f32 	%f89, %f88, %f85, 0f3F800000;
	fma.rn.f32 	%f90, %f85, %f84, 0f00000000;
	fma.rn.f32 	%f91, %f85, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f92, %f91, %f85, 0fBE2AAAA8;
	fma.rn.f32 	%f93, %f92, %f90, %f84;
	and.b32  	%r117, %r116, 1;
	setp.eq.b32 	%p18, %r117, 1;
	selp.f32 	%f94, %f89, %f93, %p18;
	selp.f32 	%f95, %f93, %f89, %p18;
	and.b32  	%r118, %r116, 2;
	setp.eq.s32 	%p19, %r118, 0;
	neg.f32 	%f96, %f94;
	selp.f32 	%f97, %f94, %f96, %p19;
	add.s32 	%r119, %r116, 1;
	and.b32  	%r120, %r119, 2;
	setp.eq.s32 	%p20, %r120, 0;
	sub.f32 	%f98, %f28, %f95;
	selp.f32 	%f99, %f95, %f98, %p20;
	cvt.rzi.f32.f32 	%f100, %f73;
	setp.eq.f32 	%p21, %f100, %f73;
	mul.f32 	%f101, %f73, 0f00000000;
	selp.f32 	%f102, %f101, %f97, %p21;
	abs.f32 	%f103, %f73;
	setp.gt.f32 	%p22, %f103, 0f4B800000;
	add.f32 	%f104, %f102, 0f3F800000;
	selp.f32 	%f105, %f104, %f99, %p22;
	mul.wide.u32 	%rd43, %r112, %r84;
	shl.b64 	%rd44, %rd43, 1;
	neg.s64 	%rd45, %rd44;
	cvt.rn.f32.s64 	%f106, %rd45;
	div.approx.f32 	%f107, %f106, %f72;
	add.f32 	%f108, %f107, %f107;
	mov.b32 	%r121, %f108;
	and.b32  	%r122, %r121, -2147483648;
	or.b32  	%r123, %r122, 1056964608;
	mov.b32 	%f109, %r123;
	add.f32 	%f110, %f108, %f109;
	cvt.rzi.f32.f32 	%f111, %f110;
	abs.f32 	%f112, %f108;
	setp.gt.f32 	%p23, %f112, 0f4B000000;
	selp.f32 	%f113, %f108, %f111, %p23;
	cvt.rzi.f32.f32 	%f114, %f108;
	setp.lt.f32 	%p24, %f112, 0f3F000000;
	selp.f32 	%f115, %f114, %f113, %p24;
	cvt.rzi.s32.f32 	%r124, %f115;
	fma.rn.f32 	%f116, %f115, 0fBF000000, %f107;
	mul.f32 	%f117, %f116, 0f34222169;
	fma.rn.f32 	%f118, %f116, 0f40490FDA, %f117;
	mul.f32 	%f119, %f118, %f118;
	fma.rn.f32 	%f120, %f119, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f121, %f120, %f119, 0f3D2AAABB;
	fma.rn.f32 	%f122, %f121, %f119, 0fBEFFFFFF;
	fma.rn.f32 	%f123, %f122, %f119, 0f3F800000;
	fma.rn.f32 	%f124, %f119, %f118, 0f00000000;
	fma.rn.f32 	%f125, %f119, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f126, %f125, %f119, 0fBE2AAAA8;
	fma.rn.f32 	%f127, %f126, %f124, %f118;
	and.b32  	%r125, %r124, 1;
	setp.eq.b32 	%p25, %r125, 1;
	selp.f32 	%f128, %f123, %f127, %p25;
	selp.f32 	%f129, %f127, %f123, %p25;
	and.b32  	%r126, %r124, 2;
	setp.eq.s32 	%p26, %r126, 0;
	neg.f32 	%f130, %f128;
	selp.f32 	%f131, %f128, %f130, %p26;
	add.s32 	%r127, %r124, 1;
	and.b32  	%r128, %r127, 2;
	setp.eq.s32 	%p27, %r128, 0;
	sub.f32 	%f132, %f28, %f129;
	selp.f32 	%f133, %f129, %f132, %p27;
	cvt.rzi.f32.f32 	%f134, %f107;
	setp.eq.f32 	%p28, %f134, %f107;
	mul.f32 	%f135, %f107, 0f00000000;
	selp.f32 	%f136, %f135, %f131, %p28;
	abs.f32 	%f137, %f107;
	setp.gt.f32 	%p29, %f137, 0f4B800000;
	add.f32 	%f138, %f136, 0f3F800000;
	selp.f32 	%f139, %f138, %f133, %p29;
	mov.b32 	%r40, %f105;
	mov.b32 	%r41, %f139;
	// begin inline asm
	cvt.rn.f16x2.f32 %r610, %r41, %r40;
	// end inline asm
	mov.b32 	%r46, %f102;
	xor.b32  	%r43, %r46, -2147483648;
	mov.b32 	%r47, %f136;
	xor.b32  	%r44, %r47, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r612, %r44, %r43;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r611, %r47, %r46;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r613, %r41, %r40;
	// end inline asm
	mov.f32 	%f140, 0f47800000;
	div.approx.f32 	%f141, %f28, %f140;
	add.f32 	%f142, %f141, %f141;
	mov.b32 	%r129, %f142;
	and.b32  	%r130, %r129, -2147483648;
	or.b32  	%r131, %r130, 1056964608;
	mov.b32 	%f143, %r131;
	add.f32 	%f144, %f142, %f143;
	cvt.rzi.f32.f32 	%f145, %f144;
	abs.f32 	%f146, %f142;
	setp.gt.f32 	%p30, %f146, 0f4B000000;
	selp.f32 	%f147, %f142, %f145, %p30;
	cvt.rzi.f32.f32 	%f148, %f142;
	setp.lt.f32 	%p31, %f146, 0f3F000000;
	selp.f32 	%f149, %f148, %f147, %p31;
	cvt.rzi.s32.f32 	%r132, %f149;
	fma.rn.f32 	%f150, %f149, 0fBF000000, %f141;
	mul.f32 	%f151, %f150, 0f34222169;
	fma.rn.f32 	%f152, %f150, 0f40490FDA, %f151;
	mul.f32 	%f153, %f152, %f152;
	fma.rn.f32 	%f154, %f153, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f155, %f154, %f153, 0f3D2AAABB;
	fma.rn.f32 	%f156, %f155, %f153, 0fBEFFFFFF;
	fma.rn.f32 	%f157, %f156, %f153, 0f3F800000;
	fma.rn.f32 	%f158, %f153, %f152, 0f00000000;
	fma.rn.f32 	%f159, %f153, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f160, %f159, %f153, 0fBE2AAAA8;
	fma.rn.f32 	%f161, %f160, %f158, %f152;
	and.b32  	%r133, %r132, 1;
	setp.eq.b32 	%p32, %r133, 1;
	selp.f32 	%f162, %f157, %f161, %p32;
	selp.f32 	%f163, %f161, %f157, %p32;
	and.b32  	%r134, %r132, 2;
	setp.eq.s32 	%p33, %r134, 0;
	neg.f32 	%f164, %f162;
	selp.f32 	%f165, %f162, %f164, %p33;
	add.s32 	%r135, %r132, 1;
	and.b32  	%r136, %r135, 2;
	setp.eq.s32 	%p34, %r136, 0;
	sub.f32 	%f166, %f28, %f163;
	selp.f32 	%f167, %f163, %f166, %p34;
	cvt.rzi.f32.f32 	%f168, %f141;
	setp.eq.f32 	%p35, %f168, %f141;
	mul.f32 	%f169, %f141, 0f00000000;
	selp.f32 	%f170, %f169, %f165, %p35;
	abs.f32 	%f171, %f141;
	setp.gt.f32 	%p36, %f171, 0f4B800000;
	add.f32 	%f172, %f170, 0f3F800000;
	selp.f32 	%f173, %f172, %f167, %p36;
	mul.wide.u32 	%rd46, %r84, 2;
	neg.s64 	%rd47, %rd46;
	cvt.rn.f32.s64 	%f174, %rd47;
	div.approx.f32 	%f175, %f174, %f140;
	add.f32 	%f176, %f175, %f175;
	mov.b32 	%r137, %f176;
	and.b32  	%r138, %r137, -2147483648;
	or.b32  	%r139, %r138, 1056964608;
	mov.b32 	%f177, %r139;
	add.f32 	%f178, %f176, %f177;
	cvt.rzi.f32.f32 	%f179, %f178;
	abs.f32 	%f180, %f176;
	setp.gt.f32 	%p37, %f180, 0f4B000000;
	selp.f32 	%f181, %f176, %f179, %p37;
	cvt.rzi.f32.f32 	%f182, %f176;
	setp.lt.f32 	%p38, %f180, 0f3F000000;
	selp.f32 	%f183, %f182, %f181, %p38;
	cvt.rzi.s32.f32 	%r140, %f183;
	fma.rn.f32 	%f184, %f183, 0fBF000000, %f175;
	mul.f32 	%f185, %f184, 0f34222169;
	fma.rn.f32 	%f186, %f184, 0f40490FDA, %f185;
	mul.f32 	%f187, %f186, %f186;
	fma.rn.f32 	%f188, %f187, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f189, %f188, %f187, 0f3D2AAABB;
	fma.rn.f32 	%f190, %f189, %f187, 0fBEFFFFFF;
	fma.rn.f32 	%f191, %f190, %f187, 0f3F800000;
	fma.rn.f32 	%f192, %f187, %f186, 0f00000000;
	fma.rn.f32 	%f193, %f187, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f194, %f193, %f187, 0fBE2AAAA8;
	fma.rn.f32 	%f195, %f194, %f192, %f186;
	and.b32  	%r141, %r140, 1;
	setp.eq.b32 	%p39, %r141, 1;
	selp.f32 	%f196, %f191, %f195, %p39;
	selp.f32 	%f197, %f195, %f191, %p39;
	and.b32  	%r142, %r140, 2;
	setp.eq.s32 	%p40, %r142, 0;
	neg.f32 	%f198, %f196;
	selp.f32 	%f199, %f196, %f198, %p40;
	add.s32 	%r143, %r140, 1;
	and.b32  	%r144, %r143, 2;
	setp.eq.s32 	%p41, %r144, 0;
	sub.f32 	%f200, %f28, %f197;
	selp.f32 	%f201, %f197, %f200, %p41;
	cvt.rzi.f32.f32 	%f202, %f175;
	setp.eq.f32 	%p42, %f202, %f175;
	mul.f32 	%f203, %f175, 0f00000000;
	selp.f32 	%f204, %f203, %f199, %p42;
	abs.f32 	%f205, %f175;
	setp.gt.f32 	%p43, %f205, 0f4B800000;
	add.f32 	%f206, %f204, 0f3F800000;
	selp.f32 	%f207, %f206, %f201, %p43;
	mov.b32 	%r52, %f173;
	mov.b32 	%r53, %f207;
	// begin inline asm
	cvt.rn.f16x2.f32 %r635, %r53, %r52;
	// end inline asm
	mov.b32 	%r55, %f170;
	mov.b32 	%r56, %f204;
	// begin inline asm
	cvt.rn.f16x2.f32 %r629, %r56, %r55;
	// end inline asm
	shr.u32 	%r145, %r74, 4;
	shr.u16 	%rs21, %rs18, 14;
	cvt.u32.u16 	%r146, %rs21;
	or.b32  	%r147, %r111, %r145;
	setp.eq.s32 	%p44, %r147, %r146;
	mov.f32 	%f208, 0f40000000;
	div.approx.f32 	%f209, %f28, %f208;
	add.f32 	%f210, %f209, %f209;
	mov.b32 	%r148, %f210;
	and.b32  	%r149, %r148, -2147483648;
	or.b32  	%r150, %r149, 1056964608;
	mov.b32 	%f211, %r150;
	add.f32 	%f212, %f210, %f211;
	cvt.rzi.f32.f32 	%f213, %f212;
	abs.f32 	%f214, %f210;
	setp.gt.f32 	%p45, %f214, 0f4B000000;
	selp.f32 	%f215, %f210, %f213, %p45;
	cvt.rzi.f32.f32 	%f216, %f210;
	setp.lt.f32 	%p46, %f214, 0f3F000000;
	selp.f32 	%f217, %f216, %f215, %p46;
	cvt.rzi.s32.f32 	%r151, %f217;
	fma.rn.f32 	%f218, %f217, 0fBF000000, %f209;
	mul.f32 	%f219, %f218, 0f34222169;
	fma.rn.f32 	%f220, %f218, 0f40490FDA, %f219;
	mul.f32 	%f221, %f220, %f220;
	fma.rn.f32 	%f222, %f221, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f223, %f222, %f221, 0f3D2AAABB;
	fma.rn.f32 	%f224, %f223, %f221, 0fBEFFFFFF;
	fma.rn.f32 	%f225, %f224, %f221, 0f3F800000;
	fma.rn.f32 	%f226, %f221, %f220, 0f00000000;
	fma.rn.f32 	%f227, %f221, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f228, %f227, %f221, 0fBE2AAAA8;
	fma.rn.f32 	%f229, %f228, %f226, %f220;
	and.b32  	%r152, %r151, 1;
	setp.eq.b32 	%p47, %r152, 1;
	selp.f32 	%f230, %f225, %f229, %p47;
	selp.f32 	%f231, %f229, %f225, %p47;
	and.b32  	%r153, %r151, 2;
	setp.eq.s32 	%p48, %r153, 0;
	neg.f32 	%f232, %f230;
	selp.f32 	%f233, %f230, %f232, %p48;
	add.s32 	%r154, %r151, 1;
	and.b32  	%r155, %r154, 2;
	setp.eq.s32 	%p49, %r155, 0;
	sub.f32 	%f234, %f28, %f231;
	selp.f32 	%f235, %f231, %f234, %p49;
	cvt.rzi.f32.f32 	%f236, %f209;
	setp.eq.f32 	%p50, %f236, %f209;
	mul.f32 	%f237, %f209, 0f00000000;
	selp.f32 	%f238, %f237, %f233, %p50;
	abs.f32 	%f239, %f209;
	setp.gt.f32 	%p51, %f239, 0f4B800000;
	add.f32 	%f240, %f238, 0f3F800000;
	selp.f32 	%f241, %f240, %f235, %p51;
	selp.f32 	%f242, 0f3F800000, 0f00000000, %p44;
	mul.f32 	%f243, %f241, %f242;
	mul.f32 	%f244, %f238, %f242;
	mul.wide.u32 	%rd48, %r85, 2;
	neg.s64 	%rd49, %rd48;
	cvt.rn.f32.s64 	%f245, %rd49;
	div.approx.f32 	%f246, %f245, %f208;
	add.f32 	%f247, %f246, %f246;
	mov.b32 	%r156, %f247;
	and.b32  	%r157, %r156, -2147483648;
	or.b32  	%r158, %r157, 1056964608;
	mov.b32 	%f248, %r158;
	add.f32 	%f249, %f247, %f248;
	cvt.rzi.f32.f32 	%f250, %f249;
	abs.f32 	%f251, %f247;
	setp.gt.f32 	%p52, %f251, 0f4B000000;
	selp.f32 	%f252, %f247, %f250, %p52;
	cvt.rzi.f32.f32 	%f253, %f247;
	setp.lt.f32 	%p53, %f251, 0f3F000000;
	selp.f32 	%f254, %f253, %f252, %p53;
	cvt.rzi.s32.f32 	%r159, %f254;
	fma.rn.f32 	%f255, %f254, 0fBF000000, %f246;
	mul.f32 	%f256, %f255, 0f34222169;
	fma.rn.f32 	%f257, %f255, 0f40490FDA, %f256;
	mul.f32 	%f258, %f257, %f257;
	fma.rn.f32 	%f259, %f258, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f260, %f259, %f258, 0f3D2AAABB;
	fma.rn.f32 	%f261, %f260, %f258, 0fBEFFFFFF;
	fma.rn.f32 	%f262, %f261, %f258, 0f3F800000;
	fma.rn.f32 	%f263, %f258, %f257, 0f00000000;
	fma.rn.f32 	%f264, %f258, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f265, %f264, %f258, 0fBE2AAAA8;
	fma.rn.f32 	%f266, %f265, %f263, %f257;
	and.b32  	%r160, %r159, 1;
	setp.eq.b32 	%p54, %r160, 1;
	selp.f32 	%f267, %f262, %f266, %p54;
	selp.f32 	%f268, %f266, %f262, %p54;
	and.b32  	%r161, %r159, 2;
	setp.eq.s32 	%p55, %r161, 0;
	neg.f32 	%f269, %f267;
	selp.f32 	%f270, %f267, %f269, %p55;
	add.s32 	%r162, %r159, 1;
	and.b32  	%r163, %r162, 2;
	setp.eq.s32 	%p56, %r163, 0;
	sub.f32 	%f271, %f28, %f268;
	selp.f32 	%f272, %f268, %f271, %p56;
	cvt.rzi.f32.f32 	%f273, %f246;
	setp.eq.f32 	%p57, %f273, %f246;
	mul.f32 	%f274, %f246, 0f00000000;
	selp.f32 	%f275, %f274, %f270, %p57;
	abs.f32 	%f276, %f246;
	setp.gt.f32 	%p58, %f276, 0f4B800000;
	add.f32 	%f277, %f275, 0f3F800000;
	selp.f32 	%f278, %f277, %f272, %p58;
	mul.f32 	%f279, %f278, %f242;
	mul.f32 	%f280, %f275, %f242;
	mov.b32 	%r58, %f243;
	mov.b32 	%r59, %f279;
	// begin inline asm
	cvt.rn.f16x2.f32 %r662, %r59, %r58;
	// end inline asm
	mov.b32 	%r64, %f244;
	xor.b32  	%r61, %r64, -2147483648;
	mov.b32 	%r65, %f280;
	xor.b32  	%r62, %r65, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r664, %r62, %r61;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r663, %r65, %r64;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r665, %r59, %r58;
	// end inline asm
	shl.b32 	%r164, %r70, 4;
	and.b32  	%r19, %r74, 8;
	or.b32  	%r20, %r164, %r19;
	and.b32  	%r165, %r80, 28;
	shl.b32 	%r166, %r72, 5;
	and.b32  	%r167, %r166, 96;
	or.b32  	%r21, %r165, %r167;
	shl.b32 	%r168, %r72, 4;
	and.b32  	%r22, %r168, 1920;
	and.b32  	%r23, %r73, 2048;
	or.b32  	%r24, %r20, %r84;
	mul.lo.s32 	%r169, %r70, 545;
	shl.b32 	%r170, %r74, 4;
	or.b32  	%r171, %r19, %r170;
	shr.u32 	%r172, %r171, 2;
	and.b32  	%r173, %r172, 30;
	mul.lo.s32 	%r174, %r145, 65;
	add.s32 	%r175, %r174, %r169;
	add.s32 	%r176, %r175, %r173;
	mul.wide.u32 	%rd50, %r176, 4;
	mov.u64 	%rd51, shmem;
	add.s64 	%rd4, %rd51, %rd50;
	cvt.u64.u32 	%rd52, %r173;
	cvt.u64.u32 	%rd53, %r174;
	cvt.u64.u32 	%rd54, %r169;
	add.s64 	%rd55, %rd54, %rd53;
	add.s64 	%rd56, %rd55, %rd52;
	shl.b64 	%rd57, %rd56, 2;
	add.s64 	%rd5, %rd51, %rd57;
	and.b32  	%r177, %r78, 32;
	shl.b32 	%r178, %r70, 2;
	and.b32  	%r179, %r178, 28;
	or.b32  	%r180, %r177, %r179;
	shl.b32 	%r181, %r74, 3;
	and.b32  	%r182, %r181, 64;
	or.b32  	%r183, %r180, %r182;
	shr.u32 	%r184, %r183, 2;
	bfe.u32 	%r185, %r74, 1, 1;
	and.b32  	%r186, %r178, 32;
	and.b32  	%r187, %r74, 1;
	mad.lo.s32 	%r188, %r187, 130, %r186;
	mad.lo.s32 	%r189, %r85, 260, %r188;
	mad.lo.s32 	%r190, %r185, 65, %r189;
	add.s32 	%r191, %r190, %r184;
	or.b32  	%r192, %r184, %r186;
	mad.lo.s32 	%r193, %r83, 65, %r192;
	or.b32  	%r194, %r145, 2;
	mul.lo.s32 	%r195, %r194, 65;
	add.s32 	%r196, %r195, %r169;
	add.s32 	%r197, %r196, %r173;
	mul.wide.u32 	%rd58, %r197, 4;
	add.s64 	%rd6, %rd51, %rd58;
	cvt.u64.u32 	%rd59, %r195;
	add.s64 	%rd60, %rd54, %rd59;
	add.s64 	%rd61, %rd60, %rd52;
	shl.b64 	%rd62, %rd61, 2;
	add.s64 	%rd7, %rd51, %rd62;
	or.b32  	%r198, %r145, 4;
	mul.lo.s32 	%r199, %r198, 65;
	add.s32 	%r200, %r199, %r169;
	add.s32 	%r201, %r200, %r173;
	mul.wide.u32 	%rd63, %r201, 4;
	add.s64 	%rd8, %rd51, %rd63;
	cvt.u64.u32 	%rd64, %r199;
	add.s64 	%rd65, %rd54, %rd64;
	add.s64 	%rd66, %rd65, %rd52;
	shl.b64 	%rd67, %rd66, 2;
	add.s64 	%rd9, %rd51, %rd67;
	or.b32  	%r202, %r145, 6;
	mul.lo.s32 	%r203, %r202, 65;
	add.s32 	%r204, %r203, %r169;
	add.s32 	%r205, %r204, %r173;
	mul.wide.u32 	%rd68, %r205, 4;
	add.s64 	%rd10, %rd51, %rd68;
	cvt.u64.u32 	%rd69, %r203;
	add.s64 	%rd70, %rd54, %rd69;
	add.s64 	%rd71, %rd70, %rd52;
	shl.b64 	%rd72, %rd71, 2;
	add.s64 	%rd11, %rd51, %rd72;
	and.b32  	%r206, %r170, 112;
	shl.b32 	%r207, %r72, 7;
	and.b32  	%r208, %r207, 384;
	or.b32  	%r209, %r206, %r208;
	shl.b32 	%r210, %r72, 15;
	and.b32  	%r211, %r210, 131072;
	shl.b32 	%r25, %r70, 18;
	shl.b32 	%r212, %r72, 1;
	and.b32  	%r213, %r212, 240;
	shr.u32 	%r214, %r74, 3;
	or.b32  	%r215, %r213, %r214;
	shl.b32 	%r216, %r215, 9;
	or.b32  	%r217, %r209, %r211;
	or.b32  	%r26, %r217, %r216;
	or.b32  	%r218, %r25, %r208;
	or.b32  	%r219, %r218, %r206;
	or.b32  	%r220, %r219, %r211;
	or.b32  	%r27, %r220, %r216;
	mul.wide.u32 	%rd73, %r193, 4;
	add.s64 	%rd15, %rd51, %rd73;
	mul.wide.u32 	%rd74, %r191, 4;
	add.s64 	%rd14, %rd51, %rd74;
	mov.u32 	%r871, 0;
LBB0_3:                                 // %L833
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_4 Depth 2
	setp.eq.s32 	%p59, %r19, 0;
	or.b32  	%r286, %r20, %r871;
	or.b32  	%r287, %r286, %r8;
	shl.b32 	%r288, %r287, 12;
	or.b32  	%r289, %r288, %r21;
	or.b32  	%r290, %r289, %r22;
	or.b32  	%r291, %r290, %r23;
	mul.wide.s32 	%rd75, %r291, 4;
	add.s64 	%rd76, %rd1, %rd75;
	ld.global.v4.u32 	{%r292, %r293, %r294, %r295}, [%rd76];
	or.b32  	%r296, %r291, 4096;
	mul.wide.s32 	%rd77, %r296, 4;
	add.s64 	%rd78, %rd1, %rd77;
	ld.global.v4.u32 	{%r297, %r298, %r299, %r300}, [%rd78];
	or.b32  	%r301, %r291, 8192;
	mul.wide.s32 	%rd79, %r301, 4;
	add.s64 	%rd80, %rd1, %rd79;
	ld.global.v4.u32 	{%r302, %r303, %r304, %r305}, [%rd80];
	or.b32  	%r306, %r24, %r871;
	shl.b32 	%r307, %r306, 12;
	or.b32  	%r308, %r307, %r21;
	or.b32  	%r309, %r308, %r22;
	or.b32  	%r310, %r309, %r23;
	or.b32  	%r311, %r310, 12288;
	mul.wide.s32 	%rd81, %r311, 4;
	add.s64 	%rd82, %rd1, %rd81;
	ld.global.v4.u32 	{%r312, %r313, %r314, %r315}, [%rd82];
	selp.b32 	%r316, %r294, %r292, %p59;
	shfl.sync.bfly.b32	%r317, %r316, 8, 31, -1;
	selp.b32 	%r222, %r292, %r317, %p59;
	selp.b32 	%r223, %r317, %r294, %p59;
	selp.b32 	%r318, %r295, %r293, %p59;
	shfl.sync.bfly.b32	%r319, %r318, 8, 31, -1;
	selp.b32 	%r230, %r293, %r319, %p59;
	selp.b32 	%r231, %r319, %r295, %p59;
	selp.b32 	%r320, %r299, %r297, %p59;
	shfl.sync.bfly.b32	%r321, %r320, 8, 31, -1;
	selp.b32 	%r238, %r297, %r321, %p59;
	selp.b32 	%r239, %r321, %r299, %p59;
	selp.b32 	%r322, %r300, %r298, %p59;
	shfl.sync.bfly.b32	%r323, %r322, 8, 31, -1;
	selp.b32 	%r246, %r298, %r323, %p59;
	selp.b32 	%r247, %r323, %r300, %p59;
	selp.b32 	%r324, %r304, %r302, %p59;
	shfl.sync.bfly.b32	%r325, %r324, 8, 31, -1;
	selp.b32 	%r254, %r302, %r325, %p59;
	selp.b32 	%r255, %r325, %r304, %p59;
	selp.b32 	%r326, %r305, %r303, %p59;
	shfl.sync.bfly.b32	%r327, %r326, 8, 31, -1;
	selp.b32 	%r262, %r303, %r327, %p59;
	selp.b32 	%r263, %r327, %r305, %p59;
	selp.b32 	%r328, %r314, %r312, %p59;
	shfl.sync.bfly.b32	%r329, %r328, 8, 31, -1;
	selp.b32 	%r270, %r312, %r329, %p59;
	selp.b32 	%r271, %r329, %r314, %p59;
	selp.b32 	%r330, %r315, %r313, %p59;
	shfl.sync.bfly.b32	%r331, %r330, 8, 31, -1;
	selp.b32 	%r278, %r313, %r331, %p59;
	selp.b32 	%r279, %r331, %r315, %p59;
	mov.u32 	%r770, 21520;
	// begin inline asm
	prmt.b32 %r221, %r222, %r223, %r770;
	// end inline asm
	mov.u32 	%r774, 30258;
	// begin inline asm
	prmt.b32 %r225, %r222, %r223, %r774;
	// end inline asm
	// begin inline asm
	prmt.b32 %r229, %r230, %r231, %r770;
	// end inline asm
	// begin inline asm
	prmt.b32 %r233, %r230, %r231, %r774;
	// end inline asm
	// begin inline asm
	prmt.b32 %r237, %r238, %r239, %r770;
	// end inline asm
	// begin inline asm
	prmt.b32 %r241, %r238, %r239, %r774;
	// end inline asm
	// begin inline asm
	prmt.b32 %r245, %r246, %r247, %r770;
	// end inline asm
	// begin inline asm
	prmt.b32 %r249, %r246, %r247, %r774;
	// end inline asm
	// begin inline asm
	prmt.b32 %r253, %r254, %r255, %r770;
	// end inline asm
	// begin inline asm
	prmt.b32 %r257, %r254, %r255, %r774;
	// end inline asm
	// begin inline asm
	prmt.b32 %r261, %r262, %r263, %r770;
	// end inline asm
	// begin inline asm
	prmt.b32 %r265, %r262, %r263, %r774;
	// end inline asm
	// begin inline asm
	prmt.b32 %r269, %r270, %r271, %r770;
	// end inline asm
	// begin inline asm
	prmt.b32 %r273, %r270, %r271, %r774;
	// end inline asm
	// begin inline asm
	prmt.b32 %r277, %r278, %r279, %r770;
	// end inline asm
	// begin inline asm
	prmt.b32 %r281, %r278, %r279, %r774;
	// end inline asm
	st.shared.u32 	[%rd4], %r221;
	st.shared.u32 	[%rd5+128], %r225;
	st.shared.u32 	[%rd5+4], %r229;
	st.shared.u32 	[%rd5+132], %r233;
	st.shared.u32 	[%rd5+1040], %r237;
	st.shared.u32 	[%rd5+1168], %r241;
	st.shared.u32 	[%rd5+1044], %r245;
	st.shared.u32 	[%rd5+1172], %r249;
	st.shared.u32 	[%rd5+520], %r253;
	st.shared.u32 	[%rd5+648], %r257;
	st.shared.u32 	[%rd5+524], %r261;
	st.shared.u32 	[%rd5+652], %r265;
	st.shared.u32 	[%rd5+1560], %r269;
	st.shared.u32 	[%rd5+1688], %r273;
	st.shared.u32 	[%rd5+1564], %r277;
	st.shared.u32 	[%rd5+1692], %r281;
	bar.sync 	0;
	mov.u32 	%r872, 256;
	mov.u64 	%rd91, %rd14;
	mov.u64 	%rd92, %rd15;
LBB0_4:                                 // %L8851
                                        //   Parent Loop BB0_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ld.shared.u32 	%r765, [%rd91];
	mov.u16 	%rs22, 25600;
	// begin inline asm
	mov.b32 %r337, {%rs22, %rs22};
	// end inline asm
	mov.u16 	%rs24, 21504;
	// begin inline asm
	mov.b32 %r348, {%rs24, %rs24};
	// end inline asm
	xor.b32  	%r336, %r765, -2004318072;
	mov.u32 	%r335, 983055;
	// begin inline asm
	lop3.b32 %r334, %r335, %r336, %r337, 202;
	// end inline asm
	mov.u16 	%rs26, 18432;
	// begin inline asm
	mov.b32 %r338, {%rs26, %rs26};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r339, %r337, %r338;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r342, %r334, %r339;
	// end inline asm
	mov.u32 	%r346, 15728880;
	// begin inline asm
	lop3.b32 %r345, %r346, %r336, %r348, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r349, {%rs26, %rs26};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r350, %r348, %r349;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r353, %r345, %r350;
	// end inline asm
	shr.u32 	%r358, %r336, 8;
	// begin inline asm
	lop3.b32 %r356, %r335, %r358, %r337, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r360, {%rs26, %rs26};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r361, %r337, %r360;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r364, %r356, %r361;
	// end inline asm
	// begin inline asm
	lop3.b32 %r367, %r346, %r358, %r348, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r371, {%rs26, %rs26};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r372, %r348, %r371;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r375, %r367, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r378, %r379, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r381, %r379, %r353;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r384, %r379, %r364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r387, %r379, %r375;
	// end inline asm
	// begin inline asm
	mov.b32 %r395, {%rs22, %rs22};
	// end inline asm
	// begin inline asm
	mov.b32 %r406, {%rs24, %rs24};
	// end inline asm
	mov.u32 	%r394, -2004318072;
	// begin inline asm
	lop3.b32 %r392, %r335, %r394, %r395, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r396, {%rs26, %rs26};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r397, %r395, %r396;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r400, %r392, %r397;
	// end inline asm
	// begin inline asm
	lop3.b32 %r403, %r346, %r394, %r406, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r407, {%rs26, %rs26};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r408, %r406, %r407;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r411, %r403, %r408;
	// end inline asm
	mov.u32 	%r416, 8947848;
	// begin inline asm
	lop3.b32 %r414, %r335, %r416, %r395, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r418, {%rs26, %rs26};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r419, %r395, %r418;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r422, %r414, %r419;
	// end inline asm
	// begin inline asm
	lop3.b32 %r425, %r346, %r416, %r406, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r429, {%rs26, %rs26};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r430, %r406, %r429;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r433, %r425, %r430;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r436, %r437, %r400, %r378;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r440, %r437, %r411, %r381;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r444, %r437, %r422, %r384;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r448, %r437, %r433, %r387;
	// end inline asm
	// begin inline asm
	mov.b32 %r457, {%rs22, %rs22};
	// end inline asm
	// begin inline asm
	mov.b32 %r468, {%rs24, %rs24};
	// end inline asm
	// begin inline asm
	lop3.b32 %r454, %r335, %r394, %r457, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r458, {%rs26, %rs26};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r459, %r457, %r458;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r462, %r454, %r459;
	// end inline asm
	// begin inline asm
	lop3.b32 %r465, %r346, %r394, %r468, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r469, {%rs26, %rs26};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r470, %r468, %r469;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r473, %r465, %r470;
	// end inline asm
	// begin inline asm
	lop3.b32 %r476, %r335, %r416, %r457, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r480, {%rs26, %rs26};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r481, %r457, %r480;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r484, %r476, %r481;
	// end inline asm
	// begin inline asm
	lop3.b32 %r487, %r346, %r416, %r468, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r491, {%rs26, %rs26};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r492, %r468, %r491;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r495, %r487, %r492;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r498, %r499, %r462, %r436;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r502, %r499, %r473, %r440;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r506, %r499, %r484, %r444;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r510, %r499, %r495, %r448;
	// end inline asm
	// begin inline asm
	mov.b32 %r519, {%rs22, %rs22};
	// end inline asm
	// begin inline asm
	mov.b32 %r530, {%rs24, %rs24};
	// end inline asm
	// begin inline asm
	lop3.b32 %r516, %r335, %r394, %r519, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r520, {%rs26, %rs26};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r521, %r519, %r520;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r524, %r516, %r521;
	// end inline asm
	// begin inline asm
	lop3.b32 %r527, %r346, %r394, %r530, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r531, {%rs26, %rs26};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r532, %r530, %r531;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r535, %r527, %r532;
	// end inline asm
	// begin inline asm
	lop3.b32 %r538, %r335, %r416, %r519, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r542, {%rs26, %rs26};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r543, %r519, %r542;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r546, %r538, %r543;
	// end inline asm
	// begin inline asm
	lop3.b32 %r549, %r346, %r416, %r530, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r553, {%rs26, %rs26};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r554, %r530, %r553;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r557, %r549, %r554;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r584, %r561, %r524, %r498;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r580, %r561, %r535, %r502;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r593, %r561, %r546, %r506;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r589, %r561, %r557, %r510;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r576, %r577;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r578, %r576, %r580;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r581, %r578, %r583, %r584;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r585, %r577;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r587, %r585, %r589;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r590, %r587, %r583, %r593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r594, %r577, %r584;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r597, %r594, %r583, %r580;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r601, %r577, %r593;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r604, %r601, %r583, %r589;
	// end inline asm
	mov.u32 	%r616, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r636, %r632}, {%r610, %r611, %r612, %r613}, {%r581, %r597}, {%r616, %r616};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r645, %r641}, {%r610, %r611, %r612, %r613}, {%r590, %r604}, {%r616, %r616};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r628, %r629;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r630, %r628, %r632;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r633, %r630, %r635, %r636;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r637, %r629;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r639, %r637, %r641;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r642, %r639, %r635, %r645;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r646, %r629, %r636;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r649, %r646, %r635, %r632;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r653, %r629, %r645;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r656, %r653, %r635, %r641;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r660, %r661}, {%r662, %r663, %r664, %r665}, {%r633, %r649}, {%r616, %r616};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r670, %r671}, {%r662, %r663, %r664, %r665}, {%r642, %r656}, {%r616, %r616};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r680, %r681, %r660;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r683, %r681, %r661;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r686, %r681, %r670;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r689, %r681, %r671;
	// end inline asm
	mov.u16 	%rs70, -14592;
	// begin inline asm
	mov.b32 %r692, {%rs70, %rs70};
	// end inline asm
	mov.u16 	%rs72, 18176;
	// begin inline asm
	mov.b32 %r693, {%rs72, %rs72};
	// end inline asm
	// begin inline asm
	max.f16x2 %r694, %r680, %r692;
	// end inline asm
	// begin inline asm
	min.f16x2 %r697, %r694, %r693;
	// end inline asm
	// begin inline asm
	mov.b32 %r700, {%rs70, %rs70};
	// end inline asm
	// begin inline asm
	mov.b32 %r701, {%rs72, %rs72};
	// end inline asm
	// begin inline asm
	max.f16x2 %r702, %r683, %r700;
	// end inline asm
	// begin inline asm
	min.f16x2 %r705, %r702, %r701;
	// end inline asm
	// begin inline asm
	mov.b32 %r708, {%rs70, %rs70};
	// end inline asm
	// begin inline asm
	mov.b32 %r709, {%rs72, %rs72};
	// end inline asm
	// begin inline asm
	max.f16x2 %r710, %r686, %r708;
	// end inline asm
	// begin inline asm
	min.f16x2 %r713, %r710, %r709;
	// end inline asm
	// begin inline asm
	mov.b32 %r716, {%rs70, %rs70};
	// end inline asm
	// begin inline asm
	mov.b32 %r717, {%rs72, %rs72};
	// end inline asm
	// begin inline asm
	max.f16x2 %r718, %r689, %r716;
	// end inline asm
	// begin inline asm
	min.f16x2 %r721, %r718, %r717;
	// end inline asm
	// begin inline asm
	mov.b32 %r727, {%rs22, %rs22};
	// end inline asm
	// begin inline asm
	mov.b32 %r725, {%rs26, %rs26};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r726, %r727, %r725;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r729, %r697, %r726;
	// end inline asm
	// begin inline asm
	mov.b32 %r732, {%rs26, %rs26};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r733, %r727, %r732;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r736, %r705, %r733;
	// end inline asm
	// begin inline asm
	mov.b32 %r739, {%rs26, %rs26};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r740, %r727, %r739;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r743, %r713, %r740;
	// end inline asm
	// begin inline asm
	mov.b32 %r746, {%rs26, %rs26};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r747, %r727, %r746;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r750, %r721, %r747;
	// end inline asm
	mov.u32 	%r756, 25152;
	// begin inline asm
	prmt.b32 %r753, %r729, %r743, %r756;
	// end inline asm
	// begin inline asm
	prmt.b32 %r757, %r736, %r750, %r756;
	// end inline asm
	shl.b32 	%r764, %r757, 4;
	mov.u32 	%r762, 252645135;
	// begin inline asm
	lop3.b32 %r761, %r762, %r753, %r764, 202;
	// end inline asm
	xor.b32  	%r766, %r761, -2004318072;
	st.shared.u32 	[%rd92], %r766;
	add.s32 	%r872, %r872, -16;
	add.s64 	%rd92, %rd92, 2180;
	add.s64 	%rd91, %rd91, 2180;
	setp.ne.s32 	%p60, %r872, 0;
	@%p60 bra 	LBB0_4;
// %bb.5:                               // %L10227
                                        //   in Loop: Header=BB0_3 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r772, [%rd4];
	ld.shared.u32 	%r773, [%rd5+128];
	ld.shared.u32 	%r780, [%rd5+4];
	ld.shared.u32 	%r781, [%rd5+132];
	ld.shared.u32 	%r788, [%rd6];
	ld.shared.u32 	%r789, [%rd7+128];
	ld.shared.u32 	%r796, [%rd7+4];
	ld.shared.u32 	%r797, [%rd7+132];
	ld.shared.u32 	%r804, [%rd8];
	ld.shared.u32 	%r805, [%rd9+128];
	ld.shared.u32 	%r812, [%rd9+4];
	ld.shared.u32 	%r813, [%rd9+132];
	ld.shared.u32 	%r820, [%rd10];
	ld.shared.u32 	%r821, [%rd11+128];
	ld.shared.u32 	%r828, [%rd11+4];
	ld.shared.u32 	%r829, [%rd11+132];
	// begin inline asm
	prmt.b32 %r767, %r772, %r773, %r770;
	// end inline asm
	// begin inline asm
	prmt.b32 %r771, %r772, %r773, %r774;
	// end inline asm
	// begin inline asm
	prmt.b32 %r775, %r780, %r781, %r770;
	// end inline asm
	// begin inline asm
	prmt.b32 %r779, %r780, %r781, %r774;
	// end inline asm
	// begin inline asm
	prmt.b32 %r783, %r788, %r789, %r770;
	// end inline asm
	// begin inline asm
	prmt.b32 %r787, %r788, %r789, %r774;
	// end inline asm
	// begin inline asm
	prmt.b32 %r791, %r796, %r797, %r770;
	// end inline asm
	// begin inline asm
	prmt.b32 %r795, %r796, %r797, %r774;
	// end inline asm
	// begin inline asm
	prmt.b32 %r799, %r804, %r805, %r770;
	// end inline asm
	// begin inline asm
	prmt.b32 %r803, %r804, %r805, %r774;
	// end inline asm
	// begin inline asm
	prmt.b32 %r807, %r812, %r813, %r770;
	// end inline asm
	// begin inline asm
	prmt.b32 %r811, %r812, %r813, %r774;
	// end inline asm
	// begin inline asm
	prmt.b32 %r815, %r820, %r821, %r770;
	// end inline asm
	// begin inline asm
	prmt.b32 %r819, %r820, %r821, %r774;
	// end inline asm
	// begin inline asm
	prmt.b32 %r823, %r828, %r829, %r770;
	// end inline asm
	// begin inline asm
	prmt.b32 %r827, %r828, %r829, %r774;
	// end inline asm
	selp.b32 	%r831, %r771, %r767, %p59;
	shfl.sync.bfly.b32	%r832, %r831, 8, 31, -1;
	selp.b32 	%r833, %r767, %r832, %p59;
	selp.b32 	%r834, %r832, %r771, %p59;
	selp.b32 	%r835, %r779, %r775, %p59;
	shfl.sync.bfly.b32	%r836, %r835, 8, 31, -1;
	selp.b32 	%r837, %r775, %r836, %p59;
	selp.b32 	%r838, %r836, %r779, %p59;
	selp.b32 	%r839, %r787, %r783, %p59;
	shfl.sync.bfly.b32	%r840, %r839, 8, 31, -1;
	selp.b32 	%r841, %r783, %r840, %p59;
	selp.b32 	%r842, %r840, %r787, %p59;
	selp.b32 	%r843, %r795, %r791, %p59;
	shfl.sync.bfly.b32	%r844, %r843, 8, 31, -1;
	selp.b32 	%r845, %r791, %r844, %p59;
	selp.b32 	%r846, %r844, %r795, %p59;
	selp.b32 	%r847, %r803, %r799, %p59;
	shfl.sync.bfly.b32	%r848, %r847, 8, 31, -1;
	selp.b32 	%r849, %r799, %r848, %p59;
	selp.b32 	%r850, %r848, %r803, %p59;
	selp.b32 	%r851, %r811, %r807, %p59;
	shfl.sync.bfly.b32	%r852, %r851, 8, 31, -1;
	selp.b32 	%r853, %r807, %r852, %p59;
	selp.b32 	%r854, %r852, %r811, %p59;
	selp.b32 	%r855, %r819, %r815, %p59;
	shfl.sync.bfly.b32	%r856, %r855, 8, 31, -1;
	selp.b32 	%r857, %r815, %r856, %p59;
	selp.b32 	%r858, %r856, %r819, %p59;
	selp.b32 	%r859, %r827, %r823, %p59;
	shfl.sync.bfly.b32	%r860, %r859, 8, 31, -1;
	selp.b32 	%r861, %r823, %r860, %p59;
	selp.b32 	%r862, %r860, %r827, %p59;
	shl.b32 	%r863, %r871, 14;
	or.b32  	%r864, %r863, %r25;
	or.b32  	%r865, %r26, %r864;
	cvt.u64.u32 	%rd83, %r865;
	add.s64 	%rd84, %rd2, %rd83;
	st.global.v4.u32 	[%rd84], {%r833, %r837, %r834, %r838};
	or.b32  	%r866, %r27, %r863;
	or.b32  	%r867, %r866, 2048;
	cvt.u64.u32 	%rd85, %r867;
	add.s64 	%rd86, %rd2, %rd85;
	st.global.v4.u32 	[%rd86], {%r841, %r845, %r842, %r846};
	or.b32  	%r868, %r866, 4096;
	cvt.u64.u32 	%rd87, %r868;
	add.s64 	%rd88, %rd2, %rd87;
	st.global.v4.u32 	[%rd88], {%r849, %r853, %r850, %r854};
	or.b32  	%r869, %r866, 6144;
	cvt.u64.u32 	%rd89, %r869;
	add.s64 	%rd90, %rd2, %rd89;
	st.global.v4.u32 	[%rd90], {%r857, %r861, %r858, %r862};
	add.s32 	%r31, %r871, 256;
	setp.ne.s32 	%p62, %r871, 32512;
	mov.u32 	%r871, %r31;
	@%p62 bra 	LBB0_3;
// %bb.6:                               // %L15201
	st.global.u32 	[%rd3], %r616;
	ret;
LBB0_1:                                 // %L8
	ld.param.u64 	%rd20, [_Z17julia_upchan_368413CuDeviceArrayI9Float16x2Li1ELi1EES_IS0_Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0];
	mov.u64 	%rd33, exception1;
	cvta.global.u64 	%rd34, %rd33;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd34;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd20;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
