CHORD FRB beamformer
Compiling kernel...
// PTX CompilerJob of kernel #frb(CuDeviceVector{Int16x2, 1}, CuDeviceVector{Float16x2, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Float16x2, 1}, CuDeviceVector{Int32, 1}) for sm_80, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 7.0
.target sm_80
.address_size 64

	// .globl	_Z15julia_frb_1037513CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE // -- Begin function _Z15julia_frb_1037513CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[8]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z15julia_frb_1037513CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.visible .entry _Z15julia_frb_1037513CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE(
	.param .align 8 .b8 _Z15julia_frb_1037513CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0[8],
	.param .align 8 .b8 _Z15julia_frb_1037513CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z15julia_frb_1037513CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z15julia_frb_1037513CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z15julia_frb_1037513CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z15julia_frb_1037513CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<78>;
	.reg .b16 	%rs<303>;
	.reg .b32 	%r<3411>;
	.reg .f32 	%f<202>;
	.reg .b64 	%rd<296>;

// %bb.0:                               // %conversion
	// begin inline asm
	mov.u32 %r250, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r250, 76895;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L10
	ld.param.u64 	%rd12, [_Z15julia_frb_1037513CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %ctaid.x;
	mad.lo.s32 	%r257, %r3, 768, %r2;
	mov.u32 	%r4, %tid.x;
	or.b32  	%r258, %r257, %r4;
	mul.wide.u32 	%rd18, %r258, 4;
	add.s64 	%rd5, %rd12, %rd18;
	mov.u32 	%r259, 1;
	st.global.u32 	[%rd5], %r259;
	and.b32  	%r5, %r4, 3;
	shr.u32 	%r6, %r4, 2;
	mul.lo.s32 	%r260, %r5, %r6;
	and.b32  	%r261, %r260, 7;
	cvt.rn.f32.u32 	%f18, %r261;
	mov.f32 	%f19, 0f40800000;
	div.approx.f32 	%f20, %f18, %f19;
	add.f32 	%f21, %f20, %f20;
	mov.b32 	%r262, %f21;
	and.b32  	%r263, %r262, -2147483648;
	or.b32  	%r264, %r263, 1056964608;
	mov.b32 	%f22, %r264;
	add.f32 	%f23, %f21, %f22;
	cvt.rzi.f32.f32 	%f24, %f23;
	abs.f32 	%f25, %f21;
	setp.gt.f32 	%p2, %f25, 0f4B000000;
	selp.f32 	%f26, %f21, %f24, %p2;
	cvt.rzi.f32.f32 	%f27, %f21;
	setp.lt.f32 	%p3, %f25, 0f3F000000;
	selp.f32 	%f28, %f27, %f26, %p3;
	cvt.rzi.s32.f32 	%r265, %f28;
	fma.rn.f32 	%f29, %f28, 0fBF000000, %f20;
	mul.f32 	%f30, %f29, 0f34222169;
	fma.rn.f32 	%f31, %f29, 0f40490FDA, %f30;
	mul.f32 	%f32, %f31, %f31;
	fma.rn.f32 	%f33, %f32, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f34, %f33, %f32, 0f3D2AAABB;
	fma.rn.f32 	%f35, %f34, %f32, 0fBEFFFFFF;
	fma.rn.f32 	%f36, %f35, %f32, 0f3F800000;
	fma.rn.f32 	%f37, %f32, %f31, 0f00000000;
	fma.rn.f32 	%f38, %f32, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f39, %f38, %f32, 0fBE2AAAA8;
	fma.rn.f32 	%f40, %f39, %f37, %f31;
	and.b32  	%r266, %r265, 1;
	setp.eq.b32 	%p4, %r266, 1;
	selp.f32 	%f41, %f36, %f40, %p4;
	selp.f32 	%f42, %f40, %f36, %p4;
	and.b32  	%r267, %r265, 2;
	setp.eq.s32 	%p5, %r267, 0;
	neg.f32 	%f43, %f41;
	selp.f32 	%f44, %f41, %f43, %p5;
	add.s32 	%r268, %r265, 1;
	and.b32  	%r269, %r268, 2;
	mov.f32 	%f200, 0f00000000;
	cvt.rzi.f32.f32 	%f47, %f20;
	setp.eq.f32 	%p7, %f47, %f20;
	mul.f32 	%f48, %f20, 0f00000000;
	shl.b32 	%r9, %r4, 1;
	and.b32  	%r10, %r9, 6;
	or.b32  	%r11, %r10, 1;
	setp.eq.s32 	%p9, %r10, 6;
	mov.f32 	%f192, 0f41C00000;
	mul.lo.s32 	%r3320, %r10, %r6;
	mov.f32 	%f194, %f200;
	mov.f32 	%f195, %f200;
	@%p9 bra 	LBB0_4;
// %bb.3:                               // %L205
	cvt.u16.u32 	%rs2, %r3320;
	and.b16  	%rs3, %rs2, 255;
	mul.lo.s16 	%rs4, %rs3, 171;
	shr.u16 	%rs5, %rs4, 13;
	mul.lo.s16 	%rs6, %rs5, 48;
	sub.s16 	%rs7, %rs2, %rs6;
	and.b16  	%rs8, %rs7, 255;
	cvt.rn.f32.u16 	%f53, %rs8;
	div.approx.f32 	%f55, %f53, %f192;
	add.f32 	%f56, %f55, %f55;
	mov.b32 	%r271, %f56;
	and.b32  	%r272, %r271, -2147483648;
	or.b32  	%r273, %r272, 1056964608;
	mov.b32 	%f57, %r273;
	add.f32 	%f58, %f56, %f57;
	cvt.rzi.f32.f32 	%f59, %f58;
	abs.f32 	%f60, %f56;
	setp.gt.f32 	%p10, %f60, 0f4B000000;
	selp.f32 	%f61, %f56, %f59, %p10;
	cvt.rzi.f32.f32 	%f62, %f56;
	setp.lt.f32 	%p11, %f60, 0f3F000000;
	selp.f32 	%f63, %f62, %f61, %p11;
	cvt.rzi.s32.f32 	%r274, %f63;
	fma.rn.f32 	%f64, %f63, 0fBF000000, %f55;
	mul.f32 	%f65, %f64, 0f34222169;
	fma.rn.f32 	%f66, %f64, 0f40490FDA, %f65;
	mul.f32 	%f67, %f66, %f66;
	fma.rn.f32 	%f68, %f67, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f69, %f68, %f67, 0f3D2AAABB;
	fma.rn.f32 	%f70, %f69, %f67, 0fBEFFFFFF;
	fma.rn.f32 	%f71, %f70, %f67, 0f3F800000;
	fma.rn.f32 	%f72, %f67, %f66, 0f00000000;
	fma.rn.f32 	%f73, %f67, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f74, %f73, %f67, 0fBE2AAAA8;
	fma.rn.f32 	%f75, %f74, %f72, %f66;
	and.b32  	%r275, %r274, 1;
	setp.eq.b32 	%p12, %r275, 1;
	selp.f32 	%f76, %f71, %f75, %p12;
	selp.f32 	%f77, %f75, %f71, %p12;
	and.b32  	%r276, %r274, 2;
	setp.eq.s32 	%p13, %r276, 0;
	neg.f32 	%f78, %f76;
	selp.f32 	%f79, %f76, %f78, %p13;
	add.s32 	%r277, %r274, 1;
	and.b32  	%r278, %r277, 2;
	setp.eq.s32 	%p14, %r278, 0;
	mov.f32 	%f80, 0f00000000;
	sub.f32 	%f81, %f80, %f77;
	selp.f32 	%f82, %f77, %f81, %p14;
	cvt.rzi.f32.f32 	%f83, %f55;
	setp.eq.f32 	%p15, %f83, %f55;
	mul.f32 	%f84, %f55, 0f00000000;
	selp.f32 	%f195, %f84, %f79, %p15;
	abs.f32 	%f85, %f55;
	setp.gt.f32 	%p16, %f85, 0f4B800000;
	add.f32 	%f86, %f195, 0f3F800000;
	selp.f32 	%f194, %f86, %f82, %p16;
LBB0_4:                                 // %L220
	setp.eq.s32 	%p6, %r269, 0;
	sub.f32 	%f45, %f200, %f42;
	selp.f32 	%f49, %f48, %f44, %p7;
	abs.f32 	%f50, %f20;
	setp.gt.u32 	%p17, %r11, 5;
	mul.lo.s32 	%r3321, %r11, %r6;
	mov.f32 	%f196, %f200;
	mov.f32 	%f197, %f200;
	@%p17 bra 	LBB0_6;
// %bb.5:                               // %L224
	cvt.u16.u32 	%rs9, %r3321;
	and.b16  	%rs10, %rs9, 255;
	mul.lo.s16 	%rs11, %rs10, 171;
	shr.u16 	%rs12, %rs11, 13;
	mul.lo.s16 	%rs13, %rs12, 48;
	sub.s16 	%rs14, %rs9, %rs13;
	and.b16  	%rs15, %rs14, 255;
	cvt.rn.f32.u16 	%f88, %rs15;
	div.approx.f32 	%f90, %f88, %f192;
	add.f32 	%f91, %f90, %f90;
	mov.b32 	%r280, %f91;
	and.b32  	%r281, %r280, -2147483648;
	or.b32  	%r282, %r281, 1056964608;
	mov.b32 	%f92, %r282;
	add.f32 	%f93, %f91, %f92;
	cvt.rzi.f32.f32 	%f94, %f93;
	abs.f32 	%f95, %f91;
	setp.gt.f32 	%p18, %f95, 0f4B000000;
	selp.f32 	%f96, %f91, %f94, %p18;
	cvt.rzi.f32.f32 	%f97, %f91;
	setp.lt.f32 	%p19, %f95, 0f3F000000;
	selp.f32 	%f98, %f97, %f96, %p19;
	cvt.rzi.s32.f32 	%r283, %f98;
	fma.rn.f32 	%f99, %f98, 0fBF000000, %f90;
	mul.f32 	%f100, %f99, 0f34222169;
	fma.rn.f32 	%f101, %f99, 0f40490FDA, %f100;
	mul.f32 	%f102, %f101, %f101;
	fma.rn.f32 	%f103, %f102, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f104, %f103, %f102, 0f3D2AAABB;
	fma.rn.f32 	%f105, %f104, %f102, 0fBEFFFFFF;
	fma.rn.f32 	%f106, %f105, %f102, 0f3F800000;
	fma.rn.f32 	%f107, %f102, %f101, 0f00000000;
	fma.rn.f32 	%f108, %f102, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f109, %f108, %f102, 0fBE2AAAA8;
	fma.rn.f32 	%f110, %f109, %f107, %f101;
	and.b32  	%r284, %r283, 1;
	setp.eq.b32 	%p20, %r284, 1;
	selp.f32 	%f111, %f106, %f110, %p20;
	selp.f32 	%f112, %f110, %f106, %p20;
	and.b32  	%r285, %r283, 2;
	setp.eq.s32 	%p21, %r285, 0;
	neg.f32 	%f113, %f111;
	selp.f32 	%f114, %f111, %f113, %p21;
	add.s32 	%r286, %r283, 1;
	and.b32  	%r287, %r286, 2;
	setp.eq.s32 	%p22, %r287, 0;
	mov.f32 	%f115, 0f00000000;
	sub.f32 	%f116, %f115, %f112;
	selp.f32 	%f117, %f112, %f116, %p22;
	cvt.rzi.f32.f32 	%f118, %f90;
	setp.eq.f32 	%p23, %f118, %f90;
	mul.f32 	%f119, %f90, 0f00000000;
	selp.f32 	%f197, %f119, %f114, %p23;
	abs.f32 	%f120, %f90;
	setp.gt.f32 	%p24, %f120, 0f4B800000;
	add.f32 	%f121, %f197, 0f3F800000;
	selp.f32 	%f196, %f121, %f117, %p24;
LBB0_6:                                 // %L239
	selp.f32 	%f46, %f42, %f45, %p6;
	setp.gt.f32 	%p8, %f50, 0f4B800000;
	add.f32 	%f51, %f49, 0f3F800000;
	setp.gt.u32 	%p26, %r4, 23;
	or.pred  	%p27, %p9, %p26;
	mov.f32 	%f193, 0f40400000;
	mov.f32 	%f198, %f200;
	mov.f32 	%f199, %f200;
	@%p27 bra 	LBB0_8;
// %bb.7:                               // %L276
	cvt.u16.u32 	%rs16, %r3320;
	and.b16  	%rs17, %rs16, 255;
	mul.lo.s16 	%rs18, %rs17, 171;
	shr.u16 	%rs19, %rs18, 10;
	mul.lo.s16 	%rs20, %rs19, 6;
	sub.s16 	%rs21, %rs16, %rs20;
	and.b16  	%rs22, %rs21, 255;
	cvt.rn.f32.u16 	%f123, %rs22;
	div.approx.f32 	%f125, %f123, %f193;
	add.f32 	%f126, %f125, %f125;
	mov.b32 	%r295, %f126;
	and.b32  	%r296, %r295, -2147483648;
	or.b32  	%r297, %r296, 1056964608;
	mov.b32 	%f127, %r297;
	add.f32 	%f128, %f126, %f127;
	cvt.rzi.f32.f32 	%f129, %f128;
	abs.f32 	%f130, %f126;
	setp.gt.f32 	%p28, %f130, 0f4B000000;
	selp.f32 	%f131, %f126, %f129, %p28;
	cvt.rzi.f32.f32 	%f132, %f126;
	setp.lt.f32 	%p29, %f130, 0f3F000000;
	selp.f32 	%f133, %f132, %f131, %p29;
	cvt.rzi.s32.f32 	%r298, %f133;
	fma.rn.f32 	%f134, %f133, 0fBF000000, %f125;
	mul.f32 	%f135, %f134, 0f34222169;
	fma.rn.f32 	%f136, %f134, 0f40490FDA, %f135;
	mul.f32 	%f137, %f136, %f136;
	fma.rn.f32 	%f138, %f137, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f139, %f138, %f137, 0f3D2AAABB;
	fma.rn.f32 	%f140, %f139, %f137, 0fBEFFFFFF;
	fma.rn.f32 	%f141, %f140, %f137, 0f3F800000;
	fma.rn.f32 	%f142, %f137, %f136, 0f00000000;
	fma.rn.f32 	%f143, %f137, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f144, %f143, %f137, 0fBE2AAAA8;
	fma.rn.f32 	%f145, %f144, %f142, %f136;
	and.b32  	%r299, %r298, 1;
	setp.eq.b32 	%p30, %r299, 1;
	selp.f32 	%f146, %f141, %f145, %p30;
	selp.f32 	%f147, %f145, %f141, %p30;
	and.b32  	%r300, %r298, 2;
	setp.eq.s32 	%p31, %r300, 0;
	neg.f32 	%f148, %f146;
	selp.f32 	%f149, %f146, %f148, %p31;
	add.s32 	%r301, %r298, 1;
	and.b32  	%r302, %r301, 2;
	setp.eq.s32 	%p32, %r302, 0;
	mov.f32 	%f150, 0f00000000;
	sub.f32 	%f151, %f150, %f147;
	selp.f32 	%f152, %f147, %f151, %p32;
	cvt.rzi.f32.f32 	%f153, %f125;
	setp.eq.f32 	%p33, %f153, %f125;
	mul.f32 	%f154, %f125, 0f00000000;
	selp.f32 	%f199, %f154, %f149, %p33;
	abs.f32 	%f155, %f125;
	setp.gt.f32 	%p34, %f155, 0f4B800000;
	add.f32 	%f156, %f199, 0f3F800000;
	selp.f32 	%f198, %f156, %f152, %p34;
LBB0_8:                                 // %L291
	selp.f32 	%f52, %f51, %f46, %p8;
	or.pred  	%p37, %p17, %p26;
	mov.f32 	%f201, %f200;
	@%p37 bra 	LBB0_10;
// %bb.9:                               // %L299
	cvt.u16.u32 	%rs23, %r3321;
	and.b16  	%rs24, %rs23, 255;
	mul.lo.s16 	%rs25, %rs24, 171;
	shr.u16 	%rs26, %rs25, 10;
	mul.lo.s16 	%rs27, %rs26, 6;
	sub.s16 	%rs28, %rs23, %rs27;
	and.b16  	%rs29, %rs28, 255;
	cvt.rn.f32.u16 	%f158, %rs29;
	div.approx.f32 	%f160, %f158, %f193;
	add.f32 	%f161, %f160, %f160;
	mov.b32 	%r304, %f161;
	and.b32  	%r305, %r304, -2147483648;
	or.b32  	%r306, %r305, 1056964608;
	mov.b32 	%f162, %r306;
	add.f32 	%f163, %f161, %f162;
	cvt.rzi.f32.f32 	%f164, %f163;
	abs.f32 	%f165, %f161;
	setp.gt.f32 	%p38, %f165, 0f4B000000;
	selp.f32 	%f166, %f161, %f164, %p38;
	cvt.rzi.f32.f32 	%f167, %f161;
	setp.lt.f32 	%p39, %f165, 0f3F000000;
	selp.f32 	%f168, %f167, %f166, %p39;
	cvt.rzi.s32.f32 	%r307, %f168;
	fma.rn.f32 	%f169, %f168, 0fBF000000, %f160;
	mul.f32 	%f170, %f169, 0f34222169;
	fma.rn.f32 	%f171, %f169, 0f40490FDA, %f170;
	mul.f32 	%f172, %f171, %f171;
	fma.rn.f32 	%f173, %f172, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f174, %f173, %f172, 0f3D2AAABB;
	fma.rn.f32 	%f175, %f174, %f172, 0fBEFFFFFF;
	fma.rn.f32 	%f176, %f175, %f172, 0f3F800000;
	fma.rn.f32 	%f177, %f172, %f171, 0f00000000;
	fma.rn.f32 	%f178, %f172, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f179, %f178, %f172, 0fBE2AAAA8;
	fma.rn.f32 	%f180, %f179, %f177, %f171;
	and.b32  	%r308, %r307, 1;
	setp.eq.b32 	%p40, %r308, 1;
	selp.f32 	%f181, %f176, %f180, %p40;
	selp.f32 	%f182, %f180, %f176, %p40;
	and.b32  	%r309, %r307, 2;
	setp.eq.s32 	%p41, %r309, 0;
	neg.f32 	%f183, %f181;
	selp.f32 	%f184, %f181, %f183, %p41;
	add.s32 	%r310, %r307, 1;
	and.b32  	%r311, %r310, 2;
	setp.eq.s32 	%p42, %r311, 0;
	mov.f32 	%f185, 0f00000000;
	sub.f32 	%f186, %f185, %f182;
	selp.f32 	%f187, %f182, %f186, %p42;
	cvt.rzi.f32.f32 	%f188, %f160;
	setp.eq.f32 	%p43, %f188, %f160;
	mul.f32 	%f189, %f160, 0f00000000;
	selp.f32 	%f201, %f189, %f184, %p43;
	abs.f32 	%f190, %f160;
	setp.gt.f32 	%p44, %f190, 0f4B800000;
	add.f32 	%f191, %f201, 0f3F800000;
	selp.f32 	%f200, %f191, %f187, %p44;
LBB0_10:                                // %L314
	mov.b32 	%r253, %f52;
	mov.b32 	%r256, %f49;
	mov.b32 	%r313, %f198;
	mov.b32 	%r314, %f200;
	mov.b32 	%r319, %f199;
	mov.b32 	%r320, %f201;
	mov.u32 	%r3323, 999999999;
	cvt.u16.u32 	%rs301, %r4;
	@%p26 bra 	LBB0_12;
// %bb.11:                              // %L350
	ld.param.u64 	%rd1, [_Z15julia_frb_1037513CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1];
	and.b16  	%rs31, %rs301, 255;
	mul.lo.s16 	%rs32, %rs31, 171;
	shr.u16 	%rs33, %rs32, 12;
	mul.lo.s16 	%rs34, %rs33, 24;
	sub.s16 	%rs35, %rs301, %rs34;
	cvt.u32.u16 	%r325, %rs35;
	and.b32  	%r326, %r325, 255;
	mad.lo.s32 	%r327, %r326, 24, %r1;
	cvt.u16.u32 	%rs36, %r327;
	mul.hi.u16 	%rs37, %rs36, -7281;
	shr.u16 	%rs38, %rs37, 9;
	mul.lo.s16 	%rs39, %rs38, 576;
	sub.s16 	%rs40, %rs36, %rs39;
	cvt.u32.u16 	%r328, %rs40;
	mul.wide.u32 	%rd19, %r328, 4;
	add.s64 	%rd20, %rd1, %rd19;
	ld.global.u32 	%r329, [%rd20];
	cvt.s32.s16 	%r330, %r329;
	shr.s32 	%r331, %r329, 16;
	mul.lo.s32 	%r332, %r331, 801;
	mad.lo.s32 	%r3323, %r330, 33, %r332;
LBB0_12:                                // %L428
	xor.b32  	%r252, %r256, -2147483648;
	mov.b32 	%r289, %f194;
	mov.b32 	%r290, %f196;
	mov.b32 	%r292, %f195;
	mov.b32 	%r293, %f197;
	xor.b32  	%r316, %r319, -2147483648;
	xor.b32  	%r317, %r320, -2147483648;
	and.b32  	%r20, %r4, 24;
	setp.ne.s32 	%p46, %r20, 24;
	cvt.u16.u32 	%rs302, %r6;
	@%p46 bra 	LBB0_14;
// %bb.13:                              // %L428.L734_crit_edge
	mul.lo.s16 	%rs54, %rs302, 171;
	shr.u16 	%rs55, %rs54, 10;
	mul.lo.s16 	%rs56, %rs55, 6;
	sub.s16 	%rs57, %rs302, %rs56;
	cvt.u32.u16 	%r347, %rs57;
	and.b32  	%r3327, %r347, 255;
	cvt.u16.u32 	%rs58, %r1;
	and.b16  	%rs59, %rs58, 255;
	mul.lo.s16 	%rs60, %rs59, 171;
	shr.u16 	%rs61, %rs60, 10;
	mul.lo.s16 	%rs62, %rs61, -6;
	add.s16 	%rs63, %rs62, %rs58;
	cvt.u32.u16 	%r349, %rs63;
	and.b32  	%r3326, %r349, 255;
	cvt.u32.u16 	%r3325, %rs61;
	mul.wide.u16 	%r3324, %rs61, 6;
	mov.u32 	%r3328, 0;
	mov.u32 	%r3329, %r3328;
	bra.uni 	LBB0_15;
LBB0_14:                                // %L454
	ld.param.u64 	%rd2, [_Z15julia_frb_1037513CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2];
	cvt.u16.u32 	%rs41, %r1;
	and.b16  	%rs42, %rs41, 255;
	mul.lo.s16 	%rs43, %rs42, 171;
	shr.u16 	%rs44, %rs43, 10;
	mul.lo.s16 	%rs45, %rs44, -6;
	add.s16 	%rs46, %rs45, %rs41;
	cvt.u32.u16 	%r334, %rs46;
	and.b32  	%r3326, %r334, 255;
	cvt.u32.u16 	%r3325, %rs44;
	mul.wide.u16 	%r3324, %rs44, 6;
	mul.lo.s16 	%rs48, %rs302, 171;
	shr.u16 	%rs49, %rs48, 10;
	mul.lo.s16 	%rs50, %rs49, 6;
	sub.s16 	%rs51, %rs302, %rs50;
	cvt.u32.u16 	%r335, %rs51;
	and.b32  	%r3327, %r335, 255;
	and.b16  	%rs52, %rs51, 255;
	mul.wide.u16 	%r336, %rs52, 24;
	mul.lo.s32 	%r337, %r3, 576;
	mad.lo.s32 	%r338, %r5, 144, %r337;
	or.b32  	%r339, %r338, %r3326;
	add.s32 	%r340, %r339, %r3324;
	add.s32 	%r341, %r340, %r336;
	mul.wide.u32 	%rd21, %r341, 4;
	add.s64 	%rd22, %rd2, %rd21;
	ld.global.u32 	%r3328, [%rd22];
	add.s32 	%r342, %r338, 147456;
	or.b32  	%r343, %r342, %r3326;
	add.s32 	%r344, %r343, %r3324;
	add.s32 	%r345, %r344, %r336;
	mul.wide.u32 	%rd23, %r345, 4;
	add.s64 	%rd24, %rd2, %rd23;
	ld.global.u32 	%r3329, [%rd24];
LBB0_15:                                // %L734
	ld.param.u64 	%rd3, [_Z15julia_frb_1037513CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z15julia_frb_1037513CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4];
	// begin inline asm
	cvt.rn.f16x2.f32 %r251, %r253, %r252;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r254, %r256, %r253;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r288, %r290, %r289;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r291, %r293, %r292;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r312, %r314, %r313;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r315, %r317, %r316;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r318, %r320, %r319;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r321, %r314, %r313;
	// end inline asm
	mov.u32 	%r3322, 0;
	shl.b32 	%r351, %r3, 7;
	shl.b32 	%r352, %r4, 11;
	and.b32  	%r353, %r352, 32768;
	or.b32  	%r354, %r353, %r351;
	shl.b32 	%r355, %r4, 2;
	and.b32  	%r356, %r355, 60;
	or.b32  	%r37, %r354, %r356;
	or.b32  	%r357, %r355, %r351;
	or.b32  	%r358, %r357, %r353;
	or.b32  	%r38, %r358, 64;
	add.s32 	%r39, %r1, 24;
	and.b16  	%rs1, %rs301, 16;
	and.b32  	%r359, %r9, 30;
	shr.u32 	%r360, %r4, 4;
	or.b32  	%r361, %r359, %r360;
	mul.lo.s32 	%r40, %r361, 257;
	or.b32  	%r362, %r360, %r9;
	or.b32  	%r363, %r362, 32;
	mul.lo.s32 	%r41, %r363, 257;
	and.b32  	%r364, %r2, 224;
	shr.u32 	%r365, %r1, 3;
	mad.lo.s32 	%r42, %r365, 257, %r364;
	and.b16  	%rs65, %rs301, 255;
	mul.lo.s16 	%rs66, %rs65, 171;
	shr.u16 	%rs67, %rs66, 12;
	mul.lo.s16 	%rs68, %rs67, 24;
	sub.s16 	%rs69, %rs301, %rs68;
	cvt.u32.u16 	%r366, %rs69;
	and.b32  	%r43, %r366, 255;
	shr.u32 	%r367, %r39, 3;
	mad.lo.s32 	%r44, %r367, 257, %r364;
	add.s32 	%r368, %r1, 48;
	shr.u32 	%r369, %r368, 3;
	mad.lo.s32 	%r45, %r369, 257, %r364;
	add.s32 	%r370, %r1, 72;
	shr.u32 	%r371, %r370, 3;
	mad.lo.s32 	%r46, %r371, 257, %r364;
	or.b32  	%r372, %r365, 12;
	mad.lo.s32 	%r47, %r372, 257, %r364;
	add.s32 	%r373, %r1, 120;
	shr.u32 	%r374, %r373, 3;
	mad.lo.s32 	%r48, %r374, 257, %r364;
	add.s32 	%r375, %r1, 144;
	shr.u32 	%r376, %r375, 3;
	mad.lo.s32 	%r49, %r376, 257, %r364;
	add.s32 	%r377, %r1, 168;
	shr.u32 	%r378, %r377, 3;
	mad.lo.s32 	%r50, %r378, 257, %r364;
	or.b32  	%r379, %r365, 24;
	mad.lo.s32 	%r51, %r379, 257, %r364;
	add.s32 	%r380, %r1, 216;
	shr.u32 	%r381, %r380, 3;
	mad.lo.s32 	%r52, %r381, 257, %r364;
	add.s32 	%r382, %r1, 240;
	shr.u32 	%r383, %r382, 3;
	mad.lo.s32 	%r53, %r383, 257, %r364;
	add.s32 	%r384, %r1, 264;
	shr.u32 	%r385, %r384, 3;
	mad.lo.s32 	%r54, %r385, 257, %r364;
	or.b32  	%r386, %r365, 36;
	mad.lo.s32 	%r55, %r386, 257, %r364;
	add.s32 	%r387, %r1, 312;
	shr.u32 	%r388, %r387, 3;
	mad.lo.s32 	%r56, %r388, 257, %r364;
	add.s32 	%r389, %r1, 336;
	shr.u32 	%r390, %r389, 3;
	mad.lo.s32 	%r57, %r390, 257, %r364;
	add.s32 	%r391, %r1, 360;
	shr.u32 	%r392, %r391, 3;
	mad.lo.s32 	%r58, %r392, 257, %r364;
	or.b32  	%r393, %r365, 48;
	mad.lo.s32 	%r59, %r393, 257, %r364;
	add.s32 	%r394, %r1, 408;
	shr.u32 	%r395, %r394, 3;
	mad.lo.s32 	%r60, %r395, 257, %r364;
	add.s32 	%r396, %r1, 432;
	shr.u32 	%r397, %r396, 3;
	mad.lo.s32 	%r61, %r397, 257, %r364;
	add.s32 	%r398, %r1, 456;
	shr.u32 	%r399, %r398, 3;
	mad.lo.s32 	%r62, %r399, 257, %r364;
	or.b32  	%r400, %r365, 60;
	mad.lo.s32 	%r63, %r400, 257, %r364;
	add.s32 	%r401, %r1, 504;
	bfe.u32 	%r402, %r401, 3, 6;
	mad.lo.s32 	%r64, %r402, 257, %r364;
	mul.lo.s32 	%r403, %r5, 4806;
	mad.lo.s32 	%r404, %r3326, 33, %r403;
	mad.lo.s32 	%r405, %r3325, 198, %r404;
	mad.lo.s32 	%r406, %r3327, 801, %r405;
	bfe.u32 	%r407, %r4, 3, 1;
	mul.lo.s32 	%r408, %r407, 514;
	and.b32  	%r409, %r4, 1;
	mul.lo.s32 	%r410, %r409, 4112;
	and.b32  	%r411, %r6, 1;
	mul.lo.s32 	%r412, %r411, 1028;
	mul.lo.s32 	%r413, %r360, 257;
	bfe.u32 	%r414, %r4, 1, 1;
	mul.lo.s32 	%r415, %r414, 2056;
	add.s32 	%r416, %r413, %r410;
	add.s32 	%r417, %r416, %r408;
	add.s32 	%r418, %r417, %r412;
	add.s32 	%r419, %r418, %r3326;
	add.s32 	%r420, %r419, %r415;
	add.s32 	%r65, %r420, %r3324;
	mul.wide.u32 	%rd25, %r65, 4;
	mov.u64 	%rd26, shmem;
	add.s64 	%rd6, %rd26, %rd25;
	add.s32 	%r66, %r65, 8256;
	cvt.u64.u32 	%rd27, %r3324;
	cvt.u64.u32 	%rd28, %r415;
	cvt.u64.u32 	%rd29, %r3326;
	cvt.u64.u32 	%rd30, %r412;
	cvt.u64.u32 	%rd31, %r408;
	cvt.u64.u32 	%rd32, %r413;
	cvt.u64.u32 	%rd33, %r410;
	add.s64 	%rd34, %rd33, %rd32;
	add.s64 	%rd35, %rd34, %rd31;
	add.s64 	%rd36, %rd35, %rd30;
	add.s64 	%rd37, %rd36, %rd29;
	add.s64 	%rd38, %rd37, %rd28;
	add.s64 	%rd39, %rd38, %rd27;
	shl.b64 	%rd40, %rd39, 2;
	add.s64 	%rd7, %rd26, %rd40;
	add.s32 	%r67, %r65, 32;
	add.s32 	%r68, %r65, 8288;
	bfe.u32 	%r421, %r1, 3, 1;
	mul.lo.s32 	%r422, %r421, 514;
	and.b32  	%r423, %r1, 1;
	mul.lo.s32 	%r424, %r423, 4112;
	bfe.u32 	%r425, %r1, 2, 1;
	mul.lo.s32 	%r426, %r425, 1028;
	shr.u32 	%r427, %r1, 4;
	mul.lo.s32 	%r428, %r427, 257;
	bfe.u32 	%r429, %r1, 1, 1;
	mul.lo.s32 	%r430, %r429, 2056;
	mul.lo.s32 	%r431, %r5, 6;
	add.s32 	%r432, %r428, %r424;
	add.s32 	%r433, %r432, %r431;
	add.s32 	%r434, %r433, %r422;
	add.s32 	%r435, %r434, %r426;
	add.s32 	%r436, %r435, %r430;
	add.s32 	%r69, %r436, %r3327;
	mul.wide.u32 	%rd41, %r69, 4;
	add.s64 	%rd8, %rd26, %rd41;
	add.s32 	%r70, %r69, 8256;
	cvt.u64.u32 	%rd42, %r3327;
	cvt.u64.u32 	%rd43, %r430;
	cvt.u64.u32 	%rd44, %r426;
	cvt.u64.u32 	%rd45, %r422;
	cvt.u64.u32 	%rd46, %r431;
	cvt.u64.u32 	%rd47, %r428;
	cvt.u64.u32 	%rd48, %r424;
	add.s64 	%rd49, %rd48, %rd47;
	add.s64 	%rd50, %rd49, %rd46;
	add.s64 	%rd51, %rd50, %rd45;
	add.s64 	%rd52, %rd51, %rd44;
	add.s64 	%rd53, %rd52, %rd43;
	add.s64 	%rd54, %rd53, %rd42;
	shl.b64 	%rd55, %rd54, 2;
	add.s64 	%rd9, %rd26, %rd55;
	add.s32 	%r71, %r69, 32;
	add.s32 	%r72, %r69, 8288;
	mul.lo.s32 	%r437, %r3, 59904;
	cvt.u16.u32 	%rs70, %r1;
	shl.b16 	%rs71, %rs70, 1;
	and.b16  	%rs72, %rs71, 254;
	mul.lo.s16 	%rs73, %rs72, 171;
	shr.u16 	%rs74, %rs73, 13;
	mul.lo.s16 	%rs75, %rs74, 48;
	sub.s16 	%rs76, %rs71, %rs75;
	cvt.u32.u16 	%r438, %rs76;
	and.b32  	%r439, %r438, 254;
	or.b32  	%r440, %r437, %r43;
	mad.lo.s32 	%r73, %r439, 24, %r440;
	or.b16  	%rs77, %rs71, 1;
	and.b16  	%rs78, %rs77, 255;
	mul.lo.s16 	%rs79, %rs78, 171;
	shr.u16 	%rs80, %rs79, 13;
	mul.lo.s16 	%rs81, %rs80, 48;
	sub.s16 	%rs82, %rs77, %rs81;
	cvt.u32.u16 	%r441, %rs82;
	and.b32  	%r442, %r441, 255;
	mad.lo.s32 	%r74, %r442, 24, %r440;
	mul.wide.u32 	%rd56, %r406, 4;
	add.s64 	%rd10, %rd26, %rd56;
	setp.gt.u32 	%p47, %r1, 7;
	setp.eq.s16 	%p48, %rs1, 0;
	setp.lt.u32 	%p50, %r4, 24;
	mov.u32 	%r3330, %r3322;
	mov.u32 	%r3361, %r3322;
	mov.u32 	%r3362, %r3322;
	mov.u32 	%r3363, %r3322;
	mov.u32 	%r3364, %r3322;
	bra.uni 	LBB0_16;
LBB0_37:                                // %guard_pass14622
                                        //   in Loop: Header=BB0_16 Depth=1
	add.s32 	%r249, %r3330, 48;
	setp.ne.s32 	%p76, %r3330, 2016;
	mov.u32 	%r3330, %r249;
	@%p76 bra 	LBB0_16;
	bra.uni 	LBB0_38;
LBB0_16:                                // %L737
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_18 Depth 2
                                        //     Child Loop BB0_28 Depth 2
	mul.hi.u32 	%r636, %r3330, -1431655765;
	shr.u32 	%r637, %r636, 5;
	mul.lo.s32 	%r80, %r637, 48;
	add.s32 	%r638, %r80, %r1;
	cvt.u16.u32 	%rs83, %r638;
	mul.hi.s16 	%rs84, %rs83, 16257;
	shr.u16 	%rs85, %rs84, 15;
	shr.s16 	%rs86, %rs84, 9;
	add.s16 	%rs87, %rs86, %rs85;
	mul.lo.s16 	%rs88, %rs87, 2064;
	sub.s16 	%rs89, %rs83, %rs88;
	cvt.u32.u16 	%r639, %rs89;
	shl.b32 	%r640, %r639, 16;
	or.b32  	%r641, %r37, %r640;
	mul.wide.s32 	%rd57, %r641, 4;
	add.s64 	%rd58, %rd3, %rd57;
	ld.global.v4.u32 	{%r642, %r643, %r644, %r645}, [%rd58];
	or.b32  	%r646, %r38, %r640;
	mul.wide.s32 	%rd59, %r646, 4;
	add.s64 	%rd60, %rd3, %rd59;
	ld.global.v4.u32 	{%r647, %r648, %r649, %r650}, [%rd60];
	add.s32 	%r651, %r39, %r80;
	cvt.u16.u32 	%rs90, %r651;
	mul.hi.s16 	%rs91, %rs90, 16257;
	shr.u16 	%rs92, %rs91, 15;
	shr.s16 	%rs93, %rs91, 9;
	add.s16 	%rs94, %rs93, %rs92;
	mul.lo.s16 	%rs95, %rs94, 2064;
	sub.s16 	%rs96, %rs90, %rs95;
	cvt.u32.u16 	%r652, %rs96;
	shl.b32 	%r653, %r652, 16;
	or.b32  	%r654, %r37, %r653;
	mul.wide.s32 	%rd61, %r654, 4;
	add.s64 	%rd62, %rd3, %rd61;
	ld.global.v4.u32 	{%r655, %r656, %r657, %r658}, [%rd62];
	or.b32  	%r659, %r38, %r653;
	mul.wide.s32 	%rd63, %r659, 4;
	add.s64 	%rd64, %rd3, %rd63;
	ld.global.v4.u32 	{%r660, %r661, %r662, %r663}, [%rd64];
	selp.b32 	%r664, %r644, %r642, %p48;
	shfl.sync.bfly.b32	%r665, %r664, 16, 31, -1;
	selp.b32 	%r445, %r642, %r665, %p48;
	selp.b32 	%r450, %r665, %r644, %p48;
	selp.b32 	%r666, %r645, %r643, %p48;
	shfl.sync.bfly.b32	%r667, %r666, 16, 31, -1;
	selp.b32 	%r453, %r643, %r667, %p48;
	selp.b32 	%r458, %r667, %r645, %p48;
	selp.b32 	%r668, %r649, %r647, %p48;
	shfl.sync.bfly.b32	%r669, %r668, 16, 31, -1;
	selp.b32 	%r461, %r647, %r669, %p48;
	selp.b32 	%r466, %r669, %r649, %p48;
	selp.b32 	%r670, %r650, %r648, %p48;
	shfl.sync.bfly.b32	%r671, %r670, 16, 31, -1;
	selp.b32 	%r469, %r648, %r671, %p48;
	selp.b32 	%r474, %r671, %r650, %p48;
	selp.b32 	%r672, %r657, %r655, %p48;
	shfl.sync.bfly.b32	%r673, %r672, 16, 31, -1;
	selp.b32 	%r477, %r655, %r673, %p48;
	selp.b32 	%r482, %r673, %r657, %p48;
	selp.b32 	%r674, %r658, %r656, %p48;
	shfl.sync.bfly.b32	%r675, %r674, 16, 31, -1;
	selp.b32 	%r485, %r656, %r675, %p48;
	selp.b32 	%r490, %r675, %r658, %p48;
	selp.b32 	%r676, %r662, %r660, %p48;
	shfl.sync.bfly.b32	%r677, %r676, 16, 31, -1;
	selp.b32 	%r493, %r660, %r677, %p48;
	selp.b32 	%r498, %r677, %r662, %p48;
	selp.b32 	%r678, %r663, %r661, %p48;
	shfl.sync.bfly.b32	%r679, %r678, 16, 31, -1;
	selp.b32 	%r501, %r661, %r679, %p48;
	selp.b32 	%r506, %r679, %r663, %p48;
	shl.b32 	%r446, %r450, 4;
	mov.u32 	%r444, 252645135;
	// begin inline asm
	lop3.b32 %r508, %r444, %r445, %r446, 202;
	// end inline asm
	shr.u32 	%r449, %r445, 4;
	// begin inline asm
	lop3.b32 %r524, %r444, %r449, %r450, 202;
	// end inline asm
	shl.b32 	%r454, %r458, 4;
	// begin inline asm
	lop3.b32 %r516, %r444, %r453, %r454, 202;
	// end inline asm
	shr.u32 	%r457, %r453, 4;
	// begin inline asm
	lop3.b32 %r532, %r444, %r457, %r458, 202;
	// end inline asm
	shl.b32 	%r462, %r466, 4;
	// begin inline asm
	lop3.b32 %r540, %r444, %r461, %r462, 202;
	// end inline asm
	shr.u32 	%r465, %r461, 4;
	// begin inline asm
	lop3.b32 %r556, %r444, %r465, %r466, 202;
	// end inline asm
	shl.b32 	%r470, %r474, 4;
	// begin inline asm
	lop3.b32 %r548, %r444, %r469, %r470, 202;
	// end inline asm
	shr.u32 	%r473, %r469, 4;
	// begin inline asm
	lop3.b32 %r564, %r444, %r473, %r474, 202;
	// end inline asm
	shl.b32 	%r478, %r482, 4;
	// begin inline asm
	lop3.b32 %r509, %r444, %r477, %r478, 202;
	// end inline asm
	shr.u32 	%r481, %r477, 4;
	// begin inline asm
	lop3.b32 %r525, %r444, %r481, %r482, 202;
	// end inline asm
	shl.b32 	%r486, %r490, 4;
	// begin inline asm
	lop3.b32 %r517, %r444, %r485, %r486, 202;
	// end inline asm
	shr.u32 	%r489, %r485, 4;
	// begin inline asm
	lop3.b32 %r533, %r444, %r489, %r490, 202;
	// end inline asm
	shl.b32 	%r494, %r498, 4;
	// begin inline asm
	lop3.b32 %r541, %r444, %r493, %r494, 202;
	// end inline asm
	shr.u32 	%r497, %r493, 4;
	// begin inline asm
	lop3.b32 %r557, %r444, %r497, %r498, 202;
	// end inline asm
	shl.b32 	%r502, %r506, 4;
	// begin inline asm
	lop3.b32 %r549, %r444, %r501, %r502, 202;
	// end inline asm
	shr.u32 	%r505, %r501, 4;
	// begin inline asm
	lop3.b32 %r565, %r444, %r505, %r506, 202;
	// end inline asm
	mov.u32 	%r510, 25152;
	// begin inline asm
	prmt.b32 %r572, %r508, %r509, %r510;
	// end inline asm
	mov.u32 	%r514, 29521;
	// begin inline asm
	prmt.b32 %r604, %r508, %r509, %r514;
	// end inline asm
	// begin inline asm
	prmt.b32 %r580, %r516, %r517, %r510;
	// end inline asm
	// begin inline asm
	prmt.b32 %r612, %r516, %r517, %r514;
	// end inline asm
	// begin inline asm
	prmt.b32 %r573, %r524, %r525, %r510;
	// end inline asm
	// begin inline asm
	prmt.b32 %r605, %r524, %r525, %r514;
	// end inline asm
	// begin inline asm
	prmt.b32 %r581, %r532, %r533, %r510;
	// end inline asm
	// begin inline asm
	prmt.b32 %r613, %r532, %r533, %r514;
	// end inline asm
	// begin inline asm
	prmt.b32 %r588, %r540, %r541, %r510;
	// end inline asm
	// begin inline asm
	prmt.b32 %r620, %r540, %r541, %r514;
	// end inline asm
	// begin inline asm
	prmt.b32 %r596, %r548, %r549, %r510;
	// end inline asm
	// begin inline asm
	prmt.b32 %r628, %r548, %r549, %r514;
	// end inline asm
	// begin inline asm
	prmt.b32 %r589, %r556, %r557, %r510;
	// end inline asm
	// begin inline asm
	prmt.b32 %r621, %r556, %r557, %r514;
	// end inline asm
	// begin inline asm
	prmt.b32 %r597, %r564, %r565, %r510;
	// end inline asm
	// begin inline asm
	prmt.b32 %r629, %r564, %r565, %r514;
	// end inline asm
	mov.u32 	%r630, 21520;
	// begin inline asm
	prmt.b32 %r571, %r572, %r573, %r630;
	// end inline asm
	mov.u32 	%r634, 30258;
	// begin inline asm
	prmt.b32 %r575, %r572, %r573, %r634;
	// end inline asm
	// begin inline asm
	prmt.b32 %r579, %r580, %r581, %r630;
	// end inline asm
	// begin inline asm
	prmt.b32 %r583, %r580, %r581, %r634;
	// end inline asm
	// begin inline asm
	prmt.b32 %r587, %r588, %r589, %r630;
	// end inline asm
	// begin inline asm
	prmt.b32 %r591, %r588, %r589, %r634;
	// end inline asm
	// begin inline asm
	prmt.b32 %r595, %r596, %r597, %r630;
	// end inline asm
	// begin inline asm
	prmt.b32 %r599, %r596, %r597, %r634;
	// end inline asm
	// begin inline asm
	prmt.b32 %r603, %r604, %r605, %r630;
	// end inline asm
	// begin inline asm
	prmt.b32 %r607, %r604, %r605, %r634;
	// end inline asm
	// begin inline asm
	prmt.b32 %r611, %r612, %r613, %r630;
	// end inline asm
	// begin inline asm
	prmt.b32 %r615, %r612, %r613, %r634;
	// end inline asm
	// begin inline asm
	prmt.b32 %r619, %r620, %r621, %r630;
	// end inline asm
	// begin inline asm
	prmt.b32 %r623, %r620, %r621, %r634;
	// end inline asm
	// begin inline asm
	prmt.b32 %r627, %r628, %r629, %r630;
	// end inline asm
	// begin inline asm
	prmt.b32 %r631, %r628, %r629, %r634;
	// end inline asm
	mul.hi.s16 	%rs97, %rs83, 10923;
	shr.u16 	%rs98, %rs97, 15;
	shr.s16 	%rs99, %rs97, 2;
	add.s16 	%rs100, %rs99, %rs98;
	mul.lo.s16 	%rs101, %rs100, 24;
	sub.s16 	%rs102, %rs83, %rs101;
	cvt.s32.s16 	%r680, %rs102;
	add.s32 	%r681, %r40, %r680;
	mul.wide.s32 	%rd65, %r681, 4;
	add.s64 	%rd67, %rd26, %rd65;
	st.shared.u32 	[%rd67], %r571;
	st.shared.u32 	[%rd67+512], %r579;
	st.shared.u32 	[%rd67+256], %r575;
	st.shared.u32 	[%rd67+768], %r583;
	add.s32 	%r682, %r41, %r680;
	mul.wide.s32 	%rd68, %r682, 4;
	add.s64 	%rd69, %rd26, %rd68;
	st.shared.u32 	[%rd69], %r587;
	st.shared.u32 	[%rd69+512], %r595;
	st.shared.u32 	[%rd69+256], %r591;
	st.shared.u32 	[%rd69+768], %r599;
	st.shared.u32 	[%rd67+128], %r603;
	st.shared.u32 	[%rd67+640], %r611;
	st.shared.u32 	[%rd67+384], %r607;
	st.shared.u32 	[%rd67+896], %r615;
	st.shared.u32 	[%rd69+128], %r619;
	st.shared.u32 	[%rd69+640], %r627;
	st.shared.u32 	[%rd69+384], %r623;
	st.shared.u32 	[%rd69+896], %r631;
	bar.sync 	0;
	add.s32 	%r683, %r80, %r43;
	cvt.u16.u32 	%rs103, %r683;
	mul.hi.s16 	%rs104, %rs103, 10923;
	shr.u16 	%rs105, %rs104, 15;
	shr.s16 	%rs106, %rs104, 2;
	add.s16 	%rs107, %rs106, %rs105;
	mul.lo.s16 	%rs108, %rs107, 24;
	sub.s16 	%rs109, %rs103, %rs108;
	cvt.s32.s16 	%r684, %rs109;
	add.s32 	%r685, %r42, %r684;
	mul.wide.s32 	%rd70, %r685, 4;
	add.s64 	%rd71, %rd26, %rd70;
	ld.shared.u32 	%r686, [%rd71];
	add.s32 	%r687, %r44, %r684;
	mul.wide.u32 	%rd72, %r687, 4;
	add.s64 	%rd73, %rd26, %rd72;
	ld.shared.u32 	%r688, [%rd73];
	add.s32 	%r689, %r45, %r684;
	mul.wide.u32 	%rd74, %r689, 4;
	add.s64 	%rd75, %rd26, %rd74;
	ld.shared.u32 	%r690, [%rd75];
	add.s32 	%r691, %r46, %r684;
	mul.wide.u32 	%rd76, %r691, 4;
	add.s64 	%rd77, %rd26, %rd76;
	ld.shared.u32 	%r692, [%rd77];
	add.s32 	%r693, %r47, %r684;
	mul.wide.s32 	%rd78, %r693, 4;
	add.s64 	%rd79, %rd26, %rd78;
	ld.shared.u32 	%r694, [%rd79];
	add.s32 	%r695, %r48, %r684;
	mul.wide.u32 	%rd80, %r695, 4;
	add.s64 	%rd81, %rd26, %rd80;
	ld.shared.u32 	%r696, [%rd81];
	add.s32 	%r697, %r49, %r684;
	mul.wide.u32 	%rd82, %r697, 4;
	add.s64 	%rd83, %rd26, %rd82;
	ld.shared.u32 	%r698, [%rd83];
	add.s32 	%r699, %r50, %r684;
	mul.wide.u32 	%rd84, %r699, 4;
	add.s64 	%rd85, %rd26, %rd84;
	ld.shared.u32 	%r700, [%rd85];
	add.s32 	%r701, %r51, %r684;
	mul.wide.s32 	%rd86, %r701, 4;
	add.s64 	%rd87, %rd26, %rd86;
	ld.shared.u32 	%r702, [%rd87];
	add.s32 	%r703, %r52, %r684;
	mul.wide.u32 	%rd88, %r703, 4;
	add.s64 	%rd89, %rd26, %rd88;
	ld.shared.u32 	%r704, [%rd89];
	add.s32 	%r705, %r53, %r684;
	mul.wide.u32 	%rd90, %r705, 4;
	add.s64 	%rd91, %rd26, %rd90;
	ld.shared.u32 	%r706, [%rd91];
	add.s32 	%r707, %r54, %r684;
	mul.wide.u32 	%rd92, %r707, 4;
	add.s64 	%rd93, %rd26, %rd92;
	ld.shared.u32 	%r708, [%rd93];
	add.s32 	%r709, %r55, %r684;
	mul.wide.s32 	%rd94, %r709, 4;
	add.s64 	%rd95, %rd26, %rd94;
	ld.shared.u32 	%r710, [%rd95];
	add.s32 	%r711, %r56, %r684;
	mul.wide.u32 	%rd96, %r711, 4;
	add.s64 	%rd97, %rd26, %rd96;
	ld.shared.u32 	%r712, [%rd97];
	add.s32 	%r713, %r57, %r684;
	mul.wide.u32 	%rd98, %r713, 4;
	add.s64 	%rd99, %rd26, %rd98;
	ld.shared.u32 	%r714, [%rd99];
	add.s32 	%r715, %r58, %r684;
	mul.wide.u32 	%rd100, %r715, 4;
	add.s64 	%rd101, %rd26, %rd100;
	ld.shared.u32 	%r716, [%rd101];
	add.s32 	%r717, %r59, %r684;
	mul.wide.s32 	%rd102, %r717, 4;
	add.s64 	%rd103, %rd26, %rd102;
	ld.shared.u32 	%r718, [%rd103];
	add.s32 	%r719, %r60, %r684;
	mul.wide.u32 	%rd104, %r719, 4;
	add.s64 	%rd105, %rd26, %rd104;
	ld.shared.u32 	%r720, [%rd105];
	add.s32 	%r721, %r61, %r684;
	mul.wide.u32 	%rd106, %r721, 4;
	add.s64 	%rd107, %rd26, %rd106;
	ld.shared.u32 	%r722, [%rd107];
	add.s32 	%r723, %r62, %r684;
	mul.wide.u32 	%rd108, %r723, 4;
	add.s64 	%rd109, %rd26, %rd108;
	ld.shared.u32 	%r724, [%rd109];
	add.s32 	%r725, %r63, %r684;
	mul.wide.s32 	%rd110, %r725, 4;
	add.s64 	%rd111, %rd26, %rd110;
	ld.shared.u32 	%r726, [%rd111];
	add.s32 	%r727, %r64, %r684;
	mul.wide.s32 	%rd112, %r727, 4;
	add.s64 	%rd113, %rd26, %rd112;
	ld.shared.u32 	%r728, [%rd113];
	bar.sync 	0;
	shfl.sync.idx.b32	%r729, %r3323, 0, 31, -1;
	shfl.sync.idx.b32	%r730, %r3323, 1, 31, -1;
	shfl.sync.idx.b32	%r731, %r3323, 2, 31, -1;
	shfl.sync.idx.b32	%r732, %r3323, 3, 31, -1;
	shfl.sync.idx.b32	%r733, %r3323, 4, 31, -1;
	shfl.sync.idx.b32	%r734, %r3323, 5, 31, -1;
	shfl.sync.idx.b32	%r735, %r3323, 6, 31, -1;
	shfl.sync.idx.b32	%r736, %r3323, 7, 31, -1;
	shfl.sync.idx.b32	%r737, %r3323, 8, 31, -1;
	shfl.sync.idx.b32	%r738, %r3323, 9, 31, -1;
	shfl.sync.idx.b32	%r739, %r3323, 10, 31, -1;
	shfl.sync.idx.b32	%r740, %r3323, 11, 31, -1;
	shfl.sync.idx.b32	%r741, %r3323, 12, 31, -1;
	shfl.sync.idx.b32	%r742, %r3323, 13, 31, -1;
	shfl.sync.idx.b32	%r743, %r3323, 14, 31, -1;
	shfl.sync.idx.b32	%r744, %r3323, 15, 31, -1;
	shfl.sync.idx.b32	%r745, %r3323, 16, 31, -1;
	shfl.sync.idx.b32	%r746, %r3323, 17, 31, -1;
	shfl.sync.idx.b32	%r747, %r3323, 18, 31, -1;
	shfl.sync.idx.b32	%r748, %r3323, 19, 31, -1;
	shfl.sync.idx.b32	%r749, %r3323, 20, 31, -1;
	shfl.sync.idx.b32	%r750, %r3323, 21, 31, -1;
	shfl.sync.idx.b32	%r751, %r3323, 22, 31, -1;
	shfl.sync.idx.b32	%r752, %r3323, 23, 31, -1;
	add.s32 	%r753, %r729, %r684;
	mul.wide.s32 	%rd114, %r753, 4;
	add.s64 	%rd115, %rd26, %rd114;
	st.shared.u32 	[%rd115], %r686;
	add.s32 	%r754, %r730, %r684;
	mul.wide.s32 	%rd116, %r754, 4;
	add.s64 	%rd117, %rd26, %rd116;
	st.shared.u32 	[%rd117], %r688;
	add.s32 	%r755, %r731, %r684;
	mul.wide.s32 	%rd118, %r755, 4;
	add.s64 	%rd119, %rd26, %rd118;
	st.shared.u32 	[%rd119], %r690;
	add.s32 	%r756, %r732, %r684;
	mul.wide.s32 	%rd120, %r756, 4;
	add.s64 	%rd121, %rd26, %rd120;
	st.shared.u32 	[%rd121], %r692;
	add.s32 	%r757, %r733, %r684;
	mul.wide.s32 	%rd122, %r757, 4;
	add.s64 	%rd123, %rd26, %rd122;
	st.shared.u32 	[%rd123], %r694;
	add.s32 	%r758, %r734, %r684;
	mul.wide.s32 	%rd124, %r758, 4;
	add.s64 	%rd125, %rd26, %rd124;
	st.shared.u32 	[%rd125], %r696;
	add.s32 	%r759, %r735, %r684;
	mul.wide.s32 	%rd126, %r759, 4;
	add.s64 	%rd127, %rd26, %rd126;
	st.shared.u32 	[%rd127], %r698;
	add.s32 	%r760, %r736, %r684;
	mul.wide.s32 	%rd128, %r760, 4;
	add.s64 	%rd129, %rd26, %rd128;
	st.shared.u32 	[%rd129], %r700;
	add.s32 	%r761, %r737, %r684;
	mul.wide.s32 	%rd130, %r761, 4;
	add.s64 	%rd131, %rd26, %rd130;
	st.shared.u32 	[%rd131], %r702;
	add.s32 	%r762, %r738, %r684;
	mul.wide.s32 	%rd132, %r762, 4;
	add.s64 	%rd133, %rd26, %rd132;
	st.shared.u32 	[%rd133], %r704;
	add.s32 	%r763, %r739, %r684;
	mul.wide.s32 	%rd134, %r763, 4;
	add.s64 	%rd135, %rd26, %rd134;
	st.shared.u32 	[%rd135], %r706;
	add.s32 	%r764, %r740, %r684;
	mul.wide.s32 	%rd136, %r764, 4;
	add.s64 	%rd137, %rd26, %rd136;
	st.shared.u32 	[%rd137], %r708;
	add.s32 	%r765, %r741, %r684;
	mul.wide.s32 	%rd138, %r765, 4;
	add.s64 	%rd139, %rd26, %rd138;
	st.shared.u32 	[%rd139], %r710;
	add.s32 	%r766, %r742, %r684;
	mul.wide.s32 	%rd140, %r766, 4;
	add.s64 	%rd141, %rd26, %rd140;
	st.shared.u32 	[%rd141], %r712;
	add.s32 	%r767, %r743, %r684;
	mul.wide.s32 	%rd142, %r767, 4;
	add.s64 	%rd143, %rd26, %rd142;
	st.shared.u32 	[%rd143], %r714;
	add.s32 	%r768, %r744, %r684;
	mul.wide.s32 	%rd144, %r768, 4;
	add.s64 	%rd145, %rd26, %rd144;
	st.shared.u32 	[%rd145], %r716;
	add.s32 	%r769, %r745, %r684;
	mul.wide.s32 	%rd146, %r769, 4;
	add.s64 	%rd147, %rd26, %rd146;
	st.shared.u32 	[%rd147], %r718;
	add.s32 	%r770, %r746, %r684;
	mul.wide.s32 	%rd148, %r770, 4;
	add.s64 	%rd149, %rd26, %rd148;
	st.shared.u32 	[%rd149], %r720;
	add.s32 	%r771, %r747, %r684;
	mul.wide.s32 	%rd150, %r771, 4;
	add.s64 	%rd151, %rd26, %rd150;
	st.shared.u32 	[%rd151], %r722;
	add.s32 	%r772, %r748, %r684;
	mul.wide.s32 	%rd152, %r772, 4;
	add.s64 	%rd153, %rd26, %rd152;
	st.shared.u32 	[%rd153], %r724;
	add.s32 	%r773, %r749, %r684;
	mul.wide.s32 	%rd154, %r773, 4;
	add.s64 	%rd155, %rd26, %rd154;
	st.shared.u32 	[%rd155], %r726;
	selp.b32 	%r774, 0, %r728, %p47;
	add.s32 	%r775, %r750, %r684;
	mul.wide.s32 	%rd156, %r775, 4;
	add.s64 	%rd157, %rd26, %rd156;
	st.shared.u32 	[%rd157], %r774;
	add.s32 	%r776, %r751, %r684;
	mul.wide.s32 	%rd158, %r776, 4;
	add.s64 	%rd159, %rd26, %rd158;
	st.shared.u32 	[%rd159], %r3322;
	add.s32 	%r777, %r752, %r684;
	mul.wide.s32 	%rd160, %r777, 4;
	add.s64 	%rd161, %rd26, %rd160;
	st.shared.u32 	[%rd161], %r3322;
	bar.sync 	0;
	mov.u32 	%r3335, %r3322;
	mov.u32 	%r3336, %r3322;
	mov.u32 	%r3337, %r3322;
	mov.u32 	%r3338, %r3322;
	mov.u32 	%r3339, %r3322;
	mov.u32 	%r3340, %r3322;
	mov.u32 	%r3341, %r3322;
	mov.u32 	%r3342, %r3322;
	mov.u32 	%r3343, %r3322;
	mov.u32 	%r3344, %r3322;
	mov.u32 	%r3345, %r3322;
	mov.u32 	%r3346, %r3322;
	mov.u32 	%r3347, %r3322;
	mov.u32 	%r3348, %r3322;
	mov.u32 	%r3349, %r3322;
	mov.u32 	%r3350, %r3322;
	mov.u32 	%r3351, %r3322;
	mov.u32 	%r3352, %r3322;
	mov.u32 	%r3353, %r3322;
	mov.u32 	%r3354, %r3322;
	mov.u32 	%r3355, %r3322;
	mov.u32 	%r3356, %r3322;
	mov.u32 	%r3357, %r3322;
	mov.u32 	%r3358, %r3322;
	@%p46 bra 	LBB0_41;
	bra.uni 	LBB0_17;
LBB0_41:                                // %oksrem3282
                                        //   in Loop: Header=BB0_16 Depth=1
	cvt.u16.u32 	%rs110, %r80;
	mul.hi.s16 	%rs111, %rs110, 10923;
	shr.u16 	%rs112, %rs111, 15;
	shr.s16 	%rs113, %rs111, 2;
	add.s16 	%rs114, %rs113, %rs112;
	mul.lo.s16 	%rs115, %rs114, 24;
	sub.s16 	%rs116, %rs110, %rs115;
	cvt.s32.s16 	%r778, %rs116;
	mul.wide.s32 	%rd162, %r778, 4;
	add.s64 	%rd163, %rd10, %rd162;
	ld.shared.u32 	%r3335, [%rd163];
	ld.shared.u32 	%r3336, [%rd10+4];
	ld.shared.u32 	%r3337, [%rd10+8];
	ld.shared.u32 	%r3338, [%rd10+12];
	ld.shared.u32 	%r3339, [%rd10+16];
	ld.shared.u32 	%r3340, [%rd10+20];
	ld.shared.u32 	%r3341, [%rd10+24];
	ld.shared.u32 	%r3342, [%rd10+28];
	ld.shared.u32 	%r3343, [%rd10+32];
	ld.shared.u32 	%r3344, [%rd10+36];
	ld.shared.u32 	%r3345, [%rd10+40];
	ld.shared.u32 	%r3346, [%rd10+44];
	ld.shared.u32 	%r3347, [%rd10+48];
	ld.shared.u32 	%r3348, [%rd10+52];
	ld.shared.u32 	%r3349, [%rd10+56];
	ld.shared.u32 	%r3350, [%rd10+60];
	add.s16 	%rs117, %rs110, 16;
	mul.hi.s16 	%rs118, %rs117, 10923;
	shr.u16 	%rs119, %rs118, 15;
	shr.s16 	%rs120, %rs118, 2;
	add.s16 	%rs121, %rs120, %rs119;
	mul.lo.s16 	%rs122, %rs121, 24;
	sub.s16 	%rs123, %rs117, %rs122;
	cvt.s32.s16 	%r779, %rs123;
	mul.wide.s32 	%rd164, %r779, 4;
	add.s64 	%rd165, %rd10, %rd164;
	ld.shared.u32 	%r3351, [%rd165];
	add.s16 	%rs124, %rs110, 17;
	mul.hi.s16 	%rs125, %rs124, 10923;
	shr.u16 	%rs126, %rs125, 15;
	shr.s16 	%rs127, %rs125, 2;
	add.s16 	%rs128, %rs127, %rs126;
	mul.lo.s16 	%rs129, %rs128, 24;
	sub.s16 	%rs130, %rs124, %rs129;
	cvt.s32.s16 	%r780, %rs130;
	mul.wide.s32 	%rd166, %r780, 4;
	add.s64 	%rd167, %rd10, %rd166;
	ld.shared.u32 	%r3352, [%rd167];
	add.s16 	%rs131, %rs110, 18;
	mul.hi.s16 	%rs132, %rs131, 10923;
	shr.u16 	%rs133, %rs132, 15;
	shr.s16 	%rs134, %rs132, 2;
	add.s16 	%rs135, %rs134, %rs133;
	mul.lo.s16 	%rs136, %rs135, 24;
	sub.s16 	%rs137, %rs131, %rs136;
	cvt.s32.s16 	%r781, %rs137;
	mul.wide.s32 	%rd168, %r781, 4;
	add.s64 	%rd169, %rd10, %rd168;
	ld.shared.u32 	%r3353, [%rd169];
	add.s16 	%rs138, %rs110, 19;
	mul.hi.s16 	%rs139, %rs138, 10923;
	shr.u16 	%rs140, %rs139, 15;
	shr.s16 	%rs141, %rs139, 2;
	add.s16 	%rs142, %rs141, %rs140;
	mul.lo.s16 	%rs143, %rs142, 24;
	sub.s16 	%rs144, %rs138, %rs143;
	cvt.s32.s16 	%r782, %rs144;
	mul.wide.s32 	%rd170, %r782, 4;
	add.s64 	%rd171, %rd10, %rd170;
	ld.shared.u32 	%r3354, [%rd171];
	add.s16 	%rs145, %rs110, 20;
	mul.hi.s16 	%rs146, %rs145, 10923;
	shr.u16 	%rs147, %rs146, 15;
	shr.s16 	%rs148, %rs146, 2;
	add.s16 	%rs149, %rs148, %rs147;
	mul.lo.s16 	%rs150, %rs149, 24;
	sub.s16 	%rs151, %rs145, %rs150;
	cvt.s32.s16 	%r783, %rs151;
	mul.wide.s32 	%rd172, %r783, 4;
	add.s64 	%rd173, %rd10, %rd172;
	ld.shared.u32 	%r3355, [%rd173];
	add.s16 	%rs152, %rs110, 21;
	mul.hi.s16 	%rs153, %rs152, 10923;
	shr.u16 	%rs154, %rs153, 15;
	shr.s16 	%rs155, %rs153, 2;
	add.s16 	%rs156, %rs155, %rs154;
	mul.lo.s16 	%rs157, %rs156, 24;
	sub.s16 	%rs158, %rs152, %rs157;
	cvt.s32.s16 	%r784, %rs158;
	mul.wide.s32 	%rd174, %r784, 4;
	add.s64 	%rd175, %rd10, %rd174;
	ld.shared.u32 	%r3356, [%rd175];
	add.s16 	%rs159, %rs110, 22;
	mul.hi.s16 	%rs160, %rs159, 10923;
	shr.u16 	%rs161, %rs160, 15;
	shr.s16 	%rs162, %rs160, 2;
	add.s16 	%rs163, %rs162, %rs161;
	mul.lo.s16 	%rs164, %rs163, 24;
	sub.s16 	%rs165, %rs159, %rs164;
	cvt.s32.s16 	%r785, %rs165;
	mul.wide.s32 	%rd176, %r785, 4;
	add.s64 	%rd177, %rd10, %rd176;
	ld.shared.u32 	%r3357, [%rd177];
	add.s16 	%rs166, %rs110, 23;
	mul.hi.s16 	%rs167, %rs166, 10923;
	shr.u16 	%rs168, %rs167, 15;
	shr.s16 	%rs169, %rs167, 2;
	add.s16 	%rs170, %rs169, %rs168;
	mul.lo.s16 	%rs171, %rs170, 24;
	sub.s16 	%rs172, %rs166, %rs171;
	cvt.s32.s16 	%r786, %rs172;
	mul.wide.s32 	%rd178, %r786, 4;
	add.s64 	%rd179, %rd10, %rd178;
	ld.shared.u32 	%r3358, [%rd179];
LBB0_17:                                // %L11390
                                        //   in Loop: Header=BB0_16 Depth=1
	bar.sync 	0;
	add.s32 	%r105, %r80, 1;
	add.s32 	%r106, %r80, 2;
	add.s32 	%r107, %r80, 3;
	mov.u32 	%r3359, 12;
	mov.u32 	%r3360, %r3322;
	bra.uni 	LBB0_18;
LBB0_25:                                // %L21391
                                        //   in Loop: Header=BB0_18 Depth=2
	add.s32 	%r3362, %r3362, 1;
	mov.u32 	%r3361, 0;
	mov.u32 	%r3363, %r3361;
	mov.u32 	%r3364, %r3361;
LBB0_26:                                // %L21392
                                        //   in Loop: Header=BB0_18 Depth=2
	bar.sync 	0;
	add.s32 	%r3360, %r3360, 1;
	add.s32 	%r3359, %r3359, -4;
	setp.ne.s32 	%p62, %r3359, -12;
	@%p62 bra 	LBB0_18;
	bra.uni 	LBB0_27;
LBB0_18:                                // %L11416
                                        //   Parent Loop BB0_16 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p51, %r3359, 12;
	selp.b32 	%r1326, %r3335, 0, %p51;
	setp.eq.s32 	%p52, %r3359, 8;
	selp.b32 	%r1327, %r3339, %r1326, %p52;
	setp.eq.s32 	%p53, %r3359, 4;
	selp.b32 	%r1328, %r3343, %r1327, %p53;
	setp.eq.s32 	%p54, %r3359, 0;
	selp.b32 	%r1329, %r3347, %r1328, %p54;
	setp.eq.s32 	%p55, %r3359, -4;
	selp.b32 	%r1330, %r3351, %r1329, %p55;
	setp.eq.s32 	%p56, %r3359, -8;
	selp.b32 	%r1331, %r3355, %r1330, %p56;
	selp.b32 	%r1332, %r3336, 0, %p51;
	selp.b32 	%r1333, %r3340, %r1332, %p52;
	selp.b32 	%r1334, %r3344, %r1333, %p53;
	selp.b32 	%r1335, %r3348, %r1334, %p54;
	selp.b32 	%r1336, %r3352, %r1335, %p55;
	selp.b32 	%r1337, %r3356, %r1336, %p56;
	selp.b32 	%r1338, %r3337, 0, %p51;
	selp.b32 	%r1339, %r3341, %r1338, %p52;
	selp.b32 	%r1340, %r3345, %r1339, %p53;
	selp.b32 	%r1341, %r3349, %r1340, %p54;
	selp.b32 	%r1342, %r3353, %r1341, %p55;
	selp.b32 	%r1343, %r3357, %r1342, %p56;
	selp.b32 	%r1344, %r3338, 0, %p51;
	selp.b32 	%r1345, %r3342, %r1344, %p52;
	selp.b32 	%r1346, %r3346, %r1345, %p53;
	selp.b32 	%r1347, %r3350, %r1346, %p54;
	selp.b32 	%r1348, %r3354, %r1347, %p55;
	selp.b32 	%r1349, %r3358, %r1348, %p56;
	mov.u16 	%rs210, 25600;
	// begin inline asm
	mov.b32 %r794, {%rs210, %rs210};
	// end inline asm
	mov.u16 	%rs212, 21504;
	// begin inline asm
	mov.b32 %r805, {%rs212, %rs212};
	// end inline asm
	xor.b32  	%r793, %r1331, -2004318072;
	mov.u32 	%r930, 983055;
	// begin inline asm
	lop3.b32 %r791, %r930, %r793, %r794, 202;
	// end inline asm
	mov.u16 	%rs216, 18432;
	// begin inline asm
	mov.b32 %r795, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r796, %r794, %r795;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r799, %r791, %r796;
	// end inline asm
	mov.u32 	%r941, 15728880;
	// begin inline asm
	lop3.b32 %r802, %r941, %r793, %r805, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r806, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r807, %r805, %r806;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r810, %r802, %r807;
	// end inline asm
	// begin inline asm
	mov.b32 %r840, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	mov.b32 %r851, {%rs212, %rs212};
	// end inline asm
	xor.b32  	%r839, %r1337, -2004318072;
	// begin inline asm
	lop3.b32 %r837, %r930, %r839, %r840, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r841, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r842, %r840, %r841;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r845, %r837, %r842;
	// end inline asm
	// begin inline asm
	lop3.b32 %r848, %r941, %r839, %r851, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r852, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r853, %r851, %r852;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r856, %r848, %r853;
	// end inline asm
	// begin inline asm
	mov.b32 %r886, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	mov.b32 %r897, {%rs212, %rs212};
	// end inline asm
	xor.b32  	%r885, %r1343, -2004318072;
	// begin inline asm
	lop3.b32 %r883, %r930, %r885, %r886, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r887, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r888, %r886, %r887;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r891, %r883, %r888;
	// end inline asm
	// begin inline asm
	lop3.b32 %r894, %r941, %r885, %r897, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r898, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r899, %r897, %r898;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r902, %r894, %r899;
	// end inline asm
	// begin inline asm
	mov.b32 %r932, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	mov.b32 %r943, {%rs212, %rs212};
	// end inline asm
	xor.b32  	%r931, %r1349, -2004318072;
	// begin inline asm
	lop3.b32 %r929, %r930, %r931, %r932, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r933, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r934, %r932, %r933;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r937, %r929, %r934;
	// end inline asm
	// begin inline asm
	lop3.b32 %r940, %r941, %r931, %r943, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r944, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r945, %r943, %r944;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r948, %r940, %r945;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3328;
    mov.b32 {%r2re, %r2im}, %r799;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r973, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3329;
    mov.b32 {%r2re, %r2im}, %r810;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r976, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3328;
    mov.b32 {%r2re, %r2im}, %r845;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r979, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3329;
    mov.b32 {%r2re, %r2im}, %r856;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r982, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3328;
    mov.b32 {%r2re, %r2im}, %r891;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r985, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3329;
    mov.b32 {%r2re, %r2im}, %r902;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r988, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3328;
    mov.b32 {%r2re, %r2im}, %r937;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r991, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3329;
    mov.b32 {%r2re, %r2im}, %r948;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r994, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1060, %r1057}, {%r251, %r254}, {%r973}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1069, %r1066}, {%r251, %r254}, {%r976}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1078, %r1075}, {%r251, %r254}, {%r979}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1087, %r1084}, {%r251, %r254}, {%r982}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1096, %r1093}, {%r251, %r254}, {%r985}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1105, %r1102}, {%r251, %r254}, {%r988}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1114, %r1111}, {%r251, %r254}, {%r991}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1123, %r1120}, {%r251, %r254}, {%r994}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1053, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1055, %r1053, %r1057;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1058, %r288, %r1060, %r1055;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1062, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1064, %r1062, %r1066;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1067, %r288, %r1069, %r1064;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1071, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1073, %r1071, %r1075;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1076, %r288, %r1078, %r1073;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1080, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1082, %r1080, %r1084;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1085, %r288, %r1087, %r1082;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1089, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1091, %r1089, %r1093;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1094, %r288, %r1096, %r1091;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1098, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1100, %r1098, %r1102;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1103, %r288, %r1105, %r1100;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1107, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1109, %r1107, %r1111;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1112, %r288, %r1114, %r1109;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1116, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1118, %r1116, %r1120;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1121, %r288, %r1123, %r1118;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1125, %r291, %r1060;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1128, %r288, %r1057, %r1125;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1132, %r291, %r1069;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1135, %r288, %r1066, %r1132;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1139, %r291, %r1078;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1142, %r288, %r1075, %r1139;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1146, %r291, %r1087;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1149, %r288, %r1084, %r1146;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1153, %r291, %r1096;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1156, %r288, %r1093, %r1153;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1160, %r291, %r1105;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1163, %r288, %r1102, %r1160;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1167, %r291, %r1114;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1170, %r288, %r1111, %r1167;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1174, %r291, %r1123;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1177, %r288, %r1120, %r1174;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1262, %r1263}, {%r312, %r318, %r315, %r321}, {%r1058, %r1128}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1270, %r1271}, {%r312, %r318, %r315, %r321}, {%r1067, %r1135}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1278, %r1279}, {%r312, %r318, %r315, %r321}, {%r1076, %r1142}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1286, %r1287}, {%r312, %r318, %r315, %r321}, {%r1085, %r1149}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1294, %r1295}, {%r312, %r318, %r315, %r321}, {%r1094, %r1156}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1302, %r1303}, {%r312, %r318, %r315, %r321}, {%r1103, %r1163}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1310, %r1311}, {%r312, %r318, %r315, %r321}, {%r1112, %r1170}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1318, %r1319}, {%r312, %r318, %r315, %r321}, {%r1121, %r1177}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	prmt.b32 %r1261, %r1262, %r1263, %r630;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1265, %r1262, %r1263, %r634;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1269, %r1270, %r1271, %r630;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1273, %r1270, %r1271, %r634;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1277, %r1278, %r1279, %r630;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1281, %r1278, %r1279, %r634;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1285, %r1286, %r1287, %r630;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1289, %r1286, %r1287, %r634;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1293, %r1294, %r1295, %r630;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1297, %r1294, %r1295, %r634;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1301, %r1302, %r1303, %r630;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1305, %r1302, %r1303, %r634;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1309, %r1310, %r1311, %r630;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1313, %r1310, %r1311, %r634;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1317, %r1318, %r1319, %r630;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1321, %r1318, %r1319, %r634;
	// end inline asm
	st.shared.u32 	[%rd6], %r1261;
	st.shared.u32 	[%rd7+33024], %r1265;
	st.shared.u32 	[%rd7+128], %r1269;
	st.shared.u32 	[%rd7+33152], %r1273;
	cvt.u16.u32 	%rs221, %r3360;
	and.b16  	%rs222, %rs221, 255;
	mul.lo.s16 	%rs223, %rs222, 171;
	shr.u16 	%rs224, %rs223, 10;
	mul.lo.s16 	%rs225, %rs224, 6;
	sub.s16 	%rs226, %rs221, %rs225;
	shl.b16 	%rs227, %rs226, 2;
	cvt.u32.u16 	%r1350, %rs227;
	and.b32  	%r1351, %r1350, 252;
	add.s32 	%r1352, %r105, %r1351;
	shr.s32 	%r1353, %r1352, 31;
	shr.u32 	%r1354, %r1353, 30;
	add.s32 	%r1355, %r1352, %r1354;
	and.b32  	%r1356, %r1355, 67108860;
	sub.s32 	%r1357, %r1352, %r1356;
	shl.b32 	%r114, %r1357, 6;
	add.s32 	%r1358, %r65, %r114;
	mul.wide.s32 	%rd180, %r1358, 4;
	add.s64 	%rd182, %rd26, %rd180;
	st.shared.u32 	[%rd182], %r1277;
	add.s32 	%r1359, %r66, %r114;
	mul.wide.u32 	%rd183, %r1359, 4;
	add.s64 	%rd184, %rd26, %rd183;
	st.shared.u32 	[%rd184], %r1281;
	add.s32 	%r1360, %r67, %r114;
	mul.wide.s32 	%rd185, %r1360, 4;
	add.s64 	%rd186, %rd26, %rd185;
	st.shared.u32 	[%rd186], %r1285;
	add.s32 	%r1361, %r68, %r114;
	mul.wide.u32 	%rd187, %r1361, 4;
	add.s64 	%rd188, %rd26, %rd187;
	st.shared.u32 	[%rd188], %r1289;
	add.s32 	%r1362, %r106, %r1351;
	shr.s32 	%r1363, %r1362, 31;
	shr.u32 	%r1364, %r1363, 30;
	add.s32 	%r1365, %r1362, %r1364;
	and.b32  	%r1366, %r1365, 67108860;
	sub.s32 	%r1367, %r1362, %r1366;
	shl.b32 	%r115, %r1367, 6;
	add.s32 	%r1368, %r65, %r115;
	mul.wide.s32 	%rd189, %r1368, 4;
	add.s64 	%rd190, %rd26, %rd189;
	st.shared.u32 	[%rd190], %r1293;
	add.s32 	%r1369, %r66, %r115;
	mul.wide.u32 	%rd191, %r1369, 4;
	add.s64 	%rd192, %rd26, %rd191;
	st.shared.u32 	[%rd192], %r1297;
	add.s32 	%r1370, %r67, %r115;
	mul.wide.s32 	%rd193, %r1370, 4;
	add.s64 	%rd194, %rd26, %rd193;
	st.shared.u32 	[%rd194], %r1301;
	add.s32 	%r1371, %r68, %r115;
	mul.wide.u32 	%rd195, %r1371, 4;
	add.s64 	%rd196, %rd26, %rd195;
	st.shared.u32 	[%rd196], %r1305;
	add.s32 	%r1372, %r107, %r1351;
	shr.s32 	%r1373, %r1372, 31;
	shr.u32 	%r1374, %r1373, 30;
	add.s32 	%r1375, %r1372, %r1374;
	and.b32  	%r1376, %r1375, 67108860;
	sub.s32 	%r1377, %r1372, %r1376;
	shl.b32 	%r116, %r1377, 6;
	add.s32 	%r1378, %r65, %r116;
	mul.wide.s32 	%rd197, %r1378, 4;
	add.s64 	%rd198, %rd26, %rd197;
	st.shared.u32 	[%rd198], %r1309;
	add.s32 	%r1379, %r66, %r116;
	mul.wide.u32 	%rd199, %r1379, 4;
	add.s64 	%rd200, %rd26, %rd199;
	st.shared.u32 	[%rd200], %r1313;
	add.s32 	%r1380, %r67, %r116;
	mul.wide.s32 	%rd201, %r1380, 4;
	add.s64 	%rd202, %rd26, %rd201;
	st.shared.u32 	[%rd202], %r1317;
	add.s32 	%r1381, %r68, %r116;
	mul.wide.u32 	%rd203, %r1381, 4;
	add.s64 	%rd204, %rd26, %rd203;
	st.shared.u32 	[%rd204], %r1321;
	bar.sync 	0;
	mov.u32 	%r3365, %r3322;
	mov.u32 	%r3366, %r3322;
	mov.u32 	%r3367, %r3322;
	mov.u32 	%r3368, %r3322;
	@%p50 bra 	LBB0_42;
	bra.uni 	LBB0_19;
LBB0_42:                                // %oksrem7016
                                        //   in Loop: Header=BB0_18 Depth=2
	ld.shared.u32 	%r3365, [%rd8];
	ld.shared.u32 	%r3366, [%rd9+33024];
	ld.shared.u32 	%r3367, [%rd9+128];
	ld.shared.u32 	%r3368, [%rd9+33152];
LBB0_19:                                // %L17285
                                        //   in Loop: Header=BB0_18 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1417, %r1414}, {%r251, %r254}, {%r3365}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1426, %r1423}, {%r251, %r254}, {%r3366}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1435, %r1432}, {%r251, %r254}, {%r3367}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1444, %r1441}, {%r251, %r254}, {%r3368}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1410, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1412, %r1410, %r1414;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1415, %r288, %r1417, %r1412;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1419, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1421, %r1419, %r1423;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1424, %r288, %r1426, %r1421;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1428, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1430, %r1428, %r1432;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1433, %r288, %r1435, %r1430;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1437, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1439, %r1437, %r1441;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1442, %r288, %r1444, %r1439;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1446, %r291, %r1417;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1449, %r288, %r1414, %r1446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1453, %r291, %r1426;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1456, %r288, %r1423, %r1453;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1460, %r291, %r1435;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1463, %r288, %r1432, %r1460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1467, %r291, %r1444;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1470, %r288, %r1441, %r1467;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1515, %r1519}, {%r312, %r318, %r315, %r321}, {%r1415, %r1449}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1531, %r1535}, {%r312, %r318, %r315, %r321}, {%r1424, %r1456}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1523, %r1527}, {%r312, %r318, %r315, %r321}, {%r1433, %r1463}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1539, %r1543}, {%r312, %r318, %r315, %r321}, {%r1442, %r1470}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1514, %r1515, %r1515, %r3364;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1518, %r1519, %r1519, %r1514;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1522, %r1523, %r1523, %r1518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1526, %r1527, %r1527, %r1522;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1530, %r1531, %r1531, %r3363;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1534, %r1535, %r1535, %r1530;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1538, %r1539, %r1539, %r1534;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1542, %r1543, %r1543, %r1538;
	// end inline asm
	mov.u32 	%r3369, %r3322;
	mov.u32 	%r3370, %r3322;
	mov.u32 	%r3371, %r3322;
	mov.u32 	%r3372, %r3322;
	@%p50 bra 	LBB0_43;
	bra.uni 	LBB0_20;
LBB0_43:                                // %oksrem7551
                                        //   in Loop: Header=BB0_18 Depth=2
	add.s32 	%r1547, %r69, %r114;
	mul.wide.s32 	%rd205, %r1547, 4;
	add.s64 	%rd207, %rd26, %rd205;
	ld.shared.u32 	%r3369, [%rd207];
	add.s32 	%r1548, %r70, %r114;
	mul.wide.u32 	%rd208, %r1548, 4;
	add.s64 	%rd209, %rd26, %rd208;
	ld.shared.u32 	%r3370, [%rd209];
	add.s32 	%r1549, %r71, %r114;
	mul.wide.s32 	%rd210, %r1549, 4;
	add.s64 	%rd211, %rd26, %rd210;
	ld.shared.u32 	%r3371, [%rd211];
	add.s32 	%r1550, %r72, %r114;
	mul.wide.u32 	%rd212, %r1550, 4;
	add.s64 	%rd213, %rd26, %rd212;
	ld.shared.u32 	%r3372, [%rd213];
LBB0_20:                                // %L18508
                                        //   in Loop: Header=BB0_18 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1586, %r1583}, {%r251, %r254}, {%r3369}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1595, %r1592}, {%r251, %r254}, {%r3370}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1604, %r1601}, {%r251, %r254}, {%r3371}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1613, %r1610}, {%r251, %r254}, {%r3372}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1579, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1581, %r1579, %r1583;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1584, %r288, %r1586, %r1581;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1588, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1590, %r1588, %r1592;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1593, %r288, %r1595, %r1590;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1597, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1599, %r1597, %r1601;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1602, %r288, %r1604, %r1599;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1606, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1608, %r1606, %r1610;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1611, %r288, %r1613, %r1608;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1615, %r291, %r1586;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1618, %r288, %r1583, %r1615;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1622, %r291, %r1595;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1625, %r288, %r1592, %r1622;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1629, %r291, %r1604;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1632, %r288, %r1601, %r1629;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1636, %r291, %r1613;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1639, %r288, %r1610, %r1636;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1684, %r1688}, {%r312, %r318, %r315, %r321}, {%r1584, %r1618}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1700, %r1704}, {%r312, %r318, %r315, %r321}, {%r1593, %r1625}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1692, %r1696}, {%r312, %r318, %r315, %r321}, {%r1602, %r1632}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1708, %r1712}, {%r312, %r318, %r315, %r321}, {%r1611, %r1639}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1683, %r1684, %r1684, %r1526;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1687, %r1688, %r1688, %r1683;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1691, %r1692, %r1692, %r1687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1695, %r1696, %r1696, %r1691;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1699, %r1700, %r1700, %r1542;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1703, %r1704, %r1704, %r1699;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1707, %r1708, %r1708, %r1703;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1711, %r1712, %r1712, %r1707;
	// end inline asm
	mov.u32 	%r3373, %r3322;
	mov.u32 	%r3374, %r3322;
	mov.u32 	%r3375, %r3322;
	mov.u32 	%r3376, %r3322;
	@%p50 bra 	LBB0_44;
	bra.uni 	LBB0_21;
LBB0_44:                                // %oksrem8086
                                        //   in Loop: Header=BB0_18 Depth=2
	add.s32 	%r1716, %r69, %r115;
	mul.wide.s32 	%rd214, %r1716, 4;
	add.s64 	%rd216, %rd26, %rd214;
	ld.shared.u32 	%r3373, [%rd216];
	add.s32 	%r1717, %r70, %r115;
	mul.wide.u32 	%rd217, %r1717, 4;
	add.s64 	%rd218, %rd26, %rd217;
	ld.shared.u32 	%r3374, [%rd218];
	add.s32 	%r1718, %r71, %r115;
	mul.wide.s32 	%rd219, %r1718, 4;
	add.s64 	%rd220, %rd26, %rd219;
	ld.shared.u32 	%r3375, [%rd220];
	add.s32 	%r1719, %r72, %r115;
	mul.wide.u32 	%rd221, %r1719, 4;
	add.s64 	%rd222, %rd26, %rd221;
	ld.shared.u32 	%r3376, [%rd222];
LBB0_21:                                // %L19731
                                        //   in Loop: Header=BB0_18 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1755, %r1752}, {%r251, %r254}, {%r3373}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1764, %r1761}, {%r251, %r254}, {%r3374}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1773, %r1770}, {%r251, %r254}, {%r3375}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1782, %r1779}, {%r251, %r254}, {%r3376}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1748, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1750, %r1748, %r1752;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1753, %r288, %r1755, %r1750;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1757, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1759, %r1757, %r1761;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1762, %r288, %r1764, %r1759;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1766, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1768, %r1766, %r1770;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1771, %r288, %r1773, %r1768;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1775, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1777, %r1775, %r1779;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1780, %r288, %r1782, %r1777;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1784, %r291, %r1755;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1787, %r288, %r1752, %r1784;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1791, %r291, %r1764;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1794, %r288, %r1761, %r1791;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1798, %r291, %r1773;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1801, %r288, %r1770, %r1798;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1805, %r291, %r1782;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1808, %r288, %r1779, %r1805;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1853, %r1857}, {%r312, %r318, %r315, %r321}, {%r1753, %r1787}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1869, %r1873}, {%r312, %r318, %r315, %r321}, {%r1762, %r1794}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1861, %r1865}, {%r312, %r318, %r315, %r321}, {%r1771, %r1801}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1877, %r1881}, {%r312, %r318, %r315, %r321}, {%r1780, %r1808}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1852, %r1853, %r1853, %r1695;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1856, %r1857, %r1857, %r1852;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1860, %r1861, %r1861, %r1856;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1864, %r1865, %r1865, %r1860;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1868, %r1869, %r1869, %r1711;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1872, %r1873, %r1873, %r1868;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1876, %r1877, %r1877, %r1872;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1880, %r1881, %r1881, %r1876;
	// end inline asm
	mov.u32 	%r3377, %r3322;
	mov.u32 	%r3378, %r3322;
	mov.u32 	%r3379, %r3322;
	mov.u32 	%r3380, %r3322;
	@%p50 bra 	LBB0_45;
	bra.uni 	LBB0_22;
LBB0_45:                                // %oksrem8621
                                        //   in Loop: Header=BB0_18 Depth=2
	add.s32 	%r1885, %r69, %r116;
	mul.wide.s32 	%rd223, %r1885, 4;
	add.s64 	%rd225, %rd26, %rd223;
	ld.shared.u32 	%r3377, [%rd225];
	add.s32 	%r1886, %r70, %r116;
	mul.wide.u32 	%rd226, %r1886, 4;
	add.s64 	%rd227, %rd26, %rd226;
	ld.shared.u32 	%r3378, [%rd227];
	add.s32 	%r1887, %r71, %r116;
	mul.wide.s32 	%rd228, %r1887, 4;
	add.s64 	%rd229, %rd26, %rd228;
	ld.shared.u32 	%r3379, [%rd229];
	add.s32 	%r1888, %r72, %r116;
	mul.wide.u32 	%rd230, %r1888, 4;
	add.s64 	%rd231, %rd26, %rd230;
	ld.shared.u32 	%r3380, [%rd231];
LBB0_22:                                // %L20954
                                        //   in Loop: Header=BB0_18 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1924, %r1921}, {%r251, %r254}, {%r3377}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1933, %r1930}, {%r251, %r254}, {%r3378}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1942, %r1939}, {%r251, %r254}, {%r3379}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1951, %r1948}, {%r251, %r254}, {%r3380}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1917, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1919, %r1917, %r1921;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1922, %r288, %r1924, %r1919;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1926, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1928, %r1926, %r1930;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1931, %r288, %r1933, %r1928;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1935, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1937, %r1935, %r1939;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1940, %r288, %r1942, %r1937;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1944, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1946, %r1944, %r1948;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1949, %r288, %r1951, %r1946;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1953, %r291, %r1924;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1956, %r288, %r1921, %r1953;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1960, %r291, %r1933;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1963, %r288, %r1930, %r1960;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1967, %r291, %r1942;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1970, %r288, %r1939, %r1967;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1974, %r291, %r1951;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1977, %r288, %r1948, %r1974;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2022, %r2026}, {%r312, %r318, %r315, %r321}, {%r1922, %r1956}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2038, %r2042}, {%r312, %r318, %r315, %r321}, {%r1931, %r1963}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2030, %r2034}, {%r312, %r318, %r315, %r321}, {%r1940, %r1970}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2046, %r2050}, {%r312, %r318, %r315, %r321}, {%r1949, %r1977}, {%r3322, %r3322};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2021, %r2022, %r2022, %r1864;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2025, %r2026, %r2026, %r2021;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2029, %r2030, %r2030, %r2025;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3364, %r2034, %r2034, %r2029;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2037, %r2038, %r2038, %r1880;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2041, %r2042, %r2042, %r2037;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2045, %r2046, %r2046, %r2041;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3363, %r2050, %r2050, %r2045;
	// end inline asm
	add.s32 	%r3361, %r3361, 4;
	setp.ne.s32 	%p60, %r3361, 40;
	@%p60 bra 	LBB0_26;
// %bb.23:                              // %L21100
                                        //   in Loop: Header=BB0_18 Depth=2
	@%p26 bra 	LBB0_25;
// %bb.24:                              // %L21159
                                        //   in Loop: Header=BB0_18 Depth=2
	mul.lo.s32 	%r2053, %r3362, 1152;
	add.s32 	%r2054, %r73, %r2053;
	mul.wide.u32 	%rd232, %r2054, 4;
	add.s64 	%rd233, %rd4, %rd232;
	st.global.u32 	[%rd233], %r3364;
	add.s32 	%r2055, %r74, %r2053;
	mul.wide.u32 	%rd234, %r2055, 4;
	add.s64 	%rd235, %rd4, %rd234;
	st.global.u32 	[%rd235], %r3363;
	bra.uni 	LBB0_25;
LBB0_27:                                // %L21421.preheader
                                        //   in Loop: Header=BB0_16 Depth=1
	add.s32 	%r149, %r80, 25;
	add.s32 	%r150, %r80, 26;
	add.s32 	%r151, %r80, 27;
	mov.u32 	%r2058, 0;
	mov.u32 	%r3385, 12;
	mov.u32 	%r3386, %r2058;
	bra.uni 	LBB0_28;
LBB0_35:                                // %L31396
                                        //   in Loop: Header=BB0_28 Depth=2
	add.s32 	%r3362, %r3362, 1;
	mov.u32 	%r3363, 0;
	mov.u32 	%r3364, %r3363;
	mov.u32 	%r3361, %r3363;
LBB0_36:                                // %L31397
                                        //   in Loop: Header=BB0_28 Depth=2
	bar.sync 	0;
	add.s32 	%r3386, %r3386, 1;
	add.s32 	%r3385, %r3385, -4;
	setp.eq.s32 	%p75, %r3385, -12;
	@%p75 bra 	LBB0_37;
LBB0_28:                                // %L21421
                                        //   Parent Loop BB0_16 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p64, %r3385, 12;
	selp.b32 	%r2596, %r3335, 0, %p64;
	setp.eq.s32 	%p65, %r3385, 8;
	selp.b32 	%r2597, %r3339, %r2596, %p65;
	setp.eq.s32 	%p66, %r3385, 4;
	selp.b32 	%r2598, %r3343, %r2597, %p66;
	setp.eq.s32 	%p67, %r3385, 0;
	selp.b32 	%r2599, %r3347, %r2598, %p67;
	setp.eq.s32 	%p68, %r3385, -4;
	selp.b32 	%r2600, %r3351, %r2599, %p68;
	setp.eq.s32 	%p69, %r3385, -8;
	selp.b32 	%r2601, %r3355, %r2600, %p69;
	selp.b32 	%r2602, %r3336, 0, %p64;
	selp.b32 	%r2603, %r3340, %r2602, %p65;
	selp.b32 	%r2604, %r3344, %r2603, %p66;
	selp.b32 	%r2605, %r3348, %r2604, %p67;
	selp.b32 	%r2606, %r3352, %r2605, %p68;
	selp.b32 	%r2607, %r3356, %r2606, %p69;
	selp.b32 	%r2608, %r3337, 0, %p64;
	selp.b32 	%r2609, %r3341, %r2608, %p65;
	selp.b32 	%r2610, %r3345, %r2609, %p66;
	selp.b32 	%r2611, %r3349, %r2610, %p67;
	selp.b32 	%r2612, %r3353, %r2611, %p68;
	selp.b32 	%r2613, %r3357, %r2612, %p69;
	selp.b32 	%r2614, %r3338, 0, %p64;
	selp.b32 	%r2615, %r3342, %r2614, %p65;
	selp.b32 	%r2616, %r3346, %r2615, %p66;
	selp.b32 	%r2617, %r3350, %r2616, %p67;
	selp.b32 	%r2618, %r3354, %r2617, %p68;
	selp.b32 	%r2619, %r3358, %r2618, %p69;
	// begin inline asm
	mov.b32 %r2086, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	mov.b32 %r2097, {%rs212, %rs212};
	// end inline asm
	shr.u32 	%r2620, %r2601, 8;
	xor.b32  	%r2096, %r2620, 8947848;
	// begin inline asm
	lop3.b32 %r2083, %r930, %r2096, %r2086, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2087, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2088, %r2086, %r2087;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2091, %r2083, %r2088;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2094, %r941, %r2096, %r2097, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2098, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2099, %r2097, %r2098;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2102, %r2094, %r2099;
	// end inline asm
	// begin inline asm
	mov.b32 %r2132, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	mov.b32 %r2143, {%rs212, %rs212};
	// end inline asm
	shr.u32 	%r2621, %r2607, 8;
	xor.b32  	%r2142, %r2621, 8947848;
	// begin inline asm
	lop3.b32 %r2129, %r930, %r2142, %r2132, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2133, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2134, %r2132, %r2133;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2137, %r2129, %r2134;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2140, %r941, %r2142, %r2143, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2144, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2145, %r2143, %r2144;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2148, %r2140, %r2145;
	// end inline asm
	// begin inline asm
	mov.b32 %r2178, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	mov.b32 %r2189, {%rs212, %rs212};
	// end inline asm
	shr.u32 	%r2622, %r2613, 8;
	xor.b32  	%r2188, %r2622, 8947848;
	// begin inline asm
	lop3.b32 %r2175, %r930, %r2188, %r2178, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2179, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2180, %r2178, %r2179;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2183, %r2175, %r2180;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2186, %r941, %r2188, %r2189, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2190, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2191, %r2189, %r2190;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2194, %r2186, %r2191;
	// end inline asm
	// begin inline asm
	mov.b32 %r2224, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	mov.b32 %r2235, {%rs212, %rs212};
	// end inline asm
	shr.u32 	%r2623, %r2619, 8;
	xor.b32  	%r2234, %r2623, 8947848;
	// begin inline asm
	lop3.b32 %r2221, %r930, %r2234, %r2224, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2225, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2226, %r2224, %r2225;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2229, %r2221, %r2226;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2232, %r941, %r2234, %r2235, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2236, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2237, %r2235, %r2236;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2240, %r2232, %r2237;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3328;
    mov.b32 {%r2re, %r2im}, %r2091;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2243, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3329;
    mov.b32 {%r2re, %r2im}, %r2102;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2246, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3328;
    mov.b32 {%r2re, %r2im}, %r2137;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2249, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3329;
    mov.b32 {%r2re, %r2im}, %r2148;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2252, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3328;
    mov.b32 {%r2re, %r2im}, %r2183;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2255, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3329;
    mov.b32 {%r2re, %r2im}, %r2194;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2258, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3328;
    mov.b32 {%r2re, %r2im}, %r2229;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2261, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3329;
    mov.b32 {%r2re, %r2im}, %r2240;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2264, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2330, %r2327}, {%r251, %r254}, {%r2243}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2339, %r2336}, {%r251, %r254}, {%r2246}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2348, %r2345}, {%r251, %r254}, {%r2249}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2357, %r2354}, {%r251, %r254}, {%r2252}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2366, %r2363}, {%r251, %r254}, {%r2255}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2375, %r2372}, {%r251, %r254}, {%r2258}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2384, %r2381}, {%r251, %r254}, {%r2261}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2393, %r2390}, {%r251, %r254}, {%r2264}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2323, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2325, %r2323, %r2327;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2328, %r288, %r2330, %r2325;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2332, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2334, %r2332, %r2336;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2337, %r288, %r2339, %r2334;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2341, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2343, %r2341, %r2345;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2346, %r288, %r2348, %r2343;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2350, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2352, %r2350, %r2354;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2355, %r288, %r2357, %r2352;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2359, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2361, %r2359, %r2363;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2364, %r288, %r2366, %r2361;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2368, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2370, %r2368, %r2372;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2373, %r288, %r2375, %r2370;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2377, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2379, %r2377, %r2381;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2382, %r288, %r2384, %r2379;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2386, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2388, %r2386, %r2390;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2391, %r288, %r2393, %r2388;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2395, %r291, %r2330;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2398, %r288, %r2327, %r2395;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2402, %r291, %r2339;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2405, %r288, %r2336, %r2402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2409, %r291, %r2348;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2412, %r288, %r2345, %r2409;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2416, %r291, %r2357;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2419, %r288, %r2354, %r2416;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2423, %r291, %r2366;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2426, %r288, %r2363, %r2423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2430, %r291, %r2375;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2433, %r288, %r2372, %r2430;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2437, %r291, %r2384;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2440, %r288, %r2381, %r2437;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2444, %r291, %r2393;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2447, %r288, %r2390, %r2444;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2532, %r2533}, {%r312, %r318, %r315, %r321}, {%r2328, %r2398}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2540, %r2541}, {%r312, %r318, %r315, %r321}, {%r2337, %r2405}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2548, %r2549}, {%r312, %r318, %r315, %r321}, {%r2346, %r2412}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2556, %r2557}, {%r312, %r318, %r315, %r321}, {%r2355, %r2419}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2564, %r2565}, {%r312, %r318, %r315, %r321}, {%r2364, %r2426}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2572, %r2573}, {%r312, %r318, %r315, %r321}, {%r2373, %r2433}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2580, %r2581}, {%r312, %r318, %r315, %r321}, {%r2382, %r2440}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2588, %r2589}, {%r312, %r318, %r315, %r321}, {%r2391, %r2447}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	prmt.b32 %r2531, %r2532, %r2533, %r630;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2535, %r2532, %r2533, %r634;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2539, %r2540, %r2541, %r630;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2543, %r2540, %r2541, %r634;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2547, %r2548, %r2549, %r630;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2551, %r2548, %r2549, %r634;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2555, %r2556, %r2557, %r630;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2559, %r2556, %r2557, %r634;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2563, %r2564, %r2565, %r630;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2567, %r2564, %r2565, %r634;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2571, %r2572, %r2573, %r630;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2575, %r2572, %r2573, %r634;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2579, %r2580, %r2581, %r630;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2583, %r2580, %r2581, %r634;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2587, %r2588, %r2589, %r630;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2591, %r2588, %r2589, %r634;
	// end inline asm
	st.shared.u32 	[%rd6], %r2531;
	st.shared.u32 	[%rd7+33024], %r2535;
	st.shared.u32 	[%rd7+128], %r2539;
	st.shared.u32 	[%rd7+33152], %r2543;
	cvt.u16.u32 	%rs276, %r3386;
	and.b16  	%rs277, %rs276, 255;
	mul.lo.s16 	%rs278, %rs277, 171;
	shr.u16 	%rs279, %rs278, 10;
	mul.lo.s16 	%rs280, %rs279, 6;
	sub.s16 	%rs281, %rs276, %rs280;
	shl.b16 	%rs282, %rs281, 2;
	cvt.u32.u16 	%r2624, %rs282;
	and.b32  	%r2625, %r2624, 252;
	add.s32 	%r2626, %r149, %r2625;
	cvt.u16.u32 	%rs283, %r2626;
	shr.s16 	%rs284, %rs283, 15;
	shr.u16 	%rs285, %rs284, 14;
	add.s16 	%rs286, %rs283, %rs285;
	and.b16  	%rs287, %rs286, -4;
	sub.s16 	%rs288, %rs283, %rs287;
	mul.wide.s16 	%r158, %rs288, 64;
	add.s32 	%r2627, %r65, %r158;
	mul.wide.s32 	%rd236, %r2627, 4;
	add.s64 	%rd238, %rd26, %rd236;
	st.shared.u32 	[%rd238], %r2547;
	add.s32 	%r2628, %r66, %r158;
	mul.wide.u32 	%rd239, %r2628, 4;
	add.s64 	%rd240, %rd26, %rd239;
	st.shared.u32 	[%rd240], %r2551;
	add.s32 	%r2629, %r67, %r158;
	mul.wide.s32 	%rd241, %r2629, 4;
	add.s64 	%rd242, %rd26, %rd241;
	st.shared.u32 	[%rd242], %r2555;
	add.s32 	%r2630, %r68, %r158;
	mul.wide.u32 	%rd243, %r2630, 4;
	add.s64 	%rd244, %rd26, %rd243;
	st.shared.u32 	[%rd244], %r2559;
	add.s32 	%r2631, %r150, %r2625;
	cvt.u16.u32 	%rs289, %r2631;
	shr.s16 	%rs290, %rs289, 15;
	shr.u16 	%rs291, %rs290, 14;
	add.s16 	%rs292, %rs289, %rs291;
	and.b16  	%rs293, %rs292, -4;
	sub.s16 	%rs294, %rs289, %rs293;
	mul.wide.s16 	%r159, %rs294, 64;
	add.s32 	%r2632, %r65, %r159;
	mul.wide.s32 	%rd245, %r2632, 4;
	add.s64 	%rd246, %rd26, %rd245;
	st.shared.u32 	[%rd246], %r2563;
	add.s32 	%r2633, %r66, %r159;
	mul.wide.u32 	%rd247, %r2633, 4;
	add.s64 	%rd248, %rd26, %rd247;
	st.shared.u32 	[%rd248], %r2567;
	add.s32 	%r2634, %r67, %r159;
	mul.wide.s32 	%rd249, %r2634, 4;
	add.s64 	%rd250, %rd26, %rd249;
	st.shared.u32 	[%rd250], %r2571;
	add.s32 	%r2635, %r68, %r159;
	mul.wide.u32 	%rd251, %r2635, 4;
	add.s64 	%rd252, %rd26, %rd251;
	st.shared.u32 	[%rd252], %r2575;
	add.s32 	%r2636, %r151, %r2625;
	cvt.u16.u32 	%rs295, %r2636;
	shr.s16 	%rs296, %rs295, 15;
	shr.u16 	%rs297, %rs296, 14;
	add.s16 	%rs298, %rs295, %rs297;
	and.b16  	%rs299, %rs298, -4;
	sub.s16 	%rs300, %rs295, %rs299;
	mul.wide.s16 	%r160, %rs300, 64;
	add.s32 	%r2637, %r65, %r160;
	mul.wide.s32 	%rd253, %r2637, 4;
	add.s64 	%rd254, %rd26, %rd253;
	st.shared.u32 	[%rd254], %r2579;
	add.s32 	%r2638, %r66, %r160;
	mul.wide.u32 	%rd255, %r2638, 4;
	add.s64 	%rd256, %rd26, %rd255;
	st.shared.u32 	[%rd256], %r2583;
	add.s32 	%r2639, %r67, %r160;
	mul.wide.s32 	%rd257, %r2639, 4;
	add.s64 	%rd258, %rd26, %rd257;
	st.shared.u32 	[%rd258], %r2587;
	add.s32 	%r2640, %r68, %r160;
	mul.wide.u32 	%rd259, %r2640, 4;
	add.s64 	%rd260, %rd26, %rd259;
	st.shared.u32 	[%rd260], %r2591;
	bar.sync 	0;
	mov.u32 	%r3391, %r2058;
	mov.u32 	%r3392, %r2058;
	mov.u32 	%r3393, %r2058;
	mov.u32 	%r3394, %r2058;
	@%p50 bra 	LBB0_46;
	bra.uni 	LBB0_29;
LBB0_46:                                // %oksrem11414
                                        //   in Loop: Header=BB0_28 Depth=2
	ld.shared.u32 	%r3394, [%rd8];
	ld.shared.u32 	%r3393, [%rd9+33024];
	ld.shared.u32 	%r3392, [%rd9+128];
	ld.shared.u32 	%r3391, [%rd9+33152];
LBB0_29:                                // %L27290
                                        //   in Loop: Header=BB0_28 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2676, %r2673}, {%r251, %r254}, {%r3394}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2685, %r2682}, {%r251, %r254}, {%r3393}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2694, %r2691}, {%r251, %r254}, {%r3392}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2703, %r2700}, {%r251, %r254}, {%r3391}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2669, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2671, %r2669, %r2673;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2674, %r288, %r2676, %r2671;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2678, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2680, %r2678, %r2682;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2683, %r288, %r2685, %r2680;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2687, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2689, %r2687, %r2691;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2692, %r288, %r2694, %r2689;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2696, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2698, %r2696, %r2700;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2701, %r288, %r2703, %r2698;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2705, %r291, %r2676;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2708, %r288, %r2673, %r2705;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2712, %r291, %r2685;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2715, %r288, %r2682, %r2712;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2719, %r291, %r2694;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2722, %r288, %r2691, %r2719;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2726, %r291, %r2703;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2729, %r288, %r2700, %r2726;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2774, %r2778}, {%r312, %r318, %r315, %r321}, {%r2674, %r2708}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2790, %r2794}, {%r312, %r318, %r315, %r321}, {%r2683, %r2715}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2782, %r2786}, {%r312, %r318, %r315, %r321}, {%r2692, %r2722}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2798, %r2802}, {%r312, %r318, %r315, %r321}, {%r2701, %r2729}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2773, %r2774, %r2774, %r3364;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2777, %r2778, %r2778, %r2773;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2781, %r2782, %r2782, %r2777;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2785, %r2786, %r2786, %r2781;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2789, %r2790, %r2790, %r3363;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2793, %r2794, %r2794, %r2789;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2797, %r2798, %r2798, %r2793;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2801, %r2802, %r2802, %r2797;
	// end inline asm
	mov.u32 	%r3395, %r2058;
	mov.u32 	%r3396, %r2058;
	mov.u32 	%r3397, %r2058;
	mov.u32 	%r3398, %r2058;
	@%p50 bra 	LBB0_47;
	bra.uni 	LBB0_30;
LBB0_47:                                // %oksrem11949
                                        //   in Loop: Header=BB0_28 Depth=2
	add.s32 	%r2806, %r69, %r158;
	mul.wide.s32 	%rd261, %r2806, 4;
	add.s64 	%rd263, %rd26, %rd261;
	ld.shared.u32 	%r3398, [%rd263];
	add.s32 	%r2807, %r70, %r158;
	mul.wide.u32 	%rd264, %r2807, 4;
	add.s64 	%rd265, %rd26, %rd264;
	ld.shared.u32 	%r3397, [%rd265];
	add.s32 	%r2808, %r71, %r158;
	mul.wide.s32 	%rd266, %r2808, 4;
	add.s64 	%rd267, %rd26, %rd266;
	ld.shared.u32 	%r3396, [%rd267];
	add.s32 	%r2809, %r72, %r158;
	mul.wide.u32 	%rd268, %r2809, 4;
	add.s64 	%rd269, %rd26, %rd268;
	ld.shared.u32 	%r3395, [%rd269];
LBB0_30:                                // %L28513
                                        //   in Loop: Header=BB0_28 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2845, %r2842}, {%r251, %r254}, {%r3398}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2854, %r2851}, {%r251, %r254}, {%r3397}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2863, %r2860}, {%r251, %r254}, {%r3396}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2872, %r2869}, {%r251, %r254}, {%r3395}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2838, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2840, %r2838, %r2842;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2843, %r288, %r2845, %r2840;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2847, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2849, %r2847, %r2851;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2852, %r288, %r2854, %r2849;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2856, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2858, %r2856, %r2860;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2861, %r288, %r2863, %r2858;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2865, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2867, %r2865, %r2869;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2870, %r288, %r2872, %r2867;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2874, %r291, %r2845;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2877, %r288, %r2842, %r2874;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2881, %r291, %r2854;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2884, %r288, %r2851, %r2881;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2888, %r291, %r2863;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2891, %r288, %r2860, %r2888;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2895, %r291, %r2872;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2898, %r288, %r2869, %r2895;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2943, %r2947}, {%r312, %r318, %r315, %r321}, {%r2843, %r2877}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2959, %r2963}, {%r312, %r318, %r315, %r321}, {%r2852, %r2884}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2951, %r2955}, {%r312, %r318, %r315, %r321}, {%r2861, %r2891}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2967, %r2971}, {%r312, %r318, %r315, %r321}, {%r2870, %r2898}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2942, %r2943, %r2943, %r2785;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2946, %r2947, %r2947, %r2942;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2950, %r2951, %r2951, %r2946;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2954, %r2955, %r2955, %r2950;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2958, %r2959, %r2959, %r2801;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2962, %r2963, %r2963, %r2958;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2966, %r2967, %r2967, %r2962;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2970, %r2971, %r2971, %r2966;
	// end inline asm
	mov.u32 	%r3399, %r2058;
	mov.u32 	%r3400, %r2058;
	mov.u32 	%r3401, %r2058;
	mov.u32 	%r3402, %r2058;
	@%p50 bra 	LBB0_48;
	bra.uni 	LBB0_31;
LBB0_48:                                // %oksrem12484
                                        //   in Loop: Header=BB0_28 Depth=2
	add.s32 	%r2975, %r69, %r159;
	mul.wide.s32 	%rd270, %r2975, 4;
	add.s64 	%rd272, %rd26, %rd270;
	ld.shared.u32 	%r3402, [%rd272];
	add.s32 	%r2976, %r70, %r159;
	mul.wide.u32 	%rd273, %r2976, 4;
	add.s64 	%rd274, %rd26, %rd273;
	ld.shared.u32 	%r3401, [%rd274];
	add.s32 	%r2977, %r71, %r159;
	mul.wide.s32 	%rd275, %r2977, 4;
	add.s64 	%rd276, %rd26, %rd275;
	ld.shared.u32 	%r3400, [%rd276];
	add.s32 	%r2978, %r72, %r159;
	mul.wide.u32 	%rd277, %r2978, 4;
	add.s64 	%rd278, %rd26, %rd277;
	ld.shared.u32 	%r3399, [%rd278];
LBB0_31:                                // %L29736
                                        //   in Loop: Header=BB0_28 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3014, %r3011}, {%r251, %r254}, {%r3402}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3023, %r3020}, {%r251, %r254}, {%r3401}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3032, %r3029}, {%r251, %r254}, {%r3400}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3041, %r3038}, {%r251, %r254}, {%r3399}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3007, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3009, %r3007, %r3011;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3012, %r288, %r3014, %r3009;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3016, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3018, %r3016, %r3020;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3021, %r288, %r3023, %r3018;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3025, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3027, %r3025, %r3029;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3030, %r288, %r3032, %r3027;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3034, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3036, %r3034, %r3038;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3039, %r288, %r3041, %r3036;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3043, %r291, %r3014;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3046, %r288, %r3011, %r3043;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3050, %r291, %r3023;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3053, %r288, %r3020, %r3050;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3057, %r291, %r3032;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3060, %r288, %r3029, %r3057;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3064, %r291, %r3041;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3067, %r288, %r3038, %r3064;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3112, %r3116}, {%r312, %r318, %r315, %r321}, {%r3012, %r3046}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3128, %r3132}, {%r312, %r318, %r315, %r321}, {%r3021, %r3053}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3120, %r3124}, {%r312, %r318, %r315, %r321}, {%r3030, %r3060}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3136, %r3140}, {%r312, %r318, %r315, %r321}, {%r3039, %r3067}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3111, %r3112, %r3112, %r2954;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3115, %r3116, %r3116, %r3111;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3119, %r3120, %r3120, %r3115;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3123, %r3124, %r3124, %r3119;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3127, %r3128, %r3128, %r2970;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3131, %r3132, %r3132, %r3127;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3135, %r3136, %r3136, %r3131;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3139, %r3140, %r3140, %r3135;
	// end inline asm
	mov.u32 	%r3403, %r2058;
	mov.u32 	%r3404, %r2058;
	mov.u32 	%r3405, %r2058;
	mov.u32 	%r3406, %r2058;
	@%p50 bra 	LBB0_49;
	bra.uni 	LBB0_32;
LBB0_49:                                // %oksrem13019
                                        //   in Loop: Header=BB0_28 Depth=2
	add.s32 	%r3144, %r69, %r160;
	mul.wide.s32 	%rd279, %r3144, 4;
	add.s64 	%rd281, %rd26, %rd279;
	ld.shared.u32 	%r3406, [%rd281];
	add.s32 	%r3145, %r70, %r160;
	mul.wide.u32 	%rd282, %r3145, 4;
	add.s64 	%rd283, %rd26, %rd282;
	ld.shared.u32 	%r3405, [%rd283];
	add.s32 	%r3146, %r71, %r160;
	mul.wide.s32 	%rd284, %r3146, 4;
	add.s64 	%rd285, %rd26, %rd284;
	ld.shared.u32 	%r3404, [%rd285];
	add.s32 	%r3147, %r72, %r160;
	mul.wide.u32 	%rd286, %r3147, 4;
	add.s64 	%rd287, %rd26, %rd286;
	ld.shared.u32 	%r3403, [%rd287];
LBB0_32:                                // %L30959
                                        //   in Loop: Header=BB0_28 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3183, %r3180}, {%r251, %r254}, {%r3406}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3192, %r3189}, {%r251, %r254}, {%r3405}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3201, %r3198}, {%r251, %r254}, {%r3404}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3210, %r3207}, {%r251, %r254}, {%r3403}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3176, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3178, %r3176, %r3180;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3181, %r288, %r3183, %r3178;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3185, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3187, %r3185, %r3189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3190, %r288, %r3192, %r3187;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3194, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3196, %r3194, %r3198;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3199, %r288, %r3201, %r3196;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3203, %r291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3205, %r3203, %r3207;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3208, %r288, %r3210, %r3205;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3212, %r291, %r3183;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3215, %r288, %r3180, %r3212;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3219, %r291, %r3192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3222, %r288, %r3189, %r3219;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3226, %r291, %r3201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3229, %r288, %r3198, %r3226;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3233, %r291, %r3210;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3236, %r288, %r3207, %r3233;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3281, %r3285}, {%r312, %r318, %r315, %r321}, {%r3181, %r3215}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3297, %r3301}, {%r312, %r318, %r315, %r321}, {%r3190, %r3222}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3289, %r3293}, {%r312, %r318, %r315, %r321}, {%r3199, %r3229}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3305, %r3309}, {%r312, %r318, %r315, %r321}, {%r3208, %r3236}, {%r2058, %r2058};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3280, %r3281, %r3281, %r3123;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3284, %r3285, %r3285, %r3280;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3288, %r3289, %r3289, %r3284;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3364, %r3293, %r3293, %r3288;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3296, %r3297, %r3297, %r3139;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3300, %r3301, %r3301, %r3296;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3304, %r3305, %r3305, %r3300;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3363, %r3309, %r3309, %r3304;
	// end inline asm
	add.s32 	%r3361, %r3361, 4;
	setp.ne.s32 	%p73, %r3361, 40;
	@%p73 bra 	LBB0_36;
// %bb.33:                              // %L31105
                                        //   in Loop: Header=BB0_28 Depth=2
	@%p26 bra 	LBB0_35;
// %bb.34:                              // %L31164
                                        //   in Loop: Header=BB0_28 Depth=2
	mul.lo.s32 	%r3312, %r3362, 1152;
	add.s32 	%r3313, %r73, %r3312;
	mul.wide.u32 	%rd288, %r3313, 4;
	add.s64 	%rd289, %rd4, %rd288;
	st.global.u32 	[%rd289], %r3364;
	add.s32 	%r3314, %r74, %r3312;
	mul.wide.u32 	%rd290, %r3314, 4;
	add.s64 	%rd291, %rd4, %rd290;
	st.global.u32 	[%rd291], %r3363;
	bra.uni 	LBB0_35;
LBB0_38:                                // %guard_pass14638
	@%p26 bra 	LBB0_40;
// %bb.39:                              // %L31498
	mul.lo.s32 	%r3316, %r3362, 1152;
	add.s32 	%r3317, %r73, %r3316;
	mul.wide.u32 	%rd292, %r3317, 4;
	add.s64 	%rd293, %rd4, %rd292;
	st.global.u32 	[%rd293], %r3364;
	add.s32 	%r3318, %r74, %r3316;
	mul.wide.u32 	%rd294, %r3318, 4;
	add.s64 	%rd295, %rd4, %rd294;
	st.global.u32 	[%rd295], %r3363;
LBB0_40:                                // %L31730
	mov.u32 	%r3319, 0;
	st.global.u32 	[%rd5], %r3319;
	ret;
LBB0_1:                                 // %L8
	ld.param.u64 	%rd11, [_Z15julia_frb_1037513CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0];
	mov.u64 	%rd16, exception1;
	cvta.global.u64 	%rd17, %rd16;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd17;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd11;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
