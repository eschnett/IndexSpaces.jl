CHORD FRB beamformer
Compiling kernel...
// PTX CompilerJob of kernel #frb(CuDeviceVector{Int16x2, 1}, CuDeviceVector{Float16x2, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Float16x2, 1}, CuDeviceVector{Int32, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Float16x2, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 7.1
.target sm_86
.address_size 64

	// .globl	_Z15julia_frb_1046713CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EES_IS2_Li1ELi1EES_IS2_Li1ELi1EES_IS1_Li1ELi1EE // -- Begin function _Z15julia_frb_1046713CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EES_IS2_Li1ELi1EES_IS2_Li1ELi1EES_IS1_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[8]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z15julia_frb_1046713CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EES_IS2_Li1ELi1EES_IS2_Li1ELi1EES_IS1_Li1ELi1EE
.visible .entry _Z15julia_frb_1046713CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EES_IS2_Li1ELi1EES_IS2_Li1ELi1EES_IS1_Li1ELi1EE(
	.param .align 8 .b8 _Z15julia_frb_1046713CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EES_IS2_Li1ELi1EES_IS2_Li1ELi1EES_IS1_Li1ELi1EE_param_0[8],
	.param .align 8 .b8 _Z15julia_frb_1046713CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EES_IS2_Li1ELi1EES_IS2_Li1ELi1EES_IS1_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z15julia_frb_1046713CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EES_IS2_Li1ELi1EES_IS2_Li1ELi1EES_IS1_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z15julia_frb_1046713CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EES_IS2_Li1ELi1EES_IS2_Li1ELi1EES_IS1_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z15julia_frb_1046713CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EES_IS2_Li1ELi1EES_IS2_Li1ELi1EES_IS1_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z15julia_frb_1046713CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EES_IS2_Li1ELi1EES_IS2_Li1ELi1EES_IS1_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z15julia_frb_1046713CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EES_IS2_Li1ELi1EES_IS2_Li1ELi1EES_IS1_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z15julia_frb_1046713CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EES_IS2_Li1ELi1EES_IS2_Li1ELi1EES_IS1_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z15julia_frb_1046713CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EES_IS2_Li1ELi1EES_IS2_Li1ELi1EES_IS1_Li1ELi1EE_param_8[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<78>;
	.reg .b16 	%rs<278>;
	.reg .b32 	%r<3417>;
	.reg .f32 	%f<202>;
	.reg .b64 	%rd<296>;

// %bb.0:                               // %conversion
	// begin inline asm
	mov.u32 %r243, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r243, 76895;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L10
	ld.param.u64 	%rd12, [_Z15julia_frb_1046713CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EES_IS2_Li1ELi1EES_IS2_Li1ELi1EES_IS1_Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r250, %r2, 768;
	or.b32  	%r251, %r250, %r1;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	add.s32 	%r252, %r251, %r4;
	mul.wide.u32 	%rd18, %r252, 4;
	add.s64 	%rd5, %rd12, %rd18;
	mov.u32 	%r253, 1;
	st.global.u32 	[%rd5], %r253;
	and.b32  	%r5, %r1, 3;
	shr.u32 	%r6, %r1, 2;
	mul.lo.s32 	%r254, %r5, %r6;
	and.b32  	%r255, %r254, 7;
	cvt.rn.f32.u32 	%f18, %r255;
	mov.f32 	%f19, 0f40800000;
	div.approx.f32 	%f20, %f18, %f19;
	add.f32 	%f21, %f20, %f20;
	mov.b32 	%r256, %f21;
	and.b32  	%r257, %r256, -2147483648;
	or.b32  	%r258, %r257, 1056964608;
	mov.b32 	%f22, %r258;
	add.f32 	%f23, %f21, %f22;
	cvt.rzi.f32.f32 	%f24, %f23;
	abs.f32 	%f25, %f21;
	setp.gt.f32 	%p2, %f25, 0f4B000000;
	selp.f32 	%f26, %f21, %f24, %p2;
	cvt.rzi.f32.f32 	%f27, %f21;
	setp.lt.f32 	%p3, %f25, 0f3F000000;
	selp.f32 	%f28, %f27, %f26, %p3;
	cvt.rzi.s32.f32 	%r259, %f28;
	fma.rn.f32 	%f29, %f28, 0fBF000000, %f20;
	mul.f32 	%f30, %f29, 0f34222169;
	fma.rn.f32 	%f31, %f29, 0f40490FDA, %f30;
	mul.f32 	%f32, %f31, %f31;
	fma.rn.f32 	%f33, %f32, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f34, %f33, %f32, 0f3D2AAABB;
	fma.rn.f32 	%f35, %f34, %f32, 0fBEFFFFFF;
	fma.rn.f32 	%f36, %f35, %f32, 0f3F800000;
	fma.rn.f32 	%f37, %f32, %f31, 0f00000000;
	fma.rn.f32 	%f38, %f32, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f39, %f38, %f32, 0fBE2AAAA8;
	fma.rn.f32 	%f40, %f39, %f37, %f31;
	and.b32  	%r260, %r259, 1;
	setp.eq.b32 	%p4, %r260, 1;
	selp.f32 	%f41, %f36, %f40, %p4;
	selp.f32 	%f42, %f40, %f36, %p4;
	and.b32  	%r261, %r259, 2;
	setp.eq.s32 	%p5, %r261, 0;
	neg.f32 	%f43, %f41;
	selp.f32 	%f44, %f41, %f43, %p5;
	add.s32 	%r262, %r259, 1;
	and.b32  	%r263, %r262, 2;
	mov.f32 	%f200, 0f00000000;
	cvt.rzi.f32.f32 	%f47, %f20;
	setp.eq.f32 	%p7, %f47, %f20;
	mul.f32 	%f48, %f20, 0f00000000;
	shl.b32 	%r9, %r1, 1;
	and.b32  	%r10, %r9, 6;
	or.b32  	%r11, %r10, 1;
	setp.eq.s32 	%p9, %r10, 6;
	mov.f32 	%f192, 0f41C00000;
	mul.lo.s32 	%r3327, %r10, %r6;
	mov.f32 	%f194, %f200;
	mov.f32 	%f195, %f200;
	@%p9 bra 	LBB0_4;
// %bb.3:                               // %L205
	cvt.u16.u32 	%rs2, %r3327;
	and.b16  	%rs3, %rs2, 255;
	mul.lo.s16 	%rs4, %rs3, 171;
	shr.u16 	%rs5, %rs4, 13;
	mul.lo.s16 	%rs6, %rs5, 48;
	sub.s16 	%rs7, %rs2, %rs6;
	and.b16  	%rs8, %rs7, 255;
	cvt.rn.f32.u16 	%f53, %rs8;
	div.approx.f32 	%f55, %f53, %f192;
	add.f32 	%f56, %f55, %f55;
	mov.b32 	%r265, %f56;
	and.b32  	%r266, %r265, -2147483648;
	or.b32  	%r267, %r266, 1056964608;
	mov.b32 	%f57, %r267;
	add.f32 	%f58, %f56, %f57;
	cvt.rzi.f32.f32 	%f59, %f58;
	abs.f32 	%f60, %f56;
	setp.gt.f32 	%p10, %f60, 0f4B000000;
	selp.f32 	%f61, %f56, %f59, %p10;
	cvt.rzi.f32.f32 	%f62, %f56;
	setp.lt.f32 	%p11, %f60, 0f3F000000;
	selp.f32 	%f63, %f62, %f61, %p11;
	cvt.rzi.s32.f32 	%r268, %f63;
	fma.rn.f32 	%f64, %f63, 0fBF000000, %f55;
	mul.f32 	%f65, %f64, 0f34222169;
	fma.rn.f32 	%f66, %f64, 0f40490FDA, %f65;
	mul.f32 	%f67, %f66, %f66;
	fma.rn.f32 	%f68, %f67, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f69, %f68, %f67, 0f3D2AAABB;
	fma.rn.f32 	%f70, %f69, %f67, 0fBEFFFFFF;
	fma.rn.f32 	%f71, %f70, %f67, 0f3F800000;
	fma.rn.f32 	%f72, %f67, %f66, 0f00000000;
	fma.rn.f32 	%f73, %f67, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f74, %f73, %f67, 0fBE2AAAA8;
	fma.rn.f32 	%f75, %f74, %f72, %f66;
	and.b32  	%r269, %r268, 1;
	setp.eq.b32 	%p12, %r269, 1;
	selp.f32 	%f76, %f71, %f75, %p12;
	selp.f32 	%f77, %f75, %f71, %p12;
	and.b32  	%r270, %r268, 2;
	setp.eq.s32 	%p13, %r270, 0;
	neg.f32 	%f78, %f76;
	selp.f32 	%f79, %f76, %f78, %p13;
	add.s32 	%r271, %r268, 1;
	and.b32  	%r272, %r271, 2;
	setp.eq.s32 	%p14, %r272, 0;
	mov.f32 	%f80, 0f00000000;
	sub.f32 	%f81, %f80, %f77;
	selp.f32 	%f82, %f77, %f81, %p14;
	cvt.rzi.f32.f32 	%f83, %f55;
	setp.eq.f32 	%p15, %f83, %f55;
	mul.f32 	%f84, %f55, 0f00000000;
	selp.f32 	%f195, %f84, %f79, %p15;
	abs.f32 	%f85, %f55;
	setp.gt.f32 	%p16, %f85, 0f4B800000;
	add.f32 	%f86, %f195, 0f3F800000;
	selp.f32 	%f194, %f86, %f82, %p16;
LBB0_4:                                 // %L220
	setp.eq.s32 	%p6, %r263, 0;
	sub.f32 	%f45, %f200, %f42;
	selp.f32 	%f49, %f48, %f44, %p7;
	abs.f32 	%f50, %f20;
	setp.gt.u32 	%p17, %r11, 5;
	mul.lo.s32 	%r3328, %r11, %r6;
	mov.f32 	%f196, %f200;
	mov.f32 	%f197, %f200;
	@%p17 bra 	LBB0_6;
// %bb.5:                               // %L224
	cvt.u16.u32 	%rs9, %r3328;
	and.b16  	%rs10, %rs9, 255;
	mul.lo.s16 	%rs11, %rs10, 171;
	shr.u16 	%rs12, %rs11, 13;
	mul.lo.s16 	%rs13, %rs12, 48;
	sub.s16 	%rs14, %rs9, %rs13;
	and.b16  	%rs15, %rs14, 255;
	cvt.rn.f32.u16 	%f88, %rs15;
	div.approx.f32 	%f90, %f88, %f192;
	add.f32 	%f91, %f90, %f90;
	mov.b32 	%r274, %f91;
	and.b32  	%r275, %r274, -2147483648;
	or.b32  	%r276, %r275, 1056964608;
	mov.b32 	%f92, %r276;
	add.f32 	%f93, %f91, %f92;
	cvt.rzi.f32.f32 	%f94, %f93;
	abs.f32 	%f95, %f91;
	setp.gt.f32 	%p18, %f95, 0f4B000000;
	selp.f32 	%f96, %f91, %f94, %p18;
	cvt.rzi.f32.f32 	%f97, %f91;
	setp.lt.f32 	%p19, %f95, 0f3F000000;
	selp.f32 	%f98, %f97, %f96, %p19;
	cvt.rzi.s32.f32 	%r277, %f98;
	fma.rn.f32 	%f99, %f98, 0fBF000000, %f90;
	mul.f32 	%f100, %f99, 0f34222169;
	fma.rn.f32 	%f101, %f99, 0f40490FDA, %f100;
	mul.f32 	%f102, %f101, %f101;
	fma.rn.f32 	%f103, %f102, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f104, %f103, %f102, 0f3D2AAABB;
	fma.rn.f32 	%f105, %f104, %f102, 0fBEFFFFFF;
	fma.rn.f32 	%f106, %f105, %f102, 0f3F800000;
	fma.rn.f32 	%f107, %f102, %f101, 0f00000000;
	fma.rn.f32 	%f108, %f102, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f109, %f108, %f102, 0fBE2AAAA8;
	fma.rn.f32 	%f110, %f109, %f107, %f101;
	and.b32  	%r278, %r277, 1;
	setp.eq.b32 	%p20, %r278, 1;
	selp.f32 	%f111, %f106, %f110, %p20;
	selp.f32 	%f112, %f110, %f106, %p20;
	and.b32  	%r279, %r277, 2;
	setp.eq.s32 	%p21, %r279, 0;
	neg.f32 	%f113, %f111;
	selp.f32 	%f114, %f111, %f113, %p21;
	add.s32 	%r280, %r277, 1;
	and.b32  	%r281, %r280, 2;
	setp.eq.s32 	%p22, %r281, 0;
	mov.f32 	%f115, 0f00000000;
	sub.f32 	%f116, %f115, %f112;
	selp.f32 	%f117, %f112, %f116, %p22;
	cvt.rzi.f32.f32 	%f118, %f90;
	setp.eq.f32 	%p23, %f118, %f90;
	mul.f32 	%f119, %f90, 0f00000000;
	selp.f32 	%f197, %f119, %f114, %p23;
	abs.f32 	%f120, %f90;
	setp.gt.f32 	%p24, %f120, 0f4B800000;
	add.f32 	%f121, %f197, 0f3F800000;
	selp.f32 	%f196, %f121, %f117, %p24;
LBB0_6:                                 // %L239
	selp.f32 	%f46, %f42, %f45, %p6;
	setp.gt.f32 	%p8, %f50, 0f4B800000;
	add.f32 	%f51, %f49, 0f3F800000;
	setp.gt.u32 	%p26, %r1, 23;
	or.pred  	%p27, %p9, %p26;
	mov.f32 	%f193, 0f40400000;
	mov.f32 	%f198, %f200;
	mov.f32 	%f199, %f200;
	@%p27 bra 	LBB0_8;
// %bb.7:                               // %L276
	cvt.u16.u32 	%rs16, %r3327;
	and.b16  	%rs17, %rs16, 255;
	mul.lo.s16 	%rs18, %rs17, 171;
	shr.u16 	%rs19, %rs18, 10;
	mul.lo.s16 	%rs20, %rs19, 6;
	sub.s16 	%rs21, %rs16, %rs20;
	and.b16  	%rs22, %rs21, 255;
	cvt.rn.f32.u16 	%f123, %rs22;
	div.approx.f32 	%f125, %f123, %f193;
	add.f32 	%f126, %f125, %f125;
	mov.b32 	%r289, %f126;
	and.b32  	%r290, %r289, -2147483648;
	or.b32  	%r291, %r290, 1056964608;
	mov.b32 	%f127, %r291;
	add.f32 	%f128, %f126, %f127;
	cvt.rzi.f32.f32 	%f129, %f128;
	abs.f32 	%f130, %f126;
	setp.gt.f32 	%p28, %f130, 0f4B000000;
	selp.f32 	%f131, %f126, %f129, %p28;
	cvt.rzi.f32.f32 	%f132, %f126;
	setp.lt.f32 	%p29, %f130, 0f3F000000;
	selp.f32 	%f133, %f132, %f131, %p29;
	cvt.rzi.s32.f32 	%r292, %f133;
	fma.rn.f32 	%f134, %f133, 0fBF000000, %f125;
	mul.f32 	%f135, %f134, 0f34222169;
	fma.rn.f32 	%f136, %f134, 0f40490FDA, %f135;
	mul.f32 	%f137, %f136, %f136;
	fma.rn.f32 	%f138, %f137, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f139, %f138, %f137, 0f3D2AAABB;
	fma.rn.f32 	%f140, %f139, %f137, 0fBEFFFFFF;
	fma.rn.f32 	%f141, %f140, %f137, 0f3F800000;
	fma.rn.f32 	%f142, %f137, %f136, 0f00000000;
	fma.rn.f32 	%f143, %f137, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f144, %f143, %f137, 0fBE2AAAA8;
	fma.rn.f32 	%f145, %f144, %f142, %f136;
	and.b32  	%r293, %r292, 1;
	setp.eq.b32 	%p30, %r293, 1;
	selp.f32 	%f146, %f141, %f145, %p30;
	selp.f32 	%f147, %f145, %f141, %p30;
	and.b32  	%r294, %r292, 2;
	setp.eq.s32 	%p31, %r294, 0;
	neg.f32 	%f148, %f146;
	selp.f32 	%f149, %f146, %f148, %p31;
	add.s32 	%r295, %r292, 1;
	and.b32  	%r296, %r295, 2;
	setp.eq.s32 	%p32, %r296, 0;
	mov.f32 	%f150, 0f00000000;
	sub.f32 	%f151, %f150, %f147;
	selp.f32 	%f152, %f147, %f151, %p32;
	cvt.rzi.f32.f32 	%f153, %f125;
	setp.eq.f32 	%p33, %f153, %f125;
	mul.f32 	%f154, %f125, 0f00000000;
	selp.f32 	%f199, %f154, %f149, %p33;
	abs.f32 	%f155, %f125;
	setp.gt.f32 	%p34, %f155, 0f4B800000;
	add.f32 	%f156, %f199, 0f3F800000;
	selp.f32 	%f198, %f156, %f152, %p34;
LBB0_8:                                 // %L291
	selp.f32 	%f52, %f51, %f46, %p8;
	or.pred  	%p37, %p17, %p26;
	mov.f32 	%f201, %f200;
	@%p37 bra 	LBB0_10;
// %bb.9:                               // %L299
	cvt.u16.u32 	%rs23, %r3328;
	and.b16  	%rs24, %rs23, 255;
	mul.lo.s16 	%rs25, %rs24, 171;
	shr.u16 	%rs26, %rs25, 10;
	mul.lo.s16 	%rs27, %rs26, 6;
	sub.s16 	%rs28, %rs23, %rs27;
	and.b16  	%rs29, %rs28, 255;
	cvt.rn.f32.u16 	%f158, %rs29;
	div.approx.f32 	%f160, %f158, %f193;
	add.f32 	%f161, %f160, %f160;
	mov.b32 	%r298, %f161;
	and.b32  	%r299, %r298, -2147483648;
	or.b32  	%r300, %r299, 1056964608;
	mov.b32 	%f162, %r300;
	add.f32 	%f163, %f161, %f162;
	cvt.rzi.f32.f32 	%f164, %f163;
	abs.f32 	%f165, %f161;
	setp.gt.f32 	%p38, %f165, 0f4B000000;
	selp.f32 	%f166, %f161, %f164, %p38;
	cvt.rzi.f32.f32 	%f167, %f161;
	setp.lt.f32 	%p39, %f165, 0f3F000000;
	selp.f32 	%f168, %f167, %f166, %p39;
	cvt.rzi.s32.f32 	%r301, %f168;
	fma.rn.f32 	%f169, %f168, 0fBF000000, %f160;
	mul.f32 	%f170, %f169, 0f34222169;
	fma.rn.f32 	%f171, %f169, 0f40490FDA, %f170;
	mul.f32 	%f172, %f171, %f171;
	fma.rn.f32 	%f173, %f172, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f174, %f173, %f172, 0f3D2AAABB;
	fma.rn.f32 	%f175, %f174, %f172, 0fBEFFFFFF;
	fma.rn.f32 	%f176, %f175, %f172, 0f3F800000;
	fma.rn.f32 	%f177, %f172, %f171, 0f00000000;
	fma.rn.f32 	%f178, %f172, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f179, %f178, %f172, 0fBE2AAAA8;
	fma.rn.f32 	%f180, %f179, %f177, %f171;
	and.b32  	%r302, %r301, 1;
	setp.eq.b32 	%p40, %r302, 1;
	selp.f32 	%f181, %f176, %f180, %p40;
	selp.f32 	%f182, %f180, %f176, %p40;
	and.b32  	%r303, %r301, 2;
	setp.eq.s32 	%p41, %r303, 0;
	neg.f32 	%f183, %f181;
	selp.f32 	%f184, %f181, %f183, %p41;
	add.s32 	%r304, %r301, 1;
	and.b32  	%r305, %r304, 2;
	setp.eq.s32 	%p42, %r305, 0;
	mov.f32 	%f185, 0f00000000;
	sub.f32 	%f186, %f185, %f182;
	selp.f32 	%f187, %f182, %f186, %p42;
	cvt.rzi.f32.f32 	%f188, %f160;
	setp.eq.f32 	%p43, %f188, %f160;
	mul.f32 	%f189, %f160, 0f00000000;
	selp.f32 	%f201, %f189, %f184, %p43;
	abs.f32 	%f190, %f160;
	setp.gt.f32 	%p44, %f190, 0f4B800000;
	add.f32 	%f191, %f201, 0f3F800000;
	selp.f32 	%f200, %f191, %f187, %p44;
LBB0_10:                                // %L314
	mov.b32 	%r246, %f52;
	mov.b32 	%r249, %f49;
	mov.b32 	%r307, %f198;
	mov.b32 	%r308, %f200;
	mov.b32 	%r313, %f199;
	mov.b32 	%r314, %f201;
	mov.u32 	%r3330, 999999999;
	cvt.u16.u32 	%rs277, %r1;
	@%p26 bra 	LBB0_12;
// %bb.11:                              // %L350
	ld.param.u64 	%rd1, [_Z15julia_frb_1046713CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EES_IS2_Li1ELi1EES_IS2_Li1ELi1EES_IS1_Li1ELi1EE_param_1];
	and.b16  	%rs31, %rs277, 255;
	mul.lo.s16 	%rs32, %rs31, 171;
	shr.u16 	%rs33, %rs32, 12;
	mul.lo.s16 	%rs34, %rs33, 24;
	sub.s16 	%rs35, %rs277, %rs34;
	cvt.u32.u16 	%r319, %rs35;
	and.b32  	%r320, %r319, 255;
	mad.lo.s32 	%r321, %r320, 24, %r3;
	cvt.u16.u32 	%rs36, %r321;
	mul.hi.u16 	%rs37, %rs36, -7281;
	shr.u16 	%rs38, %rs37, 9;
	mul.lo.s16 	%rs39, %rs38, 576;
	sub.s16 	%rs40, %rs36, %rs39;
	cvt.u32.u16 	%r322, %rs40;
	mul.wide.u32 	%rd19, %r322, 4;
	add.s64 	%rd20, %rd1, %rd19;
	ld.global.u32 	%r323, [%rd20];
	cvt.s32.s16 	%r324, %r323;
	shr.s32 	%r325, %r323, 16;
	mul.lo.s32 	%r326, %r325, 801;
	mad.lo.s32 	%r3330, %r324, 33, %r326;
LBB0_12:                                // %L428
	xor.b32  	%r245, %r249, -2147483648;
	mov.b32 	%r283, %f194;
	mov.b32 	%r284, %f196;
	mov.b32 	%r286, %f195;
	mov.b32 	%r287, %f197;
	xor.b32  	%r310, %r313, -2147483648;
	xor.b32  	%r311, %r314, -2147483648;
	and.b32  	%r20, %r1, 24;
	setp.ne.s32 	%p46, %r20, 24;
	cvt.u16.u32 	%rs41, %r6;
	mul.lo.s16 	%rs42, %rs41, 171;
	shr.u16 	%rs43, %rs42, 10;
	mul.lo.s16 	%rs44, %rs43, 6;
	sub.s16 	%rs45, %rs41, %rs44;
	cvt.u32.u16 	%r327, %rs45;
	and.b32  	%r21, %r327, 255;
	@%p46 bra 	LBB0_14;
// %bb.13:                              // %L428.L734_crit_edge
	cvt.u16.u32 	%rs52, %r3;
	and.b16  	%rs53, %rs52, 255;
	mul.lo.s16 	%rs54, %rs53, 171;
	shr.u16 	%rs55, %rs54, 10;
	mul.lo.s16 	%rs56, %rs55, -6;
	add.s16 	%rs57, %rs56, %rs52;
	cvt.u32.u16 	%r342, %rs57;
	and.b32  	%r3333, %r342, 255;
	cvt.u32.u16 	%r3332, %rs55;
	mul.wide.u16 	%r3331, %rs55, 6;
	mov.u32 	%r3334, 0;
	mov.u32 	%r3335, %r3334;
	bra.uni 	LBB0_15;
LBB0_14:                                // %L454
	ld.param.u64 	%rd2, [_Z15julia_frb_1046713CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EES_IS2_Li1ELi1EES_IS2_Li1ELi1EES_IS1_Li1ELi1EE_param_2];
	mul.lo.s32 	%r328, %r21, 24;
	cvt.u16.u32 	%rs46, %r3;
	and.b16  	%rs47, %rs46, 255;
	mul.lo.s16 	%rs48, %rs47, 171;
	shr.u16 	%rs49, %rs48, 10;
	cvt.u32.u16 	%r3332, %rs49;
	mul.wide.u16 	%r3331, %rs49, 6;
	mul.lo.s16 	%rs50, %rs49, -6;
	add.s16 	%rs51, %rs50, %rs46;
	cvt.u32.u16 	%r330, %rs51;
	and.b32  	%r3333, %r330, 255;
	mul.lo.s32 	%r331, %r2, 576;
	mad.lo.s32 	%r332, %r5, 144, %r331;
	or.b32  	%r333, %r332, %r3333;
	add.s32 	%r334, %r333, %r3331;
	add.s32 	%r335, %r334, %r328;
	mul.wide.u32 	%rd21, %r335, 4;
	add.s64 	%rd22, %rd2, %rd21;
	ld.global.u32 	%r3334, [%rd22];
	add.s32 	%r336, %r332, 48384;
	or.b32  	%r337, %r336, %r3333;
	add.s32 	%r338, %r337, %r3331;
	add.s32 	%r339, %r338, %r328;
	mul.wide.u32 	%rd23, %r339, 4;
	add.s64 	%rd24, %rd2, %rd23;
	ld.global.u32 	%r3335, [%rd24];
LBB0_15:                                // %L734
	ld.param.u64 	%rd3, [_Z15julia_frb_1046713CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EES_IS2_Li1ELi1EES_IS2_Li1ELi1EES_IS1_Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z15julia_frb_1046713CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EES_IS2_Li1ELi1EES_IS2_Li1ELi1EES_IS1_Li1ELi1EE_param_4];
	// begin inline asm
	cvt.rn.f16x2.f32 %r244, %r246, %r245;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r247, %r249, %r246;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r282, %r284, %r283;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r285, %r287, %r286;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r306, %r308, %r307;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r309, %r311, %r310;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r312, %r314, %r313;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r315, %r308, %r307;
	// end inline asm
	mov.u32 	%r3329, 0;
	shl.b32 	%r344, %r1, 2;
	and.b32  	%r345, %r344, 60;
	shr.u32 	%r346, %r1, 4;
	mul.lo.s32 	%r347, %r346, 10752;
	shl.b32 	%r348, %r2, 7;
	add.s32 	%r349, %r347, %r348;
	or.b32  	%r35, %r349, %r345;
	or.b32  	%r350, %r344, %r347;
	or.b32  	%r351, %r350, 64;
	add.s32 	%r36, %r351, %r348;
	add.s32 	%r37, %r3, 24;
	and.b16  	%rs1, %rs277, 16;
	and.b32  	%r352, %r9, 30;
	or.b32  	%r353, %r352, %r346;
	mul.lo.s32 	%r38, %r353, 257;
	or.b32  	%r354, %r9, %r346;
	or.b32  	%r355, %r354, 32;
	mul.lo.s32 	%r39, %r355, 257;
	and.b16  	%rs59, %rs277, 255;
	mul.lo.s16 	%rs60, %rs59, 171;
	shr.u16 	%rs61, %rs60, 12;
	mul.lo.s16 	%rs62, %rs61, 24;
	sub.s16 	%rs63, %rs277, %rs62;
	cvt.u32.u16 	%r356, %rs63;
	and.b32  	%r40, %r356, 255;
	shr.u32 	%r357, %r3, 3;
	and.b32  	%r358, %r4, 224;
	mad.lo.s32 	%r41, %r357, 257, %r358;
	shr.u32 	%r359, %r37, 3;
	mad.lo.s32 	%r42, %r359, 257, %r358;
	add.s32 	%r360, %r3, 48;
	shr.u32 	%r361, %r360, 3;
	mad.lo.s32 	%r43, %r361, 257, %r358;
	add.s32 	%r362, %r3, 72;
	shr.u32 	%r363, %r362, 3;
	mad.lo.s32 	%r44, %r363, 257, %r358;
	or.b32  	%r364, %r357, 12;
	mad.lo.s32 	%r45, %r364, 257, %r358;
	add.s32 	%r365, %r3, 120;
	shr.u32 	%r366, %r365, 3;
	mad.lo.s32 	%r46, %r366, 257, %r358;
	add.s32 	%r367, %r3, 144;
	shr.u32 	%r368, %r367, 3;
	mad.lo.s32 	%r47, %r368, 257, %r358;
	add.s32 	%r369, %r3, 168;
	shr.u32 	%r370, %r369, 3;
	mad.lo.s32 	%r48, %r370, 257, %r358;
	or.b32  	%r371, %r357, 24;
	mad.lo.s32 	%r49, %r371, 257, %r358;
	add.s32 	%r372, %r3, 216;
	shr.u32 	%r373, %r372, 3;
	mad.lo.s32 	%r50, %r373, 257, %r358;
	add.s32 	%r374, %r3, 240;
	shr.u32 	%r375, %r374, 3;
	mad.lo.s32 	%r51, %r375, 257, %r358;
	add.s32 	%r376, %r3, 264;
	shr.u32 	%r377, %r376, 3;
	mad.lo.s32 	%r52, %r377, 257, %r358;
	or.b32  	%r378, %r357, 36;
	mad.lo.s32 	%r53, %r378, 257, %r358;
	add.s32 	%r379, %r3, 312;
	shr.u32 	%r380, %r379, 3;
	mad.lo.s32 	%r54, %r380, 257, %r358;
	add.s32 	%r381, %r3, 336;
	shr.u32 	%r382, %r381, 3;
	mad.lo.s32 	%r55, %r382, 257, %r358;
	add.s32 	%r383, %r3, 360;
	shr.u32 	%r384, %r383, 3;
	mad.lo.s32 	%r56, %r384, 257, %r358;
	or.b32  	%r385, %r357, 48;
	mad.lo.s32 	%r57, %r385, 257, %r358;
	add.s32 	%r386, %r3, 408;
	shr.u32 	%r387, %r386, 3;
	mad.lo.s32 	%r58, %r387, 257, %r358;
	add.s32 	%r388, %r3, 432;
	shr.u32 	%r389, %r388, 3;
	mad.lo.s32 	%r59, %r389, 257, %r358;
	add.s32 	%r390, %r3, 456;
	shr.u32 	%r391, %r390, 3;
	mad.lo.s32 	%r60, %r391, 257, %r358;
	or.b32  	%r392, %r357, 60;
	mad.lo.s32 	%r61, %r392, 257, %r358;
	add.s32 	%r393, %r3, 504;
	bfe.u32 	%r394, %r393, 3, 6;
	mad.lo.s32 	%r62, %r394, 257, %r358;
	mul.lo.s32 	%r395, %r5, 4806;
	mad.lo.s32 	%r396, %r3333, 33, %r395;
	mad.lo.s32 	%r397, %r3332, 198, %r396;
	mad.lo.s32 	%r398, %r21, 801, %r397;
	bfe.u32 	%r399, %r1, 3, 1;
	mul.lo.s32 	%r400, %r399, 514;
	and.b32  	%r401, %r6, 1;
	mul.lo.s32 	%r402, %r401, 1028;
	bfe.u32 	%r403, %r1, 1, 1;
	mul.lo.s32 	%r404, %r403, 2056;
	mul.lo.s32 	%r405, %r346, 257;
	and.b32  	%r406, %r1, 1;
	mul.lo.s32 	%r407, %r406, 4112;
	add.s32 	%r408, %r407, %r405;
	add.s32 	%r409, %r408, %r402;
	add.s32 	%r410, %r409, %r400;
	add.s32 	%r411, %r410, %r404;
	add.s32 	%r412, %r411, %r3333;
	add.s32 	%r63, %r412, %r3331;
	mul.wide.u32 	%rd25, %r63, 4;
	mov.u64 	%rd26, shmem;
	add.s64 	%rd6, %rd26, %rd25;
	add.s32 	%r64, %r63, 8256;
	cvt.u64.u32 	%rd27, %r3331;
	cvt.u64.u32 	%rd28, %r3333;
	cvt.u64.u32 	%rd29, %r404;
	cvt.u64.u32 	%rd30, %r400;
	cvt.u64.u32 	%rd31, %r402;
	cvt.u64.u32 	%rd32, %r407;
	cvt.u64.u32 	%rd33, %r405;
	add.s64 	%rd34, %rd33, %rd32;
	add.s64 	%rd35, %rd34, %rd31;
	add.s64 	%rd36, %rd35, %rd30;
	add.s64 	%rd37, %rd36, %rd29;
	add.s64 	%rd38, %rd37, %rd28;
	add.s64 	%rd39, %rd38, %rd27;
	shl.b64 	%rd40, %rd39, 2;
	add.s64 	%rd7, %rd26, %rd40;
	add.s32 	%r65, %r63, 32;
	add.s32 	%r66, %r63, 8288;
	bfe.u32 	%r413, %r3, 3, 1;
	mul.lo.s32 	%r414, %r413, 514;
	bfe.u32 	%r415, %r3, 2, 1;
	mul.lo.s32 	%r416, %r415, 1028;
	bfe.u32 	%r417, %r3, 1, 1;
	mul.lo.s32 	%r418, %r417, 2056;
	shr.u32 	%r419, %r3, 4;
	mul.lo.s32 	%r420, %r419, 257;
	and.b32  	%r421, %r3, 1;
	mul.lo.s32 	%r422, %r421, 4112;
	mul.lo.s32 	%r423, %r5, 6;
	add.s32 	%r424, %r422, %r420;
	add.s32 	%r425, %r424, %r423;
	add.s32 	%r426, %r425, %r416;
	add.s32 	%r427, %r426, %r414;
	add.s32 	%r428, %r427, %r418;
	add.s32 	%r67, %r428, %r21;
	mul.wide.u32 	%rd41, %r67, 4;
	add.s64 	%rd8, %rd26, %rd41;
	add.s32 	%r68, %r67, 8256;
	cvt.u64.u32 	%rd42, %r21;
	cvt.u64.u32 	%rd43, %r418;
	cvt.u64.u32 	%rd44, %r414;
	cvt.u64.u32 	%rd45, %r416;
	cvt.u64.u32 	%rd46, %r423;
	cvt.u64.u32 	%rd47, %r422;
	cvt.u64.u32 	%rd48, %r420;
	add.s64 	%rd49, %rd48, %rd47;
	add.s64 	%rd50, %rd49, %rd46;
	add.s64 	%rd51, %rd50, %rd45;
	add.s64 	%rd52, %rd51, %rd44;
	add.s64 	%rd53, %rd52, %rd43;
	add.s64 	%rd54, %rd53, %rd42;
	shl.b64 	%rd55, %rd54, 2;
	add.s64 	%rd9, %rd26, %rd55;
	add.s32 	%r69, %r67, 32;
	add.s32 	%r70, %r67, 8288;
	mul.lo.s32 	%r429, %r2, 1152;
	or.b32  	%r430, %r429, %r40;
	cvt.u16.u32 	%rs64, %r3;
	shl.b16 	%rs65, %rs64, 1;
	and.b16  	%rs66, %rs65, 254;
	mul.lo.s16 	%rs67, %rs66, 171;
	shr.u16 	%rs68, %rs67, 13;
	mul.lo.s16 	%rs69, %rs68, 48;
	sub.s16 	%rs70, %rs65, %rs69;
	cvt.u32.u16 	%r431, %rs70;
	and.b32  	%r432, %r431, 254;
	mad.lo.s32 	%r71, %r432, 24, %r430;
	or.b16  	%rs71, %rs65, 1;
	and.b16  	%rs72, %rs71, 255;
	mul.lo.s16 	%rs73, %rs72, 171;
	shr.u16 	%rs74, %rs73, 13;
	mul.lo.s16 	%rs75, %rs74, 48;
	sub.s16 	%rs76, %rs71, %rs75;
	cvt.u32.u16 	%r433, %rs76;
	and.b32  	%r434, %r433, 255;
	mad.lo.s32 	%r72, %r434, 24, %r430;
	mul.wide.u32 	%rd56, %r398, 4;
	add.s64 	%rd10, %rd26, %rd56;
	setp.gt.u32 	%p47, %r3, 7;
	setp.eq.s16 	%p48, %rs1, 0;
	setp.lt.u32 	%p50, %r1, 24;
	mov.u32 	%r3336, %r3329;
	mov.u32 	%r3367, %r3329;
	mov.u32 	%r3368, %r3329;
	mov.u32 	%r3369, %r3329;
	mov.u32 	%r3370, %r3329;
	bra.uni 	LBB0_16;
LBB0_37:                                // %guard_pass14622
                                        //   in Loop: Header=BB0_16 Depth=1
	add.s32 	%r242, %r3336, 48;
	setp.ne.s32 	%p76, %r3336, 2016;
	mov.u32 	%r3336, %r242;
	@%p76 bra 	LBB0_16;
	bra.uni 	LBB0_38;
LBB0_16:                                // %L737
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_18 Depth 2
                                        //     Child Loop BB0_28 Depth 2
	mul.hi.u32 	%r628, %r3336, -1431655765;
	shr.u32 	%r629, %r628, 5;
	mul.lo.s32 	%r78, %r629, 48;
	add.s32 	%r630, %r78, %r3;
	cvt.u16.u32 	%rs77, %r630;
	mul.hi.s16 	%rs78, %rs77, 16257;
	shr.u16 	%rs79, %rs78, 15;
	shr.s16 	%rs80, %rs78, 9;
	add.s16 	%rs81, %rs80, %rs79;
	mul.lo.s16 	%rs82, %rs81, 2064;
	sub.s16 	%rs83, %rs77, %rs82;
	mul.wide.s16 	%r631, %rs83, 21504;
	add.s32 	%r632, %r35, %r631;
	mul.wide.s32 	%rd57, %r632, 4;
	add.s64 	%rd58, %rd3, %rd57;
	ld.global.v4.u32 	{%r633, %r634, %r635, %r636}, [%rd58];
	add.s32 	%r637, %r36, %r631;
	mul.wide.s32 	%rd59, %r637, 4;
	add.s64 	%rd60, %rd3, %rd59;
	ld.global.v4.u32 	{%r638, %r639, %r640, %r641}, [%rd60];
	add.s32 	%r642, %r37, %r78;
	cvt.u16.u32 	%rs84, %r642;
	mul.hi.s16 	%rs85, %rs84, 16257;
	shr.u16 	%rs86, %rs85, 15;
	shr.s16 	%rs87, %rs85, 9;
	add.s16 	%rs88, %rs87, %rs86;
	mul.lo.s16 	%rs89, %rs88, 2064;
	sub.s16 	%rs90, %rs84, %rs89;
	mul.wide.s16 	%r643, %rs90, 21504;
	add.s32 	%r644, %r35, %r643;
	mul.wide.s32 	%rd61, %r644, 4;
	add.s64 	%rd62, %rd3, %rd61;
	ld.global.v4.u32 	{%r645, %r646, %r647, %r648}, [%rd62];
	add.s32 	%r649, %r36, %r643;
	mul.wide.s32 	%rd63, %r649, 4;
	add.s64 	%rd64, %rd3, %rd63;
	ld.global.v4.u32 	{%r650, %r651, %r652, %r653}, [%rd64];
	selp.b32 	%r654, %r635, %r633, %p48;
	shfl.sync.bfly.b32	%r655, %r654, 16, 31, -1;
	selp.b32 	%r437, %r633, %r655, %p48;
	selp.b32 	%r442, %r655, %r635, %p48;
	selp.b32 	%r656, %r636, %r634, %p48;
	shfl.sync.bfly.b32	%r657, %r656, 16, 31, -1;
	selp.b32 	%r445, %r634, %r657, %p48;
	selp.b32 	%r450, %r657, %r636, %p48;
	selp.b32 	%r658, %r640, %r638, %p48;
	shfl.sync.bfly.b32	%r659, %r658, 16, 31, -1;
	selp.b32 	%r453, %r638, %r659, %p48;
	selp.b32 	%r458, %r659, %r640, %p48;
	selp.b32 	%r660, %r641, %r639, %p48;
	shfl.sync.bfly.b32	%r661, %r660, 16, 31, -1;
	selp.b32 	%r461, %r639, %r661, %p48;
	selp.b32 	%r466, %r661, %r641, %p48;
	selp.b32 	%r662, %r647, %r645, %p48;
	shfl.sync.bfly.b32	%r663, %r662, 16, 31, -1;
	selp.b32 	%r469, %r645, %r663, %p48;
	selp.b32 	%r474, %r663, %r647, %p48;
	selp.b32 	%r664, %r648, %r646, %p48;
	shfl.sync.bfly.b32	%r665, %r664, 16, 31, -1;
	selp.b32 	%r477, %r646, %r665, %p48;
	selp.b32 	%r482, %r665, %r648, %p48;
	selp.b32 	%r666, %r652, %r650, %p48;
	shfl.sync.bfly.b32	%r667, %r666, 16, 31, -1;
	selp.b32 	%r485, %r650, %r667, %p48;
	selp.b32 	%r490, %r667, %r652, %p48;
	selp.b32 	%r668, %r653, %r651, %p48;
	shfl.sync.bfly.b32	%r669, %r668, 16, 31, -1;
	selp.b32 	%r493, %r651, %r669, %p48;
	selp.b32 	%r498, %r669, %r653, %p48;
	shl.b32 	%r438, %r442, 4;
	mov.u32 	%r436, 252645135;
	// begin inline asm
	lop3.b32 %r500, %r436, %r437, %r438, 202;
	// end inline asm
	shr.u32 	%r441, %r437, 4;
	// begin inline asm
	lop3.b32 %r516, %r436, %r441, %r442, 202;
	// end inline asm
	shl.b32 	%r446, %r450, 4;
	// begin inline asm
	lop3.b32 %r508, %r436, %r445, %r446, 202;
	// end inline asm
	shr.u32 	%r449, %r445, 4;
	// begin inline asm
	lop3.b32 %r524, %r436, %r449, %r450, 202;
	// end inline asm
	shl.b32 	%r454, %r458, 4;
	// begin inline asm
	lop3.b32 %r532, %r436, %r453, %r454, 202;
	// end inline asm
	shr.u32 	%r457, %r453, 4;
	// begin inline asm
	lop3.b32 %r548, %r436, %r457, %r458, 202;
	// end inline asm
	shl.b32 	%r462, %r466, 4;
	// begin inline asm
	lop3.b32 %r540, %r436, %r461, %r462, 202;
	// end inline asm
	shr.u32 	%r465, %r461, 4;
	// begin inline asm
	lop3.b32 %r556, %r436, %r465, %r466, 202;
	// end inline asm
	shl.b32 	%r470, %r474, 4;
	// begin inline asm
	lop3.b32 %r501, %r436, %r469, %r470, 202;
	// end inline asm
	shr.u32 	%r473, %r469, 4;
	// begin inline asm
	lop3.b32 %r517, %r436, %r473, %r474, 202;
	// end inline asm
	shl.b32 	%r478, %r482, 4;
	// begin inline asm
	lop3.b32 %r509, %r436, %r477, %r478, 202;
	// end inline asm
	shr.u32 	%r481, %r477, 4;
	// begin inline asm
	lop3.b32 %r525, %r436, %r481, %r482, 202;
	// end inline asm
	shl.b32 	%r486, %r490, 4;
	// begin inline asm
	lop3.b32 %r533, %r436, %r485, %r486, 202;
	// end inline asm
	shr.u32 	%r489, %r485, 4;
	// begin inline asm
	lop3.b32 %r549, %r436, %r489, %r490, 202;
	// end inline asm
	shl.b32 	%r494, %r498, 4;
	// begin inline asm
	lop3.b32 %r541, %r436, %r493, %r494, 202;
	// end inline asm
	shr.u32 	%r497, %r493, 4;
	// begin inline asm
	lop3.b32 %r557, %r436, %r497, %r498, 202;
	// end inline asm
	mov.u32 	%r502, 25152;
	// begin inline asm
	prmt.b32 %r564, %r500, %r501, %r502;
	// end inline asm
	mov.u32 	%r506, 29521;
	// begin inline asm
	prmt.b32 %r596, %r500, %r501, %r506;
	// end inline asm
	// begin inline asm
	prmt.b32 %r572, %r508, %r509, %r502;
	// end inline asm
	// begin inline asm
	prmt.b32 %r604, %r508, %r509, %r506;
	// end inline asm
	// begin inline asm
	prmt.b32 %r565, %r516, %r517, %r502;
	// end inline asm
	// begin inline asm
	prmt.b32 %r597, %r516, %r517, %r506;
	// end inline asm
	// begin inline asm
	prmt.b32 %r573, %r524, %r525, %r502;
	// end inline asm
	// begin inline asm
	prmt.b32 %r605, %r524, %r525, %r506;
	// end inline asm
	// begin inline asm
	prmt.b32 %r580, %r532, %r533, %r502;
	// end inline asm
	// begin inline asm
	prmt.b32 %r612, %r532, %r533, %r506;
	// end inline asm
	// begin inline asm
	prmt.b32 %r588, %r540, %r541, %r502;
	// end inline asm
	// begin inline asm
	prmt.b32 %r620, %r540, %r541, %r506;
	// end inline asm
	// begin inline asm
	prmt.b32 %r581, %r548, %r549, %r502;
	// end inline asm
	// begin inline asm
	prmt.b32 %r613, %r548, %r549, %r506;
	// end inline asm
	// begin inline asm
	prmt.b32 %r589, %r556, %r557, %r502;
	// end inline asm
	// begin inline asm
	prmt.b32 %r621, %r556, %r557, %r506;
	// end inline asm
	mov.u32 	%r622, 21520;
	// begin inline asm
	prmt.b32 %r563, %r564, %r565, %r622;
	// end inline asm
	mov.u32 	%r626, 30258;
	// begin inline asm
	prmt.b32 %r567, %r564, %r565, %r626;
	// end inline asm
	// begin inline asm
	prmt.b32 %r571, %r572, %r573, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r575, %r572, %r573, %r626;
	// end inline asm
	// begin inline asm
	prmt.b32 %r579, %r580, %r581, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r583, %r580, %r581, %r626;
	// end inline asm
	// begin inline asm
	prmt.b32 %r587, %r588, %r589, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r591, %r588, %r589, %r626;
	// end inline asm
	// begin inline asm
	prmt.b32 %r595, %r596, %r597, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r599, %r596, %r597, %r626;
	// end inline asm
	// begin inline asm
	prmt.b32 %r603, %r604, %r605, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r607, %r604, %r605, %r626;
	// end inline asm
	// begin inline asm
	prmt.b32 %r611, %r612, %r613, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r615, %r612, %r613, %r626;
	// end inline asm
	// begin inline asm
	prmt.b32 %r619, %r620, %r621, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r623, %r620, %r621, %r626;
	// end inline asm
	mul.hi.s16 	%rs91, %rs77, 10923;
	shr.u16 	%rs92, %rs91, 15;
	shr.s16 	%rs93, %rs91, 2;
	add.s16 	%rs94, %rs93, %rs92;
	mul.lo.s16 	%rs95, %rs94, 24;
	sub.s16 	%rs96, %rs77, %rs95;
	cvt.s32.s16 	%r670, %rs96;
	add.s32 	%r671, %r38, %r670;
	mul.wide.s32 	%rd65, %r671, 4;
	add.s64 	%rd67, %rd26, %rd65;
	st.shared.u32 	[%rd67], %r563;
	st.shared.u32 	[%rd67+512], %r571;
	st.shared.u32 	[%rd67+256], %r567;
	st.shared.u32 	[%rd67+768], %r575;
	add.s32 	%r672, %r39, %r670;
	mul.wide.s32 	%rd68, %r672, 4;
	add.s64 	%rd69, %rd26, %rd68;
	st.shared.u32 	[%rd69], %r579;
	st.shared.u32 	[%rd69+512], %r587;
	st.shared.u32 	[%rd69+256], %r583;
	st.shared.u32 	[%rd69+768], %r591;
	st.shared.u32 	[%rd67+128], %r595;
	st.shared.u32 	[%rd67+640], %r603;
	st.shared.u32 	[%rd67+384], %r599;
	st.shared.u32 	[%rd67+896], %r607;
	st.shared.u32 	[%rd69+128], %r611;
	st.shared.u32 	[%rd69+640], %r619;
	st.shared.u32 	[%rd69+384], %r615;
	st.shared.u32 	[%rd69+896], %r623;
	bar.sync 	0;
	add.s32 	%r673, %r78, %r40;
	cvt.u16.u32 	%rs97, %r673;
	mul.hi.s16 	%rs98, %rs97, 10923;
	shr.u16 	%rs99, %rs98, 15;
	shr.s16 	%rs100, %rs98, 2;
	add.s16 	%rs101, %rs100, %rs99;
	mul.lo.s16 	%rs102, %rs101, 24;
	sub.s16 	%rs103, %rs97, %rs102;
	cvt.s32.s16 	%r674, %rs103;
	add.s32 	%r675, %r41, %r674;
	mul.wide.s32 	%rd70, %r675, 4;
	add.s64 	%rd71, %rd26, %rd70;
	ld.shared.u32 	%r676, [%rd71];
	add.s32 	%r677, %r42, %r674;
	mul.wide.u32 	%rd72, %r677, 4;
	add.s64 	%rd73, %rd26, %rd72;
	ld.shared.u32 	%r678, [%rd73];
	add.s32 	%r679, %r43, %r674;
	mul.wide.u32 	%rd74, %r679, 4;
	add.s64 	%rd75, %rd26, %rd74;
	ld.shared.u32 	%r680, [%rd75];
	add.s32 	%r681, %r44, %r674;
	mul.wide.u32 	%rd76, %r681, 4;
	add.s64 	%rd77, %rd26, %rd76;
	ld.shared.u32 	%r682, [%rd77];
	add.s32 	%r683, %r45, %r674;
	mul.wide.s32 	%rd78, %r683, 4;
	add.s64 	%rd79, %rd26, %rd78;
	ld.shared.u32 	%r684, [%rd79];
	add.s32 	%r685, %r46, %r674;
	mul.wide.u32 	%rd80, %r685, 4;
	add.s64 	%rd81, %rd26, %rd80;
	ld.shared.u32 	%r686, [%rd81];
	add.s32 	%r687, %r47, %r674;
	mul.wide.u32 	%rd82, %r687, 4;
	add.s64 	%rd83, %rd26, %rd82;
	ld.shared.u32 	%r688, [%rd83];
	add.s32 	%r689, %r48, %r674;
	mul.wide.u32 	%rd84, %r689, 4;
	add.s64 	%rd85, %rd26, %rd84;
	ld.shared.u32 	%r690, [%rd85];
	add.s32 	%r691, %r49, %r674;
	mul.wide.s32 	%rd86, %r691, 4;
	add.s64 	%rd87, %rd26, %rd86;
	ld.shared.u32 	%r692, [%rd87];
	add.s32 	%r693, %r50, %r674;
	mul.wide.u32 	%rd88, %r693, 4;
	add.s64 	%rd89, %rd26, %rd88;
	ld.shared.u32 	%r694, [%rd89];
	add.s32 	%r695, %r51, %r674;
	mul.wide.u32 	%rd90, %r695, 4;
	add.s64 	%rd91, %rd26, %rd90;
	ld.shared.u32 	%r696, [%rd91];
	add.s32 	%r697, %r52, %r674;
	mul.wide.u32 	%rd92, %r697, 4;
	add.s64 	%rd93, %rd26, %rd92;
	ld.shared.u32 	%r698, [%rd93];
	add.s32 	%r699, %r53, %r674;
	mul.wide.s32 	%rd94, %r699, 4;
	add.s64 	%rd95, %rd26, %rd94;
	ld.shared.u32 	%r700, [%rd95];
	add.s32 	%r701, %r54, %r674;
	mul.wide.u32 	%rd96, %r701, 4;
	add.s64 	%rd97, %rd26, %rd96;
	ld.shared.u32 	%r702, [%rd97];
	add.s32 	%r703, %r55, %r674;
	mul.wide.u32 	%rd98, %r703, 4;
	add.s64 	%rd99, %rd26, %rd98;
	ld.shared.u32 	%r704, [%rd99];
	add.s32 	%r705, %r56, %r674;
	mul.wide.u32 	%rd100, %r705, 4;
	add.s64 	%rd101, %rd26, %rd100;
	ld.shared.u32 	%r706, [%rd101];
	add.s32 	%r707, %r57, %r674;
	mul.wide.s32 	%rd102, %r707, 4;
	add.s64 	%rd103, %rd26, %rd102;
	ld.shared.u32 	%r708, [%rd103];
	add.s32 	%r709, %r58, %r674;
	mul.wide.u32 	%rd104, %r709, 4;
	add.s64 	%rd105, %rd26, %rd104;
	ld.shared.u32 	%r710, [%rd105];
	add.s32 	%r711, %r59, %r674;
	mul.wide.u32 	%rd106, %r711, 4;
	add.s64 	%rd107, %rd26, %rd106;
	ld.shared.u32 	%r712, [%rd107];
	add.s32 	%r713, %r60, %r674;
	mul.wide.u32 	%rd108, %r713, 4;
	add.s64 	%rd109, %rd26, %rd108;
	ld.shared.u32 	%r714, [%rd109];
	add.s32 	%r715, %r61, %r674;
	mul.wide.s32 	%rd110, %r715, 4;
	add.s64 	%rd111, %rd26, %rd110;
	ld.shared.u32 	%r716, [%rd111];
	add.s32 	%r717, %r62, %r674;
	mul.wide.s32 	%rd112, %r717, 4;
	add.s64 	%rd113, %rd26, %rd112;
	ld.shared.u32 	%r718, [%rd113];
	bar.sync 	0;
	shfl.sync.idx.b32	%r719, %r3330, 0, 31, -1;
	shfl.sync.idx.b32	%r720, %r3330, 1, 31, -1;
	shfl.sync.idx.b32	%r721, %r3330, 2, 31, -1;
	shfl.sync.idx.b32	%r722, %r3330, 3, 31, -1;
	shfl.sync.idx.b32	%r723, %r3330, 4, 31, -1;
	shfl.sync.idx.b32	%r724, %r3330, 5, 31, -1;
	shfl.sync.idx.b32	%r725, %r3330, 6, 31, -1;
	shfl.sync.idx.b32	%r726, %r3330, 7, 31, -1;
	shfl.sync.idx.b32	%r727, %r3330, 8, 31, -1;
	shfl.sync.idx.b32	%r728, %r3330, 9, 31, -1;
	shfl.sync.idx.b32	%r729, %r3330, 10, 31, -1;
	shfl.sync.idx.b32	%r730, %r3330, 11, 31, -1;
	shfl.sync.idx.b32	%r731, %r3330, 12, 31, -1;
	shfl.sync.idx.b32	%r732, %r3330, 13, 31, -1;
	shfl.sync.idx.b32	%r733, %r3330, 14, 31, -1;
	shfl.sync.idx.b32	%r734, %r3330, 15, 31, -1;
	shfl.sync.idx.b32	%r735, %r3330, 16, 31, -1;
	shfl.sync.idx.b32	%r736, %r3330, 17, 31, -1;
	shfl.sync.idx.b32	%r737, %r3330, 18, 31, -1;
	shfl.sync.idx.b32	%r738, %r3330, 19, 31, -1;
	shfl.sync.idx.b32	%r739, %r3330, 20, 31, -1;
	shfl.sync.idx.b32	%r740, %r3330, 21, 31, -1;
	shfl.sync.idx.b32	%r741, %r3330, 22, 31, -1;
	shfl.sync.idx.b32	%r742, %r3330, 23, 31, -1;
	add.s32 	%r743, %r719, %r674;
	mul.wide.s32 	%rd114, %r743, 4;
	add.s64 	%rd115, %rd26, %rd114;
	st.shared.u32 	[%rd115], %r676;
	add.s32 	%r744, %r720, %r674;
	mul.wide.s32 	%rd116, %r744, 4;
	add.s64 	%rd117, %rd26, %rd116;
	st.shared.u32 	[%rd117], %r678;
	add.s32 	%r745, %r721, %r674;
	mul.wide.s32 	%rd118, %r745, 4;
	add.s64 	%rd119, %rd26, %rd118;
	st.shared.u32 	[%rd119], %r680;
	add.s32 	%r746, %r722, %r674;
	mul.wide.s32 	%rd120, %r746, 4;
	add.s64 	%rd121, %rd26, %rd120;
	st.shared.u32 	[%rd121], %r682;
	add.s32 	%r747, %r723, %r674;
	mul.wide.s32 	%rd122, %r747, 4;
	add.s64 	%rd123, %rd26, %rd122;
	st.shared.u32 	[%rd123], %r684;
	add.s32 	%r748, %r724, %r674;
	mul.wide.s32 	%rd124, %r748, 4;
	add.s64 	%rd125, %rd26, %rd124;
	st.shared.u32 	[%rd125], %r686;
	add.s32 	%r749, %r725, %r674;
	mul.wide.s32 	%rd126, %r749, 4;
	add.s64 	%rd127, %rd26, %rd126;
	st.shared.u32 	[%rd127], %r688;
	add.s32 	%r750, %r726, %r674;
	mul.wide.s32 	%rd128, %r750, 4;
	add.s64 	%rd129, %rd26, %rd128;
	st.shared.u32 	[%rd129], %r690;
	add.s32 	%r751, %r727, %r674;
	mul.wide.s32 	%rd130, %r751, 4;
	add.s64 	%rd131, %rd26, %rd130;
	st.shared.u32 	[%rd131], %r692;
	add.s32 	%r752, %r728, %r674;
	mul.wide.s32 	%rd132, %r752, 4;
	add.s64 	%rd133, %rd26, %rd132;
	st.shared.u32 	[%rd133], %r694;
	add.s32 	%r753, %r729, %r674;
	mul.wide.s32 	%rd134, %r753, 4;
	add.s64 	%rd135, %rd26, %rd134;
	st.shared.u32 	[%rd135], %r696;
	add.s32 	%r754, %r730, %r674;
	mul.wide.s32 	%rd136, %r754, 4;
	add.s64 	%rd137, %rd26, %rd136;
	st.shared.u32 	[%rd137], %r698;
	add.s32 	%r755, %r731, %r674;
	mul.wide.s32 	%rd138, %r755, 4;
	add.s64 	%rd139, %rd26, %rd138;
	st.shared.u32 	[%rd139], %r700;
	add.s32 	%r756, %r732, %r674;
	mul.wide.s32 	%rd140, %r756, 4;
	add.s64 	%rd141, %rd26, %rd140;
	st.shared.u32 	[%rd141], %r702;
	add.s32 	%r757, %r733, %r674;
	mul.wide.s32 	%rd142, %r757, 4;
	add.s64 	%rd143, %rd26, %rd142;
	st.shared.u32 	[%rd143], %r704;
	add.s32 	%r758, %r734, %r674;
	mul.wide.s32 	%rd144, %r758, 4;
	add.s64 	%rd145, %rd26, %rd144;
	st.shared.u32 	[%rd145], %r706;
	add.s32 	%r759, %r735, %r674;
	mul.wide.s32 	%rd146, %r759, 4;
	add.s64 	%rd147, %rd26, %rd146;
	st.shared.u32 	[%rd147], %r708;
	add.s32 	%r760, %r736, %r674;
	mul.wide.s32 	%rd148, %r760, 4;
	add.s64 	%rd149, %rd26, %rd148;
	st.shared.u32 	[%rd149], %r710;
	add.s32 	%r761, %r737, %r674;
	mul.wide.s32 	%rd150, %r761, 4;
	add.s64 	%rd151, %rd26, %rd150;
	st.shared.u32 	[%rd151], %r712;
	add.s32 	%r762, %r738, %r674;
	mul.wide.s32 	%rd152, %r762, 4;
	add.s64 	%rd153, %rd26, %rd152;
	st.shared.u32 	[%rd153], %r714;
	add.s32 	%r763, %r739, %r674;
	mul.wide.s32 	%rd154, %r763, 4;
	add.s64 	%rd155, %rd26, %rd154;
	st.shared.u32 	[%rd155], %r716;
	selp.b32 	%r764, 0, %r718, %p47;
	add.s32 	%r765, %r740, %r674;
	mul.wide.s32 	%rd156, %r765, 4;
	add.s64 	%rd157, %rd26, %rd156;
	st.shared.u32 	[%rd157], %r764;
	add.s32 	%r766, %r741, %r674;
	mul.wide.s32 	%rd158, %r766, 4;
	add.s64 	%rd159, %rd26, %rd158;
	st.shared.u32 	[%rd159], %r3329;
	add.s32 	%r767, %r742, %r674;
	mul.wide.s32 	%rd160, %r767, 4;
	add.s64 	%rd161, %rd26, %rd160;
	st.shared.u32 	[%rd161], %r3329;
	bar.sync 	0;
	mov.u32 	%r3341, %r3329;
	mov.u32 	%r3342, %r3329;
	mov.u32 	%r3343, %r3329;
	mov.u32 	%r3344, %r3329;
	mov.u32 	%r3345, %r3329;
	mov.u32 	%r3346, %r3329;
	mov.u32 	%r3347, %r3329;
	mov.u32 	%r3348, %r3329;
	mov.u32 	%r3349, %r3329;
	mov.u32 	%r3350, %r3329;
	mov.u32 	%r3351, %r3329;
	mov.u32 	%r3352, %r3329;
	mov.u32 	%r3353, %r3329;
	mov.u32 	%r3354, %r3329;
	mov.u32 	%r3355, %r3329;
	mov.u32 	%r3356, %r3329;
	mov.u32 	%r3357, %r3329;
	mov.u32 	%r3358, %r3329;
	mov.u32 	%r3359, %r3329;
	mov.u32 	%r3360, %r3329;
	mov.u32 	%r3361, %r3329;
	mov.u32 	%r3362, %r3329;
	mov.u32 	%r3363, %r3329;
	mov.u32 	%r3364, %r3329;
	@%p46 bra 	LBB0_41;
	bra.uni 	LBB0_17;
LBB0_41:                                // %oksrem3306
                                        //   in Loop: Header=BB0_16 Depth=1
	cvt.u16.u32 	%rs104, %r78;
	mul.hi.s16 	%rs105, %rs104, 10923;
	shr.u16 	%rs106, %rs105, 15;
	shr.s16 	%rs107, %rs105, 2;
	add.s16 	%rs108, %rs107, %rs106;
	mul.lo.s16 	%rs109, %rs108, 24;
	sub.s16 	%rs110, %rs104, %rs109;
	cvt.s32.s16 	%r768, %rs110;
	mul.wide.s32 	%rd162, %r768, 4;
	add.s64 	%rd163, %rd10, %rd162;
	ld.shared.u32 	%r3341, [%rd163];
	ld.shared.u32 	%r3342, [%rd10+4];
	ld.shared.u32 	%r3343, [%rd10+8];
	ld.shared.u32 	%r3344, [%rd10+12];
	ld.shared.u32 	%r3345, [%rd10+16];
	ld.shared.u32 	%r3346, [%rd10+20];
	ld.shared.u32 	%r3347, [%rd10+24];
	ld.shared.u32 	%r3348, [%rd10+28];
	ld.shared.u32 	%r3349, [%rd10+32];
	ld.shared.u32 	%r3350, [%rd10+36];
	ld.shared.u32 	%r3351, [%rd10+40];
	ld.shared.u32 	%r3352, [%rd10+44];
	ld.shared.u32 	%r3353, [%rd10+48];
	ld.shared.u32 	%r3354, [%rd10+52];
	ld.shared.u32 	%r3355, [%rd10+56];
	ld.shared.u32 	%r3356, [%rd10+60];
	add.s16 	%rs111, %rs104, 16;
	mul.hi.s16 	%rs112, %rs111, 10923;
	shr.u16 	%rs113, %rs112, 15;
	shr.s16 	%rs114, %rs112, 2;
	add.s16 	%rs115, %rs114, %rs113;
	mul.lo.s16 	%rs116, %rs115, 24;
	sub.s16 	%rs117, %rs111, %rs116;
	cvt.s32.s16 	%r769, %rs117;
	mul.wide.s32 	%rd164, %r769, 4;
	add.s64 	%rd165, %rd10, %rd164;
	ld.shared.u32 	%r3357, [%rd165];
	add.s16 	%rs118, %rs104, 17;
	mul.hi.s16 	%rs119, %rs118, 10923;
	shr.u16 	%rs120, %rs119, 15;
	shr.s16 	%rs121, %rs119, 2;
	add.s16 	%rs122, %rs121, %rs120;
	mul.lo.s16 	%rs123, %rs122, 24;
	sub.s16 	%rs124, %rs118, %rs123;
	cvt.s32.s16 	%r770, %rs124;
	mul.wide.s32 	%rd166, %r770, 4;
	add.s64 	%rd167, %rd10, %rd166;
	ld.shared.u32 	%r3358, [%rd167];
	add.s16 	%rs125, %rs104, 18;
	mul.hi.s16 	%rs126, %rs125, 10923;
	shr.u16 	%rs127, %rs126, 15;
	shr.s16 	%rs128, %rs126, 2;
	add.s16 	%rs129, %rs128, %rs127;
	mul.lo.s16 	%rs130, %rs129, 24;
	sub.s16 	%rs131, %rs125, %rs130;
	cvt.s32.s16 	%r771, %rs131;
	mul.wide.s32 	%rd168, %r771, 4;
	add.s64 	%rd169, %rd10, %rd168;
	ld.shared.u32 	%r3359, [%rd169];
	add.s16 	%rs132, %rs104, 19;
	mul.hi.s16 	%rs133, %rs132, 10923;
	shr.u16 	%rs134, %rs133, 15;
	shr.s16 	%rs135, %rs133, 2;
	add.s16 	%rs136, %rs135, %rs134;
	mul.lo.s16 	%rs137, %rs136, 24;
	sub.s16 	%rs138, %rs132, %rs137;
	cvt.s32.s16 	%r772, %rs138;
	mul.wide.s32 	%rd170, %r772, 4;
	add.s64 	%rd171, %rd10, %rd170;
	ld.shared.u32 	%r3360, [%rd171];
	add.s16 	%rs139, %rs104, 20;
	mul.hi.s16 	%rs140, %rs139, 10923;
	shr.u16 	%rs141, %rs140, 15;
	shr.s16 	%rs142, %rs140, 2;
	add.s16 	%rs143, %rs142, %rs141;
	mul.lo.s16 	%rs144, %rs143, 24;
	sub.s16 	%rs145, %rs139, %rs144;
	cvt.s32.s16 	%r773, %rs145;
	mul.wide.s32 	%rd172, %r773, 4;
	add.s64 	%rd173, %rd10, %rd172;
	ld.shared.u32 	%r3361, [%rd173];
	add.s16 	%rs146, %rs104, 21;
	mul.hi.s16 	%rs147, %rs146, 10923;
	shr.u16 	%rs148, %rs147, 15;
	shr.s16 	%rs149, %rs147, 2;
	add.s16 	%rs150, %rs149, %rs148;
	mul.lo.s16 	%rs151, %rs150, 24;
	sub.s16 	%rs152, %rs146, %rs151;
	cvt.s32.s16 	%r774, %rs152;
	mul.wide.s32 	%rd174, %r774, 4;
	add.s64 	%rd175, %rd10, %rd174;
	ld.shared.u32 	%r3362, [%rd175];
	add.s16 	%rs153, %rs104, 22;
	mul.hi.s16 	%rs154, %rs153, 10923;
	shr.u16 	%rs155, %rs154, 15;
	shr.s16 	%rs156, %rs154, 2;
	add.s16 	%rs157, %rs156, %rs155;
	mul.lo.s16 	%rs158, %rs157, 24;
	sub.s16 	%rs159, %rs153, %rs158;
	cvt.s32.s16 	%r775, %rs159;
	mul.wide.s32 	%rd176, %r775, 4;
	add.s64 	%rd177, %rd10, %rd176;
	ld.shared.u32 	%r3363, [%rd177];
	add.s16 	%rs160, %rs104, 23;
	mul.hi.s16 	%rs161, %rs160, 10923;
	shr.u16 	%rs162, %rs161, 15;
	shr.s16 	%rs163, %rs161, 2;
	add.s16 	%rs164, %rs163, %rs162;
	mul.lo.s16 	%rs165, %rs164, 24;
	sub.s16 	%rs166, %rs160, %rs165;
	cvt.s32.s16 	%r776, %rs166;
	mul.wide.s32 	%rd178, %r776, 4;
	add.s64 	%rd179, %rd10, %rd178;
	ld.shared.u32 	%r3364, [%rd179];
LBB0_17:                                // %L11382
                                        //   in Loop: Header=BB0_16 Depth=1
	bar.sync 	0;
	mov.u32 	%r3365, 12;
	mov.u32 	%r3366, %r3329;
	bra.uni 	LBB0_18;
LBB0_25:                                // %L21383
                                        //   in Loop: Header=BB0_18 Depth=2
	add.s32 	%r3368, %r3368, 1;
	mov.u32 	%r3367, 0;
	mov.u32 	%r3369, %r3367;
	mov.u32 	%r3370, %r3367;
LBB0_26:                                // %L21384
                                        //   in Loop: Header=BB0_18 Depth=2
	bar.sync 	0;
	add.s32 	%r3366, %r3366, 1;
	add.s32 	%r3365, %r3365, -4;
	setp.ne.s32 	%p62, %r3365, -12;
	@%p62 bra 	LBB0_18;
	bra.uni 	LBB0_27;
LBB0_18:                                // %L11408
                                        //   Parent Loop BB0_16 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p51, %r3365, 12;
	selp.b32 	%r1316, %r3341, 0, %p51;
	setp.eq.s32 	%p52, %r3365, 8;
	selp.b32 	%r1317, %r3345, %r1316, %p52;
	setp.eq.s32 	%p53, %r3365, 4;
	selp.b32 	%r1318, %r3349, %r1317, %p53;
	setp.eq.s32 	%p54, %r3365, 0;
	selp.b32 	%r1319, %r3353, %r1318, %p54;
	setp.eq.s32 	%p55, %r3365, -4;
	selp.b32 	%r1320, %r3357, %r1319, %p55;
	setp.eq.s32 	%p56, %r3365, -8;
	selp.b32 	%r1321, %r3361, %r1320, %p56;
	selp.b32 	%r1322, %r3342, 0, %p51;
	selp.b32 	%r1323, %r3346, %r1322, %p52;
	selp.b32 	%r1324, %r3350, %r1323, %p53;
	selp.b32 	%r1325, %r3354, %r1324, %p54;
	selp.b32 	%r1326, %r3358, %r1325, %p55;
	selp.b32 	%r1327, %r3362, %r1326, %p56;
	selp.b32 	%r1328, %r3343, 0, %p51;
	selp.b32 	%r1329, %r3347, %r1328, %p52;
	selp.b32 	%r1330, %r3351, %r1329, %p53;
	selp.b32 	%r1331, %r3355, %r1330, %p54;
	selp.b32 	%r1332, %r3359, %r1331, %p55;
	selp.b32 	%r1333, %r3363, %r1332, %p56;
	selp.b32 	%r1334, %r3344, 0, %p51;
	selp.b32 	%r1335, %r3348, %r1334, %p52;
	selp.b32 	%r1336, %r3352, %r1335, %p53;
	selp.b32 	%r1337, %r3356, %r1336, %p54;
	selp.b32 	%r1338, %r3360, %r1337, %p55;
	selp.b32 	%r1339, %r3364, %r1338, %p56;
	mov.u16 	%rs204, 25600;
	// begin inline asm
	mov.b32 %r784, {%rs204, %rs204};
	// end inline asm
	mov.u16 	%rs206, 21504;
	// begin inline asm
	mov.b32 %r795, {%rs206, %rs206};
	// end inline asm
	xor.b32  	%r783, %r1321, -2004318072;
	mov.u32 	%r920, 983055;
	// begin inline asm
	lop3.b32 %r781, %r920, %r783, %r784, 202;
	// end inline asm
	mov.u16 	%rs210, 18432;
	// begin inline asm
	mov.b32 %r785, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r786, %r784, %r785;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r789, %r781, %r786;
	// end inline asm
	mov.u32 	%r931, 15728880;
	// begin inline asm
	lop3.b32 %r792, %r931, %r783, %r795, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r796, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r797, %r795, %r796;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r800, %r792, %r797;
	// end inline asm
	// begin inline asm
	mov.b32 %r830, {%rs204, %rs204};
	// end inline asm
	// begin inline asm
	mov.b32 %r841, {%rs206, %rs206};
	// end inline asm
	xor.b32  	%r829, %r1327, -2004318072;
	// begin inline asm
	lop3.b32 %r827, %r920, %r829, %r830, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r831, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r832, %r830, %r831;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r835, %r827, %r832;
	// end inline asm
	// begin inline asm
	lop3.b32 %r838, %r931, %r829, %r841, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r842, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r843, %r841, %r842;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r846, %r838, %r843;
	// end inline asm
	// begin inline asm
	mov.b32 %r876, {%rs204, %rs204};
	// end inline asm
	// begin inline asm
	mov.b32 %r887, {%rs206, %rs206};
	// end inline asm
	xor.b32  	%r875, %r1333, -2004318072;
	// begin inline asm
	lop3.b32 %r873, %r920, %r875, %r876, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r877, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r878, %r876, %r877;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r881, %r873, %r878;
	// end inline asm
	// begin inline asm
	lop3.b32 %r884, %r931, %r875, %r887, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r888, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r889, %r887, %r888;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r892, %r884, %r889;
	// end inline asm
	// begin inline asm
	mov.b32 %r922, {%rs204, %rs204};
	// end inline asm
	// begin inline asm
	mov.b32 %r933, {%rs206, %rs206};
	// end inline asm
	xor.b32  	%r921, %r1339, -2004318072;
	// begin inline asm
	lop3.b32 %r919, %r920, %r921, %r922, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r923, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r924, %r922, %r923;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r927, %r919, %r924;
	// end inline asm
	// begin inline asm
	lop3.b32 %r930, %r931, %r921, %r933, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r934, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r935, %r933, %r934;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r938, %r930, %r935;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3334;
    mov.b32 {%r2im, %r2re}, %r789;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r963, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3335;
    mov.b32 {%r2im, %r2re}, %r800;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r966, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3334;
    mov.b32 {%r2im, %r2re}, %r835;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r969, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3335;
    mov.b32 {%r2im, %r2re}, %r846;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r972, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3334;
    mov.b32 {%r2im, %r2re}, %r881;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r975, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3335;
    mov.b32 {%r2im, %r2re}, %r892;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r978, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3334;
    mov.b32 {%r2im, %r2re}, %r927;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r981, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3335;
    mov.b32 {%r2im, %r2re}, %r938;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r984, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1047, %r1050}, {%r247, %r244}, {%r963}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1056, %r1059}, {%r247, %r244}, {%r966}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1065, %r1068}, {%r247, %r244}, {%r969}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1074, %r1077}, {%r247, %r244}, {%r972}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1083, %r1086}, {%r247, %r244}, {%r975}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1092, %r1095}, {%r247, %r244}, {%r978}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1101, %r1104}, {%r247, %r244}, {%r981}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1110, %r1113}, {%r247, %r244}, {%r984}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1043, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1045, %r1043, %r1047;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1048, %r282, %r1050, %r1045;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1052, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1054, %r1052, %r1056;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1057, %r282, %r1059, %r1054;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1061, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1063, %r1061, %r1065;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1066, %r282, %r1068, %r1063;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1070, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1072, %r1070, %r1074;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1075, %r282, %r1077, %r1072;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1079, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1081, %r1079, %r1083;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1084, %r282, %r1086, %r1081;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1088, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1090, %r1088, %r1092;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1093, %r282, %r1095, %r1090;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1097, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1099, %r1097, %r1101;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1102, %r282, %r1104, %r1099;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1106, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1108, %r1106, %r1110;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1111, %r282, %r1113, %r1108;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1115, %r285, %r1050;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1118, %r282, %r1047, %r1115;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1122, %r285, %r1059;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1125, %r282, %r1056, %r1122;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1129, %r285, %r1068;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1132, %r282, %r1065, %r1129;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1136, %r285, %r1077;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1139, %r282, %r1074, %r1136;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1143, %r285, %r1086;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1146, %r282, %r1083, %r1143;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1150, %r285, %r1095;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1153, %r282, %r1092, %r1150;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1157, %r285, %r1104;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1160, %r282, %r1101, %r1157;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1164, %r285, %r1113;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1167, %r282, %r1110, %r1164;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1252, %r1253}, {%r315, %r309, %r312, %r306}, {%r1118, %r1048}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1260, %r1261}, {%r315, %r309, %r312, %r306}, {%r1125, %r1057}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1268, %r1269}, {%r315, %r309, %r312, %r306}, {%r1132, %r1066}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1276, %r1277}, {%r315, %r309, %r312, %r306}, {%r1139, %r1075}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1284, %r1285}, {%r315, %r309, %r312, %r306}, {%r1146, %r1084}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1292, %r1293}, {%r315, %r309, %r312, %r306}, {%r1153, %r1093}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1300, %r1301}, {%r315, %r309, %r312, %r306}, {%r1160, %r1102}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1308, %r1309}, {%r315, %r309, %r312, %r306}, {%r1167, %r1111}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	prmt.b32 %r1251, %r1252, %r1253, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1255, %r1252, %r1253, %r626;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1259, %r1260, %r1261, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1263, %r1260, %r1261, %r626;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1267, %r1268, %r1269, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1271, %r1268, %r1269, %r626;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1275, %r1276, %r1277, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1279, %r1276, %r1277, %r626;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1283, %r1284, %r1285, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1287, %r1284, %r1285, %r626;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1291, %r1292, %r1293, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1295, %r1292, %r1293, %r626;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1299, %r1300, %r1301, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1303, %r1300, %r1301, %r626;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1307, %r1308, %r1309, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1311, %r1308, %r1309, %r626;
	// end inline asm
	st.shared.u32 	[%rd6], %r1251;
	st.shared.u32 	[%rd7+33024], %r1255;
	st.shared.u32 	[%rd7+128], %r1259;
	st.shared.u32 	[%rd7+33152], %r1263;
	cvt.u16.u32 	%rs215, %r3366;
	and.b16  	%rs216, %rs215, 255;
	mul.lo.s16 	%rs217, %rs216, 171;
	shr.u16 	%rs218, %rs217, 10;
	mul.lo.s16 	%rs219, %rs218, 6;
	sub.s16 	%rs220, %rs215, %rs219;
	shl.b16 	%rs221, %rs220, 2;
	cvt.u32.u16 	%r1340, %rs221;
	and.b32  	%r1341, %r1340, 252;
	add.s32 	%r1342, %r78, %r1341;
	add.s32 	%r1343, %r1342, 1;
	shr.s32 	%r1344, %r1343, 31;
	shr.u32 	%r1345, %r1344, 30;
	add.s32 	%r1346, %r1343, %r1345;
	and.b32  	%r1347, %r1346, 67108860;
	sub.s32 	%r1348, %r1343, %r1347;
	shl.b32 	%r109, %r1348, 6;
	add.s32 	%r1349, %r63, %r109;
	mul.wide.s32 	%rd180, %r1349, 4;
	add.s64 	%rd182, %rd26, %rd180;
	st.shared.u32 	[%rd182], %r1267;
	add.s32 	%r1350, %r64, %r109;
	mul.wide.u32 	%rd183, %r1350, 4;
	add.s64 	%rd184, %rd26, %rd183;
	st.shared.u32 	[%rd184], %r1271;
	add.s32 	%r1351, %r65, %r109;
	mul.wide.s32 	%rd185, %r1351, 4;
	add.s64 	%rd186, %rd26, %rd185;
	st.shared.u32 	[%rd186], %r1275;
	add.s32 	%r1352, %r66, %r109;
	mul.wide.u32 	%rd187, %r1352, 4;
	add.s64 	%rd188, %rd26, %rd187;
	st.shared.u32 	[%rd188], %r1279;
	add.s32 	%r1353, %r1342, 2;
	shr.s32 	%r1354, %r1353, 31;
	shr.u32 	%r1355, %r1354, 30;
	add.s32 	%r1356, %r1353, %r1355;
	and.b32  	%r1357, %r1356, 67108860;
	sub.s32 	%r1358, %r1353, %r1357;
	shl.b32 	%r110, %r1358, 6;
	add.s32 	%r1359, %r63, %r110;
	mul.wide.s32 	%rd189, %r1359, 4;
	add.s64 	%rd190, %rd26, %rd189;
	st.shared.u32 	[%rd190], %r1283;
	add.s32 	%r1360, %r64, %r110;
	mul.wide.u32 	%rd191, %r1360, 4;
	add.s64 	%rd192, %rd26, %rd191;
	st.shared.u32 	[%rd192], %r1287;
	add.s32 	%r1361, %r65, %r110;
	mul.wide.s32 	%rd193, %r1361, 4;
	add.s64 	%rd194, %rd26, %rd193;
	st.shared.u32 	[%rd194], %r1291;
	add.s32 	%r1362, %r66, %r110;
	mul.wide.u32 	%rd195, %r1362, 4;
	add.s64 	%rd196, %rd26, %rd195;
	st.shared.u32 	[%rd196], %r1295;
	add.s32 	%r1363, %r1342, 3;
	shr.s32 	%r1364, %r1363, 31;
	shr.u32 	%r1365, %r1364, 30;
	add.s32 	%r1366, %r1363, %r1365;
	and.b32  	%r1367, %r1366, 67108860;
	sub.s32 	%r1368, %r1363, %r1367;
	shl.b32 	%r111, %r1368, 6;
	add.s32 	%r1369, %r63, %r111;
	mul.wide.s32 	%rd197, %r1369, 4;
	add.s64 	%rd198, %rd26, %rd197;
	st.shared.u32 	[%rd198], %r1299;
	add.s32 	%r1370, %r64, %r111;
	mul.wide.u32 	%rd199, %r1370, 4;
	add.s64 	%rd200, %rd26, %rd199;
	st.shared.u32 	[%rd200], %r1303;
	add.s32 	%r1371, %r65, %r111;
	mul.wide.s32 	%rd201, %r1371, 4;
	add.s64 	%rd202, %rd26, %rd201;
	st.shared.u32 	[%rd202], %r1307;
	add.s32 	%r1372, %r66, %r111;
	mul.wide.u32 	%rd203, %r1372, 4;
	add.s64 	%rd204, %rd26, %rd203;
	st.shared.u32 	[%rd204], %r1311;
	bar.sync 	0;
	mov.u32 	%r3371, %r3329;
	mov.u32 	%r3372, %r3329;
	mov.u32 	%r3373, %r3329;
	mov.u32 	%r3374, %r3329;
	@%p50 bra 	LBB0_42;
	bra.uni 	LBB0_19;
LBB0_42:                                // %oksrem7095
                                        //   in Loop: Header=BB0_18 Depth=2
	ld.shared.u32 	%r3371, [%rd8];
	ld.shared.u32 	%r3372, [%rd9+33024];
	ld.shared.u32 	%r3373, [%rd9+128];
	ld.shared.u32 	%r3374, [%rd9+33152];
LBB0_19:                                // %L17277
                                        //   in Loop: Header=BB0_18 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1405, %r1408}, {%r247, %r244}, {%r3371}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1414, %r1417}, {%r247, %r244}, {%r3372}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1423, %r1426}, {%r247, %r244}, {%r3373}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1432, %r1435}, {%r247, %r244}, {%r3374}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1401, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1403, %r1401, %r1405;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1406, %r282, %r1408, %r1403;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1410, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1412, %r1410, %r1414;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1415, %r282, %r1417, %r1412;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1419, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1421, %r1419, %r1423;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1424, %r282, %r1426, %r1421;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1428, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1430, %r1428, %r1432;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1433, %r282, %r1435, %r1430;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1437, %r285, %r1408;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1440, %r282, %r1405, %r1437;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1444, %r285, %r1417;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1447, %r282, %r1414, %r1444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1451, %r285, %r1426;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1454, %r282, %r1423, %r1451;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1458, %r285, %r1435;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1461, %r282, %r1432, %r1458;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1510, %r1506}, {%r315, %r309, %r312, %r306}, {%r1440, %r1406}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1526, %r1522}, {%r315, %r309, %r312, %r306}, {%r1447, %r1415}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1518, %r1514}, {%r315, %r309, %r312, %r306}, {%r1454, %r1424}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1534, %r1530}, {%r315, %r309, %r312, %r306}, {%r1461, %r1433}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1505, %r1506, %r1506, %r3370;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1509, %r1510, %r1510, %r1505;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1513, %r1514, %r1514, %r1509;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1517, %r1518, %r1518, %r1513;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1521, %r1522, %r1522, %r3369;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1525, %r1526, %r1526, %r1521;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1529, %r1530, %r1530, %r1525;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1533, %r1534, %r1534, %r1529;
	// end inline asm
	mov.u32 	%r3375, %r3329;
	mov.u32 	%r3376, %r3329;
	mov.u32 	%r3377, %r3329;
	mov.u32 	%r3378, %r3329;
	@%p50 bra 	LBB0_43;
	bra.uni 	LBB0_20;
LBB0_43:                                // %oksrem7630
                                        //   in Loop: Header=BB0_18 Depth=2
	add.s32 	%r1538, %r67, %r109;
	mul.wide.s32 	%rd205, %r1538, 4;
	add.s64 	%rd207, %rd26, %rd205;
	ld.shared.u32 	%r3375, [%rd207];
	add.s32 	%r1539, %r68, %r109;
	mul.wide.u32 	%rd208, %r1539, 4;
	add.s64 	%rd209, %rd26, %rd208;
	ld.shared.u32 	%r3376, [%rd209];
	add.s32 	%r1540, %r69, %r109;
	mul.wide.s32 	%rd210, %r1540, 4;
	add.s64 	%rd211, %rd26, %rd210;
	ld.shared.u32 	%r3377, [%rd211];
	add.s32 	%r1541, %r70, %r109;
	mul.wide.u32 	%rd212, %r1541, 4;
	add.s64 	%rd213, %rd26, %rd212;
	ld.shared.u32 	%r3378, [%rd213];
LBB0_20:                                // %L18500
                                        //   in Loop: Header=BB0_18 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1574, %r1577}, {%r247, %r244}, {%r3375}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1583, %r1586}, {%r247, %r244}, {%r3376}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1592, %r1595}, {%r247, %r244}, {%r3377}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1601, %r1604}, {%r247, %r244}, {%r3378}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1570, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1572, %r1570, %r1574;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1575, %r282, %r1577, %r1572;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1579, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1581, %r1579, %r1583;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1584, %r282, %r1586, %r1581;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1588, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1590, %r1588, %r1592;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1593, %r282, %r1595, %r1590;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1597, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1599, %r1597, %r1601;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1602, %r282, %r1604, %r1599;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1606, %r285, %r1577;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1609, %r282, %r1574, %r1606;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1613, %r285, %r1586;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1616, %r282, %r1583, %r1613;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1620, %r285, %r1595;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1623, %r282, %r1592, %r1620;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1627, %r285, %r1604;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1630, %r282, %r1601, %r1627;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1679, %r1675}, {%r315, %r309, %r312, %r306}, {%r1609, %r1575}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1695, %r1691}, {%r315, %r309, %r312, %r306}, {%r1616, %r1584}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1687, %r1683}, {%r315, %r309, %r312, %r306}, {%r1623, %r1593}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1703, %r1699}, {%r315, %r309, %r312, %r306}, {%r1630, %r1602}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1674, %r1675, %r1675, %r1517;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1678, %r1679, %r1679, %r1674;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1682, %r1683, %r1683, %r1678;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1686, %r1687, %r1687, %r1682;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1690, %r1691, %r1691, %r1533;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1694, %r1695, %r1695, %r1690;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1698, %r1699, %r1699, %r1694;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1702, %r1703, %r1703, %r1698;
	// end inline asm
	mov.u32 	%r3379, %r3329;
	mov.u32 	%r3380, %r3329;
	mov.u32 	%r3381, %r3329;
	mov.u32 	%r3382, %r3329;
	@%p50 bra 	LBB0_44;
	bra.uni 	LBB0_21;
LBB0_44:                                // %oksrem8165
                                        //   in Loop: Header=BB0_18 Depth=2
	add.s32 	%r1707, %r67, %r110;
	mul.wide.s32 	%rd214, %r1707, 4;
	add.s64 	%rd216, %rd26, %rd214;
	ld.shared.u32 	%r3379, [%rd216];
	add.s32 	%r1708, %r68, %r110;
	mul.wide.u32 	%rd217, %r1708, 4;
	add.s64 	%rd218, %rd26, %rd217;
	ld.shared.u32 	%r3380, [%rd218];
	add.s32 	%r1709, %r69, %r110;
	mul.wide.s32 	%rd219, %r1709, 4;
	add.s64 	%rd220, %rd26, %rd219;
	ld.shared.u32 	%r3381, [%rd220];
	add.s32 	%r1710, %r70, %r110;
	mul.wide.u32 	%rd221, %r1710, 4;
	add.s64 	%rd222, %rd26, %rd221;
	ld.shared.u32 	%r3382, [%rd222];
LBB0_21:                                // %L19723
                                        //   in Loop: Header=BB0_18 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1743, %r1746}, {%r247, %r244}, {%r3379}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1752, %r1755}, {%r247, %r244}, {%r3380}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1761, %r1764}, {%r247, %r244}, {%r3381}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1770, %r1773}, {%r247, %r244}, {%r3382}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1739, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1741, %r1739, %r1743;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1744, %r282, %r1746, %r1741;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1748, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1750, %r1748, %r1752;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1753, %r282, %r1755, %r1750;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1757, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1759, %r1757, %r1761;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1762, %r282, %r1764, %r1759;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1766, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1768, %r1766, %r1770;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1771, %r282, %r1773, %r1768;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1775, %r285, %r1746;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1778, %r282, %r1743, %r1775;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1782, %r285, %r1755;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1785, %r282, %r1752, %r1782;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1789, %r285, %r1764;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1792, %r282, %r1761, %r1789;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1796, %r285, %r1773;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1799, %r282, %r1770, %r1796;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1848, %r1844}, {%r315, %r309, %r312, %r306}, {%r1778, %r1744}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1864, %r1860}, {%r315, %r309, %r312, %r306}, {%r1785, %r1753}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1856, %r1852}, {%r315, %r309, %r312, %r306}, {%r1792, %r1762}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1872, %r1868}, {%r315, %r309, %r312, %r306}, {%r1799, %r1771}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1843, %r1844, %r1844, %r1686;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1847, %r1848, %r1848, %r1843;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1851, %r1852, %r1852, %r1847;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1855, %r1856, %r1856, %r1851;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1859, %r1860, %r1860, %r1702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1863, %r1864, %r1864, %r1859;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1867, %r1868, %r1868, %r1863;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1871, %r1872, %r1872, %r1867;
	// end inline asm
	mov.u32 	%r3383, %r3329;
	mov.u32 	%r3384, %r3329;
	mov.u32 	%r3385, %r3329;
	mov.u32 	%r3386, %r3329;
	@%p50 bra 	LBB0_45;
	bra.uni 	LBB0_22;
LBB0_45:                                // %oksrem8700
                                        //   in Loop: Header=BB0_18 Depth=2
	add.s32 	%r1876, %r67, %r111;
	mul.wide.s32 	%rd223, %r1876, 4;
	add.s64 	%rd225, %rd26, %rd223;
	ld.shared.u32 	%r3383, [%rd225];
	add.s32 	%r1877, %r68, %r111;
	mul.wide.u32 	%rd226, %r1877, 4;
	add.s64 	%rd227, %rd26, %rd226;
	ld.shared.u32 	%r3384, [%rd227];
	add.s32 	%r1878, %r69, %r111;
	mul.wide.s32 	%rd228, %r1878, 4;
	add.s64 	%rd229, %rd26, %rd228;
	ld.shared.u32 	%r3385, [%rd229];
	add.s32 	%r1879, %r70, %r111;
	mul.wide.u32 	%rd230, %r1879, 4;
	add.s64 	%rd231, %rd26, %rd230;
	ld.shared.u32 	%r3386, [%rd231];
LBB0_22:                                // %L20946
                                        //   in Loop: Header=BB0_18 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1912, %r1915}, {%r247, %r244}, {%r3383}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1921, %r1924}, {%r247, %r244}, {%r3384}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1930, %r1933}, {%r247, %r244}, {%r3385}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1939, %r1942}, {%r247, %r244}, {%r3386}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1908, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1910, %r1908, %r1912;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1913, %r282, %r1915, %r1910;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1917, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1919, %r1917, %r1921;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1922, %r282, %r1924, %r1919;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1926, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1928, %r1926, %r1930;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1931, %r282, %r1933, %r1928;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1935, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1937, %r1935, %r1939;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1940, %r282, %r1942, %r1937;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1944, %r285, %r1915;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1947, %r282, %r1912, %r1944;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1951, %r285, %r1924;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1954, %r282, %r1921, %r1951;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1958, %r285, %r1933;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1961, %r282, %r1930, %r1958;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1965, %r285, %r1942;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1968, %r282, %r1939, %r1965;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2017, %r2013}, {%r315, %r309, %r312, %r306}, {%r1947, %r1913}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2033, %r2029}, {%r315, %r309, %r312, %r306}, {%r1954, %r1922}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2025, %r2021}, {%r315, %r309, %r312, %r306}, {%r1961, %r1931}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2041, %r2037}, {%r315, %r309, %r312, %r306}, {%r1968, %r1940}, {%r3329, %r3329};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2012, %r2013, %r2013, %r1855;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2016, %r2017, %r2017, %r2012;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2020, %r2021, %r2021, %r2016;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3370, %r2025, %r2025, %r2020;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2028, %r2029, %r2029, %r1871;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2032, %r2033, %r2033, %r2028;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2036, %r2037, %r2037, %r2032;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3369, %r2041, %r2041, %r2036;
	// end inline asm
	add.s32 	%r3367, %r3367, 4;
	setp.ne.s32 	%p60, %r3367, 40;
	@%p60 bra 	LBB0_26;
// %bb.23:                              // %L21092
                                        //   in Loop: Header=BB0_18 Depth=2
	@%p26 bra 	LBB0_25;
// %bb.24:                              // %L21151
                                        //   in Loop: Header=BB0_18 Depth=2
	mul.lo.s32 	%r2044, %r3368, 96768;
	add.s32 	%r2045, %r71, %r2044;
	mul.wide.u32 	%rd232, %r2045, 4;
	add.s64 	%rd233, %rd4, %rd232;
	st.global.u32 	[%rd233], %r3370;
	add.s32 	%r2046, %r72, %r2044;
	mul.wide.u32 	%rd234, %r2046, 4;
	add.s64 	%rd235, %rd4, %rd234;
	st.global.u32 	[%rd235], %r3369;
	bra.uni 	LBB0_25;
LBB0_27:                                // %L21413.preheader
                                        //   in Loop: Header=BB0_16 Depth=1
	add.s32 	%r144, %r78, 24;
	mov.u32 	%r2049, 0;
	mov.u32 	%r3391, 12;
	mov.u32 	%r3392, %r2049;
	bra.uni 	LBB0_28;
LBB0_35:                                // %L31388
                                        //   in Loop: Header=BB0_28 Depth=2
	add.s32 	%r3368, %r3368, 1;
	mov.u32 	%r3369, 0;
	mov.u32 	%r3370, %r3369;
	mov.u32 	%r3367, %r3369;
LBB0_36:                                // %L31389
                                        //   in Loop: Header=BB0_28 Depth=2
	bar.sync 	0;
	add.s32 	%r3392, %r3392, 1;
	add.s32 	%r3391, %r3391, -4;
	setp.eq.s32 	%p75, %r3391, -12;
	@%p75 bra 	LBB0_37;
LBB0_28:                                // %L21413
                                        //   Parent Loop BB0_16 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p64, %r3391, 12;
	selp.b32 	%r2587, %r3341, 0, %p64;
	setp.eq.s32 	%p65, %r3391, 8;
	selp.b32 	%r2588, %r3345, %r2587, %p65;
	setp.eq.s32 	%p66, %r3391, 4;
	selp.b32 	%r2589, %r3349, %r2588, %p66;
	setp.eq.s32 	%p67, %r3391, 0;
	selp.b32 	%r2590, %r3353, %r2589, %p67;
	setp.eq.s32 	%p68, %r3391, -4;
	selp.b32 	%r2591, %r3357, %r2590, %p68;
	setp.eq.s32 	%p69, %r3391, -8;
	selp.b32 	%r2592, %r3361, %r2591, %p69;
	selp.b32 	%r2593, %r3342, 0, %p64;
	selp.b32 	%r2594, %r3346, %r2593, %p65;
	selp.b32 	%r2595, %r3350, %r2594, %p66;
	selp.b32 	%r2596, %r3354, %r2595, %p67;
	selp.b32 	%r2597, %r3358, %r2596, %p68;
	selp.b32 	%r2598, %r3362, %r2597, %p69;
	selp.b32 	%r2599, %r3343, 0, %p64;
	selp.b32 	%r2600, %r3347, %r2599, %p65;
	selp.b32 	%r2601, %r3351, %r2600, %p66;
	selp.b32 	%r2602, %r3355, %r2601, %p67;
	selp.b32 	%r2603, %r3359, %r2602, %p68;
	selp.b32 	%r2604, %r3363, %r2603, %p69;
	selp.b32 	%r2605, %r3344, 0, %p64;
	selp.b32 	%r2606, %r3348, %r2605, %p65;
	selp.b32 	%r2607, %r3352, %r2606, %p66;
	selp.b32 	%r2608, %r3356, %r2607, %p67;
	selp.b32 	%r2609, %r3360, %r2608, %p68;
	selp.b32 	%r2610, %r3364, %r2609, %p69;
	// begin inline asm
	mov.b32 %r2077, {%rs204, %rs204};
	// end inline asm
	// begin inline asm
	mov.b32 %r2088, {%rs206, %rs206};
	// end inline asm
	shr.u32 	%r2611, %r2592, 8;
	xor.b32  	%r2087, %r2611, 8947848;
	// begin inline asm
	lop3.b32 %r2074, %r920, %r2087, %r2077, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2078, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2079, %r2077, %r2078;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2082, %r2074, %r2079;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2085, %r931, %r2087, %r2088, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2089, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2090, %r2088, %r2089;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2093, %r2085, %r2090;
	// end inline asm
	// begin inline asm
	mov.b32 %r2123, {%rs204, %rs204};
	// end inline asm
	// begin inline asm
	mov.b32 %r2134, {%rs206, %rs206};
	// end inline asm
	shr.u32 	%r2612, %r2598, 8;
	xor.b32  	%r2133, %r2612, 8947848;
	// begin inline asm
	lop3.b32 %r2120, %r920, %r2133, %r2123, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2124, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2125, %r2123, %r2124;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2128, %r2120, %r2125;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2131, %r931, %r2133, %r2134, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2135, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2136, %r2134, %r2135;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2139, %r2131, %r2136;
	// end inline asm
	// begin inline asm
	mov.b32 %r2169, {%rs204, %rs204};
	// end inline asm
	// begin inline asm
	mov.b32 %r2180, {%rs206, %rs206};
	// end inline asm
	shr.u32 	%r2613, %r2604, 8;
	xor.b32  	%r2179, %r2613, 8947848;
	// begin inline asm
	lop3.b32 %r2166, %r920, %r2179, %r2169, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2170, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2171, %r2169, %r2170;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2174, %r2166, %r2171;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2177, %r931, %r2179, %r2180, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2181, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2182, %r2180, %r2181;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2185, %r2177, %r2182;
	// end inline asm
	// begin inline asm
	mov.b32 %r2215, {%rs204, %rs204};
	// end inline asm
	// begin inline asm
	mov.b32 %r2226, {%rs206, %rs206};
	// end inline asm
	shr.u32 	%r2614, %r2610, 8;
	xor.b32  	%r2225, %r2614, 8947848;
	// begin inline asm
	lop3.b32 %r2212, %r920, %r2225, %r2215, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2216, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2217, %r2215, %r2216;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2220, %r2212, %r2217;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2223, %r931, %r2225, %r2226, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2227, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2228, %r2226, %r2227;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2231, %r2223, %r2228;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3334;
    mov.b32 {%r2im, %r2re}, %r2082;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2234, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3335;
    mov.b32 {%r2im, %r2re}, %r2093;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2237, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3334;
    mov.b32 {%r2im, %r2re}, %r2128;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2240, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3335;
    mov.b32 {%r2im, %r2re}, %r2139;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2243, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3334;
    mov.b32 {%r2im, %r2re}, %r2174;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2246, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3335;
    mov.b32 {%r2im, %r2re}, %r2185;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2249, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3334;
    mov.b32 {%r2im, %r2re}, %r2220;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2252, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3335;
    mov.b32 {%r2im, %r2re}, %r2231;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2255, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2318, %r2321}, {%r247, %r244}, {%r2234}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2327, %r2330}, {%r247, %r244}, {%r2237}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2336, %r2339}, {%r247, %r244}, {%r2240}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2345, %r2348}, {%r247, %r244}, {%r2243}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2354, %r2357}, {%r247, %r244}, {%r2246}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2363, %r2366}, {%r247, %r244}, {%r2249}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2372, %r2375}, {%r247, %r244}, {%r2252}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2381, %r2384}, {%r247, %r244}, {%r2255}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2314, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2316, %r2314, %r2318;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2319, %r282, %r2321, %r2316;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2323, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2325, %r2323, %r2327;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2328, %r282, %r2330, %r2325;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2332, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2334, %r2332, %r2336;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2337, %r282, %r2339, %r2334;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2341, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2343, %r2341, %r2345;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2346, %r282, %r2348, %r2343;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2350, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2352, %r2350, %r2354;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2355, %r282, %r2357, %r2352;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2359, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2361, %r2359, %r2363;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2364, %r282, %r2366, %r2361;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2368, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2370, %r2368, %r2372;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2373, %r282, %r2375, %r2370;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2377, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2379, %r2377, %r2381;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2382, %r282, %r2384, %r2379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2386, %r285, %r2321;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2389, %r282, %r2318, %r2386;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2393, %r285, %r2330;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2396, %r282, %r2327, %r2393;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2400, %r285, %r2339;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2403, %r282, %r2336, %r2400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2407, %r285, %r2348;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2410, %r282, %r2345, %r2407;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2414, %r285, %r2357;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2417, %r282, %r2354, %r2414;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2421, %r285, %r2366;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2424, %r282, %r2363, %r2421;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2428, %r285, %r2375;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2431, %r282, %r2372, %r2428;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2435, %r285, %r2384;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2438, %r282, %r2381, %r2435;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2523, %r2524}, {%r315, %r309, %r312, %r306}, {%r2389, %r2319}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2531, %r2532}, {%r315, %r309, %r312, %r306}, {%r2396, %r2328}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2539, %r2540}, {%r315, %r309, %r312, %r306}, {%r2403, %r2337}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2547, %r2548}, {%r315, %r309, %r312, %r306}, {%r2410, %r2346}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2555, %r2556}, {%r315, %r309, %r312, %r306}, {%r2417, %r2355}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2563, %r2564}, {%r315, %r309, %r312, %r306}, {%r2424, %r2364}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2571, %r2572}, {%r315, %r309, %r312, %r306}, {%r2431, %r2373}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2579, %r2580}, {%r315, %r309, %r312, %r306}, {%r2438, %r2382}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	prmt.b32 %r2522, %r2523, %r2524, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2526, %r2523, %r2524, %r626;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2530, %r2531, %r2532, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2534, %r2531, %r2532, %r626;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2538, %r2539, %r2540, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2542, %r2539, %r2540, %r626;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2546, %r2547, %r2548, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2550, %r2547, %r2548, %r626;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2554, %r2555, %r2556, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2558, %r2555, %r2556, %r626;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2562, %r2563, %r2564, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2566, %r2563, %r2564, %r626;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2570, %r2571, %r2572, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2574, %r2571, %r2572, %r626;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2578, %r2579, %r2580, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2582, %r2579, %r2580, %r626;
	// end inline asm
	st.shared.u32 	[%rd6], %r2522;
	st.shared.u32 	[%rd7+33024], %r2526;
	st.shared.u32 	[%rd7+128], %r2530;
	st.shared.u32 	[%rd7+33152], %r2534;
	cvt.u16.u32 	%rs270, %r3392;
	and.b16  	%rs271, %rs270, 255;
	mul.lo.s16 	%rs272, %rs271, 171;
	shr.u16 	%rs273, %rs272, 10;
	mul.lo.s16 	%rs274, %rs273, 6;
	sub.s16 	%rs275, %rs270, %rs274;
	shl.b16 	%rs276, %rs275, 2;
	cvt.u32.u16 	%r2615, %rs276;
	and.b32  	%r2616, %r2615, 252;
	add.s32 	%r2617, %r144, %r2616;
	add.s32 	%r2618, %r2617, 1;
	shr.s32 	%r2619, %r2618, 31;
	shr.u32 	%r2620, %r2619, 30;
	add.s32 	%r2621, %r2618, %r2620;
	and.b32  	%r2622, %r2621, 67108860;
	sub.s32 	%r2623, %r2618, %r2622;
	shl.b32 	%r151, %r2623, 6;
	add.s32 	%r2624, %r63, %r151;
	mul.wide.s32 	%rd236, %r2624, 4;
	add.s64 	%rd238, %rd26, %rd236;
	st.shared.u32 	[%rd238], %r2538;
	add.s32 	%r2625, %r64, %r151;
	mul.wide.u32 	%rd239, %r2625, 4;
	add.s64 	%rd240, %rd26, %rd239;
	st.shared.u32 	[%rd240], %r2542;
	add.s32 	%r2626, %r65, %r151;
	mul.wide.s32 	%rd241, %r2626, 4;
	add.s64 	%rd242, %rd26, %rd241;
	st.shared.u32 	[%rd242], %r2546;
	add.s32 	%r2627, %r66, %r151;
	mul.wide.u32 	%rd243, %r2627, 4;
	add.s64 	%rd244, %rd26, %rd243;
	st.shared.u32 	[%rd244], %r2550;
	add.s32 	%r2628, %r2617, 2;
	shr.s32 	%r2629, %r2628, 31;
	shr.u32 	%r2630, %r2629, 30;
	add.s32 	%r2631, %r2628, %r2630;
	and.b32  	%r2632, %r2631, 67108860;
	sub.s32 	%r2633, %r2628, %r2632;
	shl.b32 	%r152, %r2633, 6;
	add.s32 	%r2634, %r63, %r152;
	mul.wide.s32 	%rd245, %r2634, 4;
	add.s64 	%rd246, %rd26, %rd245;
	st.shared.u32 	[%rd246], %r2554;
	add.s32 	%r2635, %r64, %r152;
	mul.wide.u32 	%rd247, %r2635, 4;
	add.s64 	%rd248, %rd26, %rd247;
	st.shared.u32 	[%rd248], %r2558;
	add.s32 	%r2636, %r65, %r152;
	mul.wide.s32 	%rd249, %r2636, 4;
	add.s64 	%rd250, %rd26, %rd249;
	st.shared.u32 	[%rd250], %r2562;
	add.s32 	%r2637, %r66, %r152;
	mul.wide.u32 	%rd251, %r2637, 4;
	add.s64 	%rd252, %rd26, %rd251;
	st.shared.u32 	[%rd252], %r2566;
	add.s32 	%r2638, %r2617, 3;
	shr.s32 	%r2639, %r2638, 31;
	shr.u32 	%r2640, %r2639, 30;
	add.s32 	%r2641, %r2638, %r2640;
	and.b32  	%r2642, %r2641, 67108860;
	sub.s32 	%r2643, %r2638, %r2642;
	shl.b32 	%r153, %r2643, 6;
	add.s32 	%r2644, %r63, %r153;
	mul.wide.s32 	%rd253, %r2644, 4;
	add.s64 	%rd254, %rd26, %rd253;
	st.shared.u32 	[%rd254], %r2570;
	add.s32 	%r2645, %r64, %r153;
	mul.wide.u32 	%rd255, %r2645, 4;
	add.s64 	%rd256, %rd26, %rd255;
	st.shared.u32 	[%rd256], %r2574;
	add.s32 	%r2646, %r65, %r153;
	mul.wide.s32 	%rd257, %r2646, 4;
	add.s64 	%rd258, %rd26, %rd257;
	st.shared.u32 	[%rd258], %r2578;
	add.s32 	%r2647, %r66, %r153;
	mul.wide.u32 	%rd259, %r2647, 4;
	add.s64 	%rd260, %rd26, %rd259;
	st.shared.u32 	[%rd260], %r2582;
	bar.sync 	0;
	mov.u32 	%r3397, %r2049;
	mov.u32 	%r3398, %r2049;
	mov.u32 	%r3399, %r2049;
	mov.u32 	%r3400, %r2049;
	@%p50 bra 	LBB0_46;
	bra.uni 	LBB0_29;
LBB0_46:                                // %oksrem11493
                                        //   in Loop: Header=BB0_28 Depth=2
	ld.shared.u32 	%r3400, [%rd8];
	ld.shared.u32 	%r3399, [%rd9+33024];
	ld.shared.u32 	%r3398, [%rd9+128];
	ld.shared.u32 	%r3397, [%rd9+33152];
LBB0_29:                                // %L27282
                                        //   in Loop: Header=BB0_28 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2680, %r2683}, {%r247, %r244}, {%r3400}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2689, %r2692}, {%r247, %r244}, {%r3399}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2698, %r2701}, {%r247, %r244}, {%r3398}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2707, %r2710}, {%r247, %r244}, {%r3397}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2676, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2678, %r2676, %r2680;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2681, %r282, %r2683, %r2678;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2685, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2687, %r2685, %r2689;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2690, %r282, %r2692, %r2687;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2694, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2696, %r2694, %r2698;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2699, %r282, %r2701, %r2696;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2703, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2705, %r2703, %r2707;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2708, %r282, %r2710, %r2705;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2712, %r285, %r2683;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2715, %r282, %r2680, %r2712;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2719, %r285, %r2692;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2722, %r282, %r2689, %r2719;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2726, %r285, %r2701;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2729, %r282, %r2698, %r2726;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2733, %r285, %r2710;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2736, %r282, %r2707, %r2733;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2785, %r2781}, {%r315, %r309, %r312, %r306}, {%r2715, %r2681}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2801, %r2797}, {%r315, %r309, %r312, %r306}, {%r2722, %r2690}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2793, %r2789}, {%r315, %r309, %r312, %r306}, {%r2729, %r2699}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2809, %r2805}, {%r315, %r309, %r312, %r306}, {%r2736, %r2708}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2780, %r2781, %r2781, %r3370;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2784, %r2785, %r2785, %r2780;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2788, %r2789, %r2789, %r2784;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2792, %r2793, %r2793, %r2788;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2796, %r2797, %r2797, %r3369;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2800, %r2801, %r2801, %r2796;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2804, %r2805, %r2805, %r2800;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2808, %r2809, %r2809, %r2804;
	// end inline asm
	mov.u32 	%r3401, %r2049;
	mov.u32 	%r3402, %r2049;
	mov.u32 	%r3403, %r2049;
	mov.u32 	%r3404, %r2049;
	@%p50 bra 	LBB0_47;
	bra.uni 	LBB0_30;
LBB0_47:                                // %oksrem12028
                                        //   in Loop: Header=BB0_28 Depth=2
	add.s32 	%r2813, %r67, %r151;
	mul.wide.s32 	%rd261, %r2813, 4;
	add.s64 	%rd263, %rd26, %rd261;
	ld.shared.u32 	%r3404, [%rd263];
	add.s32 	%r2814, %r68, %r151;
	mul.wide.u32 	%rd264, %r2814, 4;
	add.s64 	%rd265, %rd26, %rd264;
	ld.shared.u32 	%r3403, [%rd265];
	add.s32 	%r2815, %r69, %r151;
	mul.wide.s32 	%rd266, %r2815, 4;
	add.s64 	%rd267, %rd26, %rd266;
	ld.shared.u32 	%r3402, [%rd267];
	add.s32 	%r2816, %r70, %r151;
	mul.wide.u32 	%rd268, %r2816, 4;
	add.s64 	%rd269, %rd26, %rd268;
	ld.shared.u32 	%r3401, [%rd269];
LBB0_30:                                // %L28505
                                        //   in Loop: Header=BB0_28 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2849, %r2852}, {%r247, %r244}, {%r3404}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2858, %r2861}, {%r247, %r244}, {%r3403}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2867, %r2870}, {%r247, %r244}, {%r3402}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2876, %r2879}, {%r247, %r244}, {%r3401}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2845, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2847, %r2845, %r2849;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2850, %r282, %r2852, %r2847;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2854, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2856, %r2854, %r2858;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2859, %r282, %r2861, %r2856;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2863, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2865, %r2863, %r2867;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2868, %r282, %r2870, %r2865;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2872, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2874, %r2872, %r2876;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2877, %r282, %r2879, %r2874;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2881, %r285, %r2852;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2884, %r282, %r2849, %r2881;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2888, %r285, %r2861;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2891, %r282, %r2858, %r2888;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2895, %r285, %r2870;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2898, %r282, %r2867, %r2895;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2902, %r285, %r2879;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2905, %r282, %r2876, %r2902;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2954, %r2950}, {%r315, %r309, %r312, %r306}, {%r2884, %r2850}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2970, %r2966}, {%r315, %r309, %r312, %r306}, {%r2891, %r2859}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2962, %r2958}, {%r315, %r309, %r312, %r306}, {%r2898, %r2868}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2978, %r2974}, {%r315, %r309, %r312, %r306}, {%r2905, %r2877}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2949, %r2950, %r2950, %r2792;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2953, %r2954, %r2954, %r2949;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2957, %r2958, %r2958, %r2953;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2961, %r2962, %r2962, %r2957;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2965, %r2966, %r2966, %r2808;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2969, %r2970, %r2970, %r2965;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2973, %r2974, %r2974, %r2969;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2977, %r2978, %r2978, %r2973;
	// end inline asm
	mov.u32 	%r3405, %r2049;
	mov.u32 	%r3406, %r2049;
	mov.u32 	%r3407, %r2049;
	mov.u32 	%r3408, %r2049;
	@%p50 bra 	LBB0_48;
	bra.uni 	LBB0_31;
LBB0_48:                                // %oksrem12563
                                        //   in Loop: Header=BB0_28 Depth=2
	add.s32 	%r2982, %r67, %r152;
	mul.wide.s32 	%rd270, %r2982, 4;
	add.s64 	%rd272, %rd26, %rd270;
	ld.shared.u32 	%r3408, [%rd272];
	add.s32 	%r2983, %r68, %r152;
	mul.wide.u32 	%rd273, %r2983, 4;
	add.s64 	%rd274, %rd26, %rd273;
	ld.shared.u32 	%r3407, [%rd274];
	add.s32 	%r2984, %r69, %r152;
	mul.wide.s32 	%rd275, %r2984, 4;
	add.s64 	%rd276, %rd26, %rd275;
	ld.shared.u32 	%r3406, [%rd276];
	add.s32 	%r2985, %r70, %r152;
	mul.wide.u32 	%rd277, %r2985, 4;
	add.s64 	%rd278, %rd26, %rd277;
	ld.shared.u32 	%r3405, [%rd278];
LBB0_31:                                // %L29728
                                        //   in Loop: Header=BB0_28 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3018, %r3021}, {%r247, %r244}, {%r3408}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3027, %r3030}, {%r247, %r244}, {%r3407}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3036, %r3039}, {%r247, %r244}, {%r3406}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3045, %r3048}, {%r247, %r244}, {%r3405}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3014, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3016, %r3014, %r3018;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3019, %r282, %r3021, %r3016;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3023, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3025, %r3023, %r3027;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3028, %r282, %r3030, %r3025;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3032, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3034, %r3032, %r3036;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3037, %r282, %r3039, %r3034;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3041, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3043, %r3041, %r3045;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3046, %r282, %r3048, %r3043;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3050, %r285, %r3021;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3053, %r282, %r3018, %r3050;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3057, %r285, %r3030;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3060, %r282, %r3027, %r3057;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3064, %r285, %r3039;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3067, %r282, %r3036, %r3064;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3071, %r285, %r3048;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3074, %r282, %r3045, %r3071;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3123, %r3119}, {%r315, %r309, %r312, %r306}, {%r3053, %r3019}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3139, %r3135}, {%r315, %r309, %r312, %r306}, {%r3060, %r3028}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3131, %r3127}, {%r315, %r309, %r312, %r306}, {%r3067, %r3037}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3147, %r3143}, {%r315, %r309, %r312, %r306}, {%r3074, %r3046}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3118, %r3119, %r3119, %r2961;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3122, %r3123, %r3123, %r3118;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3126, %r3127, %r3127, %r3122;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3130, %r3131, %r3131, %r3126;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3134, %r3135, %r3135, %r2977;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3138, %r3139, %r3139, %r3134;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3142, %r3143, %r3143, %r3138;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3146, %r3147, %r3147, %r3142;
	// end inline asm
	mov.u32 	%r3409, %r2049;
	mov.u32 	%r3410, %r2049;
	mov.u32 	%r3411, %r2049;
	mov.u32 	%r3412, %r2049;
	@%p50 bra 	LBB0_49;
	bra.uni 	LBB0_32;
LBB0_49:                                // %oksrem13098
                                        //   in Loop: Header=BB0_28 Depth=2
	add.s32 	%r3151, %r67, %r153;
	mul.wide.s32 	%rd279, %r3151, 4;
	add.s64 	%rd281, %rd26, %rd279;
	ld.shared.u32 	%r3412, [%rd281];
	add.s32 	%r3152, %r68, %r153;
	mul.wide.u32 	%rd282, %r3152, 4;
	add.s64 	%rd283, %rd26, %rd282;
	ld.shared.u32 	%r3411, [%rd283];
	add.s32 	%r3153, %r69, %r153;
	mul.wide.s32 	%rd284, %r3153, 4;
	add.s64 	%rd285, %rd26, %rd284;
	ld.shared.u32 	%r3410, [%rd285];
	add.s32 	%r3154, %r70, %r153;
	mul.wide.u32 	%rd286, %r3154, 4;
	add.s64 	%rd287, %rd26, %rd286;
	ld.shared.u32 	%r3409, [%rd287];
LBB0_32:                                // %L30951
                                        //   in Loop: Header=BB0_28 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3187, %r3190}, {%r247, %r244}, {%r3412}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3196, %r3199}, {%r247, %r244}, {%r3411}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3205, %r3208}, {%r247, %r244}, {%r3410}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3214, %r3217}, {%r247, %r244}, {%r3409}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3183, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3185, %r3183, %r3187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3188, %r282, %r3190, %r3185;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3192, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3194, %r3192, %r3196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3197, %r282, %r3199, %r3194;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3201, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3203, %r3201, %r3205;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3206, %r282, %r3208, %r3203;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3210, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3212, %r3210, %r3214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3215, %r282, %r3217, %r3212;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3219, %r285, %r3190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3222, %r282, %r3187, %r3219;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3226, %r285, %r3199;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3229, %r282, %r3196, %r3226;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3233, %r285, %r3208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3236, %r282, %r3205, %r3233;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3240, %r285, %r3217;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3243, %r282, %r3214, %r3240;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3292, %r3288}, {%r315, %r309, %r312, %r306}, {%r3222, %r3188}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3308, %r3304}, {%r315, %r309, %r312, %r306}, {%r3229, %r3197}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3300, %r3296}, {%r315, %r309, %r312, %r306}, {%r3236, %r3206}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3316, %r3312}, {%r315, %r309, %r312, %r306}, {%r3243, %r3215}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3287, %r3288, %r3288, %r3130;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3291, %r3292, %r3292, %r3287;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3295, %r3296, %r3296, %r3291;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3370, %r3300, %r3300, %r3295;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3303, %r3304, %r3304, %r3146;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3307, %r3308, %r3308, %r3303;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3311, %r3312, %r3312, %r3307;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3369, %r3316, %r3316, %r3311;
	// end inline asm
	add.s32 	%r3367, %r3367, 4;
	setp.ne.s32 	%p73, %r3367, 40;
	@%p73 bra 	LBB0_36;
// %bb.33:                              // %L31097
                                        //   in Loop: Header=BB0_28 Depth=2
	@%p26 bra 	LBB0_35;
// %bb.34:                              // %L31156
                                        //   in Loop: Header=BB0_28 Depth=2
	mul.lo.s32 	%r3319, %r3368, 96768;
	add.s32 	%r3320, %r71, %r3319;
	mul.wide.u32 	%rd288, %r3320, 4;
	add.s64 	%rd289, %rd4, %rd288;
	st.global.u32 	[%rd289], %r3370;
	add.s32 	%r3321, %r72, %r3319;
	mul.wide.u32 	%rd290, %r3321, 4;
	add.s64 	%rd291, %rd4, %rd290;
	st.global.u32 	[%rd291], %r3369;
	bra.uni 	LBB0_35;
LBB0_38:                                // %guard_pass14638
	@%p26 bra 	LBB0_40;
// %bb.39:                              // %L31490
	mul.lo.s32 	%r3323, %r3368, 96768;
	add.s32 	%r3324, %r71, %r3323;
	mul.wide.u32 	%rd292, %r3324, 4;
	add.s64 	%rd293, %rd4, %rd292;
	st.global.u32 	[%rd293], %r3370;
	add.s32 	%r3325, %r72, %r3323;
	mul.wide.u32 	%rd294, %r3325, 4;
	add.s64 	%rd295, %rd4, %rd294;
	st.global.u32 	[%rd295], %r3369;
LBB0_40:                                // %L31722
	mov.u32 	%r3326, 0;
	st.global.u32 	[%rd5], %r3326;
	ret;
LBB0_1:                                 // %L8
	ld.param.u64 	%rd11, [_Z15julia_frb_1046713CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EES_IS2_Li1ELi1EES_IS2_Li1ELi1EES_IS1_Li1ELi1EE_param_0];
	mov.u64 	%rd16, exception1;
	cvta.global.u64 	%rd17, %rd16;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd17;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd11;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
