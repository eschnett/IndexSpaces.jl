CHORD FRB beamformer
Compiling kernel...
// PTX CompilerJob of kernel #frb(CuDeviceVector{Int32, 1}, CuDeviceVector{Float16x2, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Float16x2, 1}, CuDeviceVector{Int32, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Float16x2, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 7.1
.target sm_86
.address_size 64

	// .globl	_Z14julia_frb_619313CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS2_Li1ELi1EES_IS1_Li1ELi1EE // -- Begin function _Z14julia_frb_619313CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS2_Li1ELi1EES_IS1_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[8]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z14julia_frb_619313CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS2_Li1ELi1EES_IS1_Li1ELi1EE
.visible .entry _Z14julia_frb_619313CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS2_Li1ELi1EES_IS1_Li1ELi1EE(
	.param .align 8 .b8 _Z14julia_frb_619313CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS2_Li1ELi1EES_IS1_Li1ELi1EE_param_0[8],
	.param .align 8 .b8 _Z14julia_frb_619313CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS2_Li1ELi1EES_IS1_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z14julia_frb_619313CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS2_Li1ELi1EES_IS1_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z14julia_frb_619313CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS2_Li1ELi1EES_IS1_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z14julia_frb_619313CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS2_Li1ELi1EES_IS1_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z14julia_frb_619313CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS2_Li1ELi1EES_IS1_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z14julia_frb_619313CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS2_Li1ELi1EES_IS1_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z14julia_frb_619313CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS2_Li1ELi1EES_IS1_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z14julia_frb_619313CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS2_Li1ELi1EES_IS1_Li1ELi1EE_param_8[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<83>;
	.reg .b16 	%rs<278>;
	.reg .f32 	%f<202>;
	.reg .b32 	%r<3513>;
	.reg .b64 	%rd<328>;

// %bb.0:                               // %conversion
	// begin inline asm
	mov.u32 %r300, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r300, 76895;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L11
	ld.param.u64 	%rd12, [_Z14julia_frb_619313CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS2_Li1ELi1EES_IS1_Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r307, %r2, 768;
	or.b32  	%r308, %r307, %r1;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	add.s32 	%r309, %r4, %r308;
	mul.wide.u32 	%rd18, %r309, 4;
	add.s64 	%rd5, %rd12, %rd18;
	mov.u32 	%r310, 1;
	st.global.u32 	[%rd5], %r310;
	and.b32  	%r5, %r1, 3;
	shr.u32 	%r6, %r1, 2;
	mul.lo.s32 	%r311, %r5, %r6;
	and.b32  	%r312, %r311, 7;
	cvt.rn.f32.u32 	%f18, %r312;
	mov.f32 	%f19, 0f40800000;
	div.approx.f32 	%f20, %f18, %f19;
	add.f32 	%f21, %f20, %f20;
	mov.b32 	%r313, %f21;
	and.b32  	%r314, %r313, -2147483648;
	or.b32  	%r315, %r314, 1056964608;
	mov.b32 	%f22, %r315;
	add.f32 	%f23, %f21, %f22;
	cvt.rzi.f32.f32 	%f24, %f23;
	abs.f32 	%f25, %f21;
	setp.gt.f32 	%p2, %f25, 0f4B000000;
	selp.f32 	%f26, %f21, %f24, %p2;
	cvt.rzi.f32.f32 	%f27, %f21;
	setp.lt.f32 	%p3, %f25, 0f3F000000;
	selp.f32 	%f28, %f27, %f26, %p3;
	cvt.rzi.s32.f32 	%r316, %f28;
	fma.rn.f32 	%f29, %f28, 0fBF000000, %f20;
	mul.f32 	%f30, %f29, 0f34222169;
	fma.rn.f32 	%f31, %f29, 0f40490FDA, %f30;
	mul.f32 	%f32, %f31, %f31;
	fma.rn.f32 	%f33, %f32, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f34, %f33, %f32, 0f3D2AAABB;
	fma.rn.f32 	%f35, %f34, %f32, 0fBEFFFFFF;
	fma.rn.f32 	%f36, %f35, %f32, 0f3F800000;
	fma.rn.f32 	%f37, %f32, %f31, 0f00000000;
	fma.rn.f32 	%f38, %f32, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f39, %f38, %f32, 0fBE2AAAA8;
	fma.rn.f32 	%f40, %f39, %f37, %f31;
	and.b32  	%r317, %r316, 1;
	setp.eq.b32 	%p4, %r317, 1;
	selp.f32 	%f41, %f36, %f40, %p4;
	selp.f32 	%f42, %f40, %f36, %p4;
	and.b32  	%r318, %r316, 2;
	setp.eq.s32 	%p5, %r318, 0;
	neg.f32 	%f43, %f41;
	selp.f32 	%f44, %f41, %f43, %p5;
	add.s32 	%r319, %r316, 1;
	and.b32  	%r320, %r319, 2;
	mov.f32 	%f200, 0f00000000;
	cvt.rzi.f32.f32 	%f47, %f20;
	setp.eq.f32 	%p7, %f47, %f20;
	mul.f32 	%f48, %f20, 0f00000000;
	shl.b32 	%r9, %r1, 1;
	and.b32  	%r10, %r9, 6;
	or.b32  	%r11, %r10, 1;
	setp.eq.s32 	%p9, %r10, 6;
	mov.f32 	%f192, 0f41C00000;
	mul.lo.s32 	%r3404, %r10, %r6;
	mov.f32 	%f194, %f200;
	mov.f32 	%f195, %f200;
	@%p9 bra 	LBB0_4;
// %bb.3:                               // %L206
	cvt.u16.u32 	%rs1, %r3404;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 13;
	mul.lo.s16 	%rs5, %rs4, 48;
	sub.s16 	%rs6, %rs1, %rs5;
	and.b16  	%rs7, %rs6, 255;
	cvt.rn.f32.u16 	%f53, %rs7;
	div.approx.f32 	%f55, %f53, %f192;
	add.f32 	%f56, %f55, %f55;
	mov.b32 	%r322, %f56;
	and.b32  	%r323, %r322, -2147483648;
	or.b32  	%r324, %r323, 1056964608;
	mov.b32 	%f57, %r324;
	add.f32 	%f58, %f56, %f57;
	cvt.rzi.f32.f32 	%f59, %f58;
	abs.f32 	%f60, %f56;
	setp.gt.f32 	%p10, %f60, 0f4B000000;
	selp.f32 	%f61, %f56, %f59, %p10;
	cvt.rzi.f32.f32 	%f62, %f56;
	setp.lt.f32 	%p11, %f60, 0f3F000000;
	selp.f32 	%f63, %f62, %f61, %p11;
	cvt.rzi.s32.f32 	%r325, %f63;
	fma.rn.f32 	%f64, %f63, 0fBF000000, %f55;
	mul.f32 	%f65, %f64, 0f34222169;
	fma.rn.f32 	%f66, %f64, 0f40490FDA, %f65;
	mul.f32 	%f67, %f66, %f66;
	fma.rn.f32 	%f68, %f67, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f69, %f68, %f67, 0f3D2AAABB;
	fma.rn.f32 	%f70, %f69, %f67, 0fBEFFFFFF;
	fma.rn.f32 	%f71, %f70, %f67, 0f3F800000;
	fma.rn.f32 	%f72, %f67, %f66, 0f00000000;
	fma.rn.f32 	%f73, %f67, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f74, %f73, %f67, 0fBE2AAAA8;
	fma.rn.f32 	%f75, %f74, %f72, %f66;
	and.b32  	%r326, %r325, 1;
	setp.eq.b32 	%p12, %r326, 1;
	selp.f32 	%f76, %f71, %f75, %p12;
	selp.f32 	%f77, %f75, %f71, %p12;
	and.b32  	%r327, %r325, 2;
	setp.eq.s32 	%p13, %r327, 0;
	neg.f32 	%f78, %f76;
	selp.f32 	%f79, %f76, %f78, %p13;
	add.s32 	%r328, %r325, 1;
	and.b32  	%r329, %r328, 2;
	setp.eq.s32 	%p14, %r329, 0;
	mov.f32 	%f80, 0f00000000;
	sub.f32 	%f81, %f80, %f77;
	selp.f32 	%f82, %f77, %f81, %p14;
	cvt.rzi.f32.f32 	%f83, %f55;
	setp.eq.f32 	%p15, %f83, %f55;
	mul.f32 	%f84, %f55, 0f00000000;
	selp.f32 	%f195, %f84, %f79, %p15;
	abs.f32 	%f85, %f55;
	setp.gt.f32 	%p16, %f85, 0f4B800000;
	add.f32 	%f86, %f195, 0f3F800000;
	selp.f32 	%f194, %f86, %f82, %p16;
LBB0_4:                                 // %L221
	setp.eq.s32 	%p6, %r320, 0;
	sub.f32 	%f45, %f200, %f42;
	selp.f32 	%f49, %f48, %f44, %p7;
	abs.f32 	%f50, %f20;
	setp.gt.u32 	%p17, %r11, 5;
	mul.lo.s32 	%r3405, %r11, %r6;
	mov.f32 	%f196, %f200;
	mov.f32 	%f197, %f200;
	@%p17 bra 	LBB0_6;
// %bb.5:                               // %L225
	cvt.u16.u32 	%rs8, %r3405;
	and.b16  	%rs9, %rs8, 255;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 13;
	mul.lo.s16 	%rs12, %rs11, 48;
	sub.s16 	%rs13, %rs8, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f88, %rs14;
	div.approx.f32 	%f90, %f88, %f192;
	add.f32 	%f91, %f90, %f90;
	mov.b32 	%r331, %f91;
	and.b32  	%r332, %r331, -2147483648;
	or.b32  	%r333, %r332, 1056964608;
	mov.b32 	%f92, %r333;
	add.f32 	%f93, %f91, %f92;
	cvt.rzi.f32.f32 	%f94, %f93;
	abs.f32 	%f95, %f91;
	setp.gt.f32 	%p18, %f95, 0f4B000000;
	selp.f32 	%f96, %f91, %f94, %p18;
	cvt.rzi.f32.f32 	%f97, %f91;
	setp.lt.f32 	%p19, %f95, 0f3F000000;
	selp.f32 	%f98, %f97, %f96, %p19;
	cvt.rzi.s32.f32 	%r334, %f98;
	fma.rn.f32 	%f99, %f98, 0fBF000000, %f90;
	mul.f32 	%f100, %f99, 0f34222169;
	fma.rn.f32 	%f101, %f99, 0f40490FDA, %f100;
	mul.f32 	%f102, %f101, %f101;
	fma.rn.f32 	%f103, %f102, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f104, %f103, %f102, 0f3D2AAABB;
	fma.rn.f32 	%f105, %f104, %f102, 0fBEFFFFFF;
	fma.rn.f32 	%f106, %f105, %f102, 0f3F800000;
	fma.rn.f32 	%f107, %f102, %f101, 0f00000000;
	fma.rn.f32 	%f108, %f102, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f109, %f108, %f102, 0fBE2AAAA8;
	fma.rn.f32 	%f110, %f109, %f107, %f101;
	and.b32  	%r335, %r334, 1;
	setp.eq.b32 	%p20, %r335, 1;
	selp.f32 	%f111, %f106, %f110, %p20;
	selp.f32 	%f112, %f110, %f106, %p20;
	and.b32  	%r336, %r334, 2;
	setp.eq.s32 	%p21, %r336, 0;
	neg.f32 	%f113, %f111;
	selp.f32 	%f114, %f111, %f113, %p21;
	add.s32 	%r337, %r334, 1;
	and.b32  	%r338, %r337, 2;
	setp.eq.s32 	%p22, %r338, 0;
	mov.f32 	%f115, 0f00000000;
	sub.f32 	%f116, %f115, %f112;
	selp.f32 	%f117, %f112, %f116, %p22;
	cvt.rzi.f32.f32 	%f118, %f90;
	setp.eq.f32 	%p23, %f118, %f90;
	mul.f32 	%f119, %f90, 0f00000000;
	selp.f32 	%f197, %f119, %f114, %p23;
	abs.f32 	%f120, %f90;
	setp.gt.f32 	%p24, %f120, 0f4B800000;
	add.f32 	%f121, %f197, 0f3F800000;
	selp.f32 	%f196, %f121, %f117, %p24;
LBB0_6:                                 // %L240
	selp.f32 	%f46, %f42, %f45, %p6;
	setp.gt.f32 	%p8, %f50, 0f4B800000;
	add.f32 	%f51, %f49, 0f3F800000;
	setp.gt.u32 	%p26, %r1, 23;
	or.pred  	%p27, %p9, %p26;
	mov.f32 	%f193, 0f40400000;
	mov.f32 	%f198, %f200;
	mov.f32 	%f199, %f200;
	@%p27 bra 	LBB0_8;
// %bb.7:                               // %L282
	cvt.u16.u32 	%rs15, %r3404;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 10;
	mul.lo.s16 	%rs19, %rs18, 6;
	sub.s16 	%rs20, %rs15, %rs19;
	and.b16  	%rs21, %rs20, 255;
	cvt.rn.f32.u16 	%f123, %rs21;
	div.approx.f32 	%f125, %f123, %f193;
	add.f32 	%f126, %f125, %f125;
	mov.b32 	%r346, %f126;
	and.b32  	%r347, %r346, -2147483648;
	or.b32  	%r348, %r347, 1056964608;
	mov.b32 	%f127, %r348;
	add.f32 	%f128, %f126, %f127;
	cvt.rzi.f32.f32 	%f129, %f128;
	abs.f32 	%f130, %f126;
	setp.gt.f32 	%p28, %f130, 0f4B000000;
	selp.f32 	%f131, %f126, %f129, %p28;
	cvt.rzi.f32.f32 	%f132, %f126;
	setp.lt.f32 	%p29, %f130, 0f3F000000;
	selp.f32 	%f133, %f132, %f131, %p29;
	cvt.rzi.s32.f32 	%r349, %f133;
	fma.rn.f32 	%f134, %f133, 0fBF000000, %f125;
	mul.f32 	%f135, %f134, 0f34222169;
	fma.rn.f32 	%f136, %f134, 0f40490FDA, %f135;
	mul.f32 	%f137, %f136, %f136;
	fma.rn.f32 	%f138, %f137, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f139, %f138, %f137, 0f3D2AAABB;
	fma.rn.f32 	%f140, %f139, %f137, 0fBEFFFFFF;
	fma.rn.f32 	%f141, %f140, %f137, 0f3F800000;
	fma.rn.f32 	%f142, %f137, %f136, 0f00000000;
	fma.rn.f32 	%f143, %f137, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f144, %f143, %f137, 0fBE2AAAA8;
	fma.rn.f32 	%f145, %f144, %f142, %f136;
	and.b32  	%r350, %r349, 1;
	setp.eq.b32 	%p30, %r350, 1;
	selp.f32 	%f146, %f141, %f145, %p30;
	selp.f32 	%f147, %f145, %f141, %p30;
	and.b32  	%r351, %r349, 2;
	setp.eq.s32 	%p31, %r351, 0;
	neg.f32 	%f148, %f146;
	selp.f32 	%f149, %f146, %f148, %p31;
	add.s32 	%r352, %r349, 1;
	and.b32  	%r353, %r352, 2;
	setp.eq.s32 	%p32, %r353, 0;
	mov.f32 	%f150, 0f00000000;
	sub.f32 	%f151, %f150, %f147;
	selp.f32 	%f152, %f147, %f151, %p32;
	cvt.rzi.f32.f32 	%f153, %f125;
	setp.eq.f32 	%p33, %f153, %f125;
	mul.f32 	%f154, %f125, 0f00000000;
	selp.f32 	%f199, %f154, %f149, %p33;
	abs.f32 	%f155, %f125;
	setp.gt.f32 	%p34, %f155, 0f4B800000;
	add.f32 	%f156, %f199, 0f3F800000;
	selp.f32 	%f198, %f156, %f152, %p34;
LBB0_8:                                 // %L297
	selp.f32 	%f52, %f51, %f46, %p8;
	or.pred  	%p37, %p17, %p26;
	mov.f32 	%f201, %f200;
	@%p37 bra 	LBB0_10;
// %bb.9:                               // %L305
	cvt.u16.u32 	%rs22, %r3405;
	and.b16  	%rs23, %rs22, 255;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 10;
	mul.lo.s16 	%rs26, %rs25, 6;
	sub.s16 	%rs27, %rs22, %rs26;
	and.b16  	%rs28, %rs27, 255;
	cvt.rn.f32.u16 	%f158, %rs28;
	div.approx.f32 	%f160, %f158, %f193;
	add.f32 	%f161, %f160, %f160;
	mov.b32 	%r355, %f161;
	and.b32  	%r356, %r355, -2147483648;
	or.b32  	%r357, %r356, 1056964608;
	mov.b32 	%f162, %r357;
	add.f32 	%f163, %f161, %f162;
	cvt.rzi.f32.f32 	%f164, %f163;
	abs.f32 	%f165, %f161;
	setp.gt.f32 	%p38, %f165, 0f4B000000;
	selp.f32 	%f166, %f161, %f164, %p38;
	cvt.rzi.f32.f32 	%f167, %f161;
	setp.lt.f32 	%p39, %f165, 0f3F000000;
	selp.f32 	%f168, %f167, %f166, %p39;
	cvt.rzi.s32.f32 	%r358, %f168;
	fma.rn.f32 	%f169, %f168, 0fBF000000, %f160;
	mul.f32 	%f170, %f169, 0f34222169;
	fma.rn.f32 	%f171, %f169, 0f40490FDA, %f170;
	mul.f32 	%f172, %f171, %f171;
	fma.rn.f32 	%f173, %f172, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f174, %f173, %f172, 0f3D2AAABB;
	fma.rn.f32 	%f175, %f174, %f172, 0fBEFFFFFF;
	fma.rn.f32 	%f176, %f175, %f172, 0f3F800000;
	fma.rn.f32 	%f177, %f172, %f171, 0f00000000;
	fma.rn.f32 	%f178, %f172, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f179, %f178, %f172, 0fBE2AAAA8;
	fma.rn.f32 	%f180, %f179, %f177, %f171;
	and.b32  	%r359, %r358, 1;
	setp.eq.b32 	%p40, %r359, 1;
	selp.f32 	%f181, %f176, %f180, %p40;
	selp.f32 	%f182, %f180, %f176, %p40;
	and.b32  	%r360, %r358, 2;
	setp.eq.s32 	%p41, %r360, 0;
	neg.f32 	%f183, %f181;
	selp.f32 	%f184, %f181, %f183, %p41;
	add.s32 	%r361, %r358, 1;
	and.b32  	%r362, %r361, 2;
	setp.eq.s32 	%p42, %r362, 0;
	mov.f32 	%f185, 0f00000000;
	sub.f32 	%f186, %f185, %f182;
	selp.f32 	%f187, %f182, %f186, %p42;
	cvt.rzi.f32.f32 	%f188, %f160;
	setp.eq.f32 	%p43, %f188, %f160;
	mul.f32 	%f189, %f160, 0f00000000;
	selp.f32 	%f201, %f189, %f184, %p43;
	abs.f32 	%f190, %f160;
	setp.gt.f32 	%p44, %f190, 0f4B800000;
	add.f32 	%f191, %f201, 0f3F800000;
	selp.f32 	%f200, %f191, %f187, %p44;
LBB0_10:                                // %L320
	mov.b32 	%r303, %f52;
	mov.b32 	%r306, %f49;
	mov.b32 	%r364, %f198;
	mov.b32 	%r365, %f200;
	mov.b32 	%r370, %f199;
	mov.b32 	%r371, %f201;
	mov.u32 	%r3407, 999999999;
	cvt.u16.u32 	%rs276, %r1;
	@%p26 bra 	LBB0_12;
// %bb.11:                              // %L363
	ld.param.u64 	%rd1, [_Z14julia_frb_619313CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS2_Li1ELi1EES_IS1_Li1ELi1EE_param_1];
	and.b16  	%rs30, %rs276, 255;
	mul.lo.s16 	%rs31, %rs30, 171;
	shr.u16 	%rs32, %rs31, 12;
	mul.lo.s16 	%rs33, %rs32, 24;
	sub.s16 	%rs34, %rs276, %rs33;
	cvt.u32.u16 	%r376, %rs34;
	and.b32  	%r377, %r376, 255;
	mad.lo.s32 	%r378, %r377, 24, %r3;
	cvt.u16.u32 	%rs35, %r378;
	mul.hi.u16 	%rs36, %rs35, -7281;
	shr.u16 	%rs37, %rs36, 9;
	mul.lo.s16 	%rs38, %rs37, 576;
	sub.s16 	%rs39, %rs35, %rs38;
	cvt.u32.u16 	%r379, %rs39;
	mul.wide.u32 	%rd19, %r379, 4;
	add.s64 	%rd20, %rd1, %rd19;
	ld.global.u32 	%r3407, [%rd20];
LBB0_12:                                // %L440
	xor.b32  	%r302, %r306, -2147483648;
	mov.b32 	%r340, %f194;
	mov.b32 	%r341, %f196;
	mov.b32 	%r343, %f195;
	mov.b32 	%r344, %f197;
	xor.b32  	%r367, %r370, -2147483648;
	xor.b32  	%r368, %r371, -2147483648;
	and.b32  	%r20, %r1, 24;
	setp.ne.s32 	%p46, %r20, 24;
	cvt.u16.u32 	%rs277, %r6;
	@%p46 bra 	LBB0_14;
// %bb.13:                              // %L440.L785_crit_edge
	mul.lo.s16 	%rs52, %rs277, 171;
	shr.u16 	%rs53, %rs52, 10;
	mul.lo.s16 	%rs54, %rs53, 6;
	sub.s16 	%rs55, %rs277, %rs54;
	cvt.u32.u16 	%r394, %rs55;
	and.b32  	%r3411, %r394, 255;
	cvt.u16.u32 	%rs56, %r3;
	and.b16  	%rs57, %rs56, 255;
	mul.lo.s16 	%rs58, %rs57, 171;
	shr.u16 	%rs59, %rs58, 10;
	mul.lo.s16 	%rs60, %rs59, -6;
	add.s16 	%rs61, %rs60, %rs56;
	cvt.u32.u16 	%r396, %rs61;
	and.b32  	%r3410, %r396, 255;
	cvt.u32.u16 	%r3409, %rs59;
	mul.wide.u16 	%r3408, %rs59, 6;
	mov.u32 	%r3412, 0;
	mov.u32 	%r3413, %r3412;
	bra.uni 	LBB0_15;
LBB0_14:                                // %L469
	ld.param.u64 	%rd2, [_Z14julia_frb_619313CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS2_Li1ELi1EES_IS1_Li1ELi1EE_param_2];
	mul.lo.s32 	%r380, %r5, 144;
	mul.lo.s16 	%rs41, %rs277, 171;
	shr.u16 	%rs42, %rs41, 10;
	mul.lo.s16 	%rs43, %rs42, 6;
	sub.s16 	%rs44, %rs277, %rs43;
	cvt.u32.u16 	%r381, %rs44;
	and.b32  	%r3411, %r381, 255;
	mad.lo.s32 	%r382, %r3411, 24, %r380;
	cvt.u16.u32 	%rs45, %r3;
	and.b16  	%rs46, %rs45, 255;
	mul.lo.s16 	%rs47, %rs46, 171;
	shr.u16 	%rs48, %rs47, 10;
	mul.lo.s16 	%rs49, %rs48, -6;
	add.s16 	%rs50, %rs49, %rs45;
	cvt.u32.u16 	%r384, %rs50;
	and.b32  	%r3410, %r384, 255;
	or.b32  	%r385, %r382, %r3410;
	cvt.u32.u16 	%r3409, %rs48;
	mul.wide.u16 	%r3408, %rs48, 6;
	mul.lo.s32 	%r386, %r2, 576;
	add.s32 	%r387, %r385, %r386;
	add.s32 	%r388, %r387, %r3408;
	mul.wide.u32 	%rd21, %r388, 4;
	add.s64 	%rd22, %rd2, %rd21;
	ld.global.u32 	%r3412, [%rd22];
	add.s32 	%r389, %r382, 48384;
	or.b32  	%r390, %r389, %r3410;
	add.s32 	%r391, %r390, %r386;
	add.s32 	%r392, %r391, %r3408;
	mul.wide.u32 	%rd23, %r392, 4;
	add.s64 	%rd24, %rd2, %rd23;
	ld.global.u32 	%r3413, [%rd24];
LBB0_15:                                // %L785
	ld.param.u64 	%rd3, [_Z14julia_frb_619313CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS2_Li1ELi1EES_IS1_Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z14julia_frb_619313CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS2_Li1ELi1EES_IS1_Li1ELi1EE_param_4];
	// begin inline asm
	cvt.rn.f16x2.f32 %r301, %r303, %r302;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r304, %r306, %r303;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r339, %r341, %r340;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r342, %r344, %r343;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r363, %r365, %r364;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r366, %r368, %r367;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r369, %r371, %r370;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r372, %r365, %r364;
	// end inline asm
	mov.u32 	%r3406, 0;
	shl.b32 	%r398, %r2, 7;
	shl.b32 	%r399, %r1, 2;
	and.b32  	%r37, %r399, 60;
	shr.u32 	%r38, %r1, 4;
	mad.lo.s32 	%r39, %r38, 10752, %r398;
	or.b32  	%r40, %r399, 64;
	and.b32  	%r400, %r9, 30;
	or.b32  	%r401, %r400, %r38;
	mul.lo.s32 	%r41, %r401, 257;
	or.b32  	%r402, %r38, %r9;
	or.b32  	%r403, %r402, 32;
	mul.lo.s32 	%r42, %r403, 257;
	and.b32  	%r404, %r4, 224;
	shr.u32 	%r405, %r3, 3;
	mad.lo.s32 	%r43, %r405, 257, %r404;
	and.b16  	%rs63, %rs276, 255;
	mul.lo.s16 	%rs64, %rs63, 171;
	shr.u16 	%rs65, %rs64, 12;
	mul.lo.s16 	%rs66, %rs65, 24;
	sub.s16 	%rs67, %rs276, %rs66;
	cvt.u32.u16 	%r406, %rs67;
	and.b32  	%r44, %r406, 255;
	add.s32 	%r407, %r3, 24;
	shr.u32 	%r408, %r407, 3;
	mad.lo.s32 	%r45, %r408, 257, %r404;
	add.s32 	%r409, %r3, 48;
	shr.u32 	%r410, %r409, 3;
	mad.lo.s32 	%r46, %r410, 257, %r404;
	add.s32 	%r411, %r3, 72;
	shr.u32 	%r412, %r411, 3;
	mad.lo.s32 	%r47, %r412, 257, %r404;
	or.b32  	%r413, %r405, 12;
	mad.lo.s32 	%r48, %r413, 257, %r404;
	add.s32 	%r414, %r3, 120;
	shr.u32 	%r415, %r414, 3;
	mad.lo.s32 	%r49, %r415, 257, %r404;
	add.s32 	%r416, %r3, 144;
	shr.u32 	%r417, %r416, 3;
	mad.lo.s32 	%r50, %r417, 257, %r404;
	add.s32 	%r418, %r3, 168;
	shr.u32 	%r419, %r418, 3;
	mad.lo.s32 	%r51, %r419, 257, %r404;
	or.b32  	%r420, %r405, 24;
	mad.lo.s32 	%r52, %r420, 257, %r404;
	add.s32 	%r421, %r3, 216;
	shr.u32 	%r422, %r421, 3;
	mad.lo.s32 	%r53, %r422, 257, %r404;
	add.s32 	%r423, %r3, 240;
	shr.u32 	%r424, %r423, 3;
	mad.lo.s32 	%r54, %r424, 257, %r404;
	add.s32 	%r425, %r3, 264;
	shr.u32 	%r426, %r425, 3;
	mad.lo.s32 	%r55, %r426, 257, %r404;
	or.b32  	%r427, %r405, 36;
	mad.lo.s32 	%r56, %r427, 257, %r404;
	add.s32 	%r428, %r3, 312;
	shr.u32 	%r429, %r428, 3;
	mad.lo.s32 	%r57, %r429, 257, %r404;
	add.s32 	%r430, %r3, 336;
	shr.u32 	%r431, %r430, 3;
	mad.lo.s32 	%r58, %r431, 257, %r404;
	add.s32 	%r432, %r3, 360;
	shr.u32 	%r433, %r432, 3;
	mad.lo.s32 	%r59, %r433, 257, %r404;
	or.b32  	%r434, %r405, 48;
	mad.lo.s32 	%r60, %r434, 257, %r404;
	add.s32 	%r435, %r3, 408;
	shr.u32 	%r436, %r435, 3;
	mad.lo.s32 	%r61, %r436, 257, %r404;
	add.s32 	%r437, %r3, 432;
	shr.u32 	%r438, %r437, 3;
	mad.lo.s32 	%r62, %r438, 257, %r404;
	add.s32 	%r439, %r3, 456;
	shr.u32 	%r440, %r439, 3;
	mad.lo.s32 	%r63, %r440, 257, %r404;
	or.b32  	%r441, %r405, 60;
	mad.lo.s32 	%r64, %r441, 257, %r404;
	add.s32 	%r442, %r3, 504;
	bfe.u32 	%r443, %r442, 3, 6;
	mad.lo.s32 	%r65, %r443, 257, %r404;
	mul.lo.s32 	%r66, %r5, 4806;
	mul.lo.s32 	%r67, %r3411, 801;
	mul.lo.s32 	%r68, %r3410, 33;
	mul.lo.s32 	%r69, %r3409, 198;
	and.b32  	%r444, %r1, 1;
	mul.lo.s32 	%r445, %r444, 4112;
	bfe.u32 	%r446, %r1, 3, 1;
	mul.lo.s32 	%r447, %r446, 514;
	add.s32 	%r448, %r447, %r445;
	bfe.u32 	%r449, %r1, 1, 1;
	mul.lo.s32 	%r450, %r449, 2056;
	add.s32 	%r451, %r448, %r450;
	and.b32  	%r452, %r6, 1;
	mul.lo.s32 	%r453, %r452, 1028;
	add.s32 	%r454, %r451, %r453;
	mul.lo.s32 	%r455, %r38, 257;
	add.s32 	%r456, %r454, %r455;
	add.s32 	%r457, %r456, %r3410;
	add.s32 	%r70, %r457, %r3408;
	mul.wide.u32 	%rd25, %r70, 4;
	mov.u64 	%rd26, shmem;
	add.s64 	%rd6, %rd26, %rd25;
	cvt.u64.u32 	%rd27, %r3408;
	cvt.u64.u32 	%rd28, %r3410;
	cvt.u64.u32 	%rd29, %r455;
	cvt.u64.u32 	%rd30, %r453;
	cvt.u64.u32 	%rd31, %r450;
	cvt.u64.u32 	%rd32, %r447;
	cvt.u64.u32 	%rd33, %r445;
	add.s64 	%rd34, %rd33, %rd32;
	add.s64 	%rd35, %rd34, %rd31;
	add.s64 	%rd36, %rd35, %rd30;
	add.s64 	%rd37, %rd36, %rd29;
	add.s64 	%rd38, %rd37, %rd28;
	add.s64 	%rd39, %rd38, %rd27;
	shl.b64 	%rd40, %rd39, 2;
	add.s64 	%rd7, %rd26, %rd40;
	and.b32  	%r458, %r3, 1;
	mul.lo.s32 	%r459, %r458, 4112;
	bfe.u32 	%r460, %r3, 3, 1;
	mul.lo.s32 	%r461, %r460, 514;
	add.s32 	%r462, %r461, %r459;
	bfe.u32 	%r463, %r3, 1, 1;
	mul.lo.s32 	%r464, %r463, 2056;
	add.s32 	%r465, %r462, %r464;
	bfe.u32 	%r466, %r3, 2, 1;
	mul.lo.s32 	%r467, %r466, 1028;
	add.s32 	%r468, %r465, %r467;
	shr.u32 	%r469, %r3, 4;
	mul.lo.s32 	%r470, %r469, 257;
	add.s32 	%r471, %r468, %r470;
	add.s32 	%r472, %r471, %r3411;
	mul.lo.s32 	%r473, %r5, 6;
	add.s32 	%r71, %r472, %r473;
	mul.wide.u32 	%rd41, %r71, 4;
	add.s64 	%rd8, %rd26, %rd41;
	cvt.u64.u32 	%rd42, %r473;
	cvt.u64.u32 	%rd43, %r3411;
	cvt.u64.u32 	%rd44, %r470;
	cvt.u64.u32 	%rd45, %r467;
	cvt.u64.u32 	%rd46, %r464;
	cvt.u64.u32 	%rd47, %r461;
	cvt.u64.u32 	%rd48, %r459;
	add.s64 	%rd49, %rd48, %rd47;
	add.s64 	%rd50, %rd49, %rd46;
	add.s64 	%rd51, %rd50, %rd45;
	add.s64 	%rd52, %rd51, %rd44;
	add.s64 	%rd53, %rd52, %rd43;
	add.s64 	%rd54, %rd53, %rd42;
	shl.b64 	%rd55, %rd54, 2;
	add.s64 	%rd9, %rd26, %rd55;
	mul.lo.s32 	%r72, %r2, 1152;
	cvt.u16.u32 	%rs68, %r3;
	shl.b16 	%rs69, %rs68, 1;
	and.b16  	%rs70, %rs69, 254;
	mul.lo.s16 	%rs71, %rs70, 171;
	shr.u16 	%rs72, %rs71, 13;
	mul.lo.s16 	%rs73, %rs72, 48;
	sub.s16 	%rs74, %rs69, %rs73;
	and.b16  	%rs75, %rs74, 254;
	mul.wide.u16 	%r73, %rs75, 24;
	or.b16  	%rs76, %rs69, 1;
	and.b16  	%rs77, %rs76, 255;
	mul.lo.s16 	%rs78, %rs77, 171;
	shr.u16 	%rs79, %rs78, 13;
	mul.lo.s16 	%rs80, %rs79, 48;
	sub.s16 	%rs81, %rs76, %rs80;
	and.b16  	%rs82, %rs81, 255;
	mul.wide.u16 	%r74, %rs82, 24;
	cvt.u64.u32 	%rd56, %r69;
	cvt.u64.u32 	%rd57, %r68;
	cvt.u64.u32 	%rd58, %r67;
	cvt.u64.u32 	%rd59, %r66;
	add.s64 	%rd60, %rd59, %rd58;
	add.s64 	%rd61, %rd60, %rd57;
	add.s64 	%rd62, %rd61, %rd56;
	shl.b64 	%rd63, %rd62, 2;
	add.s64 	%rd10, %rd26, %rd63;
	setp.gt.u32 	%p47, %r3, 7;
	setp.eq.s32 	%p48, %r38, 1;
	setp.lt.u32 	%p50, %r1, 24;
	mov.u32 	%r3414, %r3406;
	mov.u32 	%r3445, %r3406;
	mov.u32 	%r3446, %r3406;
	mov.u32 	%r3447, %r3406;
	mov.u32 	%r3448, %r3406;
	bra.uni 	LBB0_16;
LBB0_59:                                // %guard_pass15249
                                        //   in Loop: Header=BB0_16 Depth=1
	add.s32 	%r299, %r3414, 48;
	setp.ne.s32 	%p81, %r3414, 2016;
	mov.u32 	%r3414, %r299;
	@%p81 bra 	LBB0_16;
	bra.uni 	LBB0_60;
LBB0_16:                                // %L788
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_18 Depth 2
	mul.hi.u32 	%r667, %r3414, -1431655765;
	shr.u32 	%r668, %r667, 5;
	mul.lo.s32 	%r80, %r668, 48;
	add.s32 	%r669, %r3, %r80;
	cvt.u16.u32 	%rs83, %r669;
	mul.hi.s16 	%rs84, %rs83, 16257;
	shr.u16 	%rs85, %rs84, 15;
	shr.s16 	%rs86, %rs84, 9;
	add.s16 	%rs87, %rs86, %rs85;
	mul.lo.s16 	%rs88, %rs87, 2064;
	sub.s16 	%rs89, %rs83, %rs88;
	cvt.s32.s16 	%r670, %rs89;
	mad.lo.s32 	%r671, %r670, 21504, %r39;
	or.b32  	%r672, %r671, %r37;
	mul.wide.s32 	%rd64, %r672, 4;
	add.s64 	%rd65, %rd3, %rd64;
	ld.global.v4.u32 	{%r673, %r674, %r675, %r676}, [%rd65];
	or.b32  	%r677, %r40, %r671;
	mul.wide.s32 	%rd66, %r677, 4;
	add.s64 	%rd67, %rd3, %rd66;
	ld.global.v4.u32 	{%r678, %r679, %r680, %r681}, [%rd67];
	add.s32 	%r81, %r80, 24;
	add.s32 	%r682, %r81, %r3;
	cvt.u16.u32 	%rs90, %r682;
	mul.hi.s16 	%rs91, %rs90, 16257;
	shr.u16 	%rs92, %rs91, 15;
	shr.s16 	%rs93, %rs91, 9;
	add.s16 	%rs94, %rs93, %rs92;
	mul.lo.s16 	%rs95, %rs94, 2064;
	sub.s16 	%rs96, %rs90, %rs95;
	cvt.s32.s16 	%r683, %rs96;
	mad.lo.s32 	%r684, %r683, 21504, %r39;
	or.b32  	%r685, %r684, %r37;
	mul.wide.s32 	%rd68, %r685, 4;
	add.s64 	%rd69, %rd3, %rd68;
	ld.global.v4.u32 	{%r686, %r687, %r688, %r689}, [%rd69];
	or.b32  	%r690, %r40, %r684;
	mul.wide.s32 	%rd70, %r690, 4;
	add.s64 	%rd71, %rd3, %rd70;
	ld.global.v4.u32 	{%r691, %r692, %r693, %r694}, [%rd71];
	selp.b32 	%r695, %r673, %r675, %p48;
	shfl.sync.bfly.b32	%r696, %r695, 16, 31, -1;
	selp.b32 	%r476, %r696, %r673, %p48;
	selp.b32 	%r481, %r675, %r696, %p48;
	selp.b32 	%r697, %r674, %r676, %p48;
	shfl.sync.bfly.b32	%r698, %r697, 16, 31, -1;
	selp.b32 	%r484, %r698, %r674, %p48;
	selp.b32 	%r489, %r676, %r698, %p48;
	selp.b32 	%r699, %r678, %r680, %p48;
	shfl.sync.bfly.b32	%r700, %r699, 16, 31, -1;
	selp.b32 	%r492, %r700, %r678, %p48;
	selp.b32 	%r497, %r680, %r700, %p48;
	selp.b32 	%r701, %r679, %r681, %p48;
	shfl.sync.bfly.b32	%r702, %r701, 16, 31, -1;
	selp.b32 	%r500, %r702, %r679, %p48;
	selp.b32 	%r505, %r681, %r702, %p48;
	selp.b32 	%r703, %r686, %r688, %p48;
	shfl.sync.bfly.b32	%r704, %r703, 16, 31, -1;
	selp.b32 	%r508, %r704, %r686, %p48;
	selp.b32 	%r513, %r688, %r704, %p48;
	selp.b32 	%r705, %r687, %r689, %p48;
	shfl.sync.bfly.b32	%r706, %r705, 16, 31, -1;
	selp.b32 	%r516, %r706, %r687, %p48;
	selp.b32 	%r521, %r689, %r706, %p48;
	selp.b32 	%r707, %r691, %r693, %p48;
	shfl.sync.bfly.b32	%r708, %r707, 16, 31, -1;
	selp.b32 	%r524, %r708, %r691, %p48;
	selp.b32 	%r529, %r693, %r708, %p48;
	selp.b32 	%r709, %r692, %r694, %p48;
	shfl.sync.bfly.b32	%r710, %r709, 16, 31, -1;
	selp.b32 	%r532, %r710, %r692, %p48;
	selp.b32 	%r537, %r694, %r710, %p48;
	shl.b32 	%r477, %r481, 4;
	mov.u32 	%r475, 252645135;
	// begin inline asm
	lop3.b32 %r539, %r475, %r476, %r477, 202;
	// end inline asm
	shr.u32 	%r480, %r476, 4;
	// begin inline asm
	lop3.b32 %r555, %r475, %r480, %r481, 202;
	// end inline asm
	shl.b32 	%r485, %r489, 4;
	// begin inline asm
	lop3.b32 %r547, %r475, %r484, %r485, 202;
	// end inline asm
	shr.u32 	%r488, %r484, 4;
	// begin inline asm
	lop3.b32 %r563, %r475, %r488, %r489, 202;
	// end inline asm
	shl.b32 	%r493, %r497, 4;
	// begin inline asm
	lop3.b32 %r571, %r475, %r492, %r493, 202;
	// end inline asm
	shr.u32 	%r496, %r492, 4;
	// begin inline asm
	lop3.b32 %r587, %r475, %r496, %r497, 202;
	// end inline asm
	shl.b32 	%r501, %r505, 4;
	// begin inline asm
	lop3.b32 %r579, %r475, %r500, %r501, 202;
	// end inline asm
	shr.u32 	%r504, %r500, 4;
	// begin inline asm
	lop3.b32 %r595, %r475, %r504, %r505, 202;
	// end inline asm
	shl.b32 	%r509, %r513, 4;
	// begin inline asm
	lop3.b32 %r540, %r475, %r508, %r509, 202;
	// end inline asm
	shr.u32 	%r512, %r508, 4;
	// begin inline asm
	lop3.b32 %r556, %r475, %r512, %r513, 202;
	// end inline asm
	shl.b32 	%r517, %r521, 4;
	// begin inline asm
	lop3.b32 %r548, %r475, %r516, %r517, 202;
	// end inline asm
	shr.u32 	%r520, %r516, 4;
	// begin inline asm
	lop3.b32 %r564, %r475, %r520, %r521, 202;
	// end inline asm
	shl.b32 	%r525, %r529, 4;
	// begin inline asm
	lop3.b32 %r572, %r475, %r524, %r525, 202;
	// end inline asm
	shr.u32 	%r528, %r524, 4;
	// begin inline asm
	lop3.b32 %r588, %r475, %r528, %r529, 202;
	// end inline asm
	shl.b32 	%r533, %r537, 4;
	// begin inline asm
	lop3.b32 %r580, %r475, %r532, %r533, 202;
	// end inline asm
	shr.u32 	%r536, %r532, 4;
	// begin inline asm
	lop3.b32 %r596, %r475, %r536, %r537, 202;
	// end inline asm
	mov.u32 	%r541, 25152;
	// begin inline asm
	prmt.b32 %r603, %r539, %r540, %r541;
	// end inline asm
	mov.u32 	%r545, 29521;
	// begin inline asm
	prmt.b32 %r635, %r539, %r540, %r545;
	// end inline asm
	// begin inline asm
	prmt.b32 %r611, %r547, %r548, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r643, %r547, %r548, %r545;
	// end inline asm
	// begin inline asm
	prmt.b32 %r604, %r555, %r556, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r636, %r555, %r556, %r545;
	// end inline asm
	// begin inline asm
	prmt.b32 %r612, %r563, %r564, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r644, %r563, %r564, %r545;
	// end inline asm
	// begin inline asm
	prmt.b32 %r619, %r571, %r572, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r651, %r571, %r572, %r545;
	// end inline asm
	// begin inline asm
	prmt.b32 %r627, %r579, %r580, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r659, %r579, %r580, %r545;
	// end inline asm
	// begin inline asm
	prmt.b32 %r620, %r587, %r588, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r652, %r587, %r588, %r545;
	// end inline asm
	// begin inline asm
	prmt.b32 %r628, %r595, %r596, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r660, %r595, %r596, %r545;
	// end inline asm
	mov.u32 	%r661, 21520;
	// begin inline asm
	prmt.b32 %r602, %r603, %r604, %r661;
	// end inline asm
	mov.u32 	%r665, 30258;
	// begin inline asm
	prmt.b32 %r606, %r603, %r604, %r665;
	// end inline asm
	// begin inline asm
	prmt.b32 %r610, %r611, %r612, %r661;
	// end inline asm
	// begin inline asm
	prmt.b32 %r614, %r611, %r612, %r665;
	// end inline asm
	// begin inline asm
	prmt.b32 %r618, %r619, %r620, %r661;
	// end inline asm
	// begin inline asm
	prmt.b32 %r622, %r619, %r620, %r665;
	// end inline asm
	// begin inline asm
	prmt.b32 %r626, %r627, %r628, %r661;
	// end inline asm
	// begin inline asm
	prmt.b32 %r630, %r627, %r628, %r665;
	// end inline asm
	// begin inline asm
	prmt.b32 %r634, %r635, %r636, %r661;
	// end inline asm
	// begin inline asm
	prmt.b32 %r638, %r635, %r636, %r665;
	// end inline asm
	// begin inline asm
	prmt.b32 %r642, %r643, %r644, %r661;
	// end inline asm
	// begin inline asm
	prmt.b32 %r646, %r643, %r644, %r665;
	// end inline asm
	// begin inline asm
	prmt.b32 %r650, %r651, %r652, %r661;
	// end inline asm
	// begin inline asm
	prmt.b32 %r654, %r651, %r652, %r665;
	// end inline asm
	// begin inline asm
	prmt.b32 %r658, %r659, %r660, %r661;
	// end inline asm
	// begin inline asm
	prmt.b32 %r662, %r659, %r660, %r665;
	// end inline asm
	mul.hi.s16 	%rs97, %rs83, 10923;
	shr.u16 	%rs98, %rs97, 15;
	shr.s16 	%rs99, %rs97, 2;
	add.s16 	%rs100, %rs99, %rs98;
	mul.lo.s16 	%rs101, %rs100, 24;
	sub.s16 	%rs102, %rs83, %rs101;
	cvt.s32.s16 	%r711, %rs102;
	add.s32 	%r712, %r41, %r711;
	mul.wide.s32 	%rd72, %r712, 4;
	add.s64 	%rd74, %rd26, %rd72;
	st.shared.u32 	[%rd74], %r602;
	st.shared.u32 	[%rd74+512], %r610;
	st.shared.u32 	[%rd74+256], %r606;
	st.shared.u32 	[%rd74+768], %r614;
	add.s32 	%r713, %r42, %r711;
	mul.wide.s32 	%rd75, %r713, 4;
	add.s64 	%rd76, %rd26, %rd75;
	st.shared.u32 	[%rd76], %r618;
	st.shared.u32 	[%rd76+512], %r626;
	st.shared.u32 	[%rd76+256], %r622;
	st.shared.u32 	[%rd76+768], %r630;
	st.shared.u32 	[%rd74+128], %r634;
	st.shared.u32 	[%rd74+640], %r642;
	st.shared.u32 	[%rd74+384], %r638;
	st.shared.u32 	[%rd74+896], %r646;
	st.shared.u32 	[%rd76+128], %r650;
	st.shared.u32 	[%rd76+640], %r658;
	st.shared.u32 	[%rd76+384], %r654;
	st.shared.u32 	[%rd76+896], %r662;
	bar.sync 	0;
	add.s32 	%r714, %r80, %r44;
	cvt.u16.u32 	%rs103, %r714;
	mul.hi.s16 	%rs104, %rs103, 10923;
	shr.u16 	%rs105, %rs104, 15;
	shr.s16 	%rs106, %rs104, 2;
	add.s16 	%rs107, %rs106, %rs105;
	mul.lo.s16 	%rs108, %rs107, 24;
	sub.s16 	%rs109, %rs103, %rs108;
	cvt.s32.s16 	%r715, %rs109;
	add.s32 	%r716, %r43, %r715;
	mul.wide.s32 	%rd77, %r716, 4;
	add.s64 	%rd78, %rd26, %rd77;
	ld.shared.u32 	%r717, [%rd78];
	add.s32 	%r718, %r45, %r715;
	mul.wide.u32 	%rd79, %r718, 4;
	add.s64 	%rd80, %rd26, %rd79;
	ld.shared.u32 	%r719, [%rd80];
	add.s32 	%r720, %r46, %r715;
	mul.wide.u32 	%rd81, %r720, 4;
	add.s64 	%rd82, %rd26, %rd81;
	ld.shared.u32 	%r721, [%rd82];
	add.s32 	%r722, %r47, %r715;
	mul.wide.u32 	%rd83, %r722, 4;
	add.s64 	%rd84, %rd26, %rd83;
	ld.shared.u32 	%r723, [%rd84];
	add.s32 	%r724, %r48, %r715;
	mul.wide.s32 	%rd85, %r724, 4;
	add.s64 	%rd86, %rd26, %rd85;
	ld.shared.u32 	%r725, [%rd86];
	add.s32 	%r726, %r49, %r715;
	mul.wide.u32 	%rd87, %r726, 4;
	add.s64 	%rd88, %rd26, %rd87;
	ld.shared.u32 	%r727, [%rd88];
	add.s32 	%r728, %r50, %r715;
	mul.wide.u32 	%rd89, %r728, 4;
	add.s64 	%rd90, %rd26, %rd89;
	ld.shared.u32 	%r729, [%rd90];
	add.s32 	%r730, %r51, %r715;
	mul.wide.u32 	%rd91, %r730, 4;
	add.s64 	%rd92, %rd26, %rd91;
	ld.shared.u32 	%r731, [%rd92];
	add.s32 	%r732, %r52, %r715;
	mul.wide.s32 	%rd93, %r732, 4;
	add.s64 	%rd94, %rd26, %rd93;
	ld.shared.u32 	%r733, [%rd94];
	add.s32 	%r734, %r53, %r715;
	mul.wide.u32 	%rd95, %r734, 4;
	add.s64 	%rd96, %rd26, %rd95;
	ld.shared.u32 	%r735, [%rd96];
	add.s32 	%r736, %r54, %r715;
	mul.wide.u32 	%rd97, %r736, 4;
	add.s64 	%rd98, %rd26, %rd97;
	ld.shared.u32 	%r737, [%rd98];
	add.s32 	%r738, %r55, %r715;
	mul.wide.u32 	%rd99, %r738, 4;
	add.s64 	%rd100, %rd26, %rd99;
	ld.shared.u32 	%r739, [%rd100];
	add.s32 	%r740, %r56, %r715;
	mul.wide.s32 	%rd101, %r740, 4;
	add.s64 	%rd102, %rd26, %rd101;
	ld.shared.u32 	%r741, [%rd102];
	add.s32 	%r742, %r57, %r715;
	mul.wide.u32 	%rd103, %r742, 4;
	add.s64 	%rd104, %rd26, %rd103;
	ld.shared.u32 	%r743, [%rd104];
	add.s32 	%r744, %r58, %r715;
	mul.wide.u32 	%rd105, %r744, 4;
	add.s64 	%rd106, %rd26, %rd105;
	ld.shared.u32 	%r745, [%rd106];
	add.s32 	%r746, %r59, %r715;
	mul.wide.u32 	%rd107, %r746, 4;
	add.s64 	%rd108, %rd26, %rd107;
	ld.shared.u32 	%r747, [%rd108];
	add.s32 	%r748, %r60, %r715;
	mul.wide.s32 	%rd109, %r748, 4;
	add.s64 	%rd110, %rd26, %rd109;
	ld.shared.u32 	%r749, [%rd110];
	add.s32 	%r750, %r61, %r715;
	mul.wide.u32 	%rd111, %r750, 4;
	add.s64 	%rd112, %rd26, %rd111;
	ld.shared.u32 	%r751, [%rd112];
	add.s32 	%r752, %r62, %r715;
	mul.wide.u32 	%rd113, %r752, 4;
	add.s64 	%rd114, %rd26, %rd113;
	ld.shared.u32 	%r753, [%rd114];
	add.s32 	%r754, %r63, %r715;
	mul.wide.u32 	%rd115, %r754, 4;
	add.s64 	%rd116, %rd26, %rd115;
	ld.shared.u32 	%r755, [%rd116];
	add.s32 	%r756, %r64, %r715;
	mul.wide.s32 	%rd117, %r756, 4;
	add.s64 	%rd118, %rd26, %rd117;
	ld.shared.u32 	%r757, [%rd118];
	add.s32 	%r758, %r65, %r715;
	mul.wide.s32 	%rd119, %r758, 4;
	add.s64 	%rd120, %rd26, %rd119;
	ld.shared.u32 	%r759, [%rd120];
	bar.sync 	0;
	shfl.sync.idx.b32	%r760, %r3407, 0, 31, -1;
	shfl.sync.idx.b32	%r761, %r3407, 1, 31, -1;
	shfl.sync.idx.b32	%r762, %r3407, 2, 31, -1;
	shfl.sync.idx.b32	%r763, %r3407, 3, 31, -1;
	shfl.sync.idx.b32	%r764, %r3407, 4, 31, -1;
	shfl.sync.idx.b32	%r765, %r3407, 5, 31, -1;
	shfl.sync.idx.b32	%r766, %r3407, 6, 31, -1;
	shfl.sync.idx.b32	%r767, %r3407, 7, 31, -1;
	shfl.sync.idx.b32	%r768, %r3407, 8, 31, -1;
	shfl.sync.idx.b32	%r769, %r3407, 9, 31, -1;
	shfl.sync.idx.b32	%r770, %r3407, 10, 31, -1;
	shfl.sync.idx.b32	%r771, %r3407, 11, 31, -1;
	shfl.sync.idx.b32	%r772, %r3407, 12, 31, -1;
	shfl.sync.idx.b32	%r773, %r3407, 13, 31, -1;
	shfl.sync.idx.b32	%r774, %r3407, 14, 31, -1;
	shfl.sync.idx.b32	%r775, %r3407, 15, 31, -1;
	shfl.sync.idx.b32	%r776, %r3407, 16, 31, -1;
	shfl.sync.idx.b32	%r777, %r3407, 17, 31, -1;
	shfl.sync.idx.b32	%r778, %r3407, 18, 31, -1;
	shfl.sync.idx.b32	%r779, %r3407, 19, 31, -1;
	shfl.sync.idx.b32	%r780, %r3407, 20, 31, -1;
	shfl.sync.idx.b32	%r781, %r3407, 21, 31, -1;
	shfl.sync.idx.b32	%r782, %r3407, 22, 31, -1;
	shfl.sync.idx.b32	%r783, %r3407, 23, 31, -1;
	add.s32 	%r784, %r760, %r715;
	mul.wide.s32 	%rd121, %r784, 4;
	add.s64 	%rd122, %rd26, %rd121;
	st.shared.u32 	[%rd122], %r717;
	add.s32 	%r785, %r761, %r715;
	mul.wide.s32 	%rd123, %r785, 4;
	add.s64 	%rd124, %rd26, %rd123;
	st.shared.u32 	[%rd124], %r719;
	add.s32 	%r786, %r762, %r715;
	mul.wide.s32 	%rd125, %r786, 4;
	add.s64 	%rd126, %rd26, %rd125;
	st.shared.u32 	[%rd126], %r721;
	add.s32 	%r787, %r763, %r715;
	mul.wide.s32 	%rd127, %r787, 4;
	add.s64 	%rd128, %rd26, %rd127;
	st.shared.u32 	[%rd128], %r723;
	add.s32 	%r788, %r764, %r715;
	mul.wide.s32 	%rd129, %r788, 4;
	add.s64 	%rd130, %rd26, %rd129;
	st.shared.u32 	[%rd130], %r725;
	add.s32 	%r789, %r765, %r715;
	mul.wide.s32 	%rd131, %r789, 4;
	add.s64 	%rd132, %rd26, %rd131;
	st.shared.u32 	[%rd132], %r727;
	add.s32 	%r790, %r766, %r715;
	mul.wide.s32 	%rd133, %r790, 4;
	add.s64 	%rd134, %rd26, %rd133;
	st.shared.u32 	[%rd134], %r729;
	add.s32 	%r791, %r767, %r715;
	mul.wide.s32 	%rd135, %r791, 4;
	add.s64 	%rd136, %rd26, %rd135;
	st.shared.u32 	[%rd136], %r731;
	add.s32 	%r792, %r768, %r715;
	mul.wide.s32 	%rd137, %r792, 4;
	add.s64 	%rd138, %rd26, %rd137;
	st.shared.u32 	[%rd138], %r733;
	add.s32 	%r793, %r769, %r715;
	mul.wide.s32 	%rd139, %r793, 4;
	add.s64 	%rd140, %rd26, %rd139;
	st.shared.u32 	[%rd140], %r735;
	add.s32 	%r794, %r770, %r715;
	mul.wide.s32 	%rd141, %r794, 4;
	add.s64 	%rd142, %rd26, %rd141;
	st.shared.u32 	[%rd142], %r737;
	add.s32 	%r795, %r771, %r715;
	mul.wide.s32 	%rd143, %r795, 4;
	add.s64 	%rd144, %rd26, %rd143;
	st.shared.u32 	[%rd144], %r739;
	add.s32 	%r796, %r772, %r715;
	mul.wide.s32 	%rd145, %r796, 4;
	add.s64 	%rd146, %rd26, %rd145;
	st.shared.u32 	[%rd146], %r741;
	add.s32 	%r797, %r773, %r715;
	mul.wide.s32 	%rd147, %r797, 4;
	add.s64 	%rd148, %rd26, %rd147;
	st.shared.u32 	[%rd148], %r743;
	add.s32 	%r798, %r774, %r715;
	mul.wide.s32 	%rd149, %r798, 4;
	add.s64 	%rd150, %rd26, %rd149;
	st.shared.u32 	[%rd150], %r745;
	add.s32 	%r799, %r775, %r715;
	mul.wide.s32 	%rd151, %r799, 4;
	add.s64 	%rd152, %rd26, %rd151;
	st.shared.u32 	[%rd152], %r747;
	add.s32 	%r800, %r776, %r715;
	mul.wide.s32 	%rd153, %r800, 4;
	add.s64 	%rd154, %rd26, %rd153;
	st.shared.u32 	[%rd154], %r749;
	add.s32 	%r801, %r777, %r715;
	mul.wide.s32 	%rd155, %r801, 4;
	add.s64 	%rd156, %rd26, %rd155;
	st.shared.u32 	[%rd156], %r751;
	add.s32 	%r802, %r778, %r715;
	mul.wide.s32 	%rd157, %r802, 4;
	add.s64 	%rd158, %rd26, %rd157;
	st.shared.u32 	[%rd158], %r753;
	add.s32 	%r803, %r779, %r715;
	mul.wide.s32 	%rd159, %r803, 4;
	add.s64 	%rd160, %rd26, %rd159;
	st.shared.u32 	[%rd160], %r755;
	add.s32 	%r804, %r780, %r715;
	mul.wide.s32 	%rd161, %r804, 4;
	add.s64 	%rd162, %rd26, %rd161;
	st.shared.u32 	[%rd162], %r757;
	selp.b32 	%r805, 0, %r759, %p47;
	add.s32 	%r806, %r781, %r715;
	mul.wide.s32 	%rd163, %r806, 4;
	add.s64 	%rd164, %rd26, %rd163;
	st.shared.u32 	[%rd164], %r805;
	add.s32 	%r807, %r782, %r715;
	mul.wide.s32 	%rd165, %r807, 4;
	add.s64 	%rd166, %rd26, %rd165;
	st.shared.u32 	[%rd166], %r3406;
	add.s32 	%r808, %r783, %r715;
	mul.wide.s32 	%rd167, %r808, 4;
	add.s64 	%rd168, %rd26, %rd167;
	st.shared.u32 	[%rd168], %r3406;
	bar.sync 	0;
	mov.u32 	%r3419, %r3406;
	mov.u32 	%r3420, %r3406;
	mov.u32 	%r3421, %r3406;
	mov.u32 	%r3422, %r3406;
	mov.u32 	%r3423, %r3406;
	mov.u32 	%r3424, %r3406;
	mov.u32 	%r3425, %r3406;
	mov.u32 	%r3426, %r3406;
	mov.u32 	%r3427, %r3406;
	mov.u32 	%r3428, %r3406;
	mov.u32 	%r3429, %r3406;
	mov.u32 	%r3430, %r3406;
	mov.u32 	%r3431, %r3406;
	mov.u32 	%r3432, %r3406;
	mov.u32 	%r3433, %r3406;
	mov.u32 	%r3434, %r3406;
	mov.u32 	%r3435, %r3406;
	mov.u32 	%r3436, %r3406;
	mov.u32 	%r3437, %r3406;
	mov.u32 	%r3438, %r3406;
	mov.u32 	%r3439, %r3406;
	mov.u32 	%r3440, %r3406;
	mov.u32 	%r3441, %r3406;
	mov.u32 	%r3442, %r3406;
	@%p46 bra 	LBB0_63;
	bra.uni 	LBB0_17;
LBB0_63:                                // %oksrem3293
                                        //   in Loop: Header=BB0_16 Depth=1
	cvt.u16.u32 	%rs110, %r80;
	mul.hi.s16 	%rs111, %rs110, 10923;
	shr.u16 	%rs112, %rs111, 15;
	shr.s16 	%rs113, %rs111, 2;
	add.s16 	%rs114, %rs113, %rs112;
	mul.lo.s16 	%rs115, %rs114, 24;
	sub.s16 	%rs116, %rs110, %rs115;
	cvt.s32.s16 	%r809, %rs116;
	add.s32 	%r810, %r66, %r809;
	add.s32 	%r811, %r810, %r67;
	add.s32 	%r812, %r811, %r68;
	add.s32 	%r813, %r812, %r69;
	mul.wide.s32 	%rd169, %r813, 4;
	add.s64 	%rd171, %rd26, %rd169;
	ld.shared.u32 	%r3419, [%rd171];
	ld.shared.u32 	%r3420, [%rd10+4];
	ld.shared.u32 	%r3421, [%rd10+8];
	ld.shared.u32 	%r3422, [%rd10+12];
	ld.shared.u32 	%r3423, [%rd10+16];
	ld.shared.u32 	%r3424, [%rd10+20];
	ld.shared.u32 	%r3425, [%rd10+24];
	ld.shared.u32 	%r3426, [%rd10+28];
	ld.shared.u32 	%r3427, [%rd10+32];
	ld.shared.u32 	%r3428, [%rd10+36];
	ld.shared.u32 	%r3429, [%rd10+40];
	ld.shared.u32 	%r3430, [%rd10+44];
	ld.shared.u32 	%r3431, [%rd10+48];
	ld.shared.u32 	%r3432, [%rd10+52];
	ld.shared.u32 	%r3433, [%rd10+56];
	ld.shared.u32 	%r3434, [%rd10+60];
	add.s16 	%rs117, %rs110, 16;
	mul.hi.s16 	%rs118, %rs117, 10923;
	shr.u16 	%rs119, %rs118, 15;
	shr.s16 	%rs120, %rs118, 2;
	add.s16 	%rs121, %rs120, %rs119;
	mul.lo.s16 	%rs122, %rs121, 24;
	sub.s16 	%rs123, %rs117, %rs122;
	cvt.s32.s16 	%r814, %rs123;
	add.s32 	%r815, %r66, %r814;
	add.s32 	%r816, %r815, %r67;
	add.s32 	%r817, %r816, %r68;
	add.s32 	%r818, %r817, %r69;
	mul.wide.s32 	%rd172, %r818, 4;
	add.s64 	%rd173, %rd26, %rd172;
	ld.shared.u32 	%r3435, [%rd173];
	add.s16 	%rs124, %rs110, 17;
	mul.hi.s16 	%rs125, %rs124, 10923;
	shr.u16 	%rs126, %rs125, 15;
	shr.s16 	%rs127, %rs125, 2;
	add.s16 	%rs128, %rs127, %rs126;
	mul.lo.s16 	%rs129, %rs128, 24;
	sub.s16 	%rs130, %rs124, %rs129;
	cvt.s32.s16 	%r819, %rs130;
	add.s32 	%r820, %r66, %r819;
	add.s32 	%r821, %r820, %r67;
	add.s32 	%r822, %r821, %r68;
	add.s32 	%r823, %r822, %r69;
	mul.wide.s32 	%rd174, %r823, 4;
	add.s64 	%rd175, %rd26, %rd174;
	ld.shared.u32 	%r3436, [%rd175];
	add.s16 	%rs131, %rs110, 18;
	mul.hi.s16 	%rs132, %rs131, 10923;
	shr.u16 	%rs133, %rs132, 15;
	shr.s16 	%rs134, %rs132, 2;
	add.s16 	%rs135, %rs134, %rs133;
	mul.lo.s16 	%rs136, %rs135, 24;
	sub.s16 	%rs137, %rs131, %rs136;
	cvt.s32.s16 	%r824, %rs137;
	add.s32 	%r825, %r66, %r824;
	add.s32 	%r826, %r825, %r67;
	add.s32 	%r827, %r826, %r68;
	add.s32 	%r828, %r827, %r69;
	mul.wide.s32 	%rd176, %r828, 4;
	add.s64 	%rd177, %rd26, %rd176;
	ld.shared.u32 	%r3437, [%rd177];
	add.s16 	%rs138, %rs110, 19;
	mul.hi.s16 	%rs139, %rs138, 10923;
	shr.u16 	%rs140, %rs139, 15;
	shr.s16 	%rs141, %rs139, 2;
	add.s16 	%rs142, %rs141, %rs140;
	mul.lo.s16 	%rs143, %rs142, 24;
	sub.s16 	%rs144, %rs138, %rs143;
	cvt.s32.s16 	%r829, %rs144;
	add.s32 	%r830, %r66, %r829;
	add.s32 	%r831, %r830, %r67;
	add.s32 	%r832, %r831, %r68;
	add.s32 	%r833, %r832, %r69;
	mul.wide.s32 	%rd178, %r833, 4;
	add.s64 	%rd179, %rd26, %rd178;
	ld.shared.u32 	%r3438, [%rd179];
	add.s16 	%rs145, %rs110, 20;
	mul.hi.s16 	%rs146, %rs145, 10923;
	shr.u16 	%rs147, %rs146, 15;
	shr.s16 	%rs148, %rs146, 2;
	add.s16 	%rs149, %rs148, %rs147;
	mul.lo.s16 	%rs150, %rs149, 24;
	sub.s16 	%rs151, %rs145, %rs150;
	cvt.s32.s16 	%r834, %rs151;
	add.s32 	%r835, %r66, %r834;
	add.s32 	%r836, %r835, %r67;
	add.s32 	%r837, %r836, %r68;
	add.s32 	%r838, %r837, %r69;
	mul.wide.s32 	%rd180, %r838, 4;
	add.s64 	%rd181, %rd26, %rd180;
	ld.shared.u32 	%r3439, [%rd181];
	add.s16 	%rs152, %rs110, 21;
	mul.hi.s16 	%rs153, %rs152, 10923;
	shr.u16 	%rs154, %rs153, 15;
	shr.s16 	%rs155, %rs153, 2;
	add.s16 	%rs156, %rs155, %rs154;
	mul.lo.s16 	%rs157, %rs156, 24;
	sub.s16 	%rs158, %rs152, %rs157;
	cvt.s32.s16 	%r839, %rs158;
	add.s32 	%r840, %r66, %r839;
	add.s32 	%r841, %r840, %r67;
	add.s32 	%r842, %r841, %r68;
	add.s32 	%r843, %r842, %r69;
	mul.wide.s32 	%rd182, %r843, 4;
	add.s64 	%rd183, %rd26, %rd182;
	ld.shared.u32 	%r3440, [%rd183];
	add.s16 	%rs159, %rs110, 22;
	mul.hi.s16 	%rs160, %rs159, 10923;
	shr.u16 	%rs161, %rs160, 15;
	shr.s16 	%rs162, %rs160, 2;
	add.s16 	%rs163, %rs162, %rs161;
	mul.lo.s16 	%rs164, %rs163, 24;
	sub.s16 	%rs165, %rs159, %rs164;
	cvt.s32.s16 	%r844, %rs165;
	add.s32 	%r845, %r66, %r844;
	add.s32 	%r846, %r845, %r67;
	add.s32 	%r847, %r846, %r68;
	add.s32 	%r848, %r847, %r69;
	mul.wide.s32 	%rd184, %r848, 4;
	add.s64 	%rd185, %rd26, %rd184;
	ld.shared.u32 	%r3441, [%rd185];
	add.s16 	%rs166, %rs110, 23;
	mul.hi.s16 	%rs167, %rs166, 10923;
	shr.u16 	%rs168, %rs167, 15;
	shr.s16 	%rs169, %rs167, 2;
	add.s16 	%rs170, %rs169, %rs168;
	mul.lo.s16 	%rs171, %rs170, 24;
	sub.s16 	%rs172, %rs166, %rs171;
	cvt.s32.s16 	%r849, %rs172;
	add.s32 	%r850, %r66, %r849;
	add.s32 	%r851, %r850, %r67;
	add.s32 	%r852, %r851, %r68;
	add.s32 	%r853, %r852, %r69;
	mul.wide.s32 	%rd186, %r853, 4;
	add.s64 	%rd187, %rd26, %rd186;
	ld.shared.u32 	%r3442, [%rd187];
LBB0_17:                                // %L12780
                                        //   in Loop: Header=BB0_16 Depth=1
	bar.sync 	0;
	mov.u32 	%r3443, 12;
	mov.u32 	%r3444, %r3406;
	bra.uni 	LBB0_18;
LBB0_57:                                // %L37266
                                        //   in Loop: Header=BB0_18 Depth=2
	add.s32 	%r3446, %r3446, 1;
	mov.u32 	%r3447, 0;
	mov.u32 	%r3448, %r3447;
	mov.u32 	%r3445, %r3447;
LBB0_58:                                // %L37267
                                        //   in Loop: Header=BB0_18 Depth=2
	bar.sync 	0;
	add.s32 	%r3444, %r3444, 1;
	add.s32 	%r3443, %r3443, -4;
	setp.eq.s32 	%p80, %r3443, -12;
	@%p80 bra 	LBB0_59;
LBB0_18:                                // %L12806
                                        //   Parent Loop BB0_16 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p51, %r3443, 12;
	selp.b32 	%r1393, %r3419, 0, %p51;
	setp.eq.s32 	%p52, %r3443, 8;
	selp.b32 	%r1394, %r3423, %r1393, %p52;
	setp.eq.s32 	%p53, %r3443, 4;
	selp.b32 	%r1395, %r3427, %r1394, %p53;
	setp.eq.s32 	%p54, %r3443, 0;
	selp.b32 	%r1396, %r3431, %r1395, %p54;
	setp.eq.s32 	%p55, %r3443, -4;
	selp.b32 	%r1397, %r3435, %r1396, %p55;
	setp.eq.s32 	%p56, %r3443, -8;
	selp.b32 	%r1398, %r3439, %r1397, %p56;
	selp.b32 	%r1399, %r3420, 0, %p51;
	selp.b32 	%r1400, %r3424, %r1399, %p52;
	selp.b32 	%r1401, %r3428, %r1400, %p53;
	selp.b32 	%r1402, %r3432, %r1401, %p54;
	selp.b32 	%r1403, %r3436, %r1402, %p55;
	selp.b32 	%r1404, %r3440, %r1403, %p56;
	selp.b32 	%r1405, %r3421, 0, %p51;
	selp.b32 	%r1406, %r3425, %r1405, %p52;
	selp.b32 	%r1407, %r3429, %r1406, %p53;
	selp.b32 	%r1408, %r3433, %r1407, %p54;
	selp.b32 	%r1409, %r3437, %r1408, %p55;
	selp.b32 	%r1410, %r3441, %r1409, %p56;
	selp.b32 	%r1411, %r3422, 0, %p51;
	selp.b32 	%r1412, %r3426, %r1411, %p52;
	selp.b32 	%r1413, %r3430, %r1412, %p53;
	selp.b32 	%r1414, %r3434, %r1413, %p54;
	selp.b32 	%r1415, %r3438, %r1414, %p55;
	selp.b32 	%r1416, %r3442, %r1415, %p56;
	mov.u16 	%rs210, 25600;
	// begin inline asm
	mov.b32 %r861, {%rs210, %rs210};
	// end inline asm
	mov.u16 	%rs212, 21504;
	// begin inline asm
	mov.b32 %r872, {%rs212, %rs212};
	// end inline asm
	xor.b32  	%r871, %r1398, -2004318072;
	mov.u32 	%r997, 983055;
	// begin inline asm
	lop3.b32 %r858, %r997, %r871, %r861, 202;
	// end inline asm
	mov.u16 	%rs216, 18432;
	// begin inline asm
	mov.b32 %r862, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r863, %r861, %r862;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r866, %r858, %r863;
	// end inline asm
	mov.u32 	%r1008, 15728880;
	// begin inline asm
	lop3.b32 %r869, %r1008, %r871, %r872, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r873, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r874, %r872, %r873;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r877, %r869, %r874;
	// end inline asm
	// begin inline asm
	mov.b32 %r907, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	mov.b32 %r918, {%rs212, %rs212};
	// end inline asm
	xor.b32  	%r917, %r1404, -2004318072;
	// begin inline asm
	lop3.b32 %r904, %r997, %r917, %r907, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r908, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r909, %r907, %r908;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r912, %r904, %r909;
	// end inline asm
	// begin inline asm
	lop3.b32 %r915, %r1008, %r917, %r918, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r919, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r920, %r918, %r919;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r923, %r915, %r920;
	// end inline asm
	// begin inline asm
	mov.b32 %r953, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	mov.b32 %r964, {%rs212, %rs212};
	// end inline asm
	xor.b32  	%r963, %r1410, -2004318072;
	// begin inline asm
	lop3.b32 %r950, %r997, %r963, %r953, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r954, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r955, %r953, %r954;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r958, %r950, %r955;
	// end inline asm
	// begin inline asm
	lop3.b32 %r961, %r1008, %r963, %r964, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r965, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r966, %r964, %r965;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r969, %r961, %r966;
	// end inline asm
	// begin inline asm
	mov.b32 %r999, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	mov.b32 %r1010, {%rs212, %rs212};
	// end inline asm
	xor.b32  	%r1009, %r1416, -2004318072;
	// begin inline asm
	lop3.b32 %r996, %r997, %r1009, %r999, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1000, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1001, %r999, %r1000;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1004, %r996, %r1001;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1007, %r1008, %r1009, %r1010, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1011, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1012, %r1010, %r1011;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1015, %r1007, %r1012;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3412;
    mov.b32 {%r2im, %r2re}, %r866;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1040, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3413;
    mov.b32 {%r2im, %r2re}, %r877;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1043, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3412;
    mov.b32 {%r2im, %r2re}, %r912;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1046, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3413;
    mov.b32 {%r2im, %r2re}, %r923;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1049, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3412;
    mov.b32 {%r2im, %r2re}, %r958;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1052, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3413;
    mov.b32 {%r2im, %r2re}, %r969;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1055, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3412;
    mov.b32 {%r2im, %r2re}, %r1004;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1058, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3413;
    mov.b32 {%r2im, %r2re}, %r1015;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1061, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1124, %r1127}, {%r304, %r301}, {%r1040}, {%r3406, %r3406};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1133, %r1136}, {%r304, %r301}, {%r1043}, {%r3406, %r3406};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1142, %r1145}, {%r304, %r301}, {%r1046}, {%r3406, %r3406};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1151, %r1154}, {%r304, %r301}, {%r1049}, {%r3406, %r3406};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1160, %r1163}, {%r304, %r301}, {%r1052}, {%r3406, %r3406};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1169, %r1172}, {%r304, %r301}, {%r1055}, {%r3406, %r3406};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1178, %r1181}, {%r304, %r301}, {%r1058}, {%r3406, %r3406};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1187, %r1190}, {%r304, %r301}, {%r1061}, {%r3406, %r3406};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1120, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1122, %r1120, %r1124;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1125, %r339, %r1127, %r1122;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1129, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1131, %r1129, %r1133;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1134, %r339, %r1136, %r1131;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1138, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1140, %r1138, %r1142;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1143, %r339, %r1145, %r1140;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1147, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1149, %r1147, %r1151;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1152, %r339, %r1154, %r1149;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1156, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1158, %r1156, %r1160;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1161, %r339, %r1163, %r1158;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1165, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1167, %r1165, %r1169;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1170, %r339, %r1172, %r1167;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1174, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1176, %r1174, %r1178;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1179, %r339, %r1181, %r1176;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1183, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1185, %r1183, %r1187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1188, %r339, %r1190, %r1185;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1192, %r342, %r1127;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1195, %r339, %r1124, %r1192;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1199, %r342, %r1136;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1202, %r339, %r1133, %r1199;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1206, %r342, %r1145;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1209, %r339, %r1142, %r1206;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1213, %r342, %r1154;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1216, %r339, %r1151, %r1213;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1220, %r342, %r1163;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1223, %r339, %r1160, %r1220;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1227, %r342, %r1172;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1230, %r339, %r1169, %r1227;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1234, %r342, %r1181;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1237, %r339, %r1178, %r1234;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1241, %r342, %r1190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1244, %r339, %r1187, %r1241;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1329, %r1330}, {%r372, %r366, %r369, %r363}, {%r1195, %r1125}, {%r3406, %r3406};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1337, %r1338}, {%r372, %r366, %r369, %r363}, {%r1202, %r1134}, {%r3406, %r3406};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1345, %r1346}, {%r372, %r366, %r369, %r363}, {%r1209, %r1143}, {%r3406, %r3406};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1353, %r1354}, {%r372, %r366, %r369, %r363}, {%r1216, %r1152}, {%r3406, %r3406};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1361, %r1362}, {%r372, %r366, %r369, %r363}, {%r1223, %r1161}, {%r3406, %r3406};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1369, %r1370}, {%r372, %r366, %r369, %r363}, {%r1230, %r1170}, {%r3406, %r3406};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1377, %r1378}, {%r372, %r366, %r369, %r363}, {%r1237, %r1179}, {%r3406, %r3406};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1385, %r1386}, {%r372, %r366, %r369, %r363}, {%r1244, %r1188}, {%r3406, %r3406};
	// end inline asm
	// begin inline asm
	prmt.b32 %r1328, %r1329, %r1330, %r661;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1332, %r1329, %r1330, %r665;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1336, %r1337, %r1338, %r661;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1340, %r1337, %r1338, %r665;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1344, %r1345, %r1346, %r661;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1348, %r1345, %r1346, %r665;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1352, %r1353, %r1354, %r661;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1356, %r1353, %r1354, %r665;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1360, %r1361, %r1362, %r661;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1364, %r1361, %r1362, %r665;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1368, %r1369, %r1370, %r661;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1372, %r1369, %r1370, %r665;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1376, %r1377, %r1378, %r661;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1380, %r1377, %r1378, %r665;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1384, %r1385, %r1386, %r661;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1388, %r1385, %r1386, %r665;
	// end inline asm
	st.shared.u32 	[%rd6], %r1328;
	st.shared.u32 	[%rd7+33024], %r1332;
	st.shared.u32 	[%rd7+128], %r1336;
	st.shared.u32 	[%rd7+33152], %r1340;
	cvt.u16.u32 	%rs221, %r3444;
	and.b16  	%rs222, %rs221, 255;
	mul.lo.s16 	%rs223, %rs222, 171;
	shr.u16 	%rs224, %rs223, 10;
	mul.lo.s16 	%rs225, %rs224, 6;
	sub.s16 	%rs226, %rs221, %rs225;
	shl.b16 	%rs227, %rs226, 2;
	cvt.u32.u16 	%r1417, %rs227;
	and.b32  	%r120, %r1417, 252;
	add.s32 	%r1418, %r80, %r120;
	add.s32 	%r1419, %r1418, 1;
	shr.s32 	%r1420, %r1419, 31;
	shr.u32 	%r1421, %r1420, 30;
	add.s32 	%r1422, %r1419, %r1421;
	and.b32  	%r1423, %r1422, 67108860;
	sub.s32 	%r1424, %r1419, %r1423;
	shl.b32 	%r121, %r1424, 6;
	add.s32 	%r1425, %r70, %r121;
	mul.wide.s32 	%rd188, %r1425, 4;
	add.s64 	%rd190, %rd26, %rd188;
	st.shared.u32 	[%rd190], %r1344;
	add.s32 	%r122, %r121, 8256;
	add.s32 	%r1426, %r70, %r122;
	mul.wide.u32 	%rd191, %r1426, 4;
	add.s64 	%rd192, %rd26, %rd191;
	st.shared.u32 	[%rd192], %r1348;
	or.b32  	%r123, %r121, 32;
	add.s32 	%r1427, %r70, %r123;
	mul.wide.s32 	%rd193, %r1427, 4;
	add.s64 	%rd194, %rd26, %rd193;
	st.shared.u32 	[%rd194], %r1352;
	add.s32 	%r124, %r121, 8288;
	add.s32 	%r1428, %r70, %r124;
	mul.wide.u32 	%rd195, %r1428, 4;
	add.s64 	%rd196, %rd26, %rd195;
	st.shared.u32 	[%rd196], %r1356;
	add.s32 	%r1429, %r1418, 2;
	shr.s32 	%r1430, %r1429, 31;
	shr.u32 	%r1431, %r1430, 30;
	add.s32 	%r1432, %r1429, %r1431;
	and.b32  	%r1433, %r1432, 67108860;
	sub.s32 	%r1434, %r1429, %r1433;
	shl.b32 	%r125, %r1434, 6;
	add.s32 	%r1435, %r70, %r125;
	mul.wide.s32 	%rd197, %r1435, 4;
	add.s64 	%rd198, %rd26, %rd197;
	st.shared.u32 	[%rd198], %r1360;
	add.s32 	%r126, %r125, 8256;
	add.s32 	%r1436, %r70, %r126;
	mul.wide.u32 	%rd199, %r1436, 4;
	add.s64 	%rd200, %rd26, %rd199;
	st.shared.u32 	[%rd200], %r1364;
	or.b32  	%r127, %r125, 32;
	add.s32 	%r1437, %r70, %r127;
	mul.wide.s32 	%rd201, %r1437, 4;
	add.s64 	%rd202, %rd26, %rd201;
	st.shared.u32 	[%rd202], %r1368;
	add.s32 	%r128, %r125, 8288;
	add.s32 	%r1438, %r70, %r128;
	mul.wide.u32 	%rd203, %r1438, 4;
	add.s64 	%rd204, %rd26, %rd203;
	st.shared.u32 	[%rd204], %r1372;
	add.s32 	%r1439, %r1418, 3;
	shr.s32 	%r1440, %r1439, 31;
	shr.u32 	%r1441, %r1440, 30;
	add.s32 	%r1442, %r1439, %r1441;
	and.b32  	%r1443, %r1442, 67108860;
	sub.s32 	%r1444, %r1439, %r1443;
	shl.b32 	%r129, %r1444, 6;
	add.s32 	%r1445, %r70, %r129;
	mul.wide.s32 	%rd205, %r1445, 4;
	add.s64 	%rd206, %rd26, %rd205;
	st.shared.u32 	[%rd206], %r1376;
	add.s32 	%r130, %r129, 8256;
	add.s32 	%r1446, %r70, %r130;
	mul.wide.u32 	%rd207, %r1446, 4;
	add.s64 	%rd208, %rd26, %rd207;
	st.shared.u32 	[%rd208], %r1380;
	or.b32  	%r131, %r129, 32;
	add.s32 	%r1447, %r70, %r131;
	mul.wide.s32 	%rd209, %r1447, 4;
	add.s64 	%rd210, %rd26, %rd209;
	st.shared.u32 	[%rd210], %r1384;
	add.s32 	%r132, %r129, 8288;
	add.s32 	%r1448, %r70, %r132;
	mul.wide.u32 	%rd211, %r1448, 4;
	add.s64 	%rd212, %rd26, %rd211;
	st.shared.u32 	[%rd212], %r1388;
	bar.sync 	0;
	mov.u32 	%r3449, %r3406;
	mov.u32 	%r3450, %r3406;
	mov.u32 	%r3451, %r3406;
	mov.u32 	%r3452, %r3406;
	@%p50 bra 	LBB0_64;
	bra.uni 	LBB0_19;
LBB0_64:                                // %oksrem7104
                                        //   in Loop: Header=BB0_18 Depth=2
	ld.shared.u32 	%r3449, [%rd8];
	ld.shared.u32 	%r3450, [%rd9+33024];
	ld.shared.u32 	%r3451, [%rd9+128];
	ld.shared.u32 	%r3452, [%rd9+33152];
LBB0_19:                                // %L19410
                                        //   in Loop: Header=BB0_18 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1481, %r1484}, {%r304, %r301}, {%r3449}, {%r3406, %r3406};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1490, %r1493}, {%r304, %r301}, {%r3450}, {%r3406, %r3406};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1499, %r1502}, {%r304, %r301}, {%r3451}, {%r3406, %r3406};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1508, %r1511}, {%r304, %r301}, {%r3452}, {%r3406, %r3406};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1477, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1479, %r1477, %r1481;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1482, %r339, %r1484, %r1479;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1486, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1488, %r1486, %r1490;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1491, %r339, %r1493, %r1488;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1495, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1497, %r1495, %r1499;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1500, %r339, %r1502, %r1497;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1504, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1506, %r1504, %r1508;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1509, %r339, %r1511, %r1506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1513, %r342, %r1484;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1516, %r339, %r1481, %r1513;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1520, %r342, %r1493;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1523, %r339, %r1490, %r1520;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1527, %r342, %r1502;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1530, %r339, %r1499, %r1527;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1534, %r342, %r1511;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1537, %r339, %r1508, %r1534;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1586, %r1582}, {%r372, %r366, %r369, %r363}, {%r1516, %r1482}, {%r3406, %r3406};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1602, %r1598}, {%r372, %r366, %r369, %r363}, {%r1523, %r1491}, {%r3406, %r3406};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1594, %r1590}, {%r372, %r366, %r369, %r363}, {%r1530, %r1500}, {%r3406, %r3406};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1610, %r1606}, {%r372, %r366, %r369, %r363}, {%r1537, %r1509}, {%r3406, %r3406};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1581, %r1582, %r1582, %r3448;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1585, %r1586, %r1586, %r1581;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1589, %r1590, %r1590, %r1585;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3456, %r1594, %r1594, %r1589;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1597, %r1598, %r1598, %r3447;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1601, %r1602, %r1602, %r1597;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1605, %r1606, %r1606, %r1601;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3455, %r1610, %r1610, %r1605;
	// end inline asm
	add.s32 	%r3453, %r3445, 1;
	setp.ne.s32 	%p57, %r3453, 40;
	@%p57 bra 	LBB0_23;
// %bb.20:                              // %L19591
                                        //   in Loop: Header=BB0_18 Depth=2
	@%p26 bra 	LBB0_22;
// %bb.21:                              // %L19656
                                        //   in Loop: Header=BB0_18 Depth=2
	mad.lo.s32 	%r1613, %r3446, 96768, %r72;
	or.b32  	%r1614, %r1613, %r44;
	add.s32 	%r1615, %r1614, %r73;
	mul.wide.u32 	%rd213, %r1615, 4;
	add.s64 	%rd214, %rd4, %rd213;
	st.global.u32 	[%rd214], %r3456;
	add.s32 	%r1616, %r1614, %r74;
	mul.wide.u32 	%rd215, %r1616, 4;
	add.s64 	%rd216, %rd4, %rd215;
	st.global.u32 	[%rd216], %r3455;
LBB0_22:                                // %L19912
                                        //   in Loop: Header=BB0_18 Depth=2
	add.s32 	%r3446, %r3446, 1;
	mov.u32 	%r3453, 0;
	mov.u32 	%r3455, %r3453;
	mov.u32 	%r3456, %r3453;
LBB0_23:                                // %L19913
                                        //   in Loop: Header=BB0_18 Depth=2
	mov.u32 	%r1618, 0;
	mov.u32 	%r3457, %r1618;
	mov.u32 	%r3458, %r1618;
	mov.u32 	%r3459, %r1618;
	mov.u32 	%r3460, %r1618;
	@%p50 bra 	LBB0_65;
	bra.uni 	LBB0_24;
LBB0_65:                                // %oksrem7752
                                        //   in Loop: Header=BB0_18 Depth=2
	add.s32 	%r1619, %r71, %r121;
	mul.wide.s32 	%rd217, %r1619, 4;
	add.s64 	%rd219, %rd26, %rd217;
	ld.shared.u32 	%r3457, [%rd219];
	add.s32 	%r1620, %r71, %r122;
	mul.wide.u32 	%rd220, %r1620, 4;
	add.s64 	%rd221, %rd26, %rd220;
	ld.shared.u32 	%r3458, [%rd221];
	add.s32 	%r1621, %r71, %r123;
	mul.wide.s32 	%rd222, %r1621, 4;
	add.s64 	%rd223, %rd26, %rd222;
	ld.shared.u32 	%r3459, [%rd223];
	add.s32 	%r1622, %r71, %r124;
	mul.wide.u32 	%rd224, %r1622, 4;
	add.s64 	%rd225, %rd26, %rd224;
	ld.shared.u32 	%r3460, [%rd225];
LBB0_24:                                // %L21118
                                        //   in Loop: Header=BB0_18 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1655, %r1658}, {%r304, %r301}, {%r3457}, {%r1618, %r1618};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1664, %r1667}, {%r304, %r301}, {%r3458}, {%r1618, %r1618};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1673, %r1676}, {%r304, %r301}, {%r3459}, {%r1618, %r1618};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1682, %r1685}, {%r304, %r301}, {%r3460}, {%r1618, %r1618};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1651, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1653, %r1651, %r1655;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1656, %r339, %r1658, %r1653;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1660, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1662, %r1660, %r1664;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1665, %r339, %r1667, %r1662;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1669, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1671, %r1669, %r1673;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1674, %r339, %r1676, %r1671;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1678, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1680, %r1678, %r1682;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1683, %r339, %r1685, %r1680;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1687, %r342, %r1658;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1690, %r339, %r1655, %r1687;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1694, %r342, %r1667;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1697, %r339, %r1664, %r1694;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1701, %r342, %r1676;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1704, %r339, %r1673, %r1701;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1708, %r342, %r1685;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1711, %r339, %r1682, %r1708;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1760, %r1756}, {%r372, %r366, %r369, %r363}, {%r1690, %r1656}, {%r1618, %r1618};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1776, %r1772}, {%r372, %r366, %r369, %r363}, {%r1697, %r1665}, {%r1618, %r1618};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1768, %r1764}, {%r372, %r366, %r369, %r363}, {%r1704, %r1674}, {%r1618, %r1618};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1784, %r1780}, {%r372, %r366, %r369, %r363}, {%r1711, %r1683}, {%r1618, %r1618};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1755, %r1756, %r1756, %r3456;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1759, %r1760, %r1760, %r1755;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1763, %r1764, %r1764, %r1759;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3464, %r1768, %r1768, %r1763;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1771, %r1772, %r1772, %r3455;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1775, %r1776, %r1776, %r1771;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1779, %r1780, %r1780, %r1775;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3463, %r1784, %r1784, %r1779;
	// end inline asm
	add.s32 	%r3461, %r3453, 1;
	setp.ne.s32 	%p60, %r3461, 40;
	@%p60 bra 	LBB0_28;
// %bb.25:                              // %L21299
                                        //   in Loop: Header=BB0_18 Depth=2
	@%p26 bra 	LBB0_27;
// %bb.26:                              // %L21364
                                        //   in Loop: Header=BB0_18 Depth=2
	mad.lo.s32 	%r1787, %r3446, 96768, %r72;
	or.b32  	%r1788, %r1787, %r44;
	add.s32 	%r1789, %r1788, %r73;
	mul.wide.u32 	%rd226, %r1789, 4;
	add.s64 	%rd227, %rd4, %rd226;
	st.global.u32 	[%rd227], %r3464;
	add.s32 	%r1790, %r1788, %r74;
	mul.wide.u32 	%rd228, %r1790, 4;
	add.s64 	%rd229, %rd4, %rd228;
	st.global.u32 	[%rd229], %r3463;
LBB0_27:                                // %L21620
                                        //   in Loop: Header=BB0_18 Depth=2
	add.s32 	%r3446, %r3446, 1;
	mov.u32 	%r3461, 0;
	mov.u32 	%r3463, %r3461;
	mov.u32 	%r3464, %r3461;
LBB0_28:                                // %L21621
                                        //   in Loop: Header=BB0_18 Depth=2
	mov.u32 	%r1792, 0;
	mov.u32 	%r3465, %r1792;
	mov.u32 	%r3466, %r1792;
	mov.u32 	%r3467, %r1792;
	mov.u32 	%r3468, %r1792;
	@%p50 bra 	LBB0_66;
	bra.uni 	LBB0_29;
LBB0_66:                                // %oksrem8400
                                        //   in Loop: Header=BB0_18 Depth=2
	add.s32 	%r1793, %r71, %r125;
	mul.wide.s32 	%rd230, %r1793, 4;
	add.s64 	%rd232, %rd26, %rd230;
	ld.shared.u32 	%r3465, [%rd232];
	add.s32 	%r1794, %r71, %r126;
	mul.wide.u32 	%rd233, %r1794, 4;
	add.s64 	%rd234, %rd26, %rd233;
	ld.shared.u32 	%r3466, [%rd234];
	add.s32 	%r1795, %r71, %r127;
	mul.wide.s32 	%rd235, %r1795, 4;
	add.s64 	%rd236, %rd26, %rd235;
	ld.shared.u32 	%r3467, [%rd236];
	add.s32 	%r1796, %r71, %r128;
	mul.wide.u32 	%rd237, %r1796, 4;
	add.s64 	%rd238, %rd26, %rd237;
	ld.shared.u32 	%r3468, [%rd238];
LBB0_29:                                // %L22826
                                        //   in Loop: Header=BB0_18 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1829, %r1832}, {%r304, %r301}, {%r3465}, {%r1792, %r1792};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1838, %r1841}, {%r304, %r301}, {%r3466}, {%r1792, %r1792};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1847, %r1850}, {%r304, %r301}, {%r3467}, {%r1792, %r1792};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1856, %r1859}, {%r304, %r301}, {%r3468}, {%r1792, %r1792};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1825, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1827, %r1825, %r1829;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1830, %r339, %r1832, %r1827;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1834, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1836, %r1834, %r1838;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1839, %r339, %r1841, %r1836;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1843, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1845, %r1843, %r1847;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1848, %r339, %r1850, %r1845;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1852, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1854, %r1852, %r1856;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1857, %r339, %r1859, %r1854;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1861, %r342, %r1832;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1864, %r339, %r1829, %r1861;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1868, %r342, %r1841;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1871, %r339, %r1838, %r1868;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1875, %r342, %r1850;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1878, %r339, %r1847, %r1875;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1882, %r342, %r1859;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1885, %r339, %r1856, %r1882;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1934, %r1930}, {%r372, %r366, %r369, %r363}, {%r1864, %r1830}, {%r1792, %r1792};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1950, %r1946}, {%r372, %r366, %r369, %r363}, {%r1871, %r1839}, {%r1792, %r1792};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1942, %r1938}, {%r372, %r366, %r369, %r363}, {%r1878, %r1848}, {%r1792, %r1792};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1958, %r1954}, {%r372, %r366, %r369, %r363}, {%r1885, %r1857}, {%r1792, %r1792};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1929, %r1930, %r1930, %r3464;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1933, %r1934, %r1934, %r1929;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1937, %r1938, %r1938, %r1933;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3472, %r1942, %r1942, %r1937;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1945, %r1946, %r1946, %r3463;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1949, %r1950, %r1950, %r1945;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1953, %r1954, %r1954, %r1949;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3471, %r1958, %r1958, %r1953;
	// end inline asm
	add.s32 	%r3469, %r3461, 1;
	setp.ne.s32 	%p63, %r3469, 40;
	@%p63 bra 	LBB0_33;
// %bb.30:                              // %L23007
                                        //   in Loop: Header=BB0_18 Depth=2
	@%p26 bra 	LBB0_32;
// %bb.31:                              // %L23072
                                        //   in Loop: Header=BB0_18 Depth=2
	mad.lo.s32 	%r1961, %r3446, 96768, %r72;
	or.b32  	%r1962, %r1961, %r44;
	add.s32 	%r1963, %r1962, %r73;
	mul.wide.u32 	%rd239, %r1963, 4;
	add.s64 	%rd240, %rd4, %rd239;
	st.global.u32 	[%rd240], %r3472;
	add.s32 	%r1964, %r1962, %r74;
	mul.wide.u32 	%rd241, %r1964, 4;
	add.s64 	%rd242, %rd4, %rd241;
	st.global.u32 	[%rd242], %r3471;
LBB0_32:                                // %L23328
                                        //   in Loop: Header=BB0_18 Depth=2
	add.s32 	%r3446, %r3446, 1;
	mov.u32 	%r3469, 0;
	mov.u32 	%r3471, %r3469;
	mov.u32 	%r3472, %r3469;
LBB0_33:                                // %L23329
                                        //   in Loop: Header=BB0_18 Depth=2
	mov.u32 	%r1966, 0;
	mov.u32 	%r3473, %r1966;
	mov.u32 	%r3474, %r1966;
	mov.u32 	%r3475, %r1966;
	mov.u32 	%r3476, %r1966;
	@%p50 bra 	LBB0_67;
	bra.uni 	LBB0_34;
LBB0_67:                                // %oksrem9048
                                        //   in Loop: Header=BB0_18 Depth=2
	add.s32 	%r1967, %r71, %r129;
	mul.wide.s32 	%rd243, %r1967, 4;
	add.s64 	%rd245, %rd26, %rd243;
	ld.shared.u32 	%r3473, [%rd245];
	add.s32 	%r1968, %r71, %r130;
	mul.wide.u32 	%rd246, %r1968, 4;
	add.s64 	%rd247, %rd26, %rd246;
	ld.shared.u32 	%r3474, [%rd247];
	add.s32 	%r1969, %r71, %r131;
	mul.wide.s32 	%rd248, %r1969, 4;
	add.s64 	%rd249, %rd26, %rd248;
	ld.shared.u32 	%r3475, [%rd249];
	add.s32 	%r1970, %r71, %r132;
	mul.wide.u32 	%rd250, %r1970, 4;
	add.s64 	%rd251, %rd26, %rd250;
	ld.shared.u32 	%r3476, [%rd251];
LBB0_34:                                // %L24534
                                        //   in Loop: Header=BB0_18 Depth=2
	shr.u32 	%r2166, %r871, 8;
	shr.u32 	%r2212, %r917, 8;
	shr.u32 	%r2258, %r963, 8;
	shr.u32 	%r2304, %r1009, 8;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2003, %r2006}, {%r304, %r301}, {%r3473}, {%r1966, %r1966};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2012, %r2015}, {%r304, %r301}, {%r3474}, {%r1966, %r1966};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2021, %r2024}, {%r304, %r301}, {%r3475}, {%r1966, %r1966};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2030, %r2033}, {%r304, %r301}, {%r3476}, {%r1966, %r1966};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1999, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2001, %r1999, %r2003;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2004, %r339, %r2006, %r2001;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2008, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2010, %r2008, %r2012;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2013, %r339, %r2015, %r2010;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2017, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2019, %r2017, %r2021;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2022, %r339, %r2024, %r2019;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2026, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2028, %r2026, %r2030;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2031, %r339, %r2033, %r2028;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2035, %r342, %r2006;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2038, %r339, %r2003, %r2035;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2042, %r342, %r2015;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2045, %r339, %r2012, %r2042;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2049, %r342, %r2024;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2052, %r339, %r2021, %r2049;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2056, %r342, %r2033;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2059, %r339, %r2030, %r2056;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2108, %r2104}, {%r372, %r366, %r369, %r363}, {%r2038, %r2004}, {%r1966, %r1966};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2124, %r2120}, {%r372, %r366, %r369, %r363}, {%r2045, %r2013}, {%r1966, %r1966};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2116, %r2112}, {%r372, %r366, %r369, %r363}, {%r2052, %r2022}, {%r1966, %r1966};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2132, %r2128}, {%r372, %r366, %r369, %r363}, {%r2059, %r2031}, {%r1966, %r1966};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2103, %r2104, %r2104, %r3472;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2107, %r2108, %r2108, %r2103;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2111, %r2112, %r2112, %r2107;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3480, %r2116, %r2116, %r2111;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2119, %r2120, %r2120, %r3471;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2123, %r2124, %r2124, %r2119;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2127, %r2128, %r2128, %r2123;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3479, %r2132, %r2132, %r2127;
	// end inline asm
	add.s32 	%r3477, %r3469, 1;
	setp.ne.s32 	%p66, %r3477, 40;
	@%p66 bra 	LBB0_38;
// %bb.35:                              // %L24715
                                        //   in Loop: Header=BB0_18 Depth=2
	@%p26 bra 	LBB0_37;
// %bb.36:                              // %L24780
                                        //   in Loop: Header=BB0_18 Depth=2
	mad.lo.s32 	%r2135, %r3446, 96768, %r72;
	or.b32  	%r2136, %r2135, %r44;
	add.s32 	%r2137, %r2136, %r73;
	mul.wide.u32 	%rd252, %r2137, 4;
	add.s64 	%rd253, %rd4, %rd252;
	st.global.u32 	[%rd253], %r3480;
	add.s32 	%r2138, %r2136, %r74;
	mul.wide.u32 	%rd254, %r2138, 4;
	add.s64 	%rd255, %rd4, %rd254;
	st.global.u32 	[%rd255], %r3479;
LBB0_37:                                // %L25036
                                        //   in Loop: Header=BB0_18 Depth=2
	add.s32 	%r3446, %r3446, 1;
	mov.u32 	%r3477, 0;
	mov.u32 	%r3479, %r3477;
	mov.u32 	%r3480, %r3477;
LBB0_38:                                // %L25037
                                        //   in Loop: Header=BB0_18 Depth=2
	bar.sync 	0;
	// begin inline asm
	mov.b32 %r2167, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	mov.b32 %r2178, {%rs212, %rs212};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2164, %r997, %r2166, %r2167, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2168, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2169, %r2167, %r2168;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2172, %r2164, %r2169;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2175, %r1008, %r2166, %r2178, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2179, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2180, %r2178, %r2179;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2183, %r2175, %r2180;
	// end inline asm
	// begin inline asm
	mov.b32 %r2213, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	mov.b32 %r2224, {%rs212, %rs212};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2210, %r997, %r2212, %r2213, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2214, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2215, %r2213, %r2214;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2218, %r2210, %r2215;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2221, %r1008, %r2212, %r2224, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2225, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2226, %r2224, %r2225;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2229, %r2221, %r2226;
	// end inline asm
	// begin inline asm
	mov.b32 %r2259, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	mov.b32 %r2270, {%rs212, %rs212};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2256, %r997, %r2258, %r2259, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2260, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2261, %r2259, %r2260;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2264, %r2256, %r2261;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2267, %r1008, %r2258, %r2270, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2271, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2272, %r2270, %r2271;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2275, %r2267, %r2272;
	// end inline asm
	// begin inline asm
	mov.b32 %r2305, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	mov.b32 %r2316, {%rs212, %rs212};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2302, %r997, %r2304, %r2305, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2306, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2307, %r2305, %r2306;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2310, %r2302, %r2307;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2313, %r1008, %r2304, %r2316, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2317, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2318, %r2316, %r2317;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2321, %r2313, %r2318;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3412;
    mov.b32 {%r2im, %r2re}, %r2172;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2324, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3413;
    mov.b32 {%r2im, %r2re}, %r2183;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2327, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3412;
    mov.b32 {%r2im, %r2re}, %r2218;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2330, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3413;
    mov.b32 {%r2im, %r2re}, %r2229;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2333, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3412;
    mov.b32 {%r2im, %r2re}, %r2264;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2336, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3413;
    mov.b32 {%r2im, %r2re}, %r2275;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2339, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3412;
    mov.b32 {%r2im, %r2re}, %r2310;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2342, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3413;
    mov.b32 {%r2im, %r2re}, %r2321;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2345, {%r0im, %r0re};
}

	// end inline asm
	mov.u32 	%r2676, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2408, %r2411}, {%r304, %r301}, {%r2324}, {%r2676, %r2676};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2417, %r2420}, {%r304, %r301}, {%r2327}, {%r2676, %r2676};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2426, %r2429}, {%r304, %r301}, {%r2330}, {%r2676, %r2676};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2435, %r2438}, {%r304, %r301}, {%r2333}, {%r2676, %r2676};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2444, %r2447}, {%r304, %r301}, {%r2336}, {%r2676, %r2676};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2453, %r2456}, {%r304, %r301}, {%r2339}, {%r2676, %r2676};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2462, %r2465}, {%r304, %r301}, {%r2342}, {%r2676, %r2676};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2471, %r2474}, {%r304, %r301}, {%r2345}, {%r2676, %r2676};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2404, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2406, %r2404, %r2408;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2409, %r339, %r2411, %r2406;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2413, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2415, %r2413, %r2417;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2418, %r339, %r2420, %r2415;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2422, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2424, %r2422, %r2426;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2427, %r339, %r2429, %r2424;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2431, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2433, %r2431, %r2435;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2436, %r339, %r2438, %r2433;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2440, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2442, %r2440, %r2444;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2445, %r339, %r2447, %r2442;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2449, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2451, %r2449, %r2453;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2454, %r339, %r2456, %r2451;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2458, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2460, %r2458, %r2462;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2463, %r339, %r2465, %r2460;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2467, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2469, %r2467, %r2471;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2472, %r339, %r2474, %r2469;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2476, %r342, %r2411;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2479, %r339, %r2408, %r2476;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2483, %r342, %r2420;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2486, %r339, %r2417, %r2483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2490, %r342, %r2429;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2493, %r339, %r2426, %r2490;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2497, %r342, %r2438;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2500, %r339, %r2435, %r2497;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2504, %r342, %r2447;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2507, %r339, %r2444, %r2504;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2511, %r342, %r2456;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2514, %r339, %r2453, %r2511;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2518, %r342, %r2465;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2521, %r339, %r2462, %r2518;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2525, %r342, %r2474;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2528, %r339, %r2471, %r2525;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2613, %r2614}, {%r372, %r366, %r369, %r363}, {%r2479, %r2409}, {%r2676, %r2676};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2621, %r2622}, {%r372, %r366, %r369, %r363}, {%r2486, %r2418}, {%r2676, %r2676};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2629, %r2630}, {%r372, %r366, %r369, %r363}, {%r2493, %r2427}, {%r2676, %r2676};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2637, %r2638}, {%r372, %r366, %r369, %r363}, {%r2500, %r2436}, {%r2676, %r2676};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2645, %r2646}, {%r372, %r366, %r369, %r363}, {%r2507, %r2445}, {%r2676, %r2676};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2653, %r2654}, {%r372, %r366, %r369, %r363}, {%r2514, %r2454}, {%r2676, %r2676};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2661, %r2662}, {%r372, %r366, %r369, %r363}, {%r2521, %r2463}, {%r2676, %r2676};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2669, %r2670}, {%r372, %r366, %r369, %r363}, {%r2528, %r2472}, {%r2676, %r2676};
	// end inline asm
	// begin inline asm
	prmt.b32 %r2612, %r2613, %r2614, %r661;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2616, %r2613, %r2614, %r665;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2620, %r2621, %r2622, %r661;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2624, %r2621, %r2622, %r665;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2628, %r2629, %r2630, %r661;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2632, %r2629, %r2630, %r665;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2636, %r2637, %r2638, %r661;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2640, %r2637, %r2638, %r665;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2644, %r2645, %r2646, %r661;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2648, %r2645, %r2646, %r665;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2652, %r2653, %r2654, %r661;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2656, %r2653, %r2654, %r665;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2660, %r2661, %r2662, %r661;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2664, %r2661, %r2662, %r665;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2668, %r2669, %r2670, %r661;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2672, %r2669, %r2670, %r665;
	// end inline asm
	st.shared.u32 	[%rd6], %r2612;
	st.shared.u32 	[%rd7+33024], %r2616;
	st.shared.u32 	[%rd7+128], %r2620;
	st.shared.u32 	[%rd7+33152], %r2624;
	add.s32 	%r2677, %r81, %r120;
	add.s32 	%r2678, %r2677, 1;
	shr.s32 	%r2679, %r2678, 31;
	shr.u32 	%r2680, %r2679, 30;
	add.s32 	%r2681, %r2678, %r2680;
	and.b32  	%r2682, %r2681, 67108860;
	sub.s32 	%r2683, %r2678, %r2682;
	shl.b32 	%r181, %r2683, 6;
	add.s32 	%r2684, %r70, %r181;
	mul.wide.s32 	%rd256, %r2684, 4;
	add.s64 	%rd258, %rd26, %rd256;
	st.shared.u32 	[%rd258], %r2628;
	add.s32 	%r182, %r181, 8256;
	add.s32 	%r2685, %r70, %r182;
	mul.wide.u32 	%rd259, %r2685, 4;
	add.s64 	%rd260, %rd26, %rd259;
	st.shared.u32 	[%rd260], %r2632;
	or.b32  	%r183, %r181, 32;
	add.s32 	%r2686, %r70, %r183;
	mul.wide.s32 	%rd261, %r2686, 4;
	add.s64 	%rd262, %rd26, %rd261;
	st.shared.u32 	[%rd262], %r2636;
	add.s32 	%r184, %r181, 8288;
	add.s32 	%r2687, %r70, %r184;
	mul.wide.u32 	%rd263, %r2687, 4;
	add.s64 	%rd264, %rd26, %rd263;
	st.shared.u32 	[%rd264], %r2640;
	add.s32 	%r2688, %r2677, 2;
	shr.s32 	%r2689, %r2688, 31;
	shr.u32 	%r2690, %r2689, 30;
	add.s32 	%r2691, %r2688, %r2690;
	and.b32  	%r2692, %r2691, 67108860;
	sub.s32 	%r2693, %r2688, %r2692;
	shl.b32 	%r185, %r2693, 6;
	add.s32 	%r2694, %r70, %r185;
	mul.wide.s32 	%rd265, %r2694, 4;
	add.s64 	%rd266, %rd26, %rd265;
	st.shared.u32 	[%rd266], %r2644;
	add.s32 	%r186, %r185, 8256;
	add.s32 	%r2695, %r70, %r186;
	mul.wide.u32 	%rd267, %r2695, 4;
	add.s64 	%rd268, %rd26, %rd267;
	st.shared.u32 	[%rd268], %r2648;
	or.b32  	%r187, %r185, 32;
	add.s32 	%r2696, %r70, %r187;
	mul.wide.s32 	%rd269, %r2696, 4;
	add.s64 	%rd270, %rd26, %rd269;
	st.shared.u32 	[%rd270], %r2652;
	add.s32 	%r188, %r185, 8288;
	add.s32 	%r2697, %r70, %r188;
	mul.wide.u32 	%rd271, %r2697, 4;
	add.s64 	%rd272, %rd26, %rd271;
	st.shared.u32 	[%rd272], %r2656;
	add.s32 	%r2698, %r2677, 3;
	shr.s32 	%r2699, %r2698, 31;
	shr.u32 	%r2700, %r2699, 30;
	add.s32 	%r2701, %r2698, %r2700;
	and.b32  	%r2702, %r2701, 67108860;
	sub.s32 	%r2703, %r2698, %r2702;
	shl.b32 	%r189, %r2703, 6;
	add.s32 	%r2704, %r70, %r189;
	mul.wide.s32 	%rd273, %r2704, 4;
	add.s64 	%rd274, %rd26, %rd273;
	st.shared.u32 	[%rd274], %r2660;
	add.s32 	%r190, %r189, 8256;
	add.s32 	%r2705, %r70, %r190;
	mul.wide.u32 	%rd275, %r2705, 4;
	add.s64 	%rd276, %rd26, %rd275;
	st.shared.u32 	[%rd276], %r2664;
	or.b32  	%r191, %r189, 32;
	add.s32 	%r2706, %r70, %r191;
	mul.wide.s32 	%rd277, %r2706, 4;
	add.s64 	%rd278, %rd26, %rd277;
	st.shared.u32 	[%rd278], %r2668;
	add.s32 	%r192, %r189, 8288;
	add.s32 	%r2707, %r70, %r192;
	mul.wide.u32 	%rd279, %r2707, 4;
	add.s64 	%rd280, %rd26, %rd279;
	st.shared.u32 	[%rd280], %r2672;
	bar.sync 	0;
	mov.u32 	%r3481, %r2676;
	mov.u32 	%r3482, %r2676;
	mov.u32 	%r3483, %r2676;
	mov.u32 	%r3484, %r2676;
	@%p50 bra 	LBB0_68;
	bra.uni 	LBB0_39;
LBB0_68:                                // %oksrem11824
                                        //   in Loop: Header=BB0_18 Depth=2
	ld.shared.u32 	%r3484, [%rd8];
	ld.shared.u32 	%r3483, [%rd9+33024];
	ld.shared.u32 	%r3482, [%rd9+128];
	ld.shared.u32 	%r3481, [%rd9+33152];
LBB0_39:                                // %L31640
                                        //   in Loop: Header=BB0_18 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2740, %r2743}, {%r304, %r301}, {%r3484}, {%r2676, %r2676};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2749, %r2752}, {%r304, %r301}, {%r3483}, {%r2676, %r2676};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2758, %r2761}, {%r304, %r301}, {%r3482}, {%r2676, %r2676};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2767, %r2770}, {%r304, %r301}, {%r3481}, {%r2676, %r2676};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2736, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2738, %r2736, %r2740;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2741, %r339, %r2743, %r2738;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2745, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2747, %r2745, %r2749;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2750, %r339, %r2752, %r2747;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2754, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2756, %r2754, %r2758;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2759, %r339, %r2761, %r2756;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2763, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2765, %r2763, %r2767;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2768, %r339, %r2770, %r2765;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2772, %r342, %r2743;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2775, %r339, %r2740, %r2772;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2779, %r342, %r2752;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2782, %r339, %r2749, %r2779;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2786, %r342, %r2761;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2789, %r339, %r2758, %r2786;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2793, %r342, %r2770;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2796, %r339, %r2767, %r2793;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2845, %r2841}, {%r372, %r366, %r369, %r363}, {%r2775, %r2741}, {%r2676, %r2676};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2861, %r2857}, {%r372, %r366, %r369, %r363}, {%r2782, %r2750}, {%r2676, %r2676};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2853, %r2849}, {%r372, %r366, %r369, %r363}, {%r2789, %r2759}, {%r2676, %r2676};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2869, %r2865}, {%r372, %r366, %r369, %r363}, {%r2796, %r2768}, {%r2676, %r2676};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2840, %r2841, %r2841, %r3480;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2844, %r2845, %r2845, %r2840;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2848, %r2849, %r2849, %r2844;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3488, %r2853, %r2853, %r2848;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2856, %r2857, %r2857, %r3479;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2860, %r2861, %r2861, %r2856;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2864, %r2865, %r2865, %r2860;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3487, %r2869, %r2869, %r2864;
	// end inline asm
	add.s32 	%r3485, %r3477, 1;
	setp.ne.s32 	%p69, %r3485, 40;
	@%p69 bra 	LBB0_43;
// %bb.40:                              // %L31821
                                        //   in Loop: Header=BB0_18 Depth=2
	@%p26 bra 	LBB0_42;
// %bb.41:                              // %L31886
                                        //   in Loop: Header=BB0_18 Depth=2
	mad.lo.s32 	%r2872, %r3446, 96768, %r72;
	or.b32  	%r2873, %r2872, %r44;
	add.s32 	%r2874, %r2873, %r73;
	mul.wide.u32 	%rd281, %r2874, 4;
	add.s64 	%rd282, %rd4, %rd281;
	st.global.u32 	[%rd282], %r3488;
	add.s32 	%r2875, %r2873, %r74;
	mul.wide.u32 	%rd283, %r2875, 4;
	add.s64 	%rd284, %rd4, %rd283;
	st.global.u32 	[%rd284], %r3487;
LBB0_42:                                // %L32142
                                        //   in Loop: Header=BB0_18 Depth=2
	add.s32 	%r3446, %r3446, 1;
	mov.u32 	%r3485, 0;
	mov.u32 	%r3487, %r3485;
	mov.u32 	%r3488, %r3485;
LBB0_43:                                // %L32143
                                        //   in Loop: Header=BB0_18 Depth=2
	mov.u32 	%r2877, 0;
	mov.u32 	%r3489, %r2877;
	mov.u32 	%r3490, %r2877;
	mov.u32 	%r3491, %r2877;
	mov.u32 	%r3492, %r2877;
	@%p50 bra 	LBB0_69;
	bra.uni 	LBB0_44;
LBB0_69:                                // %oksrem12472
                                        //   in Loop: Header=BB0_18 Depth=2
	add.s32 	%r2878, %r71, %r181;
	mul.wide.s32 	%rd285, %r2878, 4;
	add.s64 	%rd287, %rd26, %rd285;
	ld.shared.u32 	%r3492, [%rd287];
	add.s32 	%r2879, %r71, %r182;
	mul.wide.u32 	%rd288, %r2879, 4;
	add.s64 	%rd289, %rd26, %rd288;
	ld.shared.u32 	%r3491, [%rd289];
	add.s32 	%r2880, %r71, %r183;
	mul.wide.s32 	%rd290, %r2880, 4;
	add.s64 	%rd291, %rd26, %rd290;
	ld.shared.u32 	%r3490, [%rd291];
	add.s32 	%r2881, %r71, %r184;
	mul.wide.u32 	%rd292, %r2881, 4;
	add.s64 	%rd293, %rd26, %rd292;
	ld.shared.u32 	%r3489, [%rd293];
LBB0_44:                                // %L33348
                                        //   in Loop: Header=BB0_18 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2914, %r2917}, {%r304, %r301}, {%r3492}, {%r2877, %r2877};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2923, %r2926}, {%r304, %r301}, {%r3491}, {%r2877, %r2877};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2932, %r2935}, {%r304, %r301}, {%r3490}, {%r2877, %r2877};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2941, %r2944}, {%r304, %r301}, {%r3489}, {%r2877, %r2877};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2910, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2912, %r2910, %r2914;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2915, %r339, %r2917, %r2912;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2919, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2921, %r2919, %r2923;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2924, %r339, %r2926, %r2921;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2928, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2930, %r2928, %r2932;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2933, %r339, %r2935, %r2930;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2937, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2939, %r2937, %r2941;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2942, %r339, %r2944, %r2939;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2946, %r342, %r2917;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2949, %r339, %r2914, %r2946;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2953, %r342, %r2926;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2956, %r339, %r2923, %r2953;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2960, %r342, %r2935;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2963, %r339, %r2932, %r2960;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2967, %r342, %r2944;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2970, %r339, %r2941, %r2967;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3019, %r3015}, {%r372, %r366, %r369, %r363}, {%r2949, %r2915}, {%r2877, %r2877};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3035, %r3031}, {%r372, %r366, %r369, %r363}, {%r2956, %r2924}, {%r2877, %r2877};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3027, %r3023}, {%r372, %r366, %r369, %r363}, {%r2963, %r2933}, {%r2877, %r2877};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3043, %r3039}, {%r372, %r366, %r369, %r363}, {%r2970, %r2942}, {%r2877, %r2877};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3014, %r3015, %r3015, %r3488;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3018, %r3019, %r3019, %r3014;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3022, %r3023, %r3023, %r3018;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3496, %r3027, %r3027, %r3022;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3030, %r3031, %r3031, %r3487;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3034, %r3035, %r3035, %r3030;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3038, %r3039, %r3039, %r3034;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3495, %r3043, %r3043, %r3038;
	// end inline asm
	add.s32 	%r3493, %r3485, 1;
	setp.ne.s32 	%p72, %r3493, 40;
	@%p72 bra 	LBB0_48;
// %bb.45:                              // %L33529
                                        //   in Loop: Header=BB0_18 Depth=2
	@%p26 bra 	LBB0_47;
// %bb.46:                              // %L33594
                                        //   in Loop: Header=BB0_18 Depth=2
	mad.lo.s32 	%r3046, %r3446, 96768, %r72;
	or.b32  	%r3047, %r3046, %r44;
	add.s32 	%r3048, %r3047, %r73;
	mul.wide.u32 	%rd294, %r3048, 4;
	add.s64 	%rd295, %rd4, %rd294;
	st.global.u32 	[%rd295], %r3496;
	add.s32 	%r3049, %r3047, %r74;
	mul.wide.u32 	%rd296, %r3049, 4;
	add.s64 	%rd297, %rd4, %rd296;
	st.global.u32 	[%rd297], %r3495;
LBB0_47:                                // %L33850
                                        //   in Loop: Header=BB0_18 Depth=2
	add.s32 	%r3446, %r3446, 1;
	mov.u32 	%r3493, 0;
	mov.u32 	%r3495, %r3493;
	mov.u32 	%r3496, %r3493;
LBB0_48:                                // %L33851
                                        //   in Loop: Header=BB0_18 Depth=2
	mov.u32 	%r3051, 0;
	mov.u32 	%r3497, %r3051;
	mov.u32 	%r3498, %r3051;
	mov.u32 	%r3499, %r3051;
	mov.u32 	%r3500, %r3051;
	@%p50 bra 	LBB0_70;
	bra.uni 	LBB0_49;
LBB0_70:                                // %oksrem13120
                                        //   in Loop: Header=BB0_18 Depth=2
	add.s32 	%r3052, %r71, %r185;
	mul.wide.s32 	%rd298, %r3052, 4;
	add.s64 	%rd300, %rd26, %rd298;
	ld.shared.u32 	%r3500, [%rd300];
	add.s32 	%r3053, %r71, %r186;
	mul.wide.u32 	%rd301, %r3053, 4;
	add.s64 	%rd302, %rd26, %rd301;
	ld.shared.u32 	%r3499, [%rd302];
	add.s32 	%r3054, %r71, %r187;
	mul.wide.s32 	%rd303, %r3054, 4;
	add.s64 	%rd304, %rd26, %rd303;
	ld.shared.u32 	%r3498, [%rd304];
	add.s32 	%r3055, %r71, %r188;
	mul.wide.u32 	%rd305, %r3055, 4;
	add.s64 	%rd306, %rd26, %rd305;
	ld.shared.u32 	%r3497, [%rd306];
LBB0_49:                                // %L35056
                                        //   in Loop: Header=BB0_18 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3088, %r3091}, {%r304, %r301}, {%r3500}, {%r3051, %r3051};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3097, %r3100}, {%r304, %r301}, {%r3499}, {%r3051, %r3051};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3106, %r3109}, {%r304, %r301}, {%r3498}, {%r3051, %r3051};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3115, %r3118}, {%r304, %r301}, {%r3497}, {%r3051, %r3051};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3084, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3086, %r3084, %r3088;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3089, %r339, %r3091, %r3086;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3093, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3095, %r3093, %r3097;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3098, %r339, %r3100, %r3095;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3102, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3104, %r3102, %r3106;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3107, %r339, %r3109, %r3104;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3111, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3113, %r3111, %r3115;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3116, %r339, %r3118, %r3113;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3120, %r342, %r3091;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3123, %r339, %r3088, %r3120;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3127, %r342, %r3100;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3130, %r339, %r3097, %r3127;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3134, %r342, %r3109;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3137, %r339, %r3106, %r3134;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3141, %r342, %r3118;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3144, %r339, %r3115, %r3141;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3193, %r3189}, {%r372, %r366, %r369, %r363}, {%r3123, %r3089}, {%r3051, %r3051};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3209, %r3205}, {%r372, %r366, %r369, %r363}, {%r3130, %r3098}, {%r3051, %r3051};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3201, %r3197}, {%r372, %r366, %r369, %r363}, {%r3137, %r3107}, {%r3051, %r3051};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3217, %r3213}, {%r372, %r366, %r369, %r363}, {%r3144, %r3116}, {%r3051, %r3051};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3188, %r3189, %r3189, %r3496;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3192, %r3193, %r3193, %r3188;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3196, %r3197, %r3197, %r3192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3504, %r3201, %r3201, %r3196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3204, %r3205, %r3205, %r3495;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3208, %r3209, %r3209, %r3204;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3212, %r3213, %r3213, %r3208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3503, %r3217, %r3217, %r3212;
	// end inline asm
	add.s32 	%r3501, %r3493, 1;
	setp.ne.s32 	%p75, %r3501, 40;
	@%p75 bra 	LBB0_53;
// %bb.50:                              // %L35237
                                        //   in Loop: Header=BB0_18 Depth=2
	@%p26 bra 	LBB0_52;
// %bb.51:                              // %L35302
                                        //   in Loop: Header=BB0_18 Depth=2
	mad.lo.s32 	%r3220, %r3446, 96768, %r72;
	or.b32  	%r3221, %r3220, %r44;
	add.s32 	%r3222, %r3221, %r73;
	mul.wide.u32 	%rd307, %r3222, 4;
	add.s64 	%rd308, %rd4, %rd307;
	st.global.u32 	[%rd308], %r3504;
	add.s32 	%r3223, %r3221, %r74;
	mul.wide.u32 	%rd309, %r3223, 4;
	add.s64 	%rd310, %rd4, %rd309;
	st.global.u32 	[%rd310], %r3503;
LBB0_52:                                // %L35558
                                        //   in Loop: Header=BB0_18 Depth=2
	add.s32 	%r3446, %r3446, 1;
	mov.u32 	%r3501, 0;
	mov.u32 	%r3503, %r3501;
	mov.u32 	%r3504, %r3501;
LBB0_53:                                // %L35559
                                        //   in Loop: Header=BB0_18 Depth=2
	mov.u32 	%r3225, 0;
	mov.u32 	%r3505, %r3225;
	mov.u32 	%r3506, %r3225;
	mov.u32 	%r3507, %r3225;
	mov.u32 	%r3508, %r3225;
	@%p50 bra 	LBB0_71;
	bra.uni 	LBB0_54;
LBB0_71:                                // %oksrem13768
                                        //   in Loop: Header=BB0_18 Depth=2
	add.s32 	%r3226, %r71, %r189;
	mul.wide.s32 	%rd311, %r3226, 4;
	add.s64 	%rd313, %rd26, %rd311;
	ld.shared.u32 	%r3508, [%rd313];
	add.s32 	%r3227, %r71, %r190;
	mul.wide.u32 	%rd314, %r3227, 4;
	add.s64 	%rd315, %rd26, %rd314;
	ld.shared.u32 	%r3507, [%rd315];
	add.s32 	%r3228, %r71, %r191;
	mul.wide.s32 	%rd316, %r3228, 4;
	add.s64 	%rd317, %rd26, %rd316;
	ld.shared.u32 	%r3506, [%rd317];
	add.s32 	%r3229, %r71, %r192;
	mul.wide.u32 	%rd318, %r3229, 4;
	add.s64 	%rd319, %rd26, %rd318;
	ld.shared.u32 	%r3505, [%rd319];
LBB0_54:                                // %L36764
                                        //   in Loop: Header=BB0_18 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3262, %r3265}, {%r304, %r301}, {%r3508}, {%r3225, %r3225};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3271, %r3274}, {%r304, %r301}, {%r3507}, {%r3225, %r3225};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3280, %r3283}, {%r304, %r301}, {%r3506}, {%r3225, %r3225};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3289, %r3292}, {%r304, %r301}, {%r3505}, {%r3225, %r3225};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3258, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3260, %r3258, %r3262;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3263, %r339, %r3265, %r3260;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3267, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3269, %r3267, %r3271;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3272, %r339, %r3274, %r3269;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3276, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3278, %r3276, %r3280;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3281, %r339, %r3283, %r3278;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3285, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3287, %r3285, %r3289;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3290, %r339, %r3292, %r3287;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3294, %r342, %r3265;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3297, %r339, %r3262, %r3294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3301, %r342, %r3274;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3304, %r339, %r3271, %r3301;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3308, %r342, %r3283;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3311, %r339, %r3280, %r3308;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3315, %r342, %r3292;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3318, %r339, %r3289, %r3315;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3367, %r3363}, {%r372, %r366, %r369, %r363}, {%r3297, %r3263}, {%r3225, %r3225};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3383, %r3379}, {%r372, %r366, %r369, %r363}, {%r3304, %r3272}, {%r3225, %r3225};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3375, %r3371}, {%r372, %r366, %r369, %r363}, {%r3311, %r3281}, {%r3225, %r3225};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3391, %r3387}, {%r372, %r366, %r369, %r363}, {%r3318, %r3290}, {%r3225, %r3225};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3362, %r3363, %r3363, %r3504;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3366, %r3367, %r3367, %r3362;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3370, %r3371, %r3371, %r3366;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3448, %r3375, %r3375, %r3370;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3378, %r3379, %r3379, %r3503;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3382, %r3383, %r3383, %r3378;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3386, %r3387, %r3387, %r3382;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3447, %r3391, %r3391, %r3386;
	// end inline asm
	add.s32 	%r3445, %r3501, 1;
	setp.ne.s32 	%p78, %r3445, 40;
	@%p78 bra 	LBB0_58;
// %bb.55:                              // %L36945
                                        //   in Loop: Header=BB0_18 Depth=2
	@%p26 bra 	LBB0_57;
// %bb.56:                              // %L37010
                                        //   in Loop: Header=BB0_18 Depth=2
	mad.lo.s32 	%r3394, %r3446, 96768, %r72;
	or.b32  	%r3395, %r3394, %r44;
	add.s32 	%r3396, %r3395, %r73;
	mul.wide.u32 	%rd320, %r3396, 4;
	add.s64 	%rd321, %rd4, %rd320;
	st.global.u32 	[%rd321], %r3448;
	add.s32 	%r3397, %r3395, %r74;
	mul.wide.u32 	%rd322, %r3397, 4;
	add.s64 	%rd323, %rd4, %rd322;
	st.global.u32 	[%rd323], %r3447;
	bra.uni 	LBB0_57;
LBB0_60:                                // %guard_pass15265
	@%p26 bra 	LBB0_62;
// %bb.61:                              // %L37374
	mad.lo.s32 	%r3399, %r3446, 96768, %r72;
	or.b32  	%r3400, %r3399, %r44;
	add.s32 	%r3401, %r3400, %r73;
	mul.wide.u32 	%rd324, %r3401, 4;
	add.s64 	%rd325, %rd4, %rd324;
	st.global.u32 	[%rd325], %r3448;
	add.s32 	%r3402, %r3400, %r74;
	mul.wide.u32 	%rd326, %r3402, 4;
	add.s64 	%rd327, %rd4, %rd326;
	st.global.u32 	[%rd327], %r3447;
LBB0_62:                                // %L37630
	mov.u32 	%r3403, 0;
	st.global.u32 	[%rd5], %r3403;
	ret;
LBB0_1:                                 // %L9
	ld.param.u64 	%rd11, [_Z14julia_frb_619313CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS2_Li1ELi1EES_IS1_Li1ELi1EE_param_0];
	mov.u64 	%rd16, exception1;
	cvta.global.u64 	%rd17, %rd16;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd17;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd11;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
