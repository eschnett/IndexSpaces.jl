// PTX CompilerJob of kernel #frb(CuDeviceVector{Int16x2, 1}, CuDeviceVector{Float16x2, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Float16x2, 1}, CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 7.1
.target sm_86
.address_size 64

	// .globl	_Z15julia_frb_1038613CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE // -- Begin function _Z15julia_frb_1038613CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[8]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z15julia_frb_1038613CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.visible .entry _Z15julia_frb_1038613CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE(
	.param .align 8 .b8 _Z15julia_frb_1038613CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0[8],
	.param .align 8 .b8 _Z15julia_frb_1038613CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z15julia_frb_1038613CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z15julia_frb_1038613CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z15julia_frb_1038613CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z15julia_frb_1038613CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<78>;
	.reg .b16 	%rs<284>;
	.reg .b32 	%r<3422>;
	.reg .f32 	%f<202>;
	.reg .b64 	%rd<296>;

// %bb.0:                               // %conversion
	// begin inline asm
	mov.u32 %r246, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r246, 76895;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L10
	ld.param.u64 	%rd12, [_Z15julia_frb_1038613CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r253, %r1, 5;
	mov.u32 	%r2, %ctaid.x;
	mad.lo.s32 	%r254, %r2, 768, %r253;
	mov.u32 	%r3, %tid.x;
	or.b32  	%r255, %r254, %r3;
	mul.wide.u32 	%rd18, %r255, 4;
	add.s64 	%rd5, %rd12, %rd18;
	mov.u32 	%r256, 1;
	st.global.u32 	[%rd5], %r256;
	and.b32  	%r4, %r3, 3;
	shr.u32 	%r5, %r3, 2;
	mul.lo.s32 	%r257, %r4, %r5;
	and.b32  	%r258, %r257, 7;
	cvt.rn.f32.u32 	%f18, %r258;
	mov.f32 	%f19, 0f40800000;
	div.approx.f32 	%f20, %f18, %f19;
	add.f32 	%f21, %f20, %f20;
	mov.b32 	%r259, %f21;
	and.b32  	%r260, %r259, -2147483648;
	or.b32  	%r261, %r260, 1056964608;
	mov.b32 	%f22, %r261;
	add.f32 	%f23, %f21, %f22;
	cvt.rzi.f32.f32 	%f24, %f23;
	abs.f32 	%f25, %f21;
	setp.gt.f32 	%p2, %f25, 0f4B000000;
	selp.f32 	%f26, %f21, %f24, %p2;
	cvt.rzi.f32.f32 	%f27, %f21;
	setp.lt.f32 	%p3, %f25, 0f3F000000;
	selp.f32 	%f28, %f27, %f26, %p3;
	cvt.rzi.s32.f32 	%r262, %f28;
	fma.rn.f32 	%f29, %f28, 0fBF000000, %f20;
	mul.f32 	%f30, %f29, 0f34222169;
	fma.rn.f32 	%f31, %f29, 0f40490FDA, %f30;
	mul.f32 	%f32, %f31, %f31;
	fma.rn.f32 	%f33, %f32, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f34, %f33, %f32, 0f3D2AAABB;
	fma.rn.f32 	%f35, %f34, %f32, 0fBEFFFFFF;
	fma.rn.f32 	%f36, %f35, %f32, 0f3F800000;
	fma.rn.f32 	%f37, %f32, %f31, 0f00000000;
	fma.rn.f32 	%f38, %f32, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f39, %f38, %f32, 0fBE2AAAA8;
	fma.rn.f32 	%f40, %f39, %f37, %f31;
	and.b32  	%r263, %r262, 1;
	setp.eq.b32 	%p4, %r263, 1;
	selp.f32 	%f41, %f36, %f40, %p4;
	selp.f32 	%f42, %f40, %f36, %p4;
	and.b32  	%r264, %r262, 2;
	setp.eq.s32 	%p5, %r264, 0;
	neg.f32 	%f43, %f41;
	selp.f32 	%f44, %f41, %f43, %p5;
	add.s32 	%r265, %r262, 1;
	and.b32  	%r266, %r265, 2;
	mov.f32 	%f200, 0f00000000;
	cvt.rzi.f32.f32 	%f47, %f20;
	setp.eq.f32 	%p7, %f47, %f20;
	mul.f32 	%f48, %f20, 0f00000000;
	shl.b32 	%r8, %r3, 1;
	and.b32  	%r9, %r8, 6;
	or.b32  	%r10, %r9, 1;
	setp.eq.s32 	%p9, %r9, 6;
	mov.f32 	%f192, 0f41C00000;
	mul.lo.s32 	%r3331, %r9, %r5;
	mov.f32 	%f194, %f200;
	mov.f32 	%f195, %f200;
	@%p9 bra 	LBB0_4;
// %bb.3:                               // %L205
	cvt.u16.u32 	%rs4, %r3331;
	and.b16  	%rs5, %rs4, 255;
	mul.lo.s16 	%rs6, %rs5, 171;
	shr.u16 	%rs7, %rs6, 13;
	mul.lo.s16 	%rs8, %rs7, 48;
	sub.s16 	%rs9, %rs4, %rs8;
	and.b16  	%rs10, %rs9, 255;
	cvt.rn.f32.u16 	%f53, %rs10;
	div.approx.f32 	%f55, %f53, %f192;
	add.f32 	%f56, %f55, %f55;
	mov.b32 	%r268, %f56;
	and.b32  	%r269, %r268, -2147483648;
	or.b32  	%r270, %r269, 1056964608;
	mov.b32 	%f57, %r270;
	add.f32 	%f58, %f56, %f57;
	cvt.rzi.f32.f32 	%f59, %f58;
	abs.f32 	%f60, %f56;
	setp.gt.f32 	%p10, %f60, 0f4B000000;
	selp.f32 	%f61, %f56, %f59, %p10;
	cvt.rzi.f32.f32 	%f62, %f56;
	setp.lt.f32 	%p11, %f60, 0f3F000000;
	selp.f32 	%f63, %f62, %f61, %p11;
	cvt.rzi.s32.f32 	%r271, %f63;
	fma.rn.f32 	%f64, %f63, 0fBF000000, %f55;
	mul.f32 	%f65, %f64, 0f34222169;
	fma.rn.f32 	%f66, %f64, 0f40490FDA, %f65;
	mul.f32 	%f67, %f66, %f66;
	fma.rn.f32 	%f68, %f67, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f69, %f68, %f67, 0f3D2AAABB;
	fma.rn.f32 	%f70, %f69, %f67, 0fBEFFFFFF;
	fma.rn.f32 	%f71, %f70, %f67, 0f3F800000;
	fma.rn.f32 	%f72, %f67, %f66, 0f00000000;
	fma.rn.f32 	%f73, %f67, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f74, %f73, %f67, 0fBE2AAAA8;
	fma.rn.f32 	%f75, %f74, %f72, %f66;
	and.b32  	%r272, %r271, 1;
	setp.eq.b32 	%p12, %r272, 1;
	selp.f32 	%f76, %f71, %f75, %p12;
	selp.f32 	%f77, %f75, %f71, %p12;
	and.b32  	%r273, %r271, 2;
	setp.eq.s32 	%p13, %r273, 0;
	neg.f32 	%f78, %f76;
	selp.f32 	%f79, %f76, %f78, %p13;
	add.s32 	%r274, %r271, 1;
	and.b32  	%r275, %r274, 2;
	setp.eq.s32 	%p14, %r275, 0;
	mov.f32 	%f80, 0f00000000;
	sub.f32 	%f81, %f80, %f77;
	selp.f32 	%f82, %f77, %f81, %p14;
	cvt.rzi.f32.f32 	%f83, %f55;
	setp.eq.f32 	%p15, %f83, %f55;
	mul.f32 	%f84, %f55, 0f00000000;
	selp.f32 	%f195, %f84, %f79, %p15;
	abs.f32 	%f85, %f55;
	setp.gt.f32 	%p16, %f85, 0f4B800000;
	add.f32 	%f86, %f195, 0f3F800000;
	selp.f32 	%f194, %f86, %f82, %p16;
LBB0_4:                                 // %L220
	setp.eq.s32 	%p6, %r266, 0;
	sub.f32 	%f45, %f200, %f42;
	selp.f32 	%f49, %f48, %f44, %p7;
	abs.f32 	%f50, %f20;
	setp.gt.u32 	%p17, %r10, 5;
	mul.lo.s32 	%r3332, %r10, %r5;
	mov.f32 	%f196, %f200;
	mov.f32 	%f197, %f200;
	@%p17 bra 	LBB0_6;
// %bb.5:                               // %L224
	cvt.u16.u32 	%rs11, %r3332;
	and.b16  	%rs12, %rs11, 255;
	mul.lo.s16 	%rs13, %rs12, 171;
	shr.u16 	%rs14, %rs13, 13;
	mul.lo.s16 	%rs15, %rs14, 48;
	sub.s16 	%rs16, %rs11, %rs15;
	and.b16  	%rs17, %rs16, 255;
	cvt.rn.f32.u16 	%f88, %rs17;
	div.approx.f32 	%f90, %f88, %f192;
	add.f32 	%f91, %f90, %f90;
	mov.b32 	%r277, %f91;
	and.b32  	%r278, %r277, -2147483648;
	or.b32  	%r279, %r278, 1056964608;
	mov.b32 	%f92, %r279;
	add.f32 	%f93, %f91, %f92;
	cvt.rzi.f32.f32 	%f94, %f93;
	abs.f32 	%f95, %f91;
	setp.gt.f32 	%p18, %f95, 0f4B000000;
	selp.f32 	%f96, %f91, %f94, %p18;
	cvt.rzi.f32.f32 	%f97, %f91;
	setp.lt.f32 	%p19, %f95, 0f3F000000;
	selp.f32 	%f98, %f97, %f96, %p19;
	cvt.rzi.s32.f32 	%r280, %f98;
	fma.rn.f32 	%f99, %f98, 0fBF000000, %f90;
	mul.f32 	%f100, %f99, 0f34222169;
	fma.rn.f32 	%f101, %f99, 0f40490FDA, %f100;
	mul.f32 	%f102, %f101, %f101;
	fma.rn.f32 	%f103, %f102, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f104, %f103, %f102, 0f3D2AAABB;
	fma.rn.f32 	%f105, %f104, %f102, 0fBEFFFFFF;
	fma.rn.f32 	%f106, %f105, %f102, 0f3F800000;
	fma.rn.f32 	%f107, %f102, %f101, 0f00000000;
	fma.rn.f32 	%f108, %f102, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f109, %f108, %f102, 0fBE2AAAA8;
	fma.rn.f32 	%f110, %f109, %f107, %f101;
	and.b32  	%r281, %r280, 1;
	setp.eq.b32 	%p20, %r281, 1;
	selp.f32 	%f111, %f106, %f110, %p20;
	selp.f32 	%f112, %f110, %f106, %p20;
	and.b32  	%r282, %r280, 2;
	setp.eq.s32 	%p21, %r282, 0;
	neg.f32 	%f113, %f111;
	selp.f32 	%f114, %f111, %f113, %p21;
	add.s32 	%r283, %r280, 1;
	and.b32  	%r284, %r283, 2;
	setp.eq.s32 	%p22, %r284, 0;
	mov.f32 	%f115, 0f00000000;
	sub.f32 	%f116, %f115, %f112;
	selp.f32 	%f117, %f112, %f116, %p22;
	cvt.rzi.f32.f32 	%f118, %f90;
	setp.eq.f32 	%p23, %f118, %f90;
	mul.f32 	%f119, %f90, 0f00000000;
	selp.f32 	%f197, %f119, %f114, %p23;
	abs.f32 	%f120, %f90;
	setp.gt.f32 	%p24, %f120, 0f4B800000;
	add.f32 	%f121, %f197, 0f3F800000;
	selp.f32 	%f196, %f121, %f117, %p24;
LBB0_6:                                 // %L239
	selp.f32 	%f46, %f42, %f45, %p6;
	setp.gt.f32 	%p8, %f50, 0f4B800000;
	add.f32 	%f51, %f49, 0f3F800000;
	setp.gt.u32 	%p26, %r3, 23;
	or.pred  	%p27, %p9, %p26;
	mov.f32 	%f193, 0f40400000;
	mov.f32 	%f198, %f200;
	mov.f32 	%f199, %f200;
	@%p27 bra 	LBB0_8;
// %bb.7:                               // %L276
	cvt.u16.u32 	%rs18, %r3331;
	and.b16  	%rs19, %rs18, 255;
	mul.lo.s16 	%rs20, %rs19, 171;
	shr.u16 	%rs21, %rs20, 10;
	mul.lo.s16 	%rs22, %rs21, 6;
	sub.s16 	%rs23, %rs18, %rs22;
	and.b16  	%rs24, %rs23, 255;
	cvt.rn.f32.u16 	%f123, %rs24;
	div.approx.f32 	%f125, %f123, %f193;
	add.f32 	%f126, %f125, %f125;
	mov.b32 	%r292, %f126;
	and.b32  	%r293, %r292, -2147483648;
	or.b32  	%r294, %r293, 1056964608;
	mov.b32 	%f127, %r294;
	add.f32 	%f128, %f126, %f127;
	cvt.rzi.f32.f32 	%f129, %f128;
	abs.f32 	%f130, %f126;
	setp.gt.f32 	%p28, %f130, 0f4B000000;
	selp.f32 	%f131, %f126, %f129, %p28;
	cvt.rzi.f32.f32 	%f132, %f126;
	setp.lt.f32 	%p29, %f130, 0f3F000000;
	selp.f32 	%f133, %f132, %f131, %p29;
	cvt.rzi.s32.f32 	%r295, %f133;
	fma.rn.f32 	%f134, %f133, 0fBF000000, %f125;
	mul.f32 	%f135, %f134, 0f34222169;
	fma.rn.f32 	%f136, %f134, 0f40490FDA, %f135;
	mul.f32 	%f137, %f136, %f136;
	fma.rn.f32 	%f138, %f137, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f139, %f138, %f137, 0f3D2AAABB;
	fma.rn.f32 	%f140, %f139, %f137, 0fBEFFFFFF;
	fma.rn.f32 	%f141, %f140, %f137, 0f3F800000;
	fma.rn.f32 	%f142, %f137, %f136, 0f00000000;
	fma.rn.f32 	%f143, %f137, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f144, %f143, %f137, 0fBE2AAAA8;
	fma.rn.f32 	%f145, %f144, %f142, %f136;
	and.b32  	%r296, %r295, 1;
	setp.eq.b32 	%p30, %r296, 1;
	selp.f32 	%f146, %f141, %f145, %p30;
	selp.f32 	%f147, %f145, %f141, %p30;
	and.b32  	%r297, %r295, 2;
	setp.eq.s32 	%p31, %r297, 0;
	neg.f32 	%f148, %f146;
	selp.f32 	%f149, %f146, %f148, %p31;
	add.s32 	%r298, %r295, 1;
	and.b32  	%r299, %r298, 2;
	setp.eq.s32 	%p32, %r299, 0;
	mov.f32 	%f150, 0f00000000;
	sub.f32 	%f151, %f150, %f147;
	selp.f32 	%f152, %f147, %f151, %p32;
	cvt.rzi.f32.f32 	%f153, %f125;
	setp.eq.f32 	%p33, %f153, %f125;
	mul.f32 	%f154, %f125, 0f00000000;
	selp.f32 	%f199, %f154, %f149, %p33;
	abs.f32 	%f155, %f125;
	setp.gt.f32 	%p34, %f155, 0f4B800000;
	add.f32 	%f156, %f199, 0f3F800000;
	selp.f32 	%f198, %f156, %f152, %p34;
LBB0_8:                                 // %L291
	selp.f32 	%f52, %f51, %f46, %p8;
	or.pred  	%p37, %p17, %p26;
	mov.f32 	%f201, %f200;
	@%p37 bra 	LBB0_10;
// %bb.9:                               // %L299
	cvt.u16.u32 	%rs25, %r3332;
	and.b16  	%rs26, %rs25, 255;
	mul.lo.s16 	%rs27, %rs26, 171;
	shr.u16 	%rs28, %rs27, 10;
	mul.lo.s16 	%rs29, %rs28, 6;
	sub.s16 	%rs30, %rs25, %rs29;
	and.b16  	%rs31, %rs30, 255;
	cvt.rn.f32.u16 	%f158, %rs31;
	div.approx.f32 	%f160, %f158, %f193;
	add.f32 	%f161, %f160, %f160;
	mov.b32 	%r301, %f161;
	and.b32  	%r302, %r301, -2147483648;
	or.b32  	%r303, %r302, 1056964608;
	mov.b32 	%f162, %r303;
	add.f32 	%f163, %f161, %f162;
	cvt.rzi.f32.f32 	%f164, %f163;
	abs.f32 	%f165, %f161;
	setp.gt.f32 	%p38, %f165, 0f4B000000;
	selp.f32 	%f166, %f161, %f164, %p38;
	cvt.rzi.f32.f32 	%f167, %f161;
	setp.lt.f32 	%p39, %f165, 0f3F000000;
	selp.f32 	%f168, %f167, %f166, %p39;
	cvt.rzi.s32.f32 	%r304, %f168;
	fma.rn.f32 	%f169, %f168, 0fBF000000, %f160;
	mul.f32 	%f170, %f169, 0f34222169;
	fma.rn.f32 	%f171, %f169, 0f40490FDA, %f170;
	mul.f32 	%f172, %f171, %f171;
	fma.rn.f32 	%f173, %f172, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f174, %f173, %f172, 0f3D2AAABB;
	fma.rn.f32 	%f175, %f174, %f172, 0fBEFFFFFF;
	fma.rn.f32 	%f176, %f175, %f172, 0f3F800000;
	fma.rn.f32 	%f177, %f172, %f171, 0f00000000;
	fma.rn.f32 	%f178, %f172, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f179, %f178, %f172, 0fBE2AAAA8;
	fma.rn.f32 	%f180, %f179, %f177, %f171;
	and.b32  	%r305, %r304, 1;
	setp.eq.b32 	%p40, %r305, 1;
	selp.f32 	%f181, %f176, %f180, %p40;
	selp.f32 	%f182, %f180, %f176, %p40;
	and.b32  	%r306, %r304, 2;
	setp.eq.s32 	%p41, %r306, 0;
	neg.f32 	%f183, %f181;
	selp.f32 	%f184, %f181, %f183, %p41;
	add.s32 	%r307, %r304, 1;
	and.b32  	%r308, %r307, 2;
	setp.eq.s32 	%p42, %r308, 0;
	mov.f32 	%f185, 0f00000000;
	sub.f32 	%f186, %f185, %f182;
	selp.f32 	%f187, %f182, %f186, %p42;
	cvt.rzi.f32.f32 	%f188, %f160;
	setp.eq.f32 	%p43, %f188, %f160;
	mul.f32 	%f189, %f160, 0f00000000;
	selp.f32 	%f201, %f189, %f184, %p43;
	abs.f32 	%f190, %f160;
	setp.gt.f32 	%p44, %f190, 0f4B800000;
	add.f32 	%f191, %f201, 0f3F800000;
	selp.f32 	%f200, %f191, %f187, %p44;
LBB0_10:                                // %L314
	mov.b32 	%r249, %f52;
	mov.b32 	%r252, %f49;
	mov.b32 	%r310, %f198;
	mov.b32 	%r311, %f200;
	mov.b32 	%r316, %f199;
	mov.b32 	%r317, %f201;
	mov.u32 	%r3335, 999999999;
	cvt.u16.u32 	%rs282, %r3;
	@%p26 bra 	LBB0_12;
// %bb.11:                              // %L350
	ld.param.u64 	%rd1, [_Z15julia_frb_1038613CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1];
	and.b16  	%rs33, %rs282, 255;
	mul.lo.s16 	%rs34, %rs33, 171;
	shr.u16 	%rs35, %rs34, 12;
	mul.lo.s16 	%rs36, %rs35, 24;
	sub.s16 	%rs37, %rs282, %rs36;
	cvt.u32.u16 	%r322, %rs37;
	and.b32  	%r323, %r322, 255;
	mad.lo.s32 	%r324, %r323, 24, %r1;
	cvt.u16.u32 	%rs38, %r324;
	mul.hi.u16 	%rs39, %rs38, -7281;
	shr.u16 	%rs40, %rs39, 9;
	mul.lo.s16 	%rs41, %rs40, 576;
	sub.s16 	%rs42, %rs38, %rs41;
	cvt.u32.u16 	%r325, %rs42;
	mul.wide.u32 	%rd19, %r325, 4;
	add.s64 	%rd20, %rd1, %rd19;
	ld.global.u32 	%r326, [%rd20];
	cvt.s32.s16 	%r327, %r326;
	shr.s32 	%r328, %r326, 16;
	mul.lo.s32 	%r329, %r328, 801;
	mad.lo.s32 	%r3335, %r327, 33, %r329;
LBB0_12:                                // %L428
	xor.b32  	%r248, %r252, -2147483648;
	mov.b32 	%r286, %f194;
	mov.b32 	%r287, %f196;
	mov.b32 	%r289, %f195;
	mov.b32 	%r290, %f197;
	xor.b32  	%r313, %r316, -2147483648;
	xor.b32  	%r314, %r317, -2147483648;
	and.b32  	%r19, %r3, 24;
	setp.ne.s32 	%p46, %r19, 24;
	cvt.u16.u32 	%rs1, %r1;
	and.b16  	%rs43, %rs1, 255;
	mul.lo.s16 	%rs44, %rs43, 171;
	shr.u16 	%rs2, %rs44, 10;
	cvt.u32.u16 	%r21, %rs2;
	cvt.u16.u32 	%rs283, %r5;
	mul.lo.s32 	%r3336, %r21, 6;
	@%p46 bra 	LBB0_14;
// %bb.13:                              // %L428.L734_crit_edge
	mul.lo.s16 	%rs56, %rs2, 6;
	sub.s16 	%rs57, %rs1, %rs56;
	cvt.u32.u16 	%r345, %rs57;
	and.b32  	%r3338, %r345, 255;
	mul.lo.s16 	%rs59, %rs283, 171;
	shr.u16 	%rs60, %rs59, 10;
	mul.lo.s16 	%rs61, %rs60, 6;
	sub.s16 	%rs62, %rs283, %rs61;
	cvt.u32.u16 	%r346, %rs62;
	and.b32  	%r3337, %r346, 255;
	mov.u32 	%r3339, 0;
	mov.u32 	%r3340, %r3339;
	bra.uni 	LBB0_15;
LBB0_14:                                // %L454
	ld.param.u64 	%rd2, [_Z15julia_frb_1038613CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2];
	mul.lo.s16 	%rs45, %rs2, -6;
	add.s16 	%rs46, %rs45, %rs1;
	cvt.u32.u16 	%r330, %rs46;
	and.b32  	%r3338, %r330, 255;
	add.s32 	%r331, %r3336, %r3338;
	mul.lo.s32 	%r332, %r2, 576;
	or.b32  	%r333, %r331, %r332;
	mul.lo.s32 	%r334, %r4, 144;
	mul.lo.s16 	%rs48, %rs283, 171;
	shr.u16 	%rs49, %rs48, 10;
	mul.lo.s16 	%rs50, %rs49, 6;
	sub.s16 	%rs51, %rs283, %rs50;
	cvt.u32.u16 	%r335, %rs51;
	and.b32  	%r3337, %r335, 255;
	and.b16  	%rs52, %rs51, 255;
	mul.wide.u16 	%r336, %rs52, 24;
	add.s32 	%r337, %r336, %r334;
	add.s32 	%r338, %r337, %r333;
	mul.wide.u32 	%rd21, %r338, 4;
	add.s64 	%rd22, %rd2, %rd21;
	ld.global.u32 	%r3339, [%rd22];
	or.b32  	%r339, %r3336, 48384;
	add.s32 	%r340, %r334, %r332;
	or.b32  	%r341, %r340, %r3338;
	add.s32 	%r342, %r341, %r339;
	add.s32 	%r343, %r342, %r336;
	mul.wide.u32 	%rd23, %r343, 4;
	add.s64 	%rd24, %rd2, %rd23;
	ld.global.u32 	%r3340, [%rd24];
LBB0_15:                                // %L734
	ld.param.u64 	%rd3, [_Z15julia_frb_1038613CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z15julia_frb_1038613CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4];
	// begin inline asm
	cvt.rn.f16x2.f32 %r247, %r249, %r248;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r250, %r252, %r249;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r285, %r287, %r286;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r288, %r290, %r289;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r309, %r311, %r310;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r312, %r314, %r313;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r315, %r317, %r316;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r318, %r311, %r310;
	// end inline asm
	mov.u32 	%r3334, 0;
	shl.b32 	%r348, %r3, 2;
	and.b32  	%r349, %r348, 60;
	shl.b32 	%r350, %r2, 7;
	shr.u32 	%r351, %r3, 4;
	mul.lo.s32 	%r352, %r351, 10752;
	or.b32  	%r353, %r349, %r350;
	add.s32 	%r35, %r353, %r352;
	or.b32  	%r36, %r348, 64;
	add.s32 	%r37, %r352, %r350;
	add.s32 	%r38, %r1, 24;
	and.b16  	%rs3, %rs282, 16;
	and.b32  	%r354, %r8, 30;
	or.b32  	%r355, %r354, %r351;
	mul.lo.s32 	%r39, %r355, 257;
	or.b32  	%r356, %r8, %r351;
	or.b32  	%r357, %r356, 32;
	mul.lo.s32 	%r40, %r357, 257;
	shr.u32 	%r358, %r1, 3;
	and.b16  	%rs64, %rs282, 255;
	mul.lo.s16 	%rs65, %rs64, 171;
	shr.u16 	%rs66, %rs65, 12;
	mul.lo.s16 	%rs67, %rs66, 24;
	sub.s16 	%rs68, %rs282, %rs67;
	cvt.u32.u16 	%r359, %rs68;
	and.b32  	%r41, %r359, 255;
	and.b32  	%r361, %r253, 224;
	mad.lo.s32 	%r42, %r358, 257, %r361;
	shr.u32 	%r362, %r38, 3;
	mad.lo.s32 	%r43, %r362, 257, %r361;
	add.s32 	%r363, %r1, 48;
	shr.u32 	%r364, %r363, 3;
	mad.lo.s32 	%r44, %r364, 257, %r361;
	add.s32 	%r365, %r1, 72;
	shr.u32 	%r366, %r365, 3;
	mad.lo.s32 	%r45, %r366, 257, %r361;
	or.b32  	%r367, %r358, 12;
	mad.lo.s32 	%r46, %r367, 257, %r361;
	add.s32 	%r368, %r1, 120;
	shr.u32 	%r369, %r368, 3;
	mad.lo.s32 	%r47, %r369, 257, %r361;
	add.s32 	%r370, %r1, 144;
	shr.u32 	%r371, %r370, 3;
	mad.lo.s32 	%r48, %r371, 257, %r361;
	add.s32 	%r372, %r1, 168;
	shr.u32 	%r373, %r372, 3;
	mad.lo.s32 	%r49, %r373, 257, %r361;
	or.b32  	%r374, %r358, 24;
	mad.lo.s32 	%r50, %r374, 257, %r361;
	add.s32 	%r375, %r1, 216;
	shr.u32 	%r376, %r375, 3;
	mad.lo.s32 	%r51, %r376, 257, %r361;
	add.s32 	%r377, %r1, 240;
	shr.u32 	%r378, %r377, 3;
	mad.lo.s32 	%r52, %r378, 257, %r361;
	add.s32 	%r379, %r1, 264;
	shr.u32 	%r380, %r379, 3;
	mad.lo.s32 	%r53, %r380, 257, %r361;
	or.b32  	%r381, %r358, 36;
	mad.lo.s32 	%r54, %r381, 257, %r361;
	add.s32 	%r382, %r1, 312;
	shr.u32 	%r383, %r382, 3;
	mad.lo.s32 	%r55, %r383, 257, %r361;
	add.s32 	%r384, %r1, 336;
	shr.u32 	%r385, %r384, 3;
	mad.lo.s32 	%r56, %r385, 257, %r361;
	add.s32 	%r386, %r1, 360;
	shr.u32 	%r387, %r386, 3;
	mad.lo.s32 	%r57, %r387, 257, %r361;
	or.b32  	%r388, %r358, 48;
	mad.lo.s32 	%r58, %r388, 257, %r361;
	add.s32 	%r389, %r1, 408;
	shr.u32 	%r390, %r389, 3;
	mad.lo.s32 	%r59, %r390, 257, %r361;
	add.s32 	%r391, %r1, 432;
	shr.u32 	%r392, %r391, 3;
	mad.lo.s32 	%r60, %r392, 257, %r361;
	add.s32 	%r393, %r1, 456;
	shr.u32 	%r394, %r393, 3;
	mad.lo.s32 	%r61, %r394, 257, %r361;
	or.b32  	%r395, %r358, 60;
	mad.lo.s32 	%r62, %r395, 257, %r361;
	add.s32 	%r396, %r1, 504;
	bfe.u32 	%r397, %r396, 3, 6;
	mad.lo.s32 	%r63, %r397, 257, %r361;
	mul.lo.s32 	%r398, %r4, 4806;
	mad.lo.s32 	%r399, %r21, 198, %r398;
	mad.lo.s32 	%r400, %r3338, 33, %r399;
	mad.lo.s32 	%r401, %r3337, 801, %r400;
	bfe.u32 	%r402, %r3, 3, 1;
	mul.lo.s32 	%r403, %r402, 514;
	and.b32  	%r404, %r3, 1;
	mul.lo.s32 	%r405, %r404, 4112;
	mul.lo.s32 	%r406, %r351, 257;
	and.b32  	%r407, %r5, 1;
	mul.lo.s32 	%r408, %r407, 1028;
	bfe.u32 	%r409, %r3, 1, 1;
	mul.lo.s32 	%r410, %r409, 2056;
	add.s32 	%r411, %r406, %r405;
	add.s32 	%r412, %r411, %r403;
	add.s32 	%r413, %r412, %r408;
	add.s32 	%r414, %r413, %r3338;
	add.s32 	%r415, %r414, %r410;
	add.s32 	%r64, %r415, %r3336;
	mul.wide.u32 	%rd25, %r64, 4;
	mov.u64 	%rd26, shmem;
	add.s64 	%rd6, %rd26, %rd25;
	add.s32 	%r65, %r64, 8256;
	cvt.u64.u32 	%rd27, %r3336;
	cvt.u64.u32 	%rd28, %r410;
	cvt.u64.u32 	%rd29, %r3338;
	cvt.u64.u32 	%rd30, %r408;
	cvt.u64.u32 	%rd31, %r403;
	cvt.u64.u32 	%rd32, %r406;
	cvt.u64.u32 	%rd33, %r405;
	add.s64 	%rd34, %rd33, %rd32;
	add.s64 	%rd35, %rd34, %rd31;
	add.s64 	%rd36, %rd35, %rd30;
	add.s64 	%rd37, %rd36, %rd29;
	add.s64 	%rd38, %rd37, %rd28;
	add.s64 	%rd39, %rd38, %rd27;
	shl.b64 	%rd40, %rd39, 2;
	add.s64 	%rd7, %rd26, %rd40;
	add.s32 	%r66, %r64, 32;
	add.s32 	%r67, %r64, 8288;
	bfe.u32 	%r416, %r1, 3, 1;
	mul.lo.s32 	%r417, %r416, 514;
	and.b32  	%r418, %r1, 1;
	mul.lo.s32 	%r419, %r418, 4112;
	shr.u32 	%r420, %r1, 4;
	mul.lo.s32 	%r421, %r420, 257;
	mul.lo.s32 	%r422, %r4, 6;
	bfe.u32 	%r423, %r1, 2, 1;
	mul.lo.s32 	%r424, %r423, 1028;
	bfe.u32 	%r425, %r1, 1, 1;
	mul.lo.s32 	%r426, %r425, 2056;
	add.s32 	%r427, %r421, %r419;
	add.s32 	%r428, %r427, %r422;
	add.s32 	%r429, %r428, %r417;
	add.s32 	%r430, %r429, %r424;
	add.s32 	%r431, %r430, %r426;
	add.s32 	%r68, %r431, %r3337;
	mul.wide.u32 	%rd41, %r68, 4;
	add.s64 	%rd8, %rd26, %rd41;
	add.s32 	%r69, %r68, 8256;
	cvt.u64.u32 	%rd42, %r3337;
	cvt.u64.u32 	%rd43, %r426;
	cvt.u64.u32 	%rd44, %r424;
	cvt.u64.u32 	%rd45, %r417;
	cvt.u64.u32 	%rd46, %r422;
	cvt.u64.u32 	%rd47, %r421;
	cvt.u64.u32 	%rd48, %r419;
	add.s64 	%rd49, %rd48, %rd47;
	add.s64 	%rd50, %rd49, %rd46;
	add.s64 	%rd51, %rd50, %rd45;
	add.s64 	%rd52, %rd51, %rd44;
	add.s64 	%rd53, %rd52, %rd43;
	add.s64 	%rd54, %rd53, %rd42;
	shl.b64 	%rd55, %rd54, 2;
	add.s64 	%rd9, %rd26, %rd55;
	add.s32 	%r70, %r68, 32;
	add.s32 	%r71, %r68, 8288;
	shl.b16 	%rs70, %rs1, 1;
	and.b16  	%rs71, %rs70, 254;
	mul.lo.s16 	%rs72, %rs71, 171;
	shr.u16 	%rs73, %rs72, 13;
	mul.lo.s16 	%rs74, %rs73, 48;
	sub.s16 	%rs75, %rs70, %rs74;
	cvt.u32.u16 	%r432, %rs75;
	and.b32  	%r433, %r432, 254;
	mul.lo.s32 	%r434, %r2, 1152;
	or.b32  	%r435, %r434, %r41;
	mad.lo.s32 	%r72, %r433, 24, %r435;
	or.b16  	%rs76, %rs70, 1;
	and.b16  	%rs77, %rs76, 255;
	mul.lo.s16 	%rs78, %rs77, 171;
	shr.u16 	%rs79, %rs78, 13;
	mul.lo.s16 	%rs80, %rs79, 48;
	sub.s16 	%rs81, %rs76, %rs80;
	cvt.u32.u16 	%r436, %rs81;
	and.b32  	%r437, %r436, 255;
	mad.lo.s32 	%r73, %r437, 24, %r435;
	mul.wide.u32 	%rd56, %r401, 4;
	add.s64 	%rd10, %rd26, %rd56;
	setp.gt.u32 	%p47, %r1, 7;
	setp.eq.s16 	%p48, %rs3, 0;
	setp.lt.u32 	%p50, %r3, 24;
	mov.u32 	%r3341, %r3334;
	mov.u32 	%r3372, %r3334;
	mov.u32 	%r3373, %r3334;
	mov.u32 	%r3374, %r3334;
	mov.u32 	%r3375, %r3334;
	bra.uni 	LBB0_16;
LBB0_37:                                // %guard_pass14622
                                        //   in Loop: Header=BB0_16 Depth=1
	add.s32 	%r245, %r3341, 48;
	setp.ne.s32 	%p76, %r3341, 2016;
	mov.u32 	%r3341, %r245;
	@%p76 bra 	LBB0_16;
	bra.uni 	LBB0_38;
LBB0_16:                                // %L737
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_18 Depth 2
                                        //     Child Loop BB0_28 Depth 2
	mul.hi.u32 	%r631, %r3341, -1431655765;
	shr.u32 	%r632, %r631, 5;
	mul.lo.s32 	%r79, %r632, 48;
	add.s32 	%r633, %r79, %r1;
	cvt.u16.u32 	%rs82, %r633;
	mul.hi.s16 	%rs83, %rs82, 16257;
	shr.u16 	%rs84, %rs83, 15;
	shr.s16 	%rs85, %rs83, 9;
	add.s16 	%rs86, %rs85, %rs84;
	mul.lo.s16 	%rs87, %rs86, 2064;
	sub.s16 	%rs88, %rs82, %rs87;
	mul.wide.s16 	%r634, %rs88, 21504;
	add.s32 	%r635, %r35, %r634;
	mul.wide.s32 	%rd57, %r635, 4;
	add.s64 	%rd58, %rd3, %rd57;
	ld.global.v4.u32 	{%r636, %r637, %r638, %r639}, [%rd58];
	or.b32  	%r640, %r36, %r634;
	add.s32 	%r641, %r37, %r640;
	mul.wide.s32 	%rd59, %r641, 4;
	add.s64 	%rd60, %rd3, %rd59;
	ld.global.v4.u32 	{%r642, %r643, %r644, %r645}, [%rd60];
	add.s32 	%r646, %r38, %r79;
	cvt.u16.u32 	%rs89, %r646;
	mul.hi.s16 	%rs90, %rs89, 16257;
	shr.u16 	%rs91, %rs90, 15;
	shr.s16 	%rs92, %rs90, 9;
	add.s16 	%rs93, %rs92, %rs91;
	mul.lo.s16 	%rs94, %rs93, 2064;
	sub.s16 	%rs95, %rs89, %rs94;
	mul.wide.s16 	%r647, %rs95, 21504;
	add.s32 	%r648, %r35, %r647;
	mul.wide.s32 	%rd61, %r648, 4;
	add.s64 	%rd62, %rd3, %rd61;
	ld.global.v4.u32 	{%r649, %r650, %r651, %r652}, [%rd62];
	or.b32  	%r653, %r36, %r647;
	add.s32 	%r654, %r37, %r653;
	mul.wide.s32 	%rd63, %r654, 4;
	add.s64 	%rd64, %rd3, %rd63;
	ld.global.v4.u32 	{%r655, %r656, %r657, %r658}, [%rd64];
	selp.b32 	%r659, %r638, %r636, %p48;
	shfl.sync.bfly.b32	%r660, %r659, 16, 31, -1;
	selp.b32 	%r440, %r636, %r660, %p48;
	selp.b32 	%r445, %r660, %r638, %p48;
	selp.b32 	%r661, %r639, %r637, %p48;
	shfl.sync.bfly.b32	%r662, %r661, 16, 31, -1;
	selp.b32 	%r448, %r637, %r662, %p48;
	selp.b32 	%r453, %r662, %r639, %p48;
	selp.b32 	%r663, %r644, %r642, %p48;
	shfl.sync.bfly.b32	%r664, %r663, 16, 31, -1;
	selp.b32 	%r456, %r642, %r664, %p48;
	selp.b32 	%r461, %r664, %r644, %p48;
	selp.b32 	%r665, %r645, %r643, %p48;
	shfl.sync.bfly.b32	%r666, %r665, 16, 31, -1;
	selp.b32 	%r464, %r643, %r666, %p48;
	selp.b32 	%r469, %r666, %r645, %p48;
	selp.b32 	%r667, %r651, %r649, %p48;
	shfl.sync.bfly.b32	%r668, %r667, 16, 31, -1;
	selp.b32 	%r472, %r649, %r668, %p48;
	selp.b32 	%r477, %r668, %r651, %p48;
	selp.b32 	%r669, %r652, %r650, %p48;
	shfl.sync.bfly.b32	%r670, %r669, 16, 31, -1;
	selp.b32 	%r480, %r650, %r670, %p48;
	selp.b32 	%r485, %r670, %r652, %p48;
	selp.b32 	%r671, %r657, %r655, %p48;
	shfl.sync.bfly.b32	%r672, %r671, 16, 31, -1;
	selp.b32 	%r488, %r655, %r672, %p48;
	selp.b32 	%r493, %r672, %r657, %p48;
	selp.b32 	%r673, %r658, %r656, %p48;
	shfl.sync.bfly.b32	%r674, %r673, 16, 31, -1;
	selp.b32 	%r496, %r656, %r674, %p48;
	selp.b32 	%r501, %r674, %r658, %p48;
	shl.b32 	%r441, %r445, 4;
	mov.u32 	%r439, 252645135;
	// begin inline asm
	lop3.b32 %r503, %r439, %r440, %r441, 202;
	// end inline asm
	shr.u32 	%r444, %r440, 4;
	// begin inline asm
	lop3.b32 %r519, %r439, %r444, %r445, 202;
	// end inline asm
	shl.b32 	%r449, %r453, 4;
	// begin inline asm
	lop3.b32 %r511, %r439, %r448, %r449, 202;
	// end inline asm
	shr.u32 	%r452, %r448, 4;
	// begin inline asm
	lop3.b32 %r527, %r439, %r452, %r453, 202;
	// end inline asm
	shl.b32 	%r457, %r461, 4;
	// begin inline asm
	lop3.b32 %r535, %r439, %r456, %r457, 202;
	// end inline asm
	shr.u32 	%r460, %r456, 4;
	// begin inline asm
	lop3.b32 %r551, %r439, %r460, %r461, 202;
	// end inline asm
	shl.b32 	%r465, %r469, 4;
	// begin inline asm
	lop3.b32 %r543, %r439, %r464, %r465, 202;
	// end inline asm
	shr.u32 	%r468, %r464, 4;
	// begin inline asm
	lop3.b32 %r559, %r439, %r468, %r469, 202;
	// end inline asm
	shl.b32 	%r473, %r477, 4;
	// begin inline asm
	lop3.b32 %r504, %r439, %r472, %r473, 202;
	// end inline asm
	shr.u32 	%r476, %r472, 4;
	// begin inline asm
	lop3.b32 %r520, %r439, %r476, %r477, 202;
	// end inline asm
	shl.b32 	%r481, %r485, 4;
	// begin inline asm
	lop3.b32 %r512, %r439, %r480, %r481, 202;
	// end inline asm
	shr.u32 	%r484, %r480, 4;
	// begin inline asm
	lop3.b32 %r528, %r439, %r484, %r485, 202;
	// end inline asm
	shl.b32 	%r489, %r493, 4;
	// begin inline asm
	lop3.b32 %r536, %r439, %r488, %r489, 202;
	// end inline asm
	shr.u32 	%r492, %r488, 4;
	// begin inline asm
	lop3.b32 %r552, %r439, %r492, %r493, 202;
	// end inline asm
	shl.b32 	%r497, %r501, 4;
	// begin inline asm
	lop3.b32 %r544, %r439, %r496, %r497, 202;
	// end inline asm
	shr.u32 	%r500, %r496, 4;
	// begin inline asm
	lop3.b32 %r560, %r439, %r500, %r501, 202;
	// end inline asm
	mov.u32 	%r505, 25152;
	// begin inline asm
	prmt.b32 %r567, %r503, %r504, %r505;
	// end inline asm
	mov.u32 	%r509, 29521;
	// begin inline asm
	prmt.b32 %r599, %r503, %r504, %r509;
	// end inline asm
	// begin inline asm
	prmt.b32 %r575, %r511, %r512, %r505;
	// end inline asm
	// begin inline asm
	prmt.b32 %r607, %r511, %r512, %r509;
	// end inline asm
	// begin inline asm
	prmt.b32 %r568, %r519, %r520, %r505;
	// end inline asm
	// begin inline asm
	prmt.b32 %r600, %r519, %r520, %r509;
	// end inline asm
	// begin inline asm
	prmt.b32 %r576, %r527, %r528, %r505;
	// end inline asm
	// begin inline asm
	prmt.b32 %r608, %r527, %r528, %r509;
	// end inline asm
	// begin inline asm
	prmt.b32 %r583, %r535, %r536, %r505;
	// end inline asm
	// begin inline asm
	prmt.b32 %r615, %r535, %r536, %r509;
	// end inline asm
	// begin inline asm
	prmt.b32 %r591, %r543, %r544, %r505;
	// end inline asm
	// begin inline asm
	prmt.b32 %r623, %r543, %r544, %r509;
	// end inline asm
	// begin inline asm
	prmt.b32 %r584, %r551, %r552, %r505;
	// end inline asm
	// begin inline asm
	prmt.b32 %r616, %r551, %r552, %r509;
	// end inline asm
	// begin inline asm
	prmt.b32 %r592, %r559, %r560, %r505;
	// end inline asm
	// begin inline asm
	prmt.b32 %r624, %r559, %r560, %r509;
	// end inline asm
	mov.u32 	%r625, 21520;
	// begin inline asm
	prmt.b32 %r566, %r567, %r568, %r625;
	// end inline asm
	mov.u32 	%r629, 30258;
	// begin inline asm
	prmt.b32 %r570, %r567, %r568, %r629;
	// end inline asm
	// begin inline asm
	prmt.b32 %r574, %r575, %r576, %r625;
	// end inline asm
	// begin inline asm
	prmt.b32 %r578, %r575, %r576, %r629;
	// end inline asm
	// begin inline asm
	prmt.b32 %r582, %r583, %r584, %r625;
	// end inline asm
	// begin inline asm
	prmt.b32 %r586, %r583, %r584, %r629;
	// end inline asm
	// begin inline asm
	prmt.b32 %r590, %r591, %r592, %r625;
	// end inline asm
	// begin inline asm
	prmt.b32 %r594, %r591, %r592, %r629;
	// end inline asm
	// begin inline asm
	prmt.b32 %r598, %r599, %r600, %r625;
	// end inline asm
	// begin inline asm
	prmt.b32 %r602, %r599, %r600, %r629;
	// end inline asm
	// begin inline asm
	prmt.b32 %r606, %r607, %r608, %r625;
	// end inline asm
	// begin inline asm
	prmt.b32 %r610, %r607, %r608, %r629;
	// end inline asm
	// begin inline asm
	prmt.b32 %r614, %r615, %r616, %r625;
	// end inline asm
	// begin inline asm
	prmt.b32 %r618, %r615, %r616, %r629;
	// end inline asm
	// begin inline asm
	prmt.b32 %r622, %r623, %r624, %r625;
	// end inline asm
	// begin inline asm
	prmt.b32 %r626, %r623, %r624, %r629;
	// end inline asm
	mul.hi.s16 	%rs96, %rs82, 10923;
	shr.u16 	%rs97, %rs96, 15;
	shr.s16 	%rs98, %rs96, 2;
	add.s16 	%rs99, %rs98, %rs97;
	mul.lo.s16 	%rs100, %rs99, 24;
	sub.s16 	%rs101, %rs82, %rs100;
	cvt.s32.s16 	%r675, %rs101;
	add.s32 	%r676, %r39, %r675;
	mul.wide.s32 	%rd65, %r676, 4;
	add.s64 	%rd67, %rd26, %rd65;
	st.shared.u32 	[%rd67], %r566;
	st.shared.u32 	[%rd67+512], %r574;
	st.shared.u32 	[%rd67+256], %r570;
	st.shared.u32 	[%rd67+768], %r578;
	add.s32 	%r677, %r40, %r675;
	mul.wide.s32 	%rd68, %r677, 4;
	add.s64 	%rd69, %rd26, %rd68;
	st.shared.u32 	[%rd69], %r582;
	st.shared.u32 	[%rd69+512], %r590;
	st.shared.u32 	[%rd69+256], %r586;
	st.shared.u32 	[%rd69+768], %r594;
	st.shared.u32 	[%rd67+128], %r598;
	st.shared.u32 	[%rd67+640], %r606;
	st.shared.u32 	[%rd67+384], %r602;
	st.shared.u32 	[%rd67+896], %r610;
	st.shared.u32 	[%rd69+128], %r614;
	st.shared.u32 	[%rd69+640], %r622;
	st.shared.u32 	[%rd69+384], %r618;
	st.shared.u32 	[%rd69+896], %r626;
	bar.sync 	0;
	add.s32 	%r678, %r79, %r41;
	cvt.u16.u32 	%rs102, %r678;
	mul.hi.s16 	%rs103, %rs102, 10923;
	shr.u16 	%rs104, %rs103, 15;
	shr.s16 	%rs105, %rs103, 2;
	add.s16 	%rs106, %rs105, %rs104;
	mul.lo.s16 	%rs107, %rs106, 24;
	sub.s16 	%rs108, %rs102, %rs107;
	cvt.s32.s16 	%r679, %rs108;
	add.s32 	%r680, %r42, %r679;
	mul.wide.s32 	%rd70, %r680, 4;
	add.s64 	%rd71, %rd26, %rd70;
	ld.shared.u32 	%r681, [%rd71];
	add.s32 	%r682, %r43, %r679;
	mul.wide.u32 	%rd72, %r682, 4;
	add.s64 	%rd73, %rd26, %rd72;
	ld.shared.u32 	%r683, [%rd73];
	add.s32 	%r684, %r44, %r679;
	mul.wide.u32 	%rd74, %r684, 4;
	add.s64 	%rd75, %rd26, %rd74;
	ld.shared.u32 	%r685, [%rd75];
	add.s32 	%r686, %r45, %r679;
	mul.wide.u32 	%rd76, %r686, 4;
	add.s64 	%rd77, %rd26, %rd76;
	ld.shared.u32 	%r687, [%rd77];
	add.s32 	%r688, %r46, %r679;
	mul.wide.s32 	%rd78, %r688, 4;
	add.s64 	%rd79, %rd26, %rd78;
	ld.shared.u32 	%r689, [%rd79];
	add.s32 	%r690, %r47, %r679;
	mul.wide.u32 	%rd80, %r690, 4;
	add.s64 	%rd81, %rd26, %rd80;
	ld.shared.u32 	%r691, [%rd81];
	add.s32 	%r692, %r48, %r679;
	mul.wide.u32 	%rd82, %r692, 4;
	add.s64 	%rd83, %rd26, %rd82;
	ld.shared.u32 	%r693, [%rd83];
	add.s32 	%r694, %r49, %r679;
	mul.wide.u32 	%rd84, %r694, 4;
	add.s64 	%rd85, %rd26, %rd84;
	ld.shared.u32 	%r695, [%rd85];
	add.s32 	%r696, %r50, %r679;
	mul.wide.s32 	%rd86, %r696, 4;
	add.s64 	%rd87, %rd26, %rd86;
	ld.shared.u32 	%r697, [%rd87];
	add.s32 	%r698, %r51, %r679;
	mul.wide.u32 	%rd88, %r698, 4;
	add.s64 	%rd89, %rd26, %rd88;
	ld.shared.u32 	%r699, [%rd89];
	add.s32 	%r700, %r52, %r679;
	mul.wide.u32 	%rd90, %r700, 4;
	add.s64 	%rd91, %rd26, %rd90;
	ld.shared.u32 	%r701, [%rd91];
	add.s32 	%r702, %r53, %r679;
	mul.wide.u32 	%rd92, %r702, 4;
	add.s64 	%rd93, %rd26, %rd92;
	ld.shared.u32 	%r703, [%rd93];
	add.s32 	%r704, %r54, %r679;
	mul.wide.s32 	%rd94, %r704, 4;
	add.s64 	%rd95, %rd26, %rd94;
	ld.shared.u32 	%r705, [%rd95];
	add.s32 	%r706, %r55, %r679;
	mul.wide.u32 	%rd96, %r706, 4;
	add.s64 	%rd97, %rd26, %rd96;
	ld.shared.u32 	%r707, [%rd97];
	add.s32 	%r708, %r56, %r679;
	mul.wide.u32 	%rd98, %r708, 4;
	add.s64 	%rd99, %rd26, %rd98;
	ld.shared.u32 	%r709, [%rd99];
	add.s32 	%r710, %r57, %r679;
	mul.wide.u32 	%rd100, %r710, 4;
	add.s64 	%rd101, %rd26, %rd100;
	ld.shared.u32 	%r711, [%rd101];
	add.s32 	%r712, %r58, %r679;
	mul.wide.s32 	%rd102, %r712, 4;
	add.s64 	%rd103, %rd26, %rd102;
	ld.shared.u32 	%r713, [%rd103];
	add.s32 	%r714, %r59, %r679;
	mul.wide.u32 	%rd104, %r714, 4;
	add.s64 	%rd105, %rd26, %rd104;
	ld.shared.u32 	%r715, [%rd105];
	add.s32 	%r716, %r60, %r679;
	mul.wide.u32 	%rd106, %r716, 4;
	add.s64 	%rd107, %rd26, %rd106;
	ld.shared.u32 	%r717, [%rd107];
	add.s32 	%r718, %r61, %r679;
	mul.wide.u32 	%rd108, %r718, 4;
	add.s64 	%rd109, %rd26, %rd108;
	ld.shared.u32 	%r719, [%rd109];
	add.s32 	%r720, %r62, %r679;
	mul.wide.s32 	%rd110, %r720, 4;
	add.s64 	%rd111, %rd26, %rd110;
	ld.shared.u32 	%r721, [%rd111];
	add.s32 	%r722, %r63, %r679;
	mul.wide.s32 	%rd112, %r722, 4;
	add.s64 	%rd113, %rd26, %rd112;
	ld.shared.u32 	%r723, [%rd113];
	bar.sync 	0;
	shfl.sync.idx.b32	%r724, %r3335, 0, 31, -1;
	shfl.sync.idx.b32	%r725, %r3335, 1, 31, -1;
	shfl.sync.idx.b32	%r726, %r3335, 2, 31, -1;
	shfl.sync.idx.b32	%r727, %r3335, 3, 31, -1;
	shfl.sync.idx.b32	%r728, %r3335, 4, 31, -1;
	shfl.sync.idx.b32	%r729, %r3335, 5, 31, -1;
	shfl.sync.idx.b32	%r730, %r3335, 6, 31, -1;
	shfl.sync.idx.b32	%r731, %r3335, 7, 31, -1;
	shfl.sync.idx.b32	%r732, %r3335, 8, 31, -1;
	shfl.sync.idx.b32	%r733, %r3335, 9, 31, -1;
	shfl.sync.idx.b32	%r734, %r3335, 10, 31, -1;
	shfl.sync.idx.b32	%r735, %r3335, 11, 31, -1;
	shfl.sync.idx.b32	%r736, %r3335, 12, 31, -1;
	shfl.sync.idx.b32	%r737, %r3335, 13, 31, -1;
	shfl.sync.idx.b32	%r738, %r3335, 14, 31, -1;
	shfl.sync.idx.b32	%r739, %r3335, 15, 31, -1;
	shfl.sync.idx.b32	%r740, %r3335, 16, 31, -1;
	shfl.sync.idx.b32	%r741, %r3335, 17, 31, -1;
	shfl.sync.idx.b32	%r742, %r3335, 18, 31, -1;
	shfl.sync.idx.b32	%r743, %r3335, 19, 31, -1;
	shfl.sync.idx.b32	%r744, %r3335, 20, 31, -1;
	shfl.sync.idx.b32	%r745, %r3335, 21, 31, -1;
	shfl.sync.idx.b32	%r746, %r3335, 22, 31, -1;
	shfl.sync.idx.b32	%r747, %r3335, 23, 31, -1;
	add.s32 	%r748, %r724, %r679;
	mul.wide.s32 	%rd114, %r748, 4;
	add.s64 	%rd115, %rd26, %rd114;
	st.shared.u32 	[%rd115], %r681;
	add.s32 	%r749, %r725, %r679;
	mul.wide.s32 	%rd116, %r749, 4;
	add.s64 	%rd117, %rd26, %rd116;
	st.shared.u32 	[%rd117], %r683;
	add.s32 	%r750, %r726, %r679;
	mul.wide.s32 	%rd118, %r750, 4;
	add.s64 	%rd119, %rd26, %rd118;
	st.shared.u32 	[%rd119], %r685;
	add.s32 	%r751, %r727, %r679;
	mul.wide.s32 	%rd120, %r751, 4;
	add.s64 	%rd121, %rd26, %rd120;
	st.shared.u32 	[%rd121], %r687;
	add.s32 	%r752, %r728, %r679;
	mul.wide.s32 	%rd122, %r752, 4;
	add.s64 	%rd123, %rd26, %rd122;
	st.shared.u32 	[%rd123], %r689;
	add.s32 	%r753, %r729, %r679;
	mul.wide.s32 	%rd124, %r753, 4;
	add.s64 	%rd125, %rd26, %rd124;
	st.shared.u32 	[%rd125], %r691;
	add.s32 	%r754, %r730, %r679;
	mul.wide.s32 	%rd126, %r754, 4;
	add.s64 	%rd127, %rd26, %rd126;
	st.shared.u32 	[%rd127], %r693;
	add.s32 	%r755, %r731, %r679;
	mul.wide.s32 	%rd128, %r755, 4;
	add.s64 	%rd129, %rd26, %rd128;
	st.shared.u32 	[%rd129], %r695;
	add.s32 	%r756, %r732, %r679;
	mul.wide.s32 	%rd130, %r756, 4;
	add.s64 	%rd131, %rd26, %rd130;
	st.shared.u32 	[%rd131], %r697;
	add.s32 	%r757, %r733, %r679;
	mul.wide.s32 	%rd132, %r757, 4;
	add.s64 	%rd133, %rd26, %rd132;
	st.shared.u32 	[%rd133], %r699;
	add.s32 	%r758, %r734, %r679;
	mul.wide.s32 	%rd134, %r758, 4;
	add.s64 	%rd135, %rd26, %rd134;
	st.shared.u32 	[%rd135], %r701;
	add.s32 	%r759, %r735, %r679;
	mul.wide.s32 	%rd136, %r759, 4;
	add.s64 	%rd137, %rd26, %rd136;
	st.shared.u32 	[%rd137], %r703;
	add.s32 	%r760, %r736, %r679;
	mul.wide.s32 	%rd138, %r760, 4;
	add.s64 	%rd139, %rd26, %rd138;
	st.shared.u32 	[%rd139], %r705;
	add.s32 	%r761, %r737, %r679;
	mul.wide.s32 	%rd140, %r761, 4;
	add.s64 	%rd141, %rd26, %rd140;
	st.shared.u32 	[%rd141], %r707;
	add.s32 	%r762, %r738, %r679;
	mul.wide.s32 	%rd142, %r762, 4;
	add.s64 	%rd143, %rd26, %rd142;
	st.shared.u32 	[%rd143], %r709;
	add.s32 	%r763, %r739, %r679;
	mul.wide.s32 	%rd144, %r763, 4;
	add.s64 	%rd145, %rd26, %rd144;
	st.shared.u32 	[%rd145], %r711;
	add.s32 	%r764, %r740, %r679;
	mul.wide.s32 	%rd146, %r764, 4;
	add.s64 	%rd147, %rd26, %rd146;
	st.shared.u32 	[%rd147], %r713;
	add.s32 	%r765, %r741, %r679;
	mul.wide.s32 	%rd148, %r765, 4;
	add.s64 	%rd149, %rd26, %rd148;
	st.shared.u32 	[%rd149], %r715;
	add.s32 	%r766, %r742, %r679;
	mul.wide.s32 	%rd150, %r766, 4;
	add.s64 	%rd151, %rd26, %rd150;
	st.shared.u32 	[%rd151], %r717;
	add.s32 	%r767, %r743, %r679;
	mul.wide.s32 	%rd152, %r767, 4;
	add.s64 	%rd153, %rd26, %rd152;
	st.shared.u32 	[%rd153], %r719;
	add.s32 	%r768, %r744, %r679;
	mul.wide.s32 	%rd154, %r768, 4;
	add.s64 	%rd155, %rd26, %rd154;
	st.shared.u32 	[%rd155], %r721;
	selp.b32 	%r769, 0, %r723, %p47;
	add.s32 	%r770, %r745, %r679;
	mul.wide.s32 	%rd156, %r770, 4;
	add.s64 	%rd157, %rd26, %rd156;
	st.shared.u32 	[%rd157], %r769;
	add.s32 	%r771, %r746, %r679;
	mul.wide.s32 	%rd158, %r771, 4;
	add.s64 	%rd159, %rd26, %rd158;
	st.shared.u32 	[%rd159], %r3334;
	add.s32 	%r772, %r747, %r679;
	mul.wide.s32 	%rd160, %r772, 4;
	add.s64 	%rd161, %rd26, %rd160;
	st.shared.u32 	[%rd161], %r3334;
	bar.sync 	0;
	mov.u32 	%r3346, %r3334;
	mov.u32 	%r3347, %r3334;
	mov.u32 	%r3348, %r3334;
	mov.u32 	%r3349, %r3334;
	mov.u32 	%r3350, %r3334;
	mov.u32 	%r3351, %r3334;
	mov.u32 	%r3352, %r3334;
	mov.u32 	%r3353, %r3334;
	mov.u32 	%r3354, %r3334;
	mov.u32 	%r3355, %r3334;
	mov.u32 	%r3356, %r3334;
	mov.u32 	%r3357, %r3334;
	mov.u32 	%r3358, %r3334;
	mov.u32 	%r3359, %r3334;
	mov.u32 	%r3360, %r3334;
	mov.u32 	%r3361, %r3334;
	mov.u32 	%r3362, %r3334;
	mov.u32 	%r3363, %r3334;
	mov.u32 	%r3364, %r3334;
	mov.u32 	%r3365, %r3334;
	mov.u32 	%r3366, %r3334;
	mov.u32 	%r3367, %r3334;
	mov.u32 	%r3368, %r3334;
	mov.u32 	%r3369, %r3334;
	@%p46 bra 	LBB0_41;
	bra.uni 	LBB0_17;
LBB0_41:                                // %oksrem3271
                                        //   in Loop: Header=BB0_16 Depth=1
	cvt.u16.u32 	%rs109, %r79;
	mul.hi.s16 	%rs110, %rs109, 10923;
	shr.u16 	%rs111, %rs110, 15;
	shr.s16 	%rs112, %rs110, 2;
	add.s16 	%rs113, %rs112, %rs111;
	mul.lo.s16 	%rs114, %rs113, 24;
	sub.s16 	%rs115, %rs109, %rs114;
	cvt.s32.s16 	%r773, %rs115;
	mul.wide.s32 	%rd162, %r773, 4;
	add.s64 	%rd163, %rd10, %rd162;
	ld.shared.u32 	%r3346, [%rd163];
	ld.shared.u32 	%r3347, [%rd10+4];
	ld.shared.u32 	%r3348, [%rd10+8];
	ld.shared.u32 	%r3349, [%rd10+12];
	ld.shared.u32 	%r3350, [%rd10+16];
	ld.shared.u32 	%r3351, [%rd10+20];
	ld.shared.u32 	%r3352, [%rd10+24];
	ld.shared.u32 	%r3353, [%rd10+28];
	ld.shared.u32 	%r3354, [%rd10+32];
	ld.shared.u32 	%r3355, [%rd10+36];
	ld.shared.u32 	%r3356, [%rd10+40];
	ld.shared.u32 	%r3357, [%rd10+44];
	ld.shared.u32 	%r3358, [%rd10+48];
	ld.shared.u32 	%r3359, [%rd10+52];
	ld.shared.u32 	%r3360, [%rd10+56];
	ld.shared.u32 	%r3361, [%rd10+60];
	add.s16 	%rs116, %rs109, 16;
	mul.hi.s16 	%rs117, %rs116, 10923;
	shr.u16 	%rs118, %rs117, 15;
	shr.s16 	%rs119, %rs117, 2;
	add.s16 	%rs120, %rs119, %rs118;
	mul.lo.s16 	%rs121, %rs120, 24;
	sub.s16 	%rs122, %rs116, %rs121;
	cvt.s32.s16 	%r774, %rs122;
	mul.wide.s32 	%rd164, %r774, 4;
	add.s64 	%rd165, %rd10, %rd164;
	ld.shared.u32 	%r3362, [%rd165];
	add.s16 	%rs123, %rs109, 17;
	mul.hi.s16 	%rs124, %rs123, 10923;
	shr.u16 	%rs125, %rs124, 15;
	shr.s16 	%rs126, %rs124, 2;
	add.s16 	%rs127, %rs126, %rs125;
	mul.lo.s16 	%rs128, %rs127, 24;
	sub.s16 	%rs129, %rs123, %rs128;
	cvt.s32.s16 	%r775, %rs129;
	mul.wide.s32 	%rd166, %r775, 4;
	add.s64 	%rd167, %rd10, %rd166;
	ld.shared.u32 	%r3363, [%rd167];
	add.s16 	%rs130, %rs109, 18;
	mul.hi.s16 	%rs131, %rs130, 10923;
	shr.u16 	%rs132, %rs131, 15;
	shr.s16 	%rs133, %rs131, 2;
	add.s16 	%rs134, %rs133, %rs132;
	mul.lo.s16 	%rs135, %rs134, 24;
	sub.s16 	%rs136, %rs130, %rs135;
	cvt.s32.s16 	%r776, %rs136;
	mul.wide.s32 	%rd168, %r776, 4;
	add.s64 	%rd169, %rd10, %rd168;
	ld.shared.u32 	%r3364, [%rd169];
	add.s16 	%rs137, %rs109, 19;
	mul.hi.s16 	%rs138, %rs137, 10923;
	shr.u16 	%rs139, %rs138, 15;
	shr.s16 	%rs140, %rs138, 2;
	add.s16 	%rs141, %rs140, %rs139;
	mul.lo.s16 	%rs142, %rs141, 24;
	sub.s16 	%rs143, %rs137, %rs142;
	cvt.s32.s16 	%r777, %rs143;
	mul.wide.s32 	%rd170, %r777, 4;
	add.s64 	%rd171, %rd10, %rd170;
	ld.shared.u32 	%r3365, [%rd171];
	add.s16 	%rs144, %rs109, 20;
	mul.hi.s16 	%rs145, %rs144, 10923;
	shr.u16 	%rs146, %rs145, 15;
	shr.s16 	%rs147, %rs145, 2;
	add.s16 	%rs148, %rs147, %rs146;
	mul.lo.s16 	%rs149, %rs148, 24;
	sub.s16 	%rs150, %rs144, %rs149;
	cvt.s32.s16 	%r778, %rs150;
	mul.wide.s32 	%rd172, %r778, 4;
	add.s64 	%rd173, %rd10, %rd172;
	ld.shared.u32 	%r3366, [%rd173];
	add.s16 	%rs151, %rs109, 21;
	mul.hi.s16 	%rs152, %rs151, 10923;
	shr.u16 	%rs153, %rs152, 15;
	shr.s16 	%rs154, %rs152, 2;
	add.s16 	%rs155, %rs154, %rs153;
	mul.lo.s16 	%rs156, %rs155, 24;
	sub.s16 	%rs157, %rs151, %rs156;
	cvt.s32.s16 	%r779, %rs157;
	mul.wide.s32 	%rd174, %r779, 4;
	add.s64 	%rd175, %rd10, %rd174;
	ld.shared.u32 	%r3367, [%rd175];
	add.s16 	%rs158, %rs109, 22;
	mul.hi.s16 	%rs159, %rs158, 10923;
	shr.u16 	%rs160, %rs159, 15;
	shr.s16 	%rs161, %rs159, 2;
	add.s16 	%rs162, %rs161, %rs160;
	mul.lo.s16 	%rs163, %rs162, 24;
	sub.s16 	%rs164, %rs158, %rs163;
	cvt.s32.s16 	%r780, %rs164;
	mul.wide.s32 	%rd176, %r780, 4;
	add.s64 	%rd177, %rd10, %rd176;
	ld.shared.u32 	%r3368, [%rd177];
	add.s16 	%rs165, %rs109, 23;
	mul.hi.s16 	%rs166, %rs165, 10923;
	shr.u16 	%rs167, %rs166, 15;
	shr.s16 	%rs168, %rs166, 2;
	add.s16 	%rs169, %rs168, %rs167;
	mul.lo.s16 	%rs170, %rs169, 24;
	sub.s16 	%rs171, %rs165, %rs170;
	cvt.s32.s16 	%r781, %rs171;
	mul.wide.s32 	%rd178, %r781, 4;
	add.s64 	%rd179, %rd10, %rd178;
	ld.shared.u32 	%r3369, [%rd179];
LBB0_17:                                // %L11382
                                        //   in Loop: Header=BB0_16 Depth=1
	bar.sync 	0;
	mov.u32 	%r3370, 12;
	mov.u32 	%r3371, %r3334;
	bra.uni 	LBB0_18;
LBB0_25:                                // %L21383
                                        //   in Loop: Header=BB0_18 Depth=2
	add.s32 	%r3373, %r3373, 1;
	mov.u32 	%r3372, 0;
	mov.u32 	%r3374, %r3372;
	mov.u32 	%r3375, %r3372;
LBB0_26:                                // %L21384
                                        //   in Loop: Header=BB0_18 Depth=2
	bar.sync 	0;
	add.s32 	%r3371, %r3371, 1;
	add.s32 	%r3370, %r3370, -4;
	setp.ne.s32 	%p62, %r3370, -12;
	@%p62 bra 	LBB0_18;
	bra.uni 	LBB0_27;
LBB0_18:                                // %L11408
                                        //   Parent Loop BB0_16 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p51, %r3370, 12;
	selp.b32 	%r1321, %r3346, 0, %p51;
	setp.eq.s32 	%p52, %r3370, 8;
	selp.b32 	%r1322, %r3350, %r1321, %p52;
	setp.eq.s32 	%p53, %r3370, 4;
	selp.b32 	%r1323, %r3354, %r1322, %p53;
	setp.eq.s32 	%p54, %r3370, 0;
	selp.b32 	%r1324, %r3358, %r1323, %p54;
	setp.eq.s32 	%p55, %r3370, -4;
	selp.b32 	%r1325, %r3362, %r1324, %p55;
	setp.eq.s32 	%p56, %r3370, -8;
	selp.b32 	%r1326, %r3366, %r1325, %p56;
	selp.b32 	%r1327, %r3347, 0, %p51;
	selp.b32 	%r1328, %r3351, %r1327, %p52;
	selp.b32 	%r1329, %r3355, %r1328, %p53;
	selp.b32 	%r1330, %r3359, %r1329, %p54;
	selp.b32 	%r1331, %r3363, %r1330, %p55;
	selp.b32 	%r1332, %r3367, %r1331, %p56;
	selp.b32 	%r1333, %r3348, 0, %p51;
	selp.b32 	%r1334, %r3352, %r1333, %p52;
	selp.b32 	%r1335, %r3356, %r1334, %p53;
	selp.b32 	%r1336, %r3360, %r1335, %p54;
	selp.b32 	%r1337, %r3364, %r1336, %p55;
	selp.b32 	%r1338, %r3368, %r1337, %p56;
	selp.b32 	%r1339, %r3349, 0, %p51;
	selp.b32 	%r1340, %r3353, %r1339, %p52;
	selp.b32 	%r1341, %r3357, %r1340, %p53;
	selp.b32 	%r1342, %r3361, %r1341, %p54;
	selp.b32 	%r1343, %r3365, %r1342, %p55;
	selp.b32 	%r1344, %r3369, %r1343, %p56;
	mov.u16 	%rs209, 25600;
	// begin inline asm
	mov.b32 %r789, {%rs209, %rs209};
	// end inline asm
	mov.u16 	%rs211, 21504;
	// begin inline asm
	mov.b32 %r800, {%rs211, %rs211};
	// end inline asm
	xor.b32  	%r788, %r1326, -2004318072;
	mov.u32 	%r925, 983055;
	// begin inline asm
	lop3.b32 %r786, %r925, %r788, %r789, 202;
	// end inline asm
	mov.u16 	%rs215, 18432;
	// begin inline asm
	mov.b32 %r790, {%rs215, %rs215};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r791, %r789, %r790;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r794, %r786, %r791;
	// end inline asm
	mov.u32 	%r936, 15728880;
	// begin inline asm
	lop3.b32 %r797, %r936, %r788, %r800, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r801, {%rs215, %rs215};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r802, %r800, %r801;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r805, %r797, %r802;
	// end inline asm
	// begin inline asm
	mov.b32 %r835, {%rs209, %rs209};
	// end inline asm
	// begin inline asm
	mov.b32 %r846, {%rs211, %rs211};
	// end inline asm
	xor.b32  	%r834, %r1332, -2004318072;
	// begin inline asm
	lop3.b32 %r832, %r925, %r834, %r835, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r836, {%rs215, %rs215};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r837, %r835, %r836;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r840, %r832, %r837;
	// end inline asm
	// begin inline asm
	lop3.b32 %r843, %r936, %r834, %r846, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r847, {%rs215, %rs215};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r848, %r846, %r847;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r851, %r843, %r848;
	// end inline asm
	// begin inline asm
	mov.b32 %r881, {%rs209, %rs209};
	// end inline asm
	// begin inline asm
	mov.b32 %r892, {%rs211, %rs211};
	// end inline asm
	xor.b32  	%r880, %r1338, -2004318072;
	// begin inline asm
	lop3.b32 %r878, %r925, %r880, %r881, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r882, {%rs215, %rs215};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r883, %r881, %r882;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r886, %r878, %r883;
	// end inline asm
	// begin inline asm
	lop3.b32 %r889, %r936, %r880, %r892, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r893, {%rs215, %rs215};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r894, %r892, %r893;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r897, %r889, %r894;
	// end inline asm
	// begin inline asm
	mov.b32 %r927, {%rs209, %rs209};
	// end inline asm
	// begin inline asm
	mov.b32 %r938, {%rs211, %rs211};
	// end inline asm
	xor.b32  	%r926, %r1344, -2004318072;
	// begin inline asm
	lop3.b32 %r924, %r925, %r926, %r927, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r928, {%rs215, %rs215};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r929, %r927, %r928;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r932, %r924, %r929;
	// end inline asm
	// begin inline asm
	lop3.b32 %r935, %r936, %r926, %r938, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r939, {%rs215, %rs215};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r940, %r938, %r939;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r943, %r935, %r940;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3339;
    mov.b32 {%r2im, %r2re}, %r794;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r968, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3340;
    mov.b32 {%r2im, %r2re}, %r805;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r971, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3339;
    mov.b32 {%r2im, %r2re}, %r840;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r974, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3340;
    mov.b32 {%r2im, %r2re}, %r851;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r977, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3339;
    mov.b32 {%r2im, %r2re}, %r886;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r980, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3340;
    mov.b32 {%r2im, %r2re}, %r897;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r983, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3339;
    mov.b32 {%r2im, %r2re}, %r932;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r986, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3340;
    mov.b32 {%r2im, %r2re}, %r943;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r989, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1052, %r1055}, {%r250, %r247}, {%r968}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1061, %r1064}, {%r250, %r247}, {%r971}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1070, %r1073}, {%r250, %r247}, {%r974}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1079, %r1082}, {%r250, %r247}, {%r977}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1088, %r1091}, {%r250, %r247}, {%r980}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1097, %r1100}, {%r250, %r247}, {%r983}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1106, %r1109}, {%r250, %r247}, {%r986}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1115, %r1118}, {%r250, %r247}, {%r989}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1048, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1050, %r1048, %r1052;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1053, %r285, %r1055, %r1050;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1057, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1059, %r1057, %r1061;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1062, %r285, %r1064, %r1059;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1066, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1068, %r1066, %r1070;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1071, %r285, %r1073, %r1068;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1075, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1077, %r1075, %r1079;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1080, %r285, %r1082, %r1077;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1084, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1086, %r1084, %r1088;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1089, %r285, %r1091, %r1086;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1093, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1095, %r1093, %r1097;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1098, %r285, %r1100, %r1095;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1102, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1104, %r1102, %r1106;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1107, %r285, %r1109, %r1104;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1111, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1113, %r1111, %r1115;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1116, %r285, %r1118, %r1113;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1120, %r288, %r1055;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1123, %r285, %r1052, %r1120;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1127, %r288, %r1064;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1130, %r285, %r1061, %r1127;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1134, %r288, %r1073;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1137, %r285, %r1070, %r1134;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1141, %r288, %r1082;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1144, %r285, %r1079, %r1141;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1148, %r288, %r1091;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1151, %r285, %r1088, %r1148;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1155, %r288, %r1100;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1158, %r285, %r1097, %r1155;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1162, %r288, %r1109;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1165, %r285, %r1106, %r1162;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1169, %r288, %r1118;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1172, %r285, %r1115, %r1169;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1257, %r1258}, {%r318, %r312, %r315, %r309}, {%r1123, %r1053}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1265, %r1266}, {%r318, %r312, %r315, %r309}, {%r1130, %r1062}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1273, %r1274}, {%r318, %r312, %r315, %r309}, {%r1137, %r1071}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1281, %r1282}, {%r318, %r312, %r315, %r309}, {%r1144, %r1080}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1289, %r1290}, {%r318, %r312, %r315, %r309}, {%r1151, %r1089}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1297, %r1298}, {%r318, %r312, %r315, %r309}, {%r1158, %r1098}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1305, %r1306}, {%r318, %r312, %r315, %r309}, {%r1165, %r1107}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1313, %r1314}, {%r318, %r312, %r315, %r309}, {%r1172, %r1116}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	prmt.b32 %r1256, %r1257, %r1258, %r625;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1260, %r1257, %r1258, %r629;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1264, %r1265, %r1266, %r625;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1268, %r1265, %r1266, %r629;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1272, %r1273, %r1274, %r625;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1276, %r1273, %r1274, %r629;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1280, %r1281, %r1282, %r625;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1284, %r1281, %r1282, %r629;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1288, %r1289, %r1290, %r625;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1292, %r1289, %r1290, %r629;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1296, %r1297, %r1298, %r625;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1300, %r1297, %r1298, %r629;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1304, %r1305, %r1306, %r625;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1308, %r1305, %r1306, %r629;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1312, %r1313, %r1314, %r625;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1316, %r1313, %r1314, %r629;
	// end inline asm
	st.shared.u32 	[%rd6], %r1256;
	st.shared.u32 	[%rd7+33024], %r1260;
	st.shared.u32 	[%rd7+128], %r1264;
	st.shared.u32 	[%rd7+33152], %r1268;
	cvt.u16.u32 	%rs220, %r3371;
	and.b16  	%rs221, %rs220, 255;
	mul.lo.s16 	%rs222, %rs221, 171;
	shr.u16 	%rs223, %rs222, 10;
	mul.lo.s16 	%rs224, %rs223, 6;
	sub.s16 	%rs225, %rs220, %rs224;
	shl.b16 	%rs226, %rs225, 2;
	cvt.u32.u16 	%r1345, %rs226;
	and.b32  	%r1346, %r1345, 252;
	add.s32 	%r1347, %r79, %r1346;
	add.s32 	%r1348, %r1347, 1;
	shr.s32 	%r1349, %r1348, 31;
	shr.u32 	%r1350, %r1349, 30;
	add.s32 	%r1351, %r1348, %r1350;
	and.b32  	%r1352, %r1351, 67108860;
	sub.s32 	%r1353, %r1348, %r1352;
	shl.b32 	%r110, %r1353, 6;
	add.s32 	%r1354, %r64, %r110;
	mul.wide.s32 	%rd180, %r1354, 4;
	add.s64 	%rd182, %rd26, %rd180;
	st.shared.u32 	[%rd182], %r1272;
	add.s32 	%r1355, %r65, %r110;
	mul.wide.u32 	%rd183, %r1355, 4;
	add.s64 	%rd184, %rd26, %rd183;
	st.shared.u32 	[%rd184], %r1276;
	add.s32 	%r1356, %r66, %r110;
	mul.wide.s32 	%rd185, %r1356, 4;
	add.s64 	%rd186, %rd26, %rd185;
	st.shared.u32 	[%rd186], %r1280;
	add.s32 	%r1357, %r67, %r110;
	mul.wide.u32 	%rd187, %r1357, 4;
	add.s64 	%rd188, %rd26, %rd187;
	st.shared.u32 	[%rd188], %r1284;
	add.s32 	%r1358, %r1347, 2;
	shr.s32 	%r1359, %r1358, 31;
	shr.u32 	%r1360, %r1359, 30;
	add.s32 	%r1361, %r1358, %r1360;
	and.b32  	%r1362, %r1361, 67108860;
	sub.s32 	%r1363, %r1358, %r1362;
	shl.b32 	%r111, %r1363, 6;
	add.s32 	%r1364, %r64, %r111;
	mul.wide.s32 	%rd189, %r1364, 4;
	add.s64 	%rd190, %rd26, %rd189;
	st.shared.u32 	[%rd190], %r1288;
	add.s32 	%r1365, %r65, %r111;
	mul.wide.u32 	%rd191, %r1365, 4;
	add.s64 	%rd192, %rd26, %rd191;
	st.shared.u32 	[%rd192], %r1292;
	add.s32 	%r1366, %r66, %r111;
	mul.wide.s32 	%rd193, %r1366, 4;
	add.s64 	%rd194, %rd26, %rd193;
	st.shared.u32 	[%rd194], %r1296;
	add.s32 	%r1367, %r67, %r111;
	mul.wide.u32 	%rd195, %r1367, 4;
	add.s64 	%rd196, %rd26, %rd195;
	st.shared.u32 	[%rd196], %r1300;
	add.s32 	%r1368, %r1347, 3;
	shr.s32 	%r1369, %r1368, 31;
	shr.u32 	%r1370, %r1369, 30;
	add.s32 	%r1371, %r1368, %r1370;
	and.b32  	%r1372, %r1371, 67108860;
	sub.s32 	%r1373, %r1368, %r1372;
	shl.b32 	%r112, %r1373, 6;
	add.s32 	%r1374, %r64, %r112;
	mul.wide.s32 	%rd197, %r1374, 4;
	add.s64 	%rd198, %rd26, %rd197;
	st.shared.u32 	[%rd198], %r1304;
	add.s32 	%r1375, %r65, %r112;
	mul.wide.u32 	%rd199, %r1375, 4;
	add.s64 	%rd200, %rd26, %rd199;
	st.shared.u32 	[%rd200], %r1308;
	add.s32 	%r1376, %r66, %r112;
	mul.wide.s32 	%rd201, %r1376, 4;
	add.s64 	%rd202, %rd26, %rd201;
	st.shared.u32 	[%rd202], %r1312;
	add.s32 	%r1377, %r67, %r112;
	mul.wide.u32 	%rd203, %r1377, 4;
	add.s64 	%rd204, %rd26, %rd203;
	st.shared.u32 	[%rd204], %r1316;
	bar.sync 	0;
	mov.u32 	%r3376, %r3334;
	mov.u32 	%r3377, %r3334;
	mov.u32 	%r3378, %r3334;
	mov.u32 	%r3379, %r3334;
	@%p50 bra 	LBB0_42;
	bra.uni 	LBB0_19;
LBB0_42:                                // %oksrem7116
                                        //   in Loop: Header=BB0_18 Depth=2
	ld.shared.u32 	%r3376, [%rd8];
	ld.shared.u32 	%r3377, [%rd9+33024];
	ld.shared.u32 	%r3378, [%rd9+128];
	ld.shared.u32 	%r3379, [%rd9+33152];
LBB0_19:                                // %L17277
                                        //   in Loop: Header=BB0_18 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1410, %r1413}, {%r250, %r247}, {%r3376}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1419, %r1422}, {%r250, %r247}, {%r3377}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1428, %r1431}, {%r250, %r247}, {%r3378}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1437, %r1440}, {%r250, %r247}, {%r3379}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1406, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1408, %r1406, %r1410;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1411, %r285, %r1413, %r1408;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1415, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1417, %r1415, %r1419;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1420, %r285, %r1422, %r1417;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1424, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1426, %r1424, %r1428;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1429, %r285, %r1431, %r1426;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1433, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1435, %r1433, %r1437;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1438, %r285, %r1440, %r1435;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1442, %r288, %r1413;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1445, %r285, %r1410, %r1442;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1449, %r288, %r1422;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1452, %r285, %r1419, %r1449;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1456, %r288, %r1431;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1459, %r285, %r1428, %r1456;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1463, %r288, %r1440;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1466, %r285, %r1437, %r1463;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1515, %r1511}, {%r318, %r312, %r315, %r309}, {%r1445, %r1411}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1531, %r1527}, {%r318, %r312, %r315, %r309}, {%r1452, %r1420}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1523, %r1519}, {%r318, %r312, %r315, %r309}, {%r1459, %r1429}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1539, %r1535}, {%r318, %r312, %r315, %r309}, {%r1466, %r1438}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1510, %r1511, %r1511, %r3375;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1514, %r1515, %r1515, %r1510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1518, %r1519, %r1519, %r1514;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1522, %r1523, %r1523, %r1518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1526, %r1527, %r1527, %r3374;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1530, %r1531, %r1531, %r1526;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1534, %r1535, %r1535, %r1530;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1538, %r1539, %r1539, %r1534;
	// end inline asm
	mov.u32 	%r3380, %r3334;
	mov.u32 	%r3381, %r3334;
	mov.u32 	%r3382, %r3334;
	mov.u32 	%r3383, %r3334;
	@%p50 bra 	LBB0_43;
	bra.uni 	LBB0_20;
LBB0_43:                                // %oksrem7651
                                        //   in Loop: Header=BB0_18 Depth=2
	add.s32 	%r1543, %r68, %r110;
	mul.wide.s32 	%rd205, %r1543, 4;
	add.s64 	%rd207, %rd26, %rd205;
	ld.shared.u32 	%r3380, [%rd207];
	add.s32 	%r1544, %r69, %r110;
	mul.wide.u32 	%rd208, %r1544, 4;
	add.s64 	%rd209, %rd26, %rd208;
	ld.shared.u32 	%r3381, [%rd209];
	add.s32 	%r1545, %r70, %r110;
	mul.wide.s32 	%rd210, %r1545, 4;
	add.s64 	%rd211, %rd26, %rd210;
	ld.shared.u32 	%r3382, [%rd211];
	add.s32 	%r1546, %r71, %r110;
	mul.wide.u32 	%rd212, %r1546, 4;
	add.s64 	%rd213, %rd26, %rd212;
	ld.shared.u32 	%r3383, [%rd213];
LBB0_20:                                // %L18500
                                        //   in Loop: Header=BB0_18 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1579, %r1582}, {%r250, %r247}, {%r3380}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1588, %r1591}, {%r250, %r247}, {%r3381}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1597, %r1600}, {%r250, %r247}, {%r3382}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1606, %r1609}, {%r250, %r247}, {%r3383}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1575, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1577, %r1575, %r1579;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1580, %r285, %r1582, %r1577;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1584, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1586, %r1584, %r1588;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1589, %r285, %r1591, %r1586;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1593, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1595, %r1593, %r1597;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1598, %r285, %r1600, %r1595;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1602, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1604, %r1602, %r1606;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1607, %r285, %r1609, %r1604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1611, %r288, %r1582;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1614, %r285, %r1579, %r1611;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1618, %r288, %r1591;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1621, %r285, %r1588, %r1618;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1625, %r288, %r1600;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1628, %r285, %r1597, %r1625;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1632, %r288, %r1609;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1635, %r285, %r1606, %r1632;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1684, %r1680}, {%r318, %r312, %r315, %r309}, {%r1614, %r1580}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1700, %r1696}, {%r318, %r312, %r315, %r309}, {%r1621, %r1589}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1692, %r1688}, {%r318, %r312, %r315, %r309}, {%r1628, %r1598}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1708, %r1704}, {%r318, %r312, %r315, %r309}, {%r1635, %r1607}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1679, %r1680, %r1680, %r1522;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1683, %r1684, %r1684, %r1679;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1687, %r1688, %r1688, %r1683;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1691, %r1692, %r1692, %r1687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1695, %r1696, %r1696, %r1538;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1699, %r1700, %r1700, %r1695;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1703, %r1704, %r1704, %r1699;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1707, %r1708, %r1708, %r1703;
	// end inline asm
	mov.u32 	%r3384, %r3334;
	mov.u32 	%r3385, %r3334;
	mov.u32 	%r3386, %r3334;
	mov.u32 	%r3387, %r3334;
	@%p50 bra 	LBB0_44;
	bra.uni 	LBB0_21;
LBB0_44:                                // %oksrem8186
                                        //   in Loop: Header=BB0_18 Depth=2
	add.s32 	%r1712, %r68, %r111;
	mul.wide.s32 	%rd214, %r1712, 4;
	add.s64 	%rd216, %rd26, %rd214;
	ld.shared.u32 	%r3384, [%rd216];
	add.s32 	%r1713, %r69, %r111;
	mul.wide.u32 	%rd217, %r1713, 4;
	add.s64 	%rd218, %rd26, %rd217;
	ld.shared.u32 	%r3385, [%rd218];
	add.s32 	%r1714, %r70, %r111;
	mul.wide.s32 	%rd219, %r1714, 4;
	add.s64 	%rd220, %rd26, %rd219;
	ld.shared.u32 	%r3386, [%rd220];
	add.s32 	%r1715, %r71, %r111;
	mul.wide.u32 	%rd221, %r1715, 4;
	add.s64 	%rd222, %rd26, %rd221;
	ld.shared.u32 	%r3387, [%rd222];
LBB0_21:                                // %L19723
                                        //   in Loop: Header=BB0_18 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1748, %r1751}, {%r250, %r247}, {%r3384}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1757, %r1760}, {%r250, %r247}, {%r3385}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1766, %r1769}, {%r250, %r247}, {%r3386}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1775, %r1778}, {%r250, %r247}, {%r3387}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1744, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1746, %r1744, %r1748;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1749, %r285, %r1751, %r1746;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1753, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1755, %r1753, %r1757;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1758, %r285, %r1760, %r1755;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1762, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1764, %r1762, %r1766;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1767, %r285, %r1769, %r1764;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1771, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1773, %r1771, %r1775;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1776, %r285, %r1778, %r1773;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1780, %r288, %r1751;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1783, %r285, %r1748, %r1780;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1787, %r288, %r1760;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1790, %r285, %r1757, %r1787;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1794, %r288, %r1769;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1797, %r285, %r1766, %r1794;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1801, %r288, %r1778;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1804, %r285, %r1775, %r1801;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1853, %r1849}, {%r318, %r312, %r315, %r309}, {%r1783, %r1749}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1869, %r1865}, {%r318, %r312, %r315, %r309}, {%r1790, %r1758}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1861, %r1857}, {%r318, %r312, %r315, %r309}, {%r1797, %r1767}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1877, %r1873}, {%r318, %r312, %r315, %r309}, {%r1804, %r1776}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1848, %r1849, %r1849, %r1691;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1852, %r1853, %r1853, %r1848;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1856, %r1857, %r1857, %r1852;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1860, %r1861, %r1861, %r1856;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1864, %r1865, %r1865, %r1707;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1868, %r1869, %r1869, %r1864;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1872, %r1873, %r1873, %r1868;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1876, %r1877, %r1877, %r1872;
	// end inline asm
	mov.u32 	%r3388, %r3334;
	mov.u32 	%r3389, %r3334;
	mov.u32 	%r3390, %r3334;
	mov.u32 	%r3391, %r3334;
	@%p50 bra 	LBB0_45;
	bra.uni 	LBB0_22;
LBB0_45:                                // %oksrem8721
                                        //   in Loop: Header=BB0_18 Depth=2
	add.s32 	%r1881, %r68, %r112;
	mul.wide.s32 	%rd223, %r1881, 4;
	add.s64 	%rd225, %rd26, %rd223;
	ld.shared.u32 	%r3388, [%rd225];
	add.s32 	%r1882, %r69, %r112;
	mul.wide.u32 	%rd226, %r1882, 4;
	add.s64 	%rd227, %rd26, %rd226;
	ld.shared.u32 	%r3389, [%rd227];
	add.s32 	%r1883, %r70, %r112;
	mul.wide.s32 	%rd228, %r1883, 4;
	add.s64 	%rd229, %rd26, %rd228;
	ld.shared.u32 	%r3390, [%rd229];
	add.s32 	%r1884, %r71, %r112;
	mul.wide.u32 	%rd230, %r1884, 4;
	add.s64 	%rd231, %rd26, %rd230;
	ld.shared.u32 	%r3391, [%rd231];
LBB0_22:                                // %L20946
                                        //   in Loop: Header=BB0_18 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1917, %r1920}, {%r250, %r247}, {%r3388}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1926, %r1929}, {%r250, %r247}, {%r3389}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1935, %r1938}, {%r250, %r247}, {%r3390}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1944, %r1947}, {%r250, %r247}, {%r3391}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1913, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1915, %r1913, %r1917;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1918, %r285, %r1920, %r1915;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1922, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1924, %r1922, %r1926;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1927, %r285, %r1929, %r1924;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1931, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1933, %r1931, %r1935;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1936, %r285, %r1938, %r1933;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1940, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1942, %r1940, %r1944;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1945, %r285, %r1947, %r1942;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1949, %r288, %r1920;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1952, %r285, %r1917, %r1949;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1956, %r288, %r1929;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1959, %r285, %r1926, %r1956;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1963, %r288, %r1938;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1966, %r285, %r1935, %r1963;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1970, %r288, %r1947;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1973, %r285, %r1944, %r1970;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2022, %r2018}, {%r318, %r312, %r315, %r309}, {%r1952, %r1918}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2038, %r2034}, {%r318, %r312, %r315, %r309}, {%r1959, %r1927}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2030, %r2026}, {%r318, %r312, %r315, %r309}, {%r1966, %r1936}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2046, %r2042}, {%r318, %r312, %r315, %r309}, {%r1973, %r1945}, {%r3334, %r3334};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2017, %r2018, %r2018, %r1860;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2021, %r2022, %r2022, %r2017;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2025, %r2026, %r2026, %r2021;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3375, %r2030, %r2030, %r2025;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2033, %r2034, %r2034, %r1876;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2037, %r2038, %r2038, %r2033;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2041, %r2042, %r2042, %r2037;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3374, %r2046, %r2046, %r2041;
	// end inline asm
	add.s32 	%r3372, %r3372, 4;
	setp.ne.s32 	%p60, %r3372, 40;
	@%p60 bra 	LBB0_26;
// %bb.23:                              // %L21092
                                        //   in Loop: Header=BB0_18 Depth=2
	@%p26 bra 	LBB0_25;
// %bb.24:                              // %L21151
                                        //   in Loop: Header=BB0_18 Depth=2
	mul.lo.s32 	%r2049, %r3373, 96768;
	add.s32 	%r2050, %r72, %r2049;
	mul.wide.u32 	%rd232, %r2050, 4;
	add.s64 	%rd233, %rd4, %rd232;
	st.global.u32 	[%rd233], %r3375;
	add.s32 	%r2051, %r73, %r2049;
	mul.wide.u32 	%rd234, %r2051, 4;
	add.s64 	%rd235, %rd4, %rd234;
	st.global.u32 	[%rd235], %r3374;
	bra.uni 	LBB0_25;
LBB0_27:                                // %L21413.preheader
                                        //   in Loop: Header=BB0_16 Depth=1
	add.s32 	%r145, %r79, 25;
	add.s32 	%r146, %r79, 26;
	add.s32 	%r147, %r79, 27;
	mov.u32 	%r2054, 0;
	mov.u32 	%r3396, 12;
	mov.u32 	%r3397, %r2054;
	bra.uni 	LBB0_28;
LBB0_35:                                // %L31388
                                        //   in Loop: Header=BB0_28 Depth=2
	add.s32 	%r3373, %r3373, 1;
	mov.u32 	%r3374, 0;
	mov.u32 	%r3375, %r3374;
	mov.u32 	%r3372, %r3374;
LBB0_36:                                // %L31389
                                        //   in Loop: Header=BB0_28 Depth=2
	bar.sync 	0;
	add.s32 	%r3397, %r3397, 1;
	add.s32 	%r3396, %r3396, -4;
	setp.eq.s32 	%p75, %r3396, -12;
	@%p75 bra 	LBB0_37;
LBB0_28:                                // %L21413
                                        //   Parent Loop BB0_16 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p64, %r3396, 12;
	selp.b32 	%r2592, %r3346, 0, %p64;
	setp.eq.s32 	%p65, %r3396, 8;
	selp.b32 	%r2593, %r3350, %r2592, %p65;
	setp.eq.s32 	%p66, %r3396, 4;
	selp.b32 	%r2594, %r3354, %r2593, %p66;
	setp.eq.s32 	%p67, %r3396, 0;
	selp.b32 	%r2595, %r3358, %r2594, %p67;
	setp.eq.s32 	%p68, %r3396, -4;
	selp.b32 	%r2596, %r3362, %r2595, %p68;
	setp.eq.s32 	%p69, %r3396, -8;
	selp.b32 	%r2597, %r3366, %r2596, %p69;
	selp.b32 	%r2598, %r3347, 0, %p64;
	selp.b32 	%r2599, %r3351, %r2598, %p65;
	selp.b32 	%r2600, %r3355, %r2599, %p66;
	selp.b32 	%r2601, %r3359, %r2600, %p67;
	selp.b32 	%r2602, %r3363, %r2601, %p68;
	selp.b32 	%r2603, %r3367, %r2602, %p69;
	selp.b32 	%r2604, %r3348, 0, %p64;
	selp.b32 	%r2605, %r3352, %r2604, %p65;
	selp.b32 	%r2606, %r3356, %r2605, %p66;
	selp.b32 	%r2607, %r3360, %r2606, %p67;
	selp.b32 	%r2608, %r3364, %r2607, %p68;
	selp.b32 	%r2609, %r3368, %r2608, %p69;
	selp.b32 	%r2610, %r3349, 0, %p64;
	selp.b32 	%r2611, %r3353, %r2610, %p65;
	selp.b32 	%r2612, %r3357, %r2611, %p66;
	selp.b32 	%r2613, %r3361, %r2612, %p67;
	selp.b32 	%r2614, %r3365, %r2613, %p68;
	selp.b32 	%r2615, %r3369, %r2614, %p69;
	// begin inline asm
	mov.b32 %r2082, {%rs209, %rs209};
	// end inline asm
	// begin inline asm
	mov.b32 %r2093, {%rs211, %rs211};
	// end inline asm
	shr.u32 	%r2616, %r2597, 8;
	xor.b32  	%r2092, %r2616, 8947848;
	// begin inline asm
	lop3.b32 %r2079, %r925, %r2092, %r2082, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2083, {%rs215, %rs215};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2084, %r2082, %r2083;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2087, %r2079, %r2084;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2090, %r936, %r2092, %r2093, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2094, {%rs215, %rs215};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2095, %r2093, %r2094;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2098, %r2090, %r2095;
	// end inline asm
	// begin inline asm
	mov.b32 %r2128, {%rs209, %rs209};
	// end inline asm
	// begin inline asm
	mov.b32 %r2139, {%rs211, %rs211};
	// end inline asm
	shr.u32 	%r2617, %r2603, 8;
	xor.b32  	%r2138, %r2617, 8947848;
	// begin inline asm
	lop3.b32 %r2125, %r925, %r2138, %r2128, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2129, {%rs215, %rs215};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2130, %r2128, %r2129;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2133, %r2125, %r2130;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2136, %r936, %r2138, %r2139, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2140, {%rs215, %rs215};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2141, %r2139, %r2140;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2144, %r2136, %r2141;
	// end inline asm
	// begin inline asm
	mov.b32 %r2174, {%rs209, %rs209};
	// end inline asm
	// begin inline asm
	mov.b32 %r2185, {%rs211, %rs211};
	// end inline asm
	shr.u32 	%r2618, %r2609, 8;
	xor.b32  	%r2184, %r2618, 8947848;
	// begin inline asm
	lop3.b32 %r2171, %r925, %r2184, %r2174, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2175, {%rs215, %rs215};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2176, %r2174, %r2175;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2179, %r2171, %r2176;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2182, %r936, %r2184, %r2185, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2186, {%rs215, %rs215};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2187, %r2185, %r2186;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2190, %r2182, %r2187;
	// end inline asm
	// begin inline asm
	mov.b32 %r2220, {%rs209, %rs209};
	// end inline asm
	// begin inline asm
	mov.b32 %r2231, {%rs211, %rs211};
	// end inline asm
	shr.u32 	%r2619, %r2615, 8;
	xor.b32  	%r2230, %r2619, 8947848;
	// begin inline asm
	lop3.b32 %r2217, %r925, %r2230, %r2220, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2221, {%rs215, %rs215};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2222, %r2220, %r2221;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2225, %r2217, %r2222;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2228, %r936, %r2230, %r2231, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2232, {%rs215, %rs215};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2233, %r2231, %r2232;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2236, %r2228, %r2233;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3339;
    mov.b32 {%r2im, %r2re}, %r2087;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2239, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3340;
    mov.b32 {%r2im, %r2re}, %r2098;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2242, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3339;
    mov.b32 {%r2im, %r2re}, %r2133;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2245, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3340;
    mov.b32 {%r2im, %r2re}, %r2144;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2248, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3339;
    mov.b32 {%r2im, %r2re}, %r2179;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2251, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3340;
    mov.b32 {%r2im, %r2re}, %r2190;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2254, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3339;
    mov.b32 {%r2im, %r2re}, %r2225;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2257, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3340;
    mov.b32 {%r2im, %r2re}, %r2236;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2260, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2323, %r2326}, {%r250, %r247}, {%r2239}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2332, %r2335}, {%r250, %r247}, {%r2242}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2341, %r2344}, {%r250, %r247}, {%r2245}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2350, %r2353}, {%r250, %r247}, {%r2248}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2359, %r2362}, {%r250, %r247}, {%r2251}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2368, %r2371}, {%r250, %r247}, {%r2254}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2377, %r2380}, {%r250, %r247}, {%r2257}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2386, %r2389}, {%r250, %r247}, {%r2260}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2319, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2321, %r2319, %r2323;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2324, %r285, %r2326, %r2321;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2328, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2330, %r2328, %r2332;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2333, %r285, %r2335, %r2330;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2337, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2339, %r2337, %r2341;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2342, %r285, %r2344, %r2339;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2346, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2348, %r2346, %r2350;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2351, %r285, %r2353, %r2348;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2355, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2357, %r2355, %r2359;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2360, %r285, %r2362, %r2357;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2364, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2366, %r2364, %r2368;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2369, %r285, %r2371, %r2366;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2373, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2375, %r2373, %r2377;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2378, %r285, %r2380, %r2375;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2382, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2384, %r2382, %r2386;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2387, %r285, %r2389, %r2384;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2391, %r288, %r2326;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2394, %r285, %r2323, %r2391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2398, %r288, %r2335;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2401, %r285, %r2332, %r2398;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2405, %r288, %r2344;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2408, %r285, %r2341, %r2405;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2412, %r288, %r2353;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2415, %r285, %r2350, %r2412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2419, %r288, %r2362;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2422, %r285, %r2359, %r2419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2426, %r288, %r2371;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2429, %r285, %r2368, %r2426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2433, %r288, %r2380;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2436, %r285, %r2377, %r2433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2440, %r288, %r2389;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2443, %r285, %r2386, %r2440;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2528, %r2529}, {%r318, %r312, %r315, %r309}, {%r2394, %r2324}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2536, %r2537}, {%r318, %r312, %r315, %r309}, {%r2401, %r2333}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2544, %r2545}, {%r318, %r312, %r315, %r309}, {%r2408, %r2342}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2552, %r2553}, {%r318, %r312, %r315, %r309}, {%r2415, %r2351}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2560, %r2561}, {%r318, %r312, %r315, %r309}, {%r2422, %r2360}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2568, %r2569}, {%r318, %r312, %r315, %r309}, {%r2429, %r2369}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2576, %r2577}, {%r318, %r312, %r315, %r309}, {%r2436, %r2378}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2584, %r2585}, {%r318, %r312, %r315, %r309}, {%r2443, %r2387}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	prmt.b32 %r2527, %r2528, %r2529, %r625;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2531, %r2528, %r2529, %r629;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2535, %r2536, %r2537, %r625;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2539, %r2536, %r2537, %r629;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2543, %r2544, %r2545, %r625;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2547, %r2544, %r2545, %r629;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2551, %r2552, %r2553, %r625;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2555, %r2552, %r2553, %r629;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2559, %r2560, %r2561, %r625;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2563, %r2560, %r2561, %r629;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2567, %r2568, %r2569, %r625;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2571, %r2568, %r2569, %r629;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2575, %r2576, %r2577, %r625;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2579, %r2576, %r2577, %r629;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2583, %r2584, %r2585, %r625;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2587, %r2584, %r2585, %r629;
	// end inline asm
	st.shared.u32 	[%rd6], %r2527;
	st.shared.u32 	[%rd7+33024], %r2531;
	st.shared.u32 	[%rd7+128], %r2535;
	st.shared.u32 	[%rd7+33152], %r2539;
	cvt.u16.u32 	%rs275, %r3397;
	and.b16  	%rs276, %rs275, 255;
	mul.lo.s16 	%rs277, %rs276, 171;
	shr.u16 	%rs278, %rs277, 10;
	mul.lo.s16 	%rs279, %rs278, 6;
	sub.s16 	%rs280, %rs275, %rs279;
	shl.b16 	%rs281, %rs280, 2;
	cvt.u32.u16 	%r2620, %rs281;
	and.b32  	%r2621, %r2620, 252;
	add.s32 	%r2622, %r145, %r2621;
	shr.s32 	%r2623, %r2622, 31;
	shr.u32 	%r2624, %r2623, 30;
	add.s32 	%r2625, %r2622, %r2624;
	and.b32  	%r2626, %r2625, 67108860;
	sub.s32 	%r2627, %r2622, %r2626;
	shl.b32 	%r154, %r2627, 6;
	add.s32 	%r2628, %r64, %r154;
	mul.wide.s32 	%rd236, %r2628, 4;
	add.s64 	%rd238, %rd26, %rd236;
	st.shared.u32 	[%rd238], %r2543;
	add.s32 	%r2629, %r65, %r154;
	mul.wide.u32 	%rd239, %r2629, 4;
	add.s64 	%rd240, %rd26, %rd239;
	st.shared.u32 	[%rd240], %r2547;
	add.s32 	%r2630, %r66, %r154;
	mul.wide.s32 	%rd241, %r2630, 4;
	add.s64 	%rd242, %rd26, %rd241;
	st.shared.u32 	[%rd242], %r2551;
	add.s32 	%r2631, %r67, %r154;
	mul.wide.u32 	%rd243, %r2631, 4;
	add.s64 	%rd244, %rd26, %rd243;
	st.shared.u32 	[%rd244], %r2555;
	add.s32 	%r2632, %r146, %r2621;
	shr.s32 	%r2633, %r2632, 31;
	shr.u32 	%r2634, %r2633, 30;
	add.s32 	%r2635, %r2632, %r2634;
	and.b32  	%r2636, %r2635, 67108860;
	sub.s32 	%r2637, %r2632, %r2636;
	shl.b32 	%r155, %r2637, 6;
	add.s32 	%r2638, %r64, %r155;
	mul.wide.s32 	%rd245, %r2638, 4;
	add.s64 	%rd246, %rd26, %rd245;
	st.shared.u32 	[%rd246], %r2559;
	add.s32 	%r2639, %r65, %r155;
	mul.wide.u32 	%rd247, %r2639, 4;
	add.s64 	%rd248, %rd26, %rd247;
	st.shared.u32 	[%rd248], %r2563;
	add.s32 	%r2640, %r66, %r155;
	mul.wide.s32 	%rd249, %r2640, 4;
	add.s64 	%rd250, %rd26, %rd249;
	st.shared.u32 	[%rd250], %r2567;
	add.s32 	%r2641, %r67, %r155;
	mul.wide.u32 	%rd251, %r2641, 4;
	add.s64 	%rd252, %rd26, %rd251;
	st.shared.u32 	[%rd252], %r2571;
	add.s32 	%r2642, %r147, %r2621;
	shr.s32 	%r2643, %r2642, 31;
	shr.u32 	%r2644, %r2643, 30;
	add.s32 	%r2645, %r2642, %r2644;
	and.b32  	%r2646, %r2645, 67108860;
	sub.s32 	%r2647, %r2642, %r2646;
	shl.b32 	%r156, %r2647, 6;
	add.s32 	%r2648, %r64, %r156;
	mul.wide.s32 	%rd253, %r2648, 4;
	add.s64 	%rd254, %rd26, %rd253;
	st.shared.u32 	[%rd254], %r2575;
	add.s32 	%r2649, %r65, %r156;
	mul.wide.u32 	%rd255, %r2649, 4;
	add.s64 	%rd256, %rd26, %rd255;
	st.shared.u32 	[%rd256], %r2579;
	add.s32 	%r2650, %r66, %r156;
	mul.wide.s32 	%rd257, %r2650, 4;
	add.s64 	%rd258, %rd26, %rd257;
	st.shared.u32 	[%rd258], %r2583;
	add.s32 	%r2651, %r67, %r156;
	mul.wide.u32 	%rd259, %r2651, 4;
	add.s64 	%rd260, %rd26, %rd259;
	st.shared.u32 	[%rd260], %r2587;
	bar.sync 	0;
	mov.u32 	%r3402, %r2054;
	mov.u32 	%r3403, %r2054;
	mov.u32 	%r3404, %r2054;
	mov.u32 	%r3405, %r2054;
	@%p50 bra 	LBB0_46;
	bra.uni 	LBB0_29;
LBB0_46:                                // %oksrem11514
                                        //   in Loop: Header=BB0_28 Depth=2
	ld.shared.u32 	%r3405, [%rd8];
	ld.shared.u32 	%r3404, [%rd9+33024];
	ld.shared.u32 	%r3403, [%rd9+128];
	ld.shared.u32 	%r3402, [%rd9+33152];
LBB0_29:                                // %L27282
                                        //   in Loop: Header=BB0_28 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2684, %r2687}, {%r250, %r247}, {%r3405}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2693, %r2696}, {%r250, %r247}, {%r3404}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2702, %r2705}, {%r250, %r247}, {%r3403}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2711, %r2714}, {%r250, %r247}, {%r3402}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2680, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2682, %r2680, %r2684;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2685, %r285, %r2687, %r2682;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2689, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2691, %r2689, %r2693;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2694, %r285, %r2696, %r2691;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2698, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2700, %r2698, %r2702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2703, %r285, %r2705, %r2700;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2707, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2709, %r2707, %r2711;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2712, %r285, %r2714, %r2709;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2716, %r288, %r2687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2719, %r285, %r2684, %r2716;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2723, %r288, %r2696;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2726, %r285, %r2693, %r2723;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2730, %r288, %r2705;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2733, %r285, %r2702, %r2730;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2737, %r288, %r2714;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2740, %r285, %r2711, %r2737;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2789, %r2785}, {%r318, %r312, %r315, %r309}, {%r2719, %r2685}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2805, %r2801}, {%r318, %r312, %r315, %r309}, {%r2726, %r2694}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2797, %r2793}, {%r318, %r312, %r315, %r309}, {%r2733, %r2703}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2813, %r2809}, {%r318, %r312, %r315, %r309}, {%r2740, %r2712}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2784, %r2785, %r2785, %r3375;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2788, %r2789, %r2789, %r2784;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2792, %r2793, %r2793, %r2788;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2796, %r2797, %r2797, %r2792;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2800, %r2801, %r2801, %r3374;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2804, %r2805, %r2805, %r2800;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2808, %r2809, %r2809, %r2804;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2812, %r2813, %r2813, %r2808;
	// end inline asm
	mov.u32 	%r3406, %r2054;
	mov.u32 	%r3407, %r2054;
	mov.u32 	%r3408, %r2054;
	mov.u32 	%r3409, %r2054;
	@%p50 bra 	LBB0_47;
	bra.uni 	LBB0_30;
LBB0_47:                                // %oksrem12049
                                        //   in Loop: Header=BB0_28 Depth=2
	add.s32 	%r2817, %r68, %r154;
	mul.wide.s32 	%rd261, %r2817, 4;
	add.s64 	%rd263, %rd26, %rd261;
	ld.shared.u32 	%r3409, [%rd263];
	add.s32 	%r2818, %r69, %r154;
	mul.wide.u32 	%rd264, %r2818, 4;
	add.s64 	%rd265, %rd26, %rd264;
	ld.shared.u32 	%r3408, [%rd265];
	add.s32 	%r2819, %r70, %r154;
	mul.wide.s32 	%rd266, %r2819, 4;
	add.s64 	%rd267, %rd26, %rd266;
	ld.shared.u32 	%r3407, [%rd267];
	add.s32 	%r2820, %r71, %r154;
	mul.wide.u32 	%rd268, %r2820, 4;
	add.s64 	%rd269, %rd26, %rd268;
	ld.shared.u32 	%r3406, [%rd269];
LBB0_30:                                // %L28505
                                        //   in Loop: Header=BB0_28 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2853, %r2856}, {%r250, %r247}, {%r3409}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2862, %r2865}, {%r250, %r247}, {%r3408}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2871, %r2874}, {%r250, %r247}, {%r3407}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2880, %r2883}, {%r250, %r247}, {%r3406}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2849, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2851, %r2849, %r2853;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2854, %r285, %r2856, %r2851;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2858, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2860, %r2858, %r2862;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2863, %r285, %r2865, %r2860;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2867, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2869, %r2867, %r2871;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2872, %r285, %r2874, %r2869;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2876, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2878, %r2876, %r2880;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2881, %r285, %r2883, %r2878;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2885, %r288, %r2856;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2888, %r285, %r2853, %r2885;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2892, %r288, %r2865;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2895, %r285, %r2862, %r2892;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2899, %r288, %r2874;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2902, %r285, %r2871, %r2899;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2906, %r288, %r2883;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2909, %r285, %r2880, %r2906;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2958, %r2954}, {%r318, %r312, %r315, %r309}, {%r2888, %r2854}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2974, %r2970}, {%r318, %r312, %r315, %r309}, {%r2895, %r2863}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2966, %r2962}, {%r318, %r312, %r315, %r309}, {%r2902, %r2872}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2982, %r2978}, {%r318, %r312, %r315, %r309}, {%r2909, %r2881}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2953, %r2954, %r2954, %r2796;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2957, %r2958, %r2958, %r2953;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2961, %r2962, %r2962, %r2957;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2965, %r2966, %r2966, %r2961;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2969, %r2970, %r2970, %r2812;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2973, %r2974, %r2974, %r2969;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2977, %r2978, %r2978, %r2973;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2981, %r2982, %r2982, %r2977;
	// end inline asm
	mov.u32 	%r3410, %r2054;
	mov.u32 	%r3411, %r2054;
	mov.u32 	%r3412, %r2054;
	mov.u32 	%r3413, %r2054;
	@%p50 bra 	LBB0_48;
	bra.uni 	LBB0_31;
LBB0_48:                                // %oksrem12584
                                        //   in Loop: Header=BB0_28 Depth=2
	add.s32 	%r2986, %r68, %r155;
	mul.wide.s32 	%rd270, %r2986, 4;
	add.s64 	%rd272, %rd26, %rd270;
	ld.shared.u32 	%r3413, [%rd272];
	add.s32 	%r2987, %r69, %r155;
	mul.wide.u32 	%rd273, %r2987, 4;
	add.s64 	%rd274, %rd26, %rd273;
	ld.shared.u32 	%r3412, [%rd274];
	add.s32 	%r2988, %r70, %r155;
	mul.wide.s32 	%rd275, %r2988, 4;
	add.s64 	%rd276, %rd26, %rd275;
	ld.shared.u32 	%r3411, [%rd276];
	add.s32 	%r2989, %r71, %r155;
	mul.wide.u32 	%rd277, %r2989, 4;
	add.s64 	%rd278, %rd26, %rd277;
	ld.shared.u32 	%r3410, [%rd278];
LBB0_31:                                // %L29728
                                        //   in Loop: Header=BB0_28 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3022, %r3025}, {%r250, %r247}, {%r3413}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3031, %r3034}, {%r250, %r247}, {%r3412}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3040, %r3043}, {%r250, %r247}, {%r3411}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3049, %r3052}, {%r250, %r247}, {%r3410}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3018, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3020, %r3018, %r3022;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3023, %r285, %r3025, %r3020;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3027, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3029, %r3027, %r3031;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3032, %r285, %r3034, %r3029;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3036, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3038, %r3036, %r3040;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3041, %r285, %r3043, %r3038;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3045, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3047, %r3045, %r3049;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3050, %r285, %r3052, %r3047;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3054, %r288, %r3025;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3057, %r285, %r3022, %r3054;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3061, %r288, %r3034;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3064, %r285, %r3031, %r3061;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3068, %r288, %r3043;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3071, %r285, %r3040, %r3068;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3075, %r288, %r3052;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3078, %r285, %r3049, %r3075;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3127, %r3123}, {%r318, %r312, %r315, %r309}, {%r3057, %r3023}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3143, %r3139}, {%r318, %r312, %r315, %r309}, {%r3064, %r3032}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3135, %r3131}, {%r318, %r312, %r315, %r309}, {%r3071, %r3041}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3151, %r3147}, {%r318, %r312, %r315, %r309}, {%r3078, %r3050}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3122, %r3123, %r3123, %r2965;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3126, %r3127, %r3127, %r3122;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3130, %r3131, %r3131, %r3126;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3134, %r3135, %r3135, %r3130;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3138, %r3139, %r3139, %r2981;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3142, %r3143, %r3143, %r3138;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3146, %r3147, %r3147, %r3142;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3150, %r3151, %r3151, %r3146;
	// end inline asm
	mov.u32 	%r3414, %r2054;
	mov.u32 	%r3415, %r2054;
	mov.u32 	%r3416, %r2054;
	mov.u32 	%r3417, %r2054;
	@%p50 bra 	LBB0_49;
	bra.uni 	LBB0_32;
LBB0_49:                                // %oksrem13119
                                        //   in Loop: Header=BB0_28 Depth=2
	add.s32 	%r3155, %r68, %r156;
	mul.wide.s32 	%rd279, %r3155, 4;
	add.s64 	%rd281, %rd26, %rd279;
	ld.shared.u32 	%r3417, [%rd281];
	add.s32 	%r3156, %r69, %r156;
	mul.wide.u32 	%rd282, %r3156, 4;
	add.s64 	%rd283, %rd26, %rd282;
	ld.shared.u32 	%r3416, [%rd283];
	add.s32 	%r3157, %r70, %r156;
	mul.wide.s32 	%rd284, %r3157, 4;
	add.s64 	%rd285, %rd26, %rd284;
	ld.shared.u32 	%r3415, [%rd285];
	add.s32 	%r3158, %r71, %r156;
	mul.wide.u32 	%rd286, %r3158, 4;
	add.s64 	%rd287, %rd26, %rd286;
	ld.shared.u32 	%r3414, [%rd287];
LBB0_32:                                // %L30951
                                        //   in Loop: Header=BB0_28 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3191, %r3194}, {%r250, %r247}, {%r3417}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3200, %r3203}, {%r250, %r247}, {%r3416}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3209, %r3212}, {%r250, %r247}, {%r3415}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3218, %r3221}, {%r250, %r247}, {%r3414}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3187, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3189, %r3187, %r3191;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3192, %r285, %r3194, %r3189;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3196, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3198, %r3196, %r3200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3201, %r285, %r3203, %r3198;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3205, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3207, %r3205, %r3209;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3210, %r285, %r3212, %r3207;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3214, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3216, %r3214, %r3218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3219, %r285, %r3221, %r3216;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3223, %r288, %r3194;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3226, %r285, %r3191, %r3223;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3230, %r288, %r3203;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3233, %r285, %r3200, %r3230;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3237, %r288, %r3212;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3240, %r285, %r3209, %r3237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3244, %r288, %r3221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3247, %r285, %r3218, %r3244;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3296, %r3292}, {%r318, %r312, %r315, %r309}, {%r3226, %r3192}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3312, %r3308}, {%r318, %r312, %r315, %r309}, {%r3233, %r3201}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3304, %r3300}, {%r318, %r312, %r315, %r309}, {%r3240, %r3210}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3320, %r3316}, {%r318, %r312, %r315, %r309}, {%r3247, %r3219}, {%r2054, %r2054};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3291, %r3292, %r3292, %r3134;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3295, %r3296, %r3296, %r3291;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3299, %r3300, %r3300, %r3295;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3375, %r3304, %r3304, %r3299;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3307, %r3308, %r3308, %r3150;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3311, %r3312, %r3312, %r3307;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3315, %r3316, %r3316, %r3311;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3374, %r3320, %r3320, %r3315;
	// end inline asm
	add.s32 	%r3372, %r3372, 4;
	setp.ne.s32 	%p73, %r3372, 40;
	@%p73 bra 	LBB0_36;
// %bb.33:                              // %L31097
                                        //   in Loop: Header=BB0_28 Depth=2
	@%p26 bra 	LBB0_35;
// %bb.34:                              // %L31156
                                        //   in Loop: Header=BB0_28 Depth=2
	mul.lo.s32 	%r3323, %r3373, 96768;
	add.s32 	%r3324, %r72, %r3323;
	mul.wide.u32 	%rd288, %r3324, 4;
	add.s64 	%rd289, %rd4, %rd288;
	st.global.u32 	[%rd289], %r3375;
	add.s32 	%r3325, %r73, %r3323;
	mul.wide.u32 	%rd290, %r3325, 4;
	add.s64 	%rd291, %rd4, %rd290;
	st.global.u32 	[%rd291], %r3374;
	bra.uni 	LBB0_35;
LBB0_38:                                // %guard_pass14638
	@%p26 bra 	LBB0_40;
// %bb.39:                              // %L31490
	mul.lo.s32 	%r3327, %r3373, 96768;
	add.s32 	%r3328, %r72, %r3327;
	mul.wide.u32 	%rd292, %r3328, 4;
	add.s64 	%rd293, %rd4, %rd292;
	st.global.u32 	[%rd293], %r3375;
	add.s32 	%r3329, %r73, %r3327;
	mul.wide.u32 	%rd294, %r3329, 4;
	add.s64 	%rd295, %rd4, %rd294;
	st.global.u32 	[%rd295], %r3374;
LBB0_40:                                // %L31722
	mov.u32 	%r3330, 0;
	st.global.u32 	[%rd5], %r3330;
	ret;
LBB0_1:                                 // %L8
	ld.param.u64 	%rd11, [_Z15julia_frb_1038613CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0];
	mov.u64 	%rd16, exception1;
	cvta.global.u64 	%rd17, %rd16;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd17;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd11;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
