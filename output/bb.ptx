// PTX CompilerJob of kernel #bb(CuDeviceVector{Int8x4, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Int32, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1, always_inline=false

//
// Generated by LLVM NVPTX Back-End
//

.version 7.1
.target sm_86
.address_size 64

	// .globl	_Z13julia_bb_492213CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE // -- Begin function _Z13julia_bb_492213CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[8]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception866[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1872[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z13julia_bb_492213CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.visible .entry _Z13julia_bb_492213CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE(
	.param .align 8 .b8 _Z13julia_bb_492213CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0[8],
	.param .align 8 .b8 _Z13julia_bb_492213CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z13julia_bb_492213CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z13julia_bb_492213CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z13julia_bb_492213CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z13julia_bb_492213CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<16>;
	.reg .b16 	%rs<19>;
	.reg .b32 	%r<1370>;
	.reg .b64 	%rd<92>;

// %bb.0:                               // %conversion
	ld.param.u64 	%rd15, [_Z13julia_bb_492213CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r83, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r83, 16511;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L11
	// begin inline asm
	mov.u32 %r84, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r84, 67711;
	@%p2 bra 	LBB0_4;
	bra.uni 	LBB0_3;
LBB0_4:                                 // %L30
	ld.param.u64 	%rd3, [_Z13julia_bb_492213CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3];
	ld.param.u64 	%rd5, [_Z13julia_bb_492213CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	or.b32  	%r85, %r3, %r1;
	mov.u32 	%r4, %ctaid.x;
	mad.lo.s32 	%r86, %r4, 768, %r85;
	mul.wide.u32 	%rd20, %r86, 4;
	add.s64 	%rd6, %rd5, %rd20;
	mov.u32 	%r87, 1;
	st.global.u32 	[%rd6], %r87;
	shr.u32 	%r5, %r1, 3;
	shl.b32 	%r88, %r2, 2;
	or.b32  	%r89, %r88, %r5;
	mul.hi.u32 	%r90, %r89, -1431655765;
	shr.u32 	%r91, %r90, 6;
	mul.lo.s32 	%r92, %r91, 96;
	sub.s32 	%r6, %r89, %r92;
	and.b32  	%r7, %r4, 1;
	mad.lo.s32 	%r93, %r7, 96, %r6;
	shr.u32 	%r8, %r4, 1;
	mad.lo.s32 	%r94, %r8, 192, %r93;
	mul.wide.u32 	%rd21, %r94, 4;
	add.s64 	%rd22, %rd3, %rd21;
	ld.global.u32 	%r9, [%rd22];
	add.s32 	%r10, %r9, -4;
	setp.lt.u32 	%p3, %r10, 31;
	@%p3 bra 	LBB0_6;
	bra.uni 	LBB0_5;
LBB0_6:                                 // %L387
	ld.param.u64 	%rd1, [_Z13julia_bb_492213CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1];
	ld.param.u64 	%rd2, [_Z13julia_bb_492213CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2];
	ld.param.u64 	%rd4, [_Z13julia_bb_492213CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4];
	add.s32 	%r353, %r9, -3;
	shr.u32 	%r354, %r2, 2;
	cvt.u16.u32 	%rs1, %r354;
	mul.lo.s16 	%rs2, %rs1, 171;
	shr.u16 	%rs3, %rs2, 10;
	mul.lo.s16 	%rs4, %rs3, 6;
	sub.s16 	%rs5, %rs1, %rs4;
	shl.b16 	%rs6, %rs5, 4;
	cvt.u32.u16 	%r355, %rs6;
	and.b32  	%r356, %r355, 240;
	shr.u32 	%r11, %r1, 2;
	and.b32  	%r357, %r11, 6;
	or.b32  	%r358, %r357, %r356;
	cvt.u16.u32 	%rs7, %r358;
	mul.lo.s16 	%rs8, %rs7, 171;
	shr.u16 	%rs9, %rs8, 14;
	mul.lo.s16 	%rs10, %rs9, 96;
	sub.s16 	%rs11, %rs7, %rs10;
	and.b16  	%rs12, %rs11, 246;
	mul.wide.u16 	%r359, %rs12, 256;
	shl.b32 	%r360, %r2, 6;
	shl.b32 	%r361, %r1, 1;
	or.b32  	%r362, %r361, %r360;
	and.b32  	%r363, %r362, 204;
	shl.b32 	%r364, %r1, 4;
	and.b32  	%r12, %r364, 16;
	or.b32  	%r365, %r363, %r12;
	or.b32  	%r366, %r365, %r359;
	mul.lo.s32 	%r367, %r7, 24576;
	add.s32 	%r368, %r366, %r367;
	mul.lo.s32 	%r369, %r8, 49152;
	add.s32 	%r370, %r368, %r369;
	shl.b32 	%r371, %r370, 2;
	cvt.u64.u32 	%rd25, %r371;
	add.s64 	%rd26, %rd25, %rd1;
	ld.global.v4.u32 	{%r97, %r98, %r113, %r114}, [%rd26];
	or.b16  	%rs13, %rs7, 8;
	mul.lo.s16 	%rs14, %rs13, 171;
	shr.u16 	%rs15, %rs14, 14;
	mul.lo.s16 	%rs16, %rs15, 96;
	sub.s16 	%rs17, %rs13, %rs16;
	and.b16  	%rs18, %rs17, 254;
	mul.wide.u16 	%r372, %rs18, 256;
	or.b32  	%r373, %r365, %r372;
	add.s32 	%r374, %r373, %r367;
	add.s32 	%r375, %r374, %r369;
	shl.b32 	%r376, %r375, 2;
	cvt.u64.u32 	%rd27, %r376;
	add.s64 	%rd28, %rd27, %rd1;
	ld.global.v4.u32 	{%r105, %r106, %r121, %r122}, [%rd28];
	or.b32  	%r377, %r359, %r363;
	or.b32  	%r378, %r377, %r12;
	add.s32 	%r379, %r367, %r378;
	add.s32 	%r380, %r379, %r369;
	shl.b32 	%r381, %r380, 2;
	or.b32  	%r382, %r381, 128;
	cvt.u64.u32 	%rd29, %r382;
	add.s64 	%rd30, %rd1, %rd29;
	ld.global.v4.u32 	{%r129, %r130, %r145, %r146}, [%rd30];
	or.b32  	%r383, %r372, %r363;
	or.b32  	%r384, %r383, %r12;
	add.s32 	%r385, %r367, %r384;
	add.s32 	%r386, %r385, %r369;
	shl.b32 	%r387, %r386, 2;
	or.b32  	%r388, %r387, 128;
	cvt.u64.u32 	%rd31, %r388;
	add.s64 	%rd32, %rd1, %rd31;
	ld.global.v4.u32 	{%r137, %r138, %r153, %r154}, [%rd32];
	or.b32  	%r389, %r11, %r356;
	or.b32  	%r390, %r389, 1;
	mul.hi.u32 	%r391, %r390, -1431655765;
	shr.u32 	%r392, %r391, 6;
	mul.lo.s32 	%r393, %r392, 96;
	sub.s32 	%r394, %r390, %r393;
	shl.b32 	%r395, %r394, 8;
	or.b32  	%r396, %r365, %r395;
	add.s32 	%r397, %r396, %r367;
	add.s32 	%r398, %r397, %r369;
	shl.b32 	%r399, %r398, 2;
	cvt.u64.u32 	%rd33, %r399;
	add.s64 	%rd34, %rd33, %rd1;
	ld.global.v4.u32 	{%r161, %r162, %r177, %r178}, [%rd34];
	or.b32  	%r400, %r389, 9;
	mul.hi.u32 	%r401, %r400, -1431655765;
	shr.u32 	%r402, %r401, 6;
	mul.lo.s32 	%r403, %r402, 96;
	sub.s32 	%r404, %r400, %r403;
	shl.b32 	%r405, %r404, 8;
	or.b32  	%r406, %r365, %r405;
	add.s32 	%r407, %r406, %r367;
	add.s32 	%r408, %r407, %r369;
	shl.b32 	%r409, %r408, 2;
	cvt.u64.u32 	%rd35, %r409;
	add.s64 	%rd36, %rd35, %rd1;
	ld.global.v4.u32 	{%r169, %r170, %r185, %r186}, [%rd36];
	or.b32  	%r410, %r395, %r363;
	or.b32  	%r411, %r410, %r12;
	add.s32 	%r412, %r367, %r411;
	add.s32 	%r413, %r412, %r369;
	shl.b32 	%r414, %r413, 2;
	or.b32  	%r415, %r414, 128;
	cvt.u64.u32 	%rd37, %r415;
	add.s64 	%rd38, %rd1, %rd37;
	ld.global.v4.u32 	{%r193, %r194, %r209, %r210}, [%rd38];
	or.b32  	%r416, %r405, %r363;
	or.b32  	%r417, %r416, %r12;
	add.s32 	%r418, %r367, %r417;
	add.s32 	%r419, %r418, %r369;
	shl.b32 	%r420, %r419, 2;
	or.b32  	%r421, %r420, 128;
	cvt.u64.u32 	%rd39, %r421;
	add.s64 	%rd40, %rd1, %rd39;
	ld.global.v4.u32 	{%r201, %r202, %r217, %r218}, [%rd40];
	mov.u32 	%r99, 21520;
	// begin inline asm
	prmt.b32 %r225, %r97, %r98, %r99;
	// end inline asm
	mov.u32 	%r103, 30258;
	// begin inline asm
	prmt.b32 %r226, %r97, %r98, %r103;
	// end inline asm
	// begin inline asm
	prmt.b32 %r233, %r105, %r106, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r234, %r105, %r106, %r103;
	// end inline asm
	// begin inline asm
	prmt.b32 %r241, %r113, %r114, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r242, %r113, %r114, %r103;
	// end inline asm
	// begin inline asm
	prmt.b32 %r249, %r121, %r122, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r250, %r121, %r122, %r103;
	// end inline asm
	// begin inline asm
	prmt.b32 %r257, %r129, %r130, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r258, %r129, %r130, %r103;
	// end inline asm
	// begin inline asm
	prmt.b32 %r265, %r137, %r138, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r266, %r137, %r138, %r103;
	// end inline asm
	// begin inline asm
	prmt.b32 %r273, %r145, %r146, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r274, %r145, %r146, %r103;
	// end inline asm
	// begin inline asm
	prmt.b32 %r281, %r153, %r154, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r282, %r153, %r154, %r103;
	// end inline asm
	// begin inline asm
	prmt.b32 %r289, %r161, %r162, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r290, %r161, %r162, %r103;
	// end inline asm
	// begin inline asm
	prmt.b32 %r297, %r169, %r170, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r298, %r169, %r170, %r103;
	// end inline asm
	// begin inline asm
	prmt.b32 %r305, %r177, %r178, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r306, %r177, %r178, %r103;
	// end inline asm
	// begin inline asm
	prmt.b32 %r313, %r185, %r186, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r314, %r185, %r186, %r103;
	// end inline asm
	// begin inline asm
	prmt.b32 %r321, %r193, %r194, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r322, %r193, %r194, %r103;
	// end inline asm
	// begin inline asm
	prmt.b32 %r329, %r201, %r202, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r330, %r201, %r202, %r103;
	// end inline asm
	// begin inline asm
	prmt.b32 %r337, %r209, %r210, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r338, %r209, %r210, %r103;
	// end inline asm
	// begin inline asm
	prmt.b32 %r345, %r217, %r218, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r346, %r217, %r218, %r103;
	// end inline asm
	mov.u32 	%r227, 25152;
	// begin inline asm
	prmt.b32 %r224, %r225, %r226, %r227;
	// end inline asm
	mov.u32 	%r231, 29521;
	// begin inline asm
	prmt.b32 %r228, %r225, %r226, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r232, %r233, %r234, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r236, %r233, %r234, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r240, %r241, %r242, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r244, %r241, %r242, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r248, %r249, %r250, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r252, %r249, %r250, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r256, %r257, %r258, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r260, %r257, %r258, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r264, %r265, %r266, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r268, %r265, %r266, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r272, %r273, %r274, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r276, %r273, %r274, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r280, %r281, %r282, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r284, %r281, %r282, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r288, %r289, %r290, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r292, %r289, %r290, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r296, %r297, %r298, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r300, %r297, %r298, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r304, %r305, %r306, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r308, %r305, %r306, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r312, %r313, %r314, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r316, %r313, %r314, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r320, %r321, %r322, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r324, %r321, %r322, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r328, %r329, %r330, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r332, %r329, %r330, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r336, %r337, %r338, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r340, %r337, %r338, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r344, %r345, %r346, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r348, %r345, %r346, %r231;
	// end inline asm
	and.b32  	%r13, %r1, 2;
	setp.eq.s32 	%p4, %r13, 0;
	selp.b32 	%r422, %r256, %r224, %p4;
	shfl.sync.bfly.b32	%r423, %r422, 2, 31, -1;
	selp.b32 	%r424, %r224, %r423, %p4;
	selp.b32 	%r425, %r423, %r256, %p4;
	selp.b32 	%r426, %r264, %r232, %p4;
	shfl.sync.bfly.b32	%r427, %r426, 2, 31, -1;
	selp.b32 	%r428, %r232, %r427, %p4;
	selp.b32 	%r429, %r427, %r264, %p4;
	selp.b32 	%r430, %r260, %r228, %p4;
	shfl.sync.bfly.b32	%r431, %r430, 2, 31, -1;
	selp.b32 	%r432, %r228, %r431, %p4;
	selp.b32 	%r433, %r431, %r260, %p4;
	selp.b32 	%r434, %r268, %r236, %p4;
	shfl.sync.bfly.b32	%r435, %r434, 2, 31, -1;
	selp.b32 	%r436, %r236, %r435, %p4;
	selp.b32 	%r437, %r435, %r268, %p4;
	selp.b32 	%r438, %r272, %r240, %p4;
	shfl.sync.bfly.b32	%r439, %r438, 2, 31, -1;
	selp.b32 	%r440, %r240, %r439, %p4;
	selp.b32 	%r441, %r439, %r272, %p4;
	selp.b32 	%r442, %r280, %r248, %p4;
	shfl.sync.bfly.b32	%r443, %r442, 2, 31, -1;
	selp.b32 	%r444, %r248, %r443, %p4;
	selp.b32 	%r445, %r443, %r280, %p4;
	selp.b32 	%r446, %r276, %r244, %p4;
	shfl.sync.bfly.b32	%r447, %r446, 2, 31, -1;
	selp.b32 	%r448, %r244, %r447, %p4;
	selp.b32 	%r449, %r447, %r276, %p4;
	selp.b32 	%r450, %r284, %r252, %p4;
	shfl.sync.bfly.b32	%r451, %r450, 2, 31, -1;
	selp.b32 	%r452, %r252, %r451, %p4;
	selp.b32 	%r453, %r451, %r284, %p4;
	selp.b32 	%r454, %r320, %r288, %p4;
	shfl.sync.bfly.b32	%r455, %r454, 2, 31, -1;
	selp.b32 	%r456, %r288, %r455, %p4;
	selp.b32 	%r457, %r455, %r320, %p4;
	selp.b32 	%r458, %r328, %r296, %p4;
	shfl.sync.bfly.b32	%r459, %r458, 2, 31, -1;
	selp.b32 	%r460, %r296, %r459, %p4;
	selp.b32 	%r461, %r459, %r328, %p4;
	selp.b32 	%r462, %r324, %r292, %p4;
	shfl.sync.bfly.b32	%r463, %r462, 2, 31, -1;
	selp.b32 	%r464, %r292, %r463, %p4;
	selp.b32 	%r465, %r463, %r324, %p4;
	selp.b32 	%r466, %r332, %r300, %p4;
	shfl.sync.bfly.b32	%r467, %r466, 2, 31, -1;
	selp.b32 	%r468, %r300, %r467, %p4;
	selp.b32 	%r469, %r467, %r332, %p4;
	selp.b32 	%r470, %r336, %r304, %p4;
	shfl.sync.bfly.b32	%r471, %r470, 2, 31, -1;
	selp.b32 	%r472, %r304, %r471, %p4;
	selp.b32 	%r473, %r471, %r336, %p4;
	selp.b32 	%r474, %r344, %r312, %p4;
	shfl.sync.bfly.b32	%r475, %r474, 2, 31, -1;
	selp.b32 	%r476, %r312, %r475, %p4;
	selp.b32 	%r477, %r475, %r344, %p4;
	selp.b32 	%r478, %r340, %r308, %p4;
	shfl.sync.bfly.b32	%r479, %r478, 2, 31, -1;
	selp.b32 	%r480, %r308, %r479, %p4;
	selp.b32 	%r481, %r479, %r340, %p4;
	selp.b32 	%r482, %r348, %r316, %p4;
	shfl.sync.bfly.b32	%r483, %r482, 2, 31, -1;
	selp.b32 	%r484, %r316, %r483, %p4;
	selp.b32 	%r485, %r483, %r348, %p4;
	and.b32  	%r14, %r1, 4;
	setp.eq.s32 	%p5, %r14, 0;
	selp.b32 	%r486, %r456, %r424, %p5;
	shfl.sync.bfly.b32	%r487, %r486, 4, 31, -1;
	selp.b32 	%r602, %r424, %r487, %p5;
	selp.b32 	%r730, %r487, %r456, %p5;
	selp.b32 	%r488, %r460, %r428, %p5;
	shfl.sync.bfly.b32	%r489, %r488, 4, 31, -1;
	selp.b32 	%r864, %r428, %r489, %p5;
	selp.b32 	%r992, %r489, %r460, %p5;
	selp.b32 	%r490, %r464, %r432, %p5;
	shfl.sync.bfly.b32	%r491, %r490, 4, 31, -1;
	selp.b32 	%r596, %r432, %r491, %p5;
	selp.b32 	%r724, %r491, %r464, %p5;
	selp.b32 	%r492, %r468, %r436, %p5;
	shfl.sync.bfly.b32	%r493, %r492, 4, 31, -1;
	selp.b32 	%r858, %r436, %r493, %p5;
	selp.b32 	%r986, %r493, %r468, %p5;
	selp.b32 	%r494, %r472, %r440, %p5;
	shfl.sync.bfly.b32	%r495, %r494, 4, 31, -1;
	selp.b32 	%r634, %r440, %r495, %p5;
	selp.b32 	%r762, %r495, %r472, %p5;
	selp.b32 	%r496, %r476, %r444, %p5;
	shfl.sync.bfly.b32	%r497, %r496, 4, 31, -1;
	selp.b32 	%r896, %r444, %r497, %p5;
	selp.b32 	%r1024, %r497, %r476, %p5;
	selp.b32 	%r498, %r480, %r448, %p5;
	shfl.sync.bfly.b32	%r499, %r498, 4, 31, -1;
	selp.b32 	%r628, %r448, %r499, %p5;
	selp.b32 	%r756, %r499, %r480, %p5;
	selp.b32 	%r500, %r484, %r452, %p5;
	shfl.sync.bfly.b32	%r501, %r500, 4, 31, -1;
	selp.b32 	%r890, %r452, %r501, %p5;
	selp.b32 	%r1018, %r501, %r484, %p5;
	selp.b32 	%r502, %r457, %r425, %p5;
	shfl.sync.bfly.b32	%r503, %r502, 4, 31, -1;
	selp.b32 	%r666, %r425, %r503, %p5;
	selp.b32 	%r794, %r503, %r457, %p5;
	selp.b32 	%r504, %r461, %r429, %p5;
	shfl.sync.bfly.b32	%r505, %r504, 4, 31, -1;
	selp.b32 	%r928, %r429, %r505, %p5;
	selp.b32 	%r1056, %r505, %r461, %p5;
	selp.b32 	%r506, %r465, %r433, %p5;
	shfl.sync.bfly.b32	%r507, %r506, 4, 31, -1;
	selp.b32 	%r660, %r433, %r507, %p5;
	selp.b32 	%r788, %r507, %r465, %p5;
	selp.b32 	%r508, %r469, %r437, %p5;
	shfl.sync.bfly.b32	%r509, %r508, 4, 31, -1;
	selp.b32 	%r922, %r437, %r509, %p5;
	selp.b32 	%r1050, %r509, %r469, %p5;
	selp.b32 	%r510, %r473, %r441, %p5;
	shfl.sync.bfly.b32	%r511, %r510, 4, 31, -1;
	selp.b32 	%r698, %r441, %r511, %p5;
	selp.b32 	%r826, %r511, %r473, %p5;
	selp.b32 	%r512, %r477, %r445, %p5;
	shfl.sync.bfly.b32	%r513, %r512, 4, 31, -1;
	selp.b32 	%r960, %r445, %r513, %p5;
	selp.b32 	%r1088, %r513, %r477, %p5;
	selp.b32 	%r514, %r481, %r449, %p5;
	shfl.sync.bfly.b32	%r515, %r514, 4, 31, -1;
	selp.b32 	%r692, %r449, %r515, %p5;
	selp.b32 	%r820, %r515, %r481, %p5;
	selp.b32 	%r516, %r485, %r453, %p5;
	shfl.sync.bfly.b32	%r517, %r516, 4, 31, -1;
	selp.b32 	%r954, %r453, %r517, %p5;
	selp.b32 	%r1082, %r517, %r485, %p5;
	and.b32  	%r47, %r2, 12;
	and.b32  	%r518, %r3, 96;
	shl.b32 	%r519, %r1, 2;
	and.b32  	%r520, %r519, 28;
	or.b32  	%r48, %r518, %r520;
	shl.b32 	%r521, %r4, 11;
	and.b32  	%r49, %r521, 2048;
	shl.b32 	%r522, %r4, 6;
	and.b32  	%r50, %r522, 1920;
	shl.b32 	%r523, %r1, 3;
	and.b32  	%r524, %r523, 24;
	or.b32  	%r51, %r518, %r524;
	and.b32  	%r525, %r2, 3;
	mul.hi.u32 	%r526, %r389, -1431655765;
	shr.u32 	%r527, %r526, 6;
	mul.lo.s32 	%r528, %r527, 96;
	sub.s32 	%r529, %r389, %r528;
	mul.lo.s32 	%r530, %r525, 3200;
	or.b32  	%r52, %r529, %r530;
	and.b32  	%r53, %r361, 6;
	or.b32  	%r531, %r389, 8;
	mul.hi.u32 	%r532, %r531, -1431655765;
	shr.u32 	%r533, %r532, 6;
	mul.lo.s32 	%r534, %r533, 96;
	sub.s32 	%r535, %r531, %r534;
	or.b32  	%r54, %r535, %r530;
	and.b32  	%r536, %r1, 7;
	shl.b32 	%r55, %r87, %r10;
	min.u32 	%r56, %r353, 31;
	and.b32  	%r57, %r1, 1;
	shl.b32 	%r538, %r6, 18;
	shl.b32 	%r539, %r1, 5;
	and.b32  	%r58, %r539, 64;
	shl.b32 	%r540, %r4, 13;
	and.b32  	%r541, %r540, 8192;
	and.b32  	%r59, %r540, 245760;
	or.b32  	%r60, %r541, %r538;
	mul.lo.s32 	%r542, %r536, 100;
	add.s32 	%r543, %r542, %r6;
	mul.wide.u32 	%rd41, %r543, 4;
	mov.u64 	%rd42, shmem;
	add.s64 	%rd43, %rd42, 16512;
	add.s64 	%rd7, %rd43, %rd41;
	cvt.u64.u32 	%rd44, %r542;
	cvt.u64.u32 	%rd45, %r6;
	add.s64 	%rd46, %rd45, %rd44;
	shl.b64 	%rd47, %rd46, 2;
	add.s64 	%rd8, %rd43, %rd47;
	add.s32 	%r544, %r542, 800;
	add.s32 	%r545, %r544, %r6;
	mul.wide.u32 	%rd48, %r545, 4;
	add.s64 	%rd9, %rd43, %rd48;
	cvt.u64.u32 	%rd49, %r544;
	add.s64 	%rd50, %rd45, %rd49;
	shl.b64 	%rd51, %rd50, 2;
	add.s64 	%rd10, %rd43, %rd51;
	add.s32 	%r546, %r542, 1600;
	add.s32 	%r547, %r546, %r6;
	mul.wide.u32 	%rd52, %r547, 4;
	add.s64 	%rd11, %rd43, %rd52;
	cvt.u64.u32 	%rd53, %r546;
	add.s64 	%rd54, %rd45, %rd53;
	shl.b64 	%rd55, %rd54, 2;
	add.s64 	%rd12, %rd43, %rd55;
	or.b32  	%r548, %r1, 24;
	mul.lo.s32 	%r549, %r548, 100;
	add.s32 	%r550, %r549, %r6;
	mul.wide.u32 	%rd56, %r550, 4;
	add.s64 	%rd13, %rd43, %rd56;
	cvt.u64.u32 	%rd57, %r549;
	add.s64 	%rd58, %rd45, %rd57;
	shl.b64 	%rd59, %rd58, 2;
	add.s64 	%rd14, %rd43, %rd59;
	and.b32  	%r61, %r523, 32;
	mov.u32 	%r352, 0;
	setp.gt.u32 	%p6, %r2, 15;
	mov.u32 	%r1361, %r352;
LBB0_7:                                 // %L2676
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_8 Depth 2
                                        //       Child Loop BB0_11 Depth 3
	or.b32  	%r63, %r1361, 16;
	mov.u32 	%r1362, %r352;
	mov.u32 	%r1363, %r352;
	mov.u32 	%r1364, %r352;
	mov.u32 	%r1365, %r352;
	mov.u32 	%r1366, %r352;
	mov.u32 	%r1367, %r352;
	mov.u32 	%r1368, %r352;
LBB0_8:                                 // %L2679
                                        //   Parent Loop BB0_7 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_11 Depth 3
	@%p6 bra 	LBB0_10;
// %bb.9:                               // %L2702
                                        //   in Loop: Header=BB0_8 Depth=2
	add.s32 	%r552, %r1362, %r1361;
	or.b32  	%r553, %r552, %r47;
	or.b32  	%r554, %r5, %r553;
	shl.b32 	%r555, %r554, 12;
	and.b32  	%r556, %r555, 134148096;
	or.b32  	%r557, %r48, %r556;
	or.b32  	%r558, %r557, %r49;
	or.b32  	%r559, %r50, %r558;
	shl.b32 	%r560, %r559, 2;
	cvt.u64.u32 	%rd60, %r560;
	add.s64 	%rd61, %rd2, %rd60;
	ld.global.v4.u32 	{%r561, %r562, %r563, %r564}, [%rd61];
	add.s32 	%r565, %r63, %r1362;
	or.b32  	%r566, %r565, %r47;
	or.b32  	%r567, %r5, %r566;
	shl.b32 	%r568, %r567, 12;
	and.b32  	%r569, %r568, 134213632;
	or.b32  	%r570, %r48, %r569;
	or.b32  	%r571, %r570, %r49;
	or.b32  	%r572, %r50, %r571;
	shl.b32 	%r573, %r572, 2;
	cvt.u64.u32 	%rd62, %r573;
	add.s64 	%rd63, %rd2, %rd62;
	ld.global.v4.u32 	{%r574, %r575, %r576, %r577}, [%rd63];
	and.b32  	%r578, %r554, 15;
	mul.lo.s32 	%r579, %r578, 129;
	add.s32 	%r580, %r48, %r579;
	mul.wide.u32 	%rd64, %r580, 4;
	add.s64 	%rd66, %rd42, %rd64;
	st.shared.u32 	[%rd66], %r561;
	cvt.u64.u32 	%rd67, %r579;
	cvt.u64.u32 	%rd68, %r48;
	add.s64 	%rd69, %rd68, %rd67;
	shl.b64 	%rd70, %rd69, 2;
	add.s64 	%rd71, %rd42, %rd70;
	st.shared.u32 	[%rd71+4], %r562;
	st.shared.u32 	[%rd71+8], %r563;
	st.shared.u32 	[%rd71+12], %r564;
	and.b32  	%r581, %r567, 31;
	mul.lo.s32 	%r582, %r581, 129;
	add.s32 	%r583, %r48, %r582;
	mul.wide.u32 	%rd72, %r583, 4;
	add.s64 	%rd73, %rd42, %rd72;
	st.shared.u32 	[%rd73], %r574;
	cvt.u64.u32 	%rd74, %r582;
	add.s64 	%rd75, %rd68, %rd74;
	shl.b64 	%rd76, %rd75, 2;
	add.s64 	%rd77, %rd42, %rd76;
	st.shared.u32 	[%rd77+4], %r575;
	st.shared.u32 	[%rd77+8], %r576;
	st.shared.u32 	[%rd77+12], %r577;
LBB0_10:                                // %L4534
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	or.b32  	%r585, %r11, %r1362;
	add.s32 	%r71, %r1361, %r585;
	mov.u32 	%r598, 0;
	mov.u32 	%r1369, %r598;
LBB0_11:                                // %L4536
                                        //   Parent Loop BB0_7 Depth=1
                                        //     Parent Loop BB0_8 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add.s32 	%r1110, %r71, %r1369;
	shr.s32 	%r1111, %r1110, 31;
	shr.u32 	%r1112, %r1111, 27;
	add.s32 	%r1113, %r1110, %r1112;
	and.b32  	%r1114, %r1113, -32;
	sub.s32 	%r1115, %r1110, %r1114;
	mad.lo.s32 	%r1116, %r1115, 129, %r51;
	mul.wide.s32 	%rd78, %r1116, 4;
	add.s64 	%rd80, %rd42, %rd78;
	ld.shared.u32 	%r587, [%rd80];
	mov.u32 	%r588, 134744072;
	mov.u32 	%r589, 252645135;
	// begin inline asm
	lop3.b32 %r586, %r587, %r588, %r589, 40;
	// end inline asm
	add.s32 	%r1117, %r586, 2021161080;
	xor.b32  	%r603, %r1117, -2139062144;
	shr.u32 	%r591, %r587, 4;
	// begin inline asm
	lop3.b32 %r590, %r591, %r588, %r589, 40;
	// end inline asm
	add.s32 	%r1118, %r590, 2021161080;
	xor.b32  	%r597, %r1118, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r594, %r595}, {%r596}, {%r597}, {%r598, %r598};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r600, %r601}, {%r602}, {%r603}, {%r598, %r598};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r606, %r607}, {%r596}, {%r603}, {%r598, %r598};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r612, %r613}, {%r602}, {%r597}, {%r606, %r607};
	// end inline asm
	ld.shared.u32 	%r619, [%rd80+4];
	// begin inline asm
	lop3.b32 %r618, %r619, %r588, %r589, 40;
	// end inline asm
	add.s32 	%r1119, %r618, 2021161080;
	xor.b32  	%r635, %r1119, -2139062144;
	shr.u32 	%r623, %r619, 4;
	// begin inline asm
	lop3.b32 %r622, %r623, %r588, %r589, 40;
	// end inline asm
	add.s32 	%r1120, %r622, 2021161080;
	xor.b32  	%r629, %r1120, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r626, %r627}, {%r628}, {%r629}, {%r594, %r595};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r632, %r633}, {%r634}, {%r635}, {%r600, %r601};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r638, %r639}, {%r628}, {%r635}, {%r612, %r613};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r644, %r645}, {%r634}, {%r629}, {%r638, %r639};
	// end inline asm
	ld.shared.u32 	%r651, [%rd80+8];
	// begin inline asm
	lop3.b32 %r650, %r651, %r588, %r589, 40;
	// end inline asm
	add.s32 	%r1121, %r650, 2021161080;
	xor.b32  	%r667, %r1121, -2139062144;
	shr.u32 	%r655, %r651, 4;
	// begin inline asm
	lop3.b32 %r654, %r655, %r588, %r589, 40;
	// end inline asm
	add.s32 	%r1122, %r654, 2021161080;
	xor.b32  	%r661, %r1122, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r658, %r659}, {%r660}, {%r661}, {%r626, %r627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r664, %r665}, {%r666}, {%r667}, {%r632, %r633};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r670, %r671}, {%r660}, {%r667}, {%r644, %r645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r676, %r677}, {%r666}, {%r661}, {%r670, %r671};
	// end inline asm
	ld.shared.u32 	%r683, [%rd80+12];
	// begin inline asm
	lop3.b32 %r682, %r683, %r588, %r589, 40;
	// end inline asm
	add.s32 	%r1123, %r682, 2021161080;
	xor.b32  	%r699, %r1123, -2139062144;
	shr.u32 	%r687, %r683, 4;
	// begin inline asm
	lop3.b32 %r686, %r687, %r588, %r589, 40;
	// end inline asm
	add.s32 	%r1124, %r686, 2021161080;
	xor.b32  	%r693, %r1124, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r690, %r691}, {%r692}, {%r693}, {%r658, %r659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r696, %r697}, {%r698}, {%r699}, {%r664, %r665};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r702, %r703}, {%r692}, {%r699}, {%r676, %r677};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r708, %r709}, {%r698}, {%r693}, {%r702, %r703};
	// end inline asm
	ld.shared.u32 	%r715, [%rd80+16];
	// begin inline asm
	lop3.b32 %r714, %r715, %r588, %r589, 40;
	// end inline asm
	add.s32 	%r1125, %r714, 2021161080;
	xor.b32  	%r731, %r1125, -2139062144;
	shr.u32 	%r719, %r715, 4;
	// begin inline asm
	lop3.b32 %r718, %r719, %r588, %r589, 40;
	// end inline asm
	add.s32 	%r1126, %r718, 2021161080;
	xor.b32  	%r725, %r1126, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r722, %r723}, {%r724}, {%r725}, {%r690, %r691};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r728, %r729}, {%r730}, {%r731}, {%r696, %r697};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r734, %r735}, {%r724}, {%r731}, {%r708, %r709};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r740, %r741}, {%r730}, {%r725}, {%r734, %r735};
	// end inline asm
	ld.shared.u32 	%r747, [%rd80+20];
	// begin inline asm
	lop3.b32 %r746, %r747, %r588, %r589, 40;
	// end inline asm
	add.s32 	%r1127, %r746, 2021161080;
	xor.b32  	%r763, %r1127, -2139062144;
	shr.u32 	%r751, %r747, 4;
	// begin inline asm
	lop3.b32 %r750, %r751, %r588, %r589, 40;
	// end inline asm
	add.s32 	%r1128, %r750, 2021161080;
	xor.b32  	%r757, %r1128, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r754, %r755}, {%r756}, {%r757}, {%r722, %r723};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r760, %r761}, {%r762}, {%r763}, {%r728, %r729};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r766, %r767}, {%r756}, {%r763}, {%r740, %r741};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r772, %r773}, {%r762}, {%r757}, {%r766, %r767};
	// end inline asm
	ld.shared.u32 	%r779, [%rd80+24];
	// begin inline asm
	lop3.b32 %r778, %r779, %r588, %r589, 40;
	// end inline asm
	add.s32 	%r1129, %r778, 2021161080;
	xor.b32  	%r795, %r1129, -2139062144;
	shr.u32 	%r783, %r779, 4;
	// begin inline asm
	lop3.b32 %r782, %r783, %r588, %r589, 40;
	// end inline asm
	add.s32 	%r1130, %r782, 2021161080;
	xor.b32  	%r789, %r1130, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r786, %r787}, {%r788}, {%r789}, {%r754, %r755};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r792, %r793}, {%r794}, {%r795}, {%r760, %r761};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r798, %r799}, {%r788}, {%r795}, {%r772, %r773};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r804, %r805}, {%r794}, {%r789}, {%r798, %r799};
	// end inline asm
	ld.shared.u32 	%r811, [%rd80+28];
	// begin inline asm
	lop3.b32 %r810, %r811, %r588, %r589, 40;
	// end inline asm
	add.s32 	%r1131, %r810, 2021161080;
	xor.b32  	%r827, %r1131, -2139062144;
	shr.u32 	%r815, %r811, 4;
	// begin inline asm
	lop3.b32 %r814, %r815, %r588, %r589, 40;
	// end inline asm
	add.s32 	%r1132, %r814, 2021161080;
	xor.b32  	%r821, %r1132, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r818, %r819}, {%r820}, {%r821}, {%r786, %r787};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r824, %r825}, {%r826}, {%r827}, {%r792, %r793};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r830, %r831}, {%r820}, {%r827}, {%r804, %r805};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r836, %r837}, {%r826}, {%r821}, {%r830, %r831};
	// end inline asm
	add.s32 	%r1133, %r836, 4;
	shr.s32 	%r844, %r1133, 3;
	sub.s32 	%r1134, %r818, %r824;
	add.s32 	%r1135, %r1134, 4;
	shr.s32 	%r843, %r1135, 3;
	add.s32 	%r1136, %r837, 4;
	shr.s32 	%r847, %r1136, 3;
	sub.s32 	%r1137, %r819, %r825;
	add.s32 	%r1138, %r1137, 4;
	shr.s32 	%r846, %r1138, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r842, %r843, %r844;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r845, %r846, %r847;
	// end inline asm
	or.b32  	%r1139, %r1369, %r53;
	mul.lo.s32 	%r1140, %r1139, 100;
	add.s32 	%r1141, %r52, %r1140;
	mul.wide.u32 	%rd81, %r1141, 4;
	add.s64 	%rd83, %rd43, %rd81;
	st.shared.u32 	[%rd83], %r842;
	add.s32 	%r1142, %r1140, 100;
	add.s32 	%r1143, %r52, %r1142;
	mul.wide.u32 	%rd84, %r1143, 4;
	add.s64 	%rd85, %rd43, %rd84;
	st.shared.u32 	[%rd85], %r845;
	ld.shared.u32 	%r849, [%rd80];
	// begin inline asm
	lop3.b32 %r848, %r849, %r588, %r589, 40;
	// end inline asm
	add.s32 	%r1144, %r848, 2021161080;
	xor.b32  	%r865, %r1144, -2139062144;
	shr.u32 	%r853, %r849, 4;
	// begin inline asm
	lop3.b32 %r852, %r853, %r588, %r589, 40;
	// end inline asm
	add.s32 	%r1145, %r852, 2021161080;
	xor.b32  	%r859, %r1145, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r856, %r857}, {%r858}, {%r859}, {%r598, %r598};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r862, %r863}, {%r864}, {%r865}, {%r598, %r598};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r868, %r869}, {%r858}, {%r865}, {%r598, %r598};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r874, %r875}, {%r864}, {%r859}, {%r868, %r869};
	// end inline asm
	ld.shared.u32 	%r881, [%rd80+4];
	// begin inline asm
	lop3.b32 %r880, %r881, %r588, %r589, 40;
	// end inline asm
	add.s32 	%r1146, %r880, 2021161080;
	xor.b32  	%r897, %r1146, -2139062144;
	shr.u32 	%r885, %r881, 4;
	// begin inline asm
	lop3.b32 %r884, %r885, %r588, %r589, 40;
	// end inline asm
	add.s32 	%r1147, %r884, 2021161080;
	xor.b32  	%r891, %r1147, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r888, %r889}, {%r890}, {%r891}, {%r856, %r857};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r894, %r895}, {%r896}, {%r897}, {%r862, %r863};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r900, %r901}, {%r890}, {%r897}, {%r874, %r875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r906, %r907}, {%r896}, {%r891}, {%r900, %r901};
	// end inline asm
	ld.shared.u32 	%r913, [%rd80+8];
	// begin inline asm
	lop3.b32 %r912, %r913, %r588, %r589, 40;
	// end inline asm
	add.s32 	%r1148, %r912, 2021161080;
	xor.b32  	%r929, %r1148, -2139062144;
	shr.u32 	%r917, %r913, 4;
	// begin inline asm
	lop3.b32 %r916, %r917, %r588, %r589, 40;
	// end inline asm
	add.s32 	%r1149, %r916, 2021161080;
	xor.b32  	%r923, %r1149, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r920, %r921}, {%r922}, {%r923}, {%r888, %r889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r926, %r927}, {%r928}, {%r929}, {%r894, %r895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r932, %r933}, {%r922}, {%r929}, {%r906, %r907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r938, %r939}, {%r928}, {%r923}, {%r932, %r933};
	// end inline asm
	ld.shared.u32 	%r945, [%rd80+12];
	// begin inline asm
	lop3.b32 %r944, %r945, %r588, %r589, 40;
	// end inline asm
	add.s32 	%r1150, %r944, 2021161080;
	xor.b32  	%r961, %r1150, -2139062144;
	shr.u32 	%r949, %r945, 4;
	// begin inline asm
	lop3.b32 %r948, %r949, %r588, %r589, 40;
	// end inline asm
	add.s32 	%r1151, %r948, 2021161080;
	xor.b32  	%r955, %r1151, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r952, %r953}, {%r954}, {%r955}, {%r920, %r921};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r958, %r959}, {%r960}, {%r961}, {%r926, %r927};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r964, %r965}, {%r954}, {%r961}, {%r938, %r939};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r970, %r971}, {%r960}, {%r955}, {%r964, %r965};
	// end inline asm
	ld.shared.u32 	%r977, [%rd80+16];
	// begin inline asm
	lop3.b32 %r976, %r977, %r588, %r589, 40;
	// end inline asm
	add.s32 	%r1152, %r976, 2021161080;
	xor.b32  	%r993, %r1152, -2139062144;
	shr.u32 	%r981, %r977, 4;
	// begin inline asm
	lop3.b32 %r980, %r981, %r588, %r589, 40;
	// end inline asm
	add.s32 	%r1153, %r980, 2021161080;
	xor.b32  	%r987, %r1153, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r984, %r985}, {%r986}, {%r987}, {%r952, %r953};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r990, %r991}, {%r992}, {%r993}, {%r958, %r959};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r996, %r997}, {%r986}, {%r993}, {%r970, %r971};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1002, %r1003}, {%r992}, {%r987}, {%r996, %r997};
	// end inline asm
	ld.shared.u32 	%r1009, [%rd80+20];
	// begin inline asm
	lop3.b32 %r1008, %r1009, %r588, %r589, 40;
	// end inline asm
	add.s32 	%r1154, %r1008, 2021161080;
	xor.b32  	%r1025, %r1154, -2139062144;
	shr.u32 	%r1013, %r1009, 4;
	// begin inline asm
	lop3.b32 %r1012, %r1013, %r588, %r589, 40;
	// end inline asm
	add.s32 	%r1155, %r1012, 2021161080;
	xor.b32  	%r1019, %r1155, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1016, %r1017}, {%r1018}, {%r1019}, {%r984, %r985};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1022, %r1023}, {%r1024}, {%r1025}, {%r990, %r991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1028, %r1029}, {%r1018}, {%r1025}, {%r1002, %r1003};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1034, %r1035}, {%r1024}, {%r1019}, {%r1028, %r1029};
	// end inline asm
	ld.shared.u32 	%r1041, [%rd80+24];
	// begin inline asm
	lop3.b32 %r1040, %r1041, %r588, %r589, 40;
	// end inline asm
	add.s32 	%r1156, %r1040, 2021161080;
	xor.b32  	%r1057, %r1156, -2139062144;
	shr.u32 	%r1045, %r1041, 4;
	// begin inline asm
	lop3.b32 %r1044, %r1045, %r588, %r589, 40;
	// end inline asm
	add.s32 	%r1157, %r1044, 2021161080;
	xor.b32  	%r1051, %r1157, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1048, %r1049}, {%r1050}, {%r1051}, {%r1016, %r1017};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1054, %r1055}, {%r1056}, {%r1057}, {%r1022, %r1023};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1060, %r1061}, {%r1050}, {%r1057}, {%r1034, %r1035};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1066, %r1067}, {%r1056}, {%r1051}, {%r1060, %r1061};
	// end inline asm
	ld.shared.u32 	%r1073, [%rd80+28];
	// begin inline asm
	lop3.b32 %r1072, %r1073, %r588, %r589, 40;
	// end inline asm
	add.s32 	%r1158, %r1072, 2021161080;
	xor.b32  	%r1089, %r1158, -2139062144;
	shr.u32 	%r1077, %r1073, 4;
	// begin inline asm
	lop3.b32 %r1076, %r1077, %r588, %r589, 40;
	// end inline asm
	add.s32 	%r1159, %r1076, 2021161080;
	xor.b32  	%r1083, %r1159, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1080, %r1081}, {%r1082}, {%r1083}, {%r1048, %r1049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1086, %r1087}, {%r1088}, {%r1089}, {%r1054, %r1055};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1092, %r1093}, {%r1082}, {%r1089}, {%r1066, %r1067};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1098, %r1099}, {%r1088}, {%r1083}, {%r1092, %r1093};
	// end inline asm
	add.s32 	%r1160, %r1098, 4;
	shr.s32 	%r1106, %r1160, 3;
	sub.s32 	%r1161, %r1080, %r1086;
	add.s32 	%r1162, %r1161, 4;
	shr.s32 	%r1105, %r1162, 3;
	add.s32 	%r1163, %r1099, 4;
	shr.s32 	%r1109, %r1163, 3;
	sub.s32 	%r1164, %r1081, %r1087;
	add.s32 	%r1165, %r1164, 4;
	shr.s32 	%r1108, %r1165, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1104, %r1105, %r1106;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1107, %r1108, %r1109;
	// end inline asm
	add.s32 	%r1166, %r54, %r1140;
	mul.wide.u32 	%rd86, %r1166, 4;
	add.s64 	%rd87, %rd43, %rd86;
	st.shared.u32 	[%rd87], %r1104;
	add.s32 	%r1167, %r54, %r1142;
	mul.wide.u32 	%rd88, %r1167, 4;
	add.s64 	%rd89, %rd43, %rd88;
	st.shared.u32 	[%rd89], %r1107;
	add.s32 	%r1369, %r1369, 8;
	setp.ne.s32 	%p7, %r1369, 32;
	@%p7 bra 	LBB0_11;
// %bb.12:                              // %L9106
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1186, [%rd7];
	ld.shared.u32 	%r1187, [%rd8+12800];
	ld.shared.u32 	%r1188, [%rd8+25600];
	ld.shared.u32 	%r1189, [%rd8+38400];
	ld.shared.u32 	%r1190, [%rd9];
	ld.shared.u32 	%r1191, [%rd10+12800];
	ld.shared.u32 	%r1192, [%rd10+25600];
	ld.shared.u32 	%r1193, [%rd10+38400];
	ld.shared.u32 	%r1194, [%rd11];
	ld.shared.u32 	%r1195, [%rd12+12800];
	ld.shared.u32 	%r1196, [%rd12+25600];
	ld.shared.u32 	%r1197, [%rd12+38400];
	ld.shared.u32 	%r1198, [%rd13];
	ld.shared.u32 	%r1199, [%rd14+12800];
	ld.shared.u32 	%r1200, [%rd14+25600];
	ld.shared.u32 	%r1201, [%rd14+38400];
	cvt.s32.s16 	%r1202, %r1186;
	shr.s32 	%r1203, %r1186, 16;
	cvt.s32.s16 	%r1204, %r1187;
	shr.s32 	%r1205, %r1187, 16;
	cvt.s32.s16 	%r1206, %r1188;
	shr.s32 	%r1207, %r1188, 16;
	cvt.s32.s16 	%r1208, %r1189;
	shr.s32 	%r1209, %r1189, 16;
	cvt.s32.s16 	%r1210, %r1190;
	shr.s32 	%r1211, %r1190, 16;
	cvt.s32.s16 	%r1212, %r1191;
	shr.s32 	%r1213, %r1191, 16;
	cvt.s32.s16 	%r1214, %r1192;
	shr.s32 	%r1215, %r1192, 16;
	cvt.s32.s16 	%r1216, %r1193;
	shr.s32 	%r1217, %r1193, 16;
	cvt.s32.s16 	%r1218, %r1194;
	shr.s32 	%r1219, %r1194, 16;
	cvt.s32.s16 	%r1220, %r1195;
	shr.s32 	%r1221, %r1195, 16;
	cvt.s32.s16 	%r1222, %r1196;
	shr.s32 	%r1223, %r1196, 16;
	cvt.s32.s16 	%r1224, %r1197;
	shr.s32 	%r1225, %r1197, 16;
	cvt.s32.s16 	%r1226, %r1198;
	shr.s32 	%r1227, %r1198, 16;
	cvt.s32.s16 	%r1228, %r1199;
	shr.s32 	%r1229, %r1199, 16;
	cvt.s32.s16 	%r1230, %r1200;
	shr.s32 	%r1231, %r1200, 16;
	cvt.s32.s16 	%r1232, %r1201;
	shr.s32 	%r1233, %r1201, 16;
	add.s32 	%r1234, %r1202, %r55;
	add.s32 	%r1235, %r1234, %r1204;
	add.s32 	%r1236, %r1235, %r1206;
	add.s32 	%r1237, %r1236, %r1208;
	shr.s32 	%r1238, %r1237, %r56;
	add.s32 	%r1239, %r1203, %r55;
	add.s32 	%r1240, %r1239, %r1205;
	add.s32 	%r1241, %r1240, %r1207;
	add.s32 	%r1242, %r1241, %r1209;
	shr.s32 	%r1243, %r1242, %r56;
	add.s32 	%r1244, %r1210, %r55;
	add.s32 	%r1245, %r1244, %r1212;
	add.s32 	%r1246, %r1245, %r1214;
	add.s32 	%r1247, %r1246, %r1216;
	shr.s32 	%r1248, %r1247, %r56;
	add.s32 	%r1249, %r1211, %r55;
	add.s32 	%r1250, %r1249, %r1213;
	add.s32 	%r1251, %r1250, %r1215;
	add.s32 	%r1252, %r1251, %r1217;
	shr.s32 	%r1253, %r1252, %r56;
	add.s32 	%r1254, %r1218, %r55;
	add.s32 	%r1255, %r1254, %r1220;
	add.s32 	%r1256, %r1255, %r1222;
	add.s32 	%r1257, %r1256, %r1224;
	shr.s32 	%r1258, %r1257, %r56;
	add.s32 	%r1259, %r1219, %r55;
	add.s32 	%r1260, %r1259, %r1221;
	add.s32 	%r1261, %r1260, %r1223;
	add.s32 	%r1262, %r1261, %r1225;
	shr.s32 	%r1263, %r1262, %r56;
	add.s32 	%r1264, %r1226, %r55;
	add.s32 	%r1265, %r1264, %r1228;
	add.s32 	%r1266, %r1265, %r1230;
	add.s32 	%r1267, %r1266, %r1232;
	shr.s32 	%r1268, %r1267, %r56;
	add.s32 	%r1269, %r1227, %r55;
	add.s32 	%r1270, %r1269, %r1229;
	add.s32 	%r1271, %r1270, %r1231;
	add.s32 	%r1272, %r1271, %r1233;
	shr.s32 	%r1273, %r1272, %r56;
	max.s32 	%r1274, %r1238, -7;
	min.s32 	%r1173, %r1274, 7;
	max.s32 	%r1275, %r1243, -7;
	min.s32 	%r1180, %r1275, 7;
	max.s32 	%r1276, %r1248, -7;
	min.s32 	%r1172, %r1276, 7;
	max.s32 	%r1277, %r1253, -7;
	min.s32 	%r1179, %r1277, 7;
	max.s32 	%r1278, %r1258, -7;
	min.s32 	%r1170, %r1278, 7;
	max.s32 	%r1279, %r1263, -7;
	min.s32 	%r1177, %r1279, 7;
	max.s32 	%r1280, %r1268, -7;
	min.s32 	%r1169, %r1280, 7;
	max.s32 	%r1281, %r1273, -7;
	min.s32 	%r1176, %r1281, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1168, %r1169, %r1170, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1171, %r1172, %r1173, %r1168;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1175, %r1176, %r1177, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1178, %r1179, %r1180, %r1175;
	// end inline asm
	shl.b32 	%r1185, %r1178, 4;
	// begin inline asm
	lop3.b32 %r1292, %r589, %r1171, %r1185, 202;
	// end inline asm
	setp.eq.s32 	%p8, %r1362, 0;
	selp.b32 	%r1367, %r1292, %r1367, %p8;
	selp.b32 	%r1368, %r1292, %r1368, %p8;
	setp.eq.s32 	%p9, %r1362, 32;
	selp.b32 	%r1363, %r1292, %r1363, %p9;
	selp.b32 	%r1364, %r1292, %r1364, %p9;
	setp.eq.s32 	%p10, %r1362, 64;
	selp.b32 	%r1365, %r1292, %r1365, %p10;
	selp.b32 	%r1366, %r1292, %r1366, %p10;
	add.s32 	%r81, %r1362, 32;
	setp.ne.s32 	%p11, %r1362, 96;
	mov.u32 	%r1362, %r81;
	@%p11 bra 	LBB0_8;
// %bb.13:                              // %L11749
                                        //   in Loop: Header=BB0_7 Depth=1
	setp.eq.s32 	%p12, %r57, 0;
	// begin inline asm
	prmt.b32 %r1282, %r1367, %r1363, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1286, %r1368, %r1364, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1290, %r1365, %r1292, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1294, %r1366, %r1292, %r231;
	// end inline asm
	selp.b32 	%r1330, %r1286, %r1282, %p12;
	shfl.sync.bfly.b32	%r1331, %r1330, 1, 31, -1;
	selp.b32 	%r1299, %r1282, %r1331, %p12;
	selp.b32 	%r1300, %r1331, %r1286, %p12;
	selp.b32 	%r1332, %r1294, %r1290, %p12;
	shfl.sync.bfly.b32	%r1333, %r1332, 1, 31, -1;
	selp.b32 	%r1307, %r1290, %r1333, %p12;
	selp.b32 	%r1308, %r1333, %r1294, %p12;
	// begin inline asm
	prmt.b32 %r1298, %r1299, %r1300, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1302, %r1299, %r1300, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1306, %r1307, %r1308, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1310, %r1307, %r1308, %r231;
	// end inline asm
	selp.b32 	%r1334, %r1306, %r1298, %p4;
	shfl.sync.bfly.b32	%r1335, %r1334, 2, 31, -1;
	selp.b32 	%r1315, %r1298, %r1335, %p4;
	selp.b32 	%r1316, %r1335, %r1306, %p4;
	selp.b32 	%r1336, %r1310, %r1302, %p4;
	shfl.sync.bfly.b32	%r1337, %r1336, 2, 31, -1;
	selp.b32 	%r1323, %r1302, %r1337, %p4;
	selp.b32 	%r1324, %r1337, %r1310, %p4;
	// begin inline asm
	prmt.b32 %r1314, %r1315, %r1316, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1318, %r1315, %r1316, %r103;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1322, %r1323, %r1324, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1326, %r1323, %r1324, %r103;
	// end inline asm
	selp.b32 	%r1338, %r1322, %r1314, %p5;
	shfl.sync.bfly.b32	%r1339, %r1338, 4, 31, -1;
	selp.b32 	%r1340, %r1314, %r1339, %p5;
	selp.b32 	%r1341, %r1339, %r1322, %p5;
	selp.b32 	%r1342, %r1326, %r1318, %p5;
	shfl.sync.bfly.b32	%r1343, %r1342, 4, 31, -1;
	selp.b32 	%r1344, %r1318, %r1343, %p5;
	selp.b32 	%r1345, %r1343, %r1326, %p5;
	selp.b32 	%r1346, %r1344, %r1340, %p12;
	shfl.sync.bfly.b32	%r1347, %r1346, 1, 31, -1;
	selp.b32 	%r1348, %r1340, %r1347, %p12;
	selp.b32 	%r1349, %r1347, %r1344, %p12;
	selp.b32 	%r1350, %r1345, %r1341, %p12;
	shfl.sync.bfly.b32	%r1351, %r1350, 1, 31, -1;
	selp.b32 	%r1352, %r1341, %r1351, %p12;
	selp.b32 	%r1353, %r1351, %r1345, %p12;
	or.b32  	%r1354, %r12, %r1361;
	or.b32  	%r1355, %r1354, %r61;
	or.b32  	%r1356, %r1355, %r58;
	shr.u32 	%r1357, %r1356, 2;
	add.s32 	%r1358, %r60, %r1357;
	add.s32 	%r1359, %r1358, %r59;
	mul.wide.u32 	%rd90, %r1359, 4;
	add.s64 	%rd91, %rd4, %rd90;
	st.global.v4.u32 	[%rd91], {%r1348, %r1352, %r1349, %r1353};
	add.s32 	%r82, %r1361, 128;
	setp.ne.s32 	%p15, %r1361, 32640;
	mov.u32 	%r1361, %r82;
	@%p15 bra 	LBB0_7;
// %bb.14:                              // %L12178
	mov.u32 	%r1360, 0;
	st.global.u32 	[%rd6], %r1360;
	ret;
LBB0_1:                                 // %L9
	mov.u64 	%rd16, exception1872;
	cvta.global.u64 	%rd17, %rd16;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd17;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd15;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	// begin inline asm
	exit;
	// end inline asm
LBB0_3:                                 // %L28
	mov.u64 	%rd18, exception1872;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd15;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	// begin inline asm
	exit;
	// end inline asm
LBB0_5:                                 // %L282
	mov.u32 	%r95, 2;
	st.global.u32 	[%rd6], %r95;
	mov.u64 	%rd23, exception866;
	cvta.global.u64 	%rd24, %rd23;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd24;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd15;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
