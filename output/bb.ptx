// PTX CompilerJob of kernel #bb(CuDeviceVector{Int8x4, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Int32, 1}, CuDeviceVector{Int4x8, 1}) for sm_86, minthreads=1024, blocks_per_sm=1, always_inline=false

//
// Generated by LLVM NVPTX Back-End
//

.version 7.1
.target sm_86
.address_size 64

	// .globl	_Z13julia_bb_445713CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EE // -- Begin function _Z13julia_bb_445713CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[8]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception1667[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z13julia_bb_445713CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EE
.visible .entry _Z13julia_bb_445713CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EE(
	.param .align 8 .b8 _Z13julia_bb_445713CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EE_param_0[8],
	.param .align 8 .b8 _Z13julia_bb_445713CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z13julia_bb_445713CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z13julia_bb_445713CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z13julia_bb_445713CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EE_param_4[32]
)
.reqntid 1024, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<15>;
	.reg .b32 	%r<1308>;
	.reg .b64 	%rd<89>;

// %bb.0:                               // %conversion
	ld.param.u64 	%rd13, [_Z13julia_bb_445713CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r69, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r69, 16511;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L11
	// begin inline asm
	mov.u32 %r70, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r70, 84095;
	@%p2 bra 	LBB0_4;
	bra.uni 	LBB0_3;
LBB0_4:                                 // %pass16
	ld.param.u64 	%rd1, [_Z13julia_bb_445713CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EE_param_1];
	ld.param.u64 	%rd2, [_Z13julia_bb_445713CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EE_param_2];
	ld.param.u64 	%rd3, [_Z13julia_bb_445713CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z13julia_bb_445713CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EE_param_4];
	mov.u32 	%r328, %ctaid.x;
	mov.u32 	%r329, %tid.y;
	shl.b32 	%r330, %r329, 2;
	mov.u32 	%r331, %tid.x;
	bfe.u32 	%r20, %r331, 3, 2;
	and.b32  	%r332, %r330, 124;
	or.b32  	%r333, %r332, %r20;
	shr.u32 	%r334, %r328, 1;
	shr.u32 	%r335, %r328, 2;
	mul.hi.u32 	%r336, %r335, 818089009;
	shr.u32 	%r337, %r336, 2;
	mul.lo.s32 	%r338, %r337, 42;
	sub.s32 	%r339, %r334, %r338;
	shl.b32 	%r340, %r339, 8;
	or.b32  	%r341, %r333, %r340;
	shl.b32 	%r342, %r328, 7;
	and.b32  	%r343, %r342, 128;
	or.b32  	%r344, %r341, %r343;
	mul.wide.u32 	%rd18, %r344, 4;
	add.s64 	%rd19, %rd3, %rd18;
	ld.global.u32 	%r345, [%rd19];
	and.b32  	%r346, %r330, 112;
	shr.u32 	%r347, %r331, 2;
	and.b32  	%r348, %r347, 6;
	or.b32  	%r349, %r346, %r348;
	shl.b32 	%r350, %r349, 10;
	shl.b32 	%r351, %r331, 6;
	and.b32  	%r352, %r351, 64;
	shl.b32 	%r353, %r331, 3;
	and.b32  	%r354, %r353, 48;
	shl.b32 	%r355, %r329, 8;
	and.b32  	%r356, %r355, 768;
	shl.b32 	%r357, %r339, 18;
	shl.b32 	%r358, %r328, 17;
	and.b32  	%r359, %r358, 131072;
	or.b32  	%r360, %r350, %r352;
	or.b32  	%r361, %r360, %r357;
	or.b32  	%r362, %r361, %r354;
	or.b32  	%r363, %r362, %r356;
	add.s32 	%r364, %r363, %r359;
	cvt.u64.u32 	%rd20, %r364;
	add.s64 	%rd21, %rd1, %rd20;
	ld.global.v4.u32 	{%r72, %r73, %r88, %r89}, [%rd21];
	shl.b32 	%r365, %r349, 8;
	shl.b32 	%r366, %r331, 4;
	and.b32  	%r367, %r366, 16;
	shl.b32 	%r368, %r331, 1;
	and.b32  	%r369, %r368, 12;
	shl.b32 	%r370, %r329, 6;
	and.b32  	%r371, %r370, 192;
	shl.b32 	%r372, %r339, 16;
	shl.b32 	%r373, %r328, 15;
	and.b32  	%r374, %r373, 32768;
	or.b32  	%r375, %r367, %r365;
	or.b32  	%r376, %r375, %r372;
	or.b32  	%r377, %r376, %r369;
	or.b32  	%r378, %r377, %r371;
	or.b32  	%r379, %r378, 2048;
	add.s32 	%r380, %r379, %r374;
	mul.wide.u32 	%rd22, %r380, 4;
	add.s64 	%rd23, %rd1, %rd22;
	ld.global.v4.u32 	{%r80, %r81, %r96, %r97}, [%rd23];
	add.s32 	%r381, %r374, %r378;
	or.b32  	%r382, %r381, 33;
	mul.wide.u32 	%rd24, %r382, 4;
	add.s64 	%rd25, %rd1, %rd24;
	ld.global.v4.u32 	{%r104, %r105, %r120, %r121}, [%rd25+-4];
	or.b32  	%r383, %r378, 2080;
	add.s32 	%r384, %r383, %r374;
	mul.wide.u32 	%rd26, %r384, 4;
	add.s64 	%rd27, %rd1, %rd26;
	ld.global.v4.u32 	{%r112, %r113, %r128, %r129}, [%rd27];
	or.b32  	%r385, %r378, 256;
	add.s32 	%r386, %r385, %r374;
	mul.wide.u32 	%rd28, %r386, 4;
	add.s64 	%rd29, %rd1, %rd28;
	ld.global.v4.u32 	{%r136, %r137, %r152, %r153}, [%rd29];
	or.b32  	%r387, %r378, 2304;
	add.s32 	%r388, %r387, %r374;
	mul.wide.u32 	%rd30, %r388, 4;
	add.s64 	%rd31, %rd1, %rd30;
	ld.global.v4.u32 	{%r144, %r145, %r160, %r161}, [%rd31];
	or.b32  	%r389, %r378, 288;
	add.s32 	%r390, %r389, %r374;
	mul.wide.u32 	%rd32, %r390, 4;
	add.s64 	%rd33, %rd1, %rd32;
	ld.global.v4.u32 	{%r168, %r169, %r184, %r185}, [%rd33];
	or.b32  	%r391, %r378, 2336;
	add.s32 	%r392, %r391, %r374;
	mul.wide.u32 	%rd34, %r392, 4;
	add.s64 	%rd35, %rd1, %rd34;
	ld.global.v4.u32 	{%r176, %r177, %r192, %r193}, [%rd35];
	mov.u32 	%r194, 21520;
	// begin inline asm
	prmt.b32 %r200, %r72, %r73, %r194;
	// end inline asm
	mov.u32 	%r198, 30258;
	// begin inline asm
	prmt.b32 %r201, %r72, %r73, %r198;
	// end inline asm
	// begin inline asm
	prmt.b32 %r208, %r80, %r81, %r194;
	// end inline asm
	// begin inline asm
	prmt.b32 %r209, %r80, %r81, %r198;
	// end inline asm
	// begin inline asm
	prmt.b32 %r216, %r88, %r89, %r194;
	// end inline asm
	// begin inline asm
	prmt.b32 %r217, %r88, %r89, %r198;
	// end inline asm
	// begin inline asm
	prmt.b32 %r224, %r96, %r97, %r194;
	// end inline asm
	// begin inline asm
	prmt.b32 %r225, %r96, %r97, %r198;
	// end inline asm
	// begin inline asm
	prmt.b32 %r232, %r104, %r105, %r194;
	// end inline asm
	// begin inline asm
	prmt.b32 %r233, %r104, %r105, %r198;
	// end inline asm
	// begin inline asm
	prmt.b32 %r240, %r112, %r113, %r194;
	// end inline asm
	// begin inline asm
	prmt.b32 %r241, %r112, %r113, %r198;
	// end inline asm
	// begin inline asm
	prmt.b32 %r248, %r120, %r121, %r194;
	// end inline asm
	// begin inline asm
	prmt.b32 %r249, %r120, %r121, %r198;
	// end inline asm
	// begin inline asm
	prmt.b32 %r256, %r128, %r129, %r194;
	// end inline asm
	// begin inline asm
	prmt.b32 %r257, %r128, %r129, %r198;
	// end inline asm
	// begin inline asm
	prmt.b32 %r264, %r136, %r137, %r194;
	// end inline asm
	// begin inline asm
	prmt.b32 %r265, %r136, %r137, %r198;
	// end inline asm
	// begin inline asm
	prmt.b32 %r272, %r144, %r145, %r194;
	// end inline asm
	// begin inline asm
	prmt.b32 %r273, %r144, %r145, %r198;
	// end inline asm
	// begin inline asm
	prmt.b32 %r280, %r152, %r153, %r194;
	// end inline asm
	// begin inline asm
	prmt.b32 %r281, %r152, %r153, %r198;
	// end inline asm
	// begin inline asm
	prmt.b32 %r288, %r160, %r161, %r194;
	// end inline asm
	// begin inline asm
	prmt.b32 %r289, %r160, %r161, %r198;
	// end inline asm
	// begin inline asm
	prmt.b32 %r296, %r168, %r169, %r194;
	// end inline asm
	// begin inline asm
	prmt.b32 %r297, %r168, %r169, %r198;
	// end inline asm
	// begin inline asm
	prmt.b32 %r304, %r176, %r177, %r194;
	// end inline asm
	// begin inline asm
	prmt.b32 %r305, %r176, %r177, %r198;
	// end inline asm
	// begin inline asm
	prmt.b32 %r312, %r184, %r185, %r194;
	// end inline asm
	// begin inline asm
	prmt.b32 %r313, %r184, %r185, %r198;
	// end inline asm
	// begin inline asm
	prmt.b32 %r320, %r192, %r193, %r194;
	// end inline asm
	// begin inline asm
	prmt.b32 %r321, %r192, %r193, %r198;
	// end inline asm
	mov.u32 	%r322, 25152;
	// begin inline asm
	prmt.b32 %r199, %r200, %r201, %r322;
	// end inline asm
	mov.u32 	%r326, 29521;
	// begin inline asm
	prmt.b32 %r203, %r200, %r201, %r326;
	// end inline asm
	// begin inline asm
	prmt.b32 %r207, %r208, %r209, %r322;
	// end inline asm
	// begin inline asm
	prmt.b32 %r211, %r208, %r209, %r326;
	// end inline asm
	// begin inline asm
	prmt.b32 %r215, %r216, %r217, %r322;
	// end inline asm
	// begin inline asm
	prmt.b32 %r219, %r216, %r217, %r326;
	// end inline asm
	// begin inline asm
	prmt.b32 %r223, %r224, %r225, %r322;
	// end inline asm
	// begin inline asm
	prmt.b32 %r227, %r224, %r225, %r326;
	// end inline asm
	// begin inline asm
	prmt.b32 %r231, %r232, %r233, %r322;
	// end inline asm
	// begin inline asm
	prmt.b32 %r235, %r232, %r233, %r326;
	// end inline asm
	// begin inline asm
	prmt.b32 %r239, %r240, %r241, %r322;
	// end inline asm
	// begin inline asm
	prmt.b32 %r243, %r240, %r241, %r326;
	// end inline asm
	// begin inline asm
	prmt.b32 %r247, %r248, %r249, %r322;
	// end inline asm
	// begin inline asm
	prmt.b32 %r251, %r248, %r249, %r326;
	// end inline asm
	// begin inline asm
	prmt.b32 %r255, %r256, %r257, %r322;
	// end inline asm
	// begin inline asm
	prmt.b32 %r259, %r256, %r257, %r326;
	// end inline asm
	// begin inline asm
	prmt.b32 %r263, %r264, %r265, %r322;
	// end inline asm
	// begin inline asm
	prmt.b32 %r267, %r264, %r265, %r326;
	// end inline asm
	// begin inline asm
	prmt.b32 %r271, %r272, %r273, %r322;
	// end inline asm
	// begin inline asm
	prmt.b32 %r275, %r272, %r273, %r326;
	// end inline asm
	// begin inline asm
	prmt.b32 %r279, %r280, %r281, %r322;
	// end inline asm
	// begin inline asm
	prmt.b32 %r283, %r280, %r281, %r326;
	// end inline asm
	// begin inline asm
	prmt.b32 %r287, %r288, %r289, %r322;
	// end inline asm
	// begin inline asm
	prmt.b32 %r291, %r288, %r289, %r326;
	// end inline asm
	// begin inline asm
	prmt.b32 %r295, %r296, %r297, %r322;
	// end inline asm
	// begin inline asm
	prmt.b32 %r299, %r296, %r297, %r326;
	// end inline asm
	// begin inline asm
	prmt.b32 %r303, %r304, %r305, %r322;
	// end inline asm
	// begin inline asm
	prmt.b32 %r307, %r304, %r305, %r326;
	// end inline asm
	// begin inline asm
	prmt.b32 %r311, %r312, %r313, %r322;
	// end inline asm
	// begin inline asm
	prmt.b32 %r315, %r312, %r313, %r326;
	// end inline asm
	// begin inline asm
	prmt.b32 %r319, %r320, %r321, %r322;
	// end inline asm
	// begin inline asm
	prmt.b32 %r323, %r320, %r321, %r326;
	// end inline asm
	and.b32  	%r21, %r331, 2;
	setp.eq.s32 	%p3, %r21, 0;
	selp.b32 	%r393, %r231, %r199, %p3;
	shfl.sync.bfly.b32	%r394, %r393, 2, 31, -1;
	selp.b32 	%r395, %r199, %r394, %p3;
	selp.b32 	%r396, %r394, %r231, %p3;
	selp.b32 	%r397, %r239, %r207, %p3;
	shfl.sync.bfly.b32	%r398, %r397, 2, 31, -1;
	selp.b32 	%r399, %r207, %r398, %p3;
	selp.b32 	%r400, %r398, %r239, %p3;
	selp.b32 	%r401, %r235, %r203, %p3;
	shfl.sync.bfly.b32	%r402, %r401, 2, 31, -1;
	selp.b32 	%r403, %r203, %r402, %p3;
	selp.b32 	%r404, %r402, %r235, %p3;
	selp.b32 	%r405, %r243, %r211, %p3;
	shfl.sync.bfly.b32	%r406, %r405, 2, 31, -1;
	selp.b32 	%r407, %r211, %r406, %p3;
	selp.b32 	%r408, %r406, %r243, %p3;
	selp.b32 	%r409, %r247, %r215, %p3;
	shfl.sync.bfly.b32	%r410, %r409, 2, 31, -1;
	selp.b32 	%r411, %r215, %r410, %p3;
	selp.b32 	%r412, %r410, %r247, %p3;
	selp.b32 	%r413, %r255, %r223, %p3;
	shfl.sync.bfly.b32	%r414, %r413, 2, 31, -1;
	selp.b32 	%r415, %r223, %r414, %p3;
	selp.b32 	%r416, %r414, %r255, %p3;
	selp.b32 	%r417, %r251, %r219, %p3;
	shfl.sync.bfly.b32	%r418, %r417, 2, 31, -1;
	selp.b32 	%r419, %r219, %r418, %p3;
	selp.b32 	%r420, %r418, %r251, %p3;
	selp.b32 	%r421, %r259, %r227, %p3;
	shfl.sync.bfly.b32	%r422, %r421, 2, 31, -1;
	selp.b32 	%r423, %r227, %r422, %p3;
	selp.b32 	%r424, %r422, %r259, %p3;
	selp.b32 	%r425, %r295, %r263, %p3;
	shfl.sync.bfly.b32	%r426, %r425, 2, 31, -1;
	selp.b32 	%r427, %r263, %r426, %p3;
	selp.b32 	%r428, %r426, %r295, %p3;
	selp.b32 	%r429, %r303, %r271, %p3;
	shfl.sync.bfly.b32	%r430, %r429, 2, 31, -1;
	selp.b32 	%r431, %r271, %r430, %p3;
	selp.b32 	%r432, %r430, %r303, %p3;
	selp.b32 	%r433, %r299, %r267, %p3;
	shfl.sync.bfly.b32	%r434, %r433, 2, 31, -1;
	selp.b32 	%r435, %r267, %r434, %p3;
	selp.b32 	%r436, %r434, %r299, %p3;
	selp.b32 	%r437, %r307, %r275, %p3;
	shfl.sync.bfly.b32	%r438, %r437, 2, 31, -1;
	selp.b32 	%r439, %r275, %r438, %p3;
	selp.b32 	%r440, %r438, %r307, %p3;
	selp.b32 	%r441, %r311, %r279, %p3;
	shfl.sync.bfly.b32	%r442, %r441, 2, 31, -1;
	selp.b32 	%r443, %r279, %r442, %p3;
	selp.b32 	%r444, %r442, %r311, %p3;
	selp.b32 	%r445, %r319, %r287, %p3;
	shfl.sync.bfly.b32	%r446, %r445, 2, 31, -1;
	selp.b32 	%r447, %r287, %r446, %p3;
	selp.b32 	%r448, %r446, %r319, %p3;
	selp.b32 	%r449, %r315, %r283, %p3;
	shfl.sync.bfly.b32	%r450, %r449, 2, 31, -1;
	selp.b32 	%r451, %r283, %r450, %p3;
	selp.b32 	%r452, %r450, %r315, %p3;
	selp.b32 	%r453, %r323, %r291, %p3;
	shfl.sync.bfly.b32	%r454, %r453, 2, 31, -1;
	selp.b32 	%r455, %r291, %r454, %p3;
	selp.b32 	%r456, %r454, %r323, %p3;
	and.b32  	%r22, %r331, 4;
	setp.eq.s32 	%p4, %r22, 0;
	selp.b32 	%r457, %r427, %r395, %p4;
	shfl.sync.bfly.b32	%r458, %r457, 4, 31, -1;
	selp.b32 	%r23, %r395, %r458, %p4;
	selp.b32 	%r24, %r458, %r427, %p4;
	selp.b32 	%r459, %r431, %r399, %p4;
	shfl.sync.bfly.b32	%r460, %r459, 4, 31, -1;
	selp.b32 	%r25, %r399, %r460, %p4;
	selp.b32 	%r26, %r460, %r431, %p4;
	selp.b32 	%r461, %r435, %r403, %p4;
	shfl.sync.bfly.b32	%r462, %r461, 4, 31, -1;
	selp.b32 	%r27, %r403, %r462, %p4;
	selp.b32 	%r28, %r462, %r435, %p4;
	selp.b32 	%r463, %r439, %r407, %p4;
	shfl.sync.bfly.b32	%r464, %r463, 4, 31, -1;
	selp.b32 	%r29, %r407, %r464, %p4;
	selp.b32 	%r30, %r464, %r439, %p4;
	selp.b32 	%r465, %r443, %r411, %p4;
	shfl.sync.bfly.b32	%r466, %r465, 4, 31, -1;
	selp.b32 	%r31, %r411, %r466, %p4;
	selp.b32 	%r32, %r466, %r443, %p4;
	selp.b32 	%r467, %r447, %r415, %p4;
	shfl.sync.bfly.b32	%r468, %r467, 4, 31, -1;
	selp.b32 	%r33, %r415, %r468, %p4;
	selp.b32 	%r34, %r468, %r447, %p4;
	selp.b32 	%r469, %r451, %r419, %p4;
	shfl.sync.bfly.b32	%r470, %r469, 4, 31, -1;
	selp.b32 	%r35, %r419, %r470, %p4;
	selp.b32 	%r36, %r470, %r451, %p4;
	selp.b32 	%r471, %r455, %r423, %p4;
	shfl.sync.bfly.b32	%r472, %r471, 4, 31, -1;
	selp.b32 	%r37, %r423, %r472, %p4;
	selp.b32 	%r38, %r472, %r455, %p4;
	selp.b32 	%r473, %r428, %r396, %p4;
	shfl.sync.bfly.b32	%r474, %r473, 4, 31, -1;
	selp.b32 	%r39, %r396, %r474, %p4;
	selp.b32 	%r40, %r474, %r428, %p4;
	selp.b32 	%r475, %r432, %r400, %p4;
	shfl.sync.bfly.b32	%r476, %r475, 4, 31, -1;
	selp.b32 	%r41, %r400, %r476, %p4;
	selp.b32 	%r42, %r476, %r432, %p4;
	selp.b32 	%r477, %r436, %r404, %p4;
	shfl.sync.bfly.b32	%r478, %r477, 4, 31, -1;
	selp.b32 	%r43, %r404, %r478, %p4;
	selp.b32 	%r44, %r478, %r436, %p4;
	selp.b32 	%r479, %r440, %r408, %p4;
	shfl.sync.bfly.b32	%r480, %r479, 4, 31, -1;
	selp.b32 	%r45, %r408, %r480, %p4;
	selp.b32 	%r46, %r480, %r440, %p4;
	selp.b32 	%r481, %r444, %r412, %p4;
	shfl.sync.bfly.b32	%r482, %r481, 4, 31, -1;
	selp.b32 	%r47, %r412, %r482, %p4;
	selp.b32 	%r48, %r482, %r444, %p4;
	selp.b32 	%r483, %r448, %r416, %p4;
	shfl.sync.bfly.b32	%r484, %r483, 4, 31, -1;
	selp.b32 	%r49, %r416, %r484, %p4;
	selp.b32 	%r50, %r484, %r448, %p4;
	selp.b32 	%r485, %r452, %r420, %p4;
	shfl.sync.bfly.b32	%r486, %r485, 4, 31, -1;
	selp.b32 	%r51, %r420, %r486, %p4;
	selp.b32 	%r52, %r486, %r452, %p4;
	selp.b32 	%r487, %r456, %r424, %p4;
	shfl.sync.bfly.b32	%r488, %r487, 4, 31, -1;
	selp.b32 	%r53, %r424, %r488, %p4;
	selp.b32 	%r54, %r488, %r456, %p4;
	shl.b32 	%r489, %r331, 2;
	and.b32  	%r490, %r489, 28;
	shl.b32 	%r491, %r329, 5;
	and.b32  	%r492, %r491, 96;
	or.b32  	%r55, %r490, %r492;
	and.b32  	%r56, %r329, 28;
	shl.b32 	%r493, %r339, 7;
	and.b32  	%r494, %r328, 1;
	or.b32  	%r495, %r493, %r55;
	mad.lo.s32 	%r57, %r494, 5376, %r495;
	and.b32  	%r496, %r353, 24;
	or.b32  	%r58, %r492, %r496;
	bfe.u32 	%r59, %r331, 2, 3;
	and.b32  	%r497, %r329, 3;
	mul.lo.s32 	%r498, %r497, 4224;
	or.b32  	%r499, %r59, %r346;
	or.b32  	%r60, %r499, %r498;
	and.b32  	%r61, %r368, 6;
	or.b32  	%r500, %r498, %r59;
	or.b32  	%r62, %r500, %r346;
	and.b32  	%r501, %r331, 7;
	add.s32 	%r502, %r345, -1;
	mov.u32 	%r503, 1;
	shl.b32 	%r504, %r503, %r502;
	setp.gt.u32 	%p5, %r502, 31;
	selp.b32 	%r63, 0, %r504, %p5;
	min.u32 	%r64, %r345, 31;
	and.b32  	%r65, %r331, 1;
	shl.b32 	%r505, %r331, 5;
	and.b32  	%r506, %r505, 64;
	or.b32  	%r66, %r367, %r506;
	and.b32  	%r67, %r353, 32;
	shl.b32 	%r507, %r339, 14;
	shl.b32 	%r508, %r328, 13;
	and.b32  	%r509, %r508, 8192;
	or.b32  	%r510, %r507, %r509;
	mul.lo.s32 	%r511, %r501, 132;
	add.s32 	%r512, %r333, %r511;
	mul.wide.u32 	%rd36, %r512, 4;
	mov.u64 	%rd37, shmem;
	add.s64 	%rd38, %rd37, 16512;
	add.s64 	%rd5, %rd38, %rd36;
	cvt.u64.u32 	%rd39, %r511;
	cvt.u64.u32 	%rd40, %r333;
	add.s64 	%rd41, %rd40, %rd39;
	shl.b64 	%rd42, %rd41, 2;
	add.s64 	%rd6, %rd38, %rd42;
	add.s32 	%r513, %r511, 1056;
	add.s32 	%r514, %r333, %r513;
	mul.wide.u32 	%rd43, %r514, 4;
	add.s64 	%rd7, %rd38, %rd43;
	cvt.u64.u32 	%rd44, %r513;
	add.s64 	%rd45, %rd40, %rd44;
	shl.b64 	%rd46, %rd45, 2;
	add.s64 	%rd8, %rd38, %rd46;
	add.s32 	%r515, %r511, 2112;
	add.s32 	%r516, %r333, %r515;
	mul.wide.u32 	%rd47, %r516, 4;
	add.s64 	%rd9, %rd38, %rd47;
	cvt.u64.u32 	%rd48, %r515;
	add.s64 	%rd49, %rd40, %rd48;
	shl.b64 	%rd50, %rd49, 2;
	add.s64 	%rd10, %rd38, %rd50;
	add.s32 	%r517, %r511, 3168;
	add.s32 	%r518, %r333, %r517;
	mul.wide.u32 	%rd51, %r518, 4;
	add.s64 	%rd11, %rd38, %rd51;
	cvt.u64.u32 	%rd52, %r517;
	add.s64 	%rd53, %rd40, %rd52;
	shl.b64 	%rd54, %rd53, 2;
	add.s64 	%rd12, %rd38, %rd54;
	mad.lo.s32 	%r519, %r333, 688128, %r510;
	shl.b32 	%r520, %r519, 2;
	add.s32 	%r68, %r520, 4;
	mov.u32 	%r327, 0;
	mov.u32 	%r1299, %r327;
LBB0_5:                                 // %L1802
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_6 Depth 2
                                        //       Child Loop BB0_7 Depth 3
	mov.u32 	%r1300, %r327;
	mov.u32 	%r1301, %r327;
	mov.u32 	%r1302, %r327;
	mov.u32 	%r1303, %r327;
	mov.u32 	%r1304, %r327;
	mov.u32 	%r1305, %r327;
	mov.u32 	%r1306, %r327;
LBB0_6:                                 // %L1805
                                        //   Parent Loop BB0_5 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_7 Depth 3
	add.s32 	%r523, %r1300, %r1299;
	or.b32  	%r524, %r523, %r20;
	or.b32  	%r525, %r524, %r56;
	mad.lo.s32 	%r526, %r525, 10752, %r57;
	mul.wide.s32 	%rd55, %r526, 4;
	add.s64 	%rd56, %rd2, %rd55;
	ld.global.v4.u32 	{%r527, %r528, %r529, %r530}, [%rd56];
	and.b32  	%r531, %r525, 31;
	mul.lo.s32 	%r532, %r531, 129;
	add.s32 	%r533, %r55, %r532;
	mul.wide.u32 	%rd57, %r533, 4;
	add.s64 	%rd59, %rd37, %rd57;
	st.shared.u32 	[%rd59], %r527;
	cvt.u64.u32 	%rd60, %r532;
	cvt.u64.u32 	%rd61, %r55;
	add.s64 	%rd62, %rd61, %rd60;
	shl.b64 	%rd63, %rd62, 2;
	add.s64 	%rd64, %rd37, %rd63;
	st.shared.u32 	[%rd64+4], %r528;
	st.shared.u32 	[%rd64+8], %r529;
	st.shared.u32 	[%rd64+12], %r530;
	bar.sync 	0;
	mov.u32 	%r1307, %r327;
LBB0_7:                                 // %L2312
                                        //   Parent Loop BB0_5 Depth=1
                                        //     Parent Loop BB0_6 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r1058, %r1307, %r59;
	mul.lo.s32 	%r1059, %r1058, 129;
	add.s32 	%r1060, %r58, %r1059;
	mul.wide.u32 	%rd65, %r1060, 4;
	add.s64 	%rd67, %rd37, %rd65;
	ld.shared.u32 	%r535, [%rd67];
	mov.u32 	%r536, 134744072;
	mov.u32 	%r537, 252645135;
	// begin inline asm
	lop3.b32 %r534, %r535, %r536, %r537, 40;
	// end inline asm
	add.s32 	%r1061, %r534, 2021161080;
	xor.b32  	%r551, %r1061, -2139062144;
	shr.u32 	%r539, %r535, 4;
	// begin inline asm
	lop3.b32 %r538, %r539, %r536, %r537, 40;
	// end inline asm
	add.s32 	%r1062, %r538, 2021161080;
	xor.b32  	%r545, %r1062, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r542, %r543}, {%r27}, {%r545}, {%r327, %r327};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r548, %r549}, {%r23}, {%r551}, {%r327, %r327};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r554, %r555}, {%r27}, {%r551}, {%r327, %r327};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r560, %r561}, {%r23}, {%r545}, {%r554, %r555};
	// end inline asm
	cvt.u64.u32 	%rd68, %r1059;
	cvt.u64.u32 	%rd69, %r58;
	add.s64 	%rd70, %rd69, %rd68;
	shl.b64 	%rd71, %rd70, 2;
	add.s64 	%rd72, %rd37, %rd71;
	ld.shared.u32 	%r567, [%rd72+4];
	// begin inline asm
	lop3.b32 %r566, %r567, %r536, %r537, 40;
	// end inline asm
	add.s32 	%r1063, %r566, 2021161080;
	xor.b32  	%r583, %r1063, -2139062144;
	shr.u32 	%r571, %r567, 4;
	// begin inline asm
	lop3.b32 %r570, %r571, %r536, %r537, 40;
	// end inline asm
	add.s32 	%r1064, %r570, 2021161080;
	xor.b32  	%r577, %r1064, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r574, %r575}, {%r35}, {%r577}, {%r542, %r543};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r580, %r581}, {%r31}, {%r583}, {%r548, %r549};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r586, %r587}, {%r35}, {%r583}, {%r560, %r561};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r592, %r593}, {%r31}, {%r577}, {%r586, %r587};
	// end inline asm
	ld.shared.u32 	%r599, [%rd72+8];
	// begin inline asm
	lop3.b32 %r598, %r599, %r536, %r537, 40;
	// end inline asm
	add.s32 	%r1065, %r598, 2021161080;
	xor.b32  	%r615, %r1065, -2139062144;
	shr.u32 	%r603, %r599, 4;
	// begin inline asm
	lop3.b32 %r602, %r603, %r536, %r537, 40;
	// end inline asm
	add.s32 	%r1066, %r602, 2021161080;
	xor.b32  	%r609, %r1066, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r606, %r607}, {%r43}, {%r609}, {%r574, %r575};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r612, %r613}, {%r39}, {%r615}, {%r580, %r581};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r618, %r619}, {%r43}, {%r615}, {%r592, %r593};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r624, %r625}, {%r39}, {%r609}, {%r618, %r619};
	// end inline asm
	ld.shared.u32 	%r631, [%rd72+12];
	// begin inline asm
	lop3.b32 %r630, %r631, %r536, %r537, 40;
	// end inline asm
	add.s32 	%r1067, %r630, 2021161080;
	xor.b32  	%r647, %r1067, -2139062144;
	shr.u32 	%r635, %r631, 4;
	// begin inline asm
	lop3.b32 %r634, %r635, %r536, %r537, 40;
	// end inline asm
	add.s32 	%r1068, %r634, 2021161080;
	xor.b32  	%r641, %r1068, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r638, %r639}, {%r51}, {%r641}, {%r606, %r607};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r644, %r645}, {%r47}, {%r647}, {%r612, %r613};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r650, %r651}, {%r51}, {%r647}, {%r624, %r625};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r656, %r657}, {%r47}, {%r641}, {%r650, %r651};
	// end inline asm
	ld.shared.u32 	%r663, [%rd72+16];
	// begin inline asm
	lop3.b32 %r662, %r663, %r536, %r537, 40;
	// end inline asm
	add.s32 	%r1069, %r662, 2021161080;
	xor.b32  	%r679, %r1069, -2139062144;
	shr.u32 	%r667, %r663, 4;
	// begin inline asm
	lop3.b32 %r666, %r667, %r536, %r537, 40;
	// end inline asm
	add.s32 	%r1070, %r666, 2021161080;
	xor.b32  	%r673, %r1070, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r670, %r671}, {%r28}, {%r673}, {%r638, %r639};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r676, %r677}, {%r24}, {%r679}, {%r644, %r645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r682, %r683}, {%r28}, {%r679}, {%r656, %r657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r688, %r689}, {%r24}, {%r673}, {%r682, %r683};
	// end inline asm
	ld.shared.u32 	%r695, [%rd72+20];
	// begin inline asm
	lop3.b32 %r694, %r695, %r536, %r537, 40;
	// end inline asm
	add.s32 	%r1071, %r694, 2021161080;
	xor.b32  	%r711, %r1071, -2139062144;
	shr.u32 	%r699, %r695, 4;
	// begin inline asm
	lop3.b32 %r698, %r699, %r536, %r537, 40;
	// end inline asm
	add.s32 	%r1072, %r698, 2021161080;
	xor.b32  	%r705, %r1072, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r702, %r703}, {%r36}, {%r705}, {%r670, %r671};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r708, %r709}, {%r32}, {%r711}, {%r676, %r677};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r714, %r715}, {%r36}, {%r711}, {%r688, %r689};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r720, %r721}, {%r32}, {%r705}, {%r714, %r715};
	// end inline asm
	ld.shared.u32 	%r727, [%rd72+24];
	// begin inline asm
	lop3.b32 %r726, %r727, %r536, %r537, 40;
	// end inline asm
	add.s32 	%r1073, %r726, 2021161080;
	xor.b32  	%r743, %r1073, -2139062144;
	shr.u32 	%r731, %r727, 4;
	// begin inline asm
	lop3.b32 %r730, %r731, %r536, %r537, 40;
	// end inline asm
	add.s32 	%r1074, %r730, 2021161080;
	xor.b32  	%r737, %r1074, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r734, %r735}, {%r44}, {%r737}, {%r702, %r703};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r740, %r741}, {%r40}, {%r743}, {%r708, %r709};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r746, %r747}, {%r44}, {%r743}, {%r720, %r721};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r752, %r753}, {%r40}, {%r737}, {%r746, %r747};
	// end inline asm
	ld.shared.u32 	%r759, [%rd72+28];
	// begin inline asm
	lop3.b32 %r758, %r759, %r536, %r537, 40;
	// end inline asm
	add.s32 	%r1075, %r758, 2021161080;
	xor.b32  	%r775, %r1075, -2139062144;
	shr.u32 	%r763, %r759, 4;
	// begin inline asm
	lop3.b32 %r762, %r763, %r536, %r537, 40;
	// end inline asm
	add.s32 	%r1076, %r762, 2021161080;
	xor.b32  	%r769, %r1076, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r766, %r767}, {%r52}, {%r769}, {%r734, %r735};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r772, %r773}, {%r48}, {%r775}, {%r740, %r741};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r778, %r779}, {%r52}, {%r775}, {%r752, %r753};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r784, %r785}, {%r48}, {%r769}, {%r778, %r779};
	// end inline asm
	add.s32 	%r1077, %r784, 4;
	shr.s32 	%r792, %r1077, 3;
	sub.s32 	%r1078, %r766, %r772;
	add.s32 	%r1079, %r1078, 4;
	shr.s32 	%r791, %r1079, 3;
	add.s32 	%r1080, %r785, 4;
	shr.s32 	%r795, %r1080, 3;
	sub.s32 	%r1081, %r767, %r773;
	add.s32 	%r1082, %r1081, 4;
	shr.s32 	%r794, %r1082, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r790, %r791, %r792;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r793, %r794, %r795;
	// end inline asm
	or.b32  	%r1083, %r1307, %r61;
	mul.lo.s32 	%r1084, %r1083, 132;
	add.s32 	%r1085, %r60, %r1084;
	mul.wide.u32 	%rd73, %r1085, 4;
	add.s64 	%rd75, %rd38, %rd73;
	st.shared.u32 	[%rd75], %r790;
	add.s32 	%r1086, %r1084, 132;
	add.s32 	%r1087, %r60, %r1086;
	mul.wide.u32 	%rd76, %r1087, 4;
	add.s64 	%rd77, %rd38, %rd76;
	st.shared.u32 	[%rd77], %r793;
	ld.shared.u32 	%r797, [%rd67];
	// begin inline asm
	lop3.b32 %r796, %r797, %r536, %r537, 40;
	// end inline asm
	add.s32 	%r1088, %r796, 2021161080;
	xor.b32  	%r813, %r1088, -2139062144;
	shr.u32 	%r801, %r797, 4;
	// begin inline asm
	lop3.b32 %r800, %r801, %r536, %r537, 40;
	// end inline asm
	add.s32 	%r1089, %r800, 2021161080;
	xor.b32  	%r807, %r1089, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r804, %r805}, {%r29}, {%r807}, {%r327, %r327};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r810, %r811}, {%r25}, {%r813}, {%r327, %r327};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r816, %r817}, {%r29}, {%r813}, {%r327, %r327};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r822, %r823}, {%r25}, {%r807}, {%r816, %r817};
	// end inline asm
	ld.shared.u32 	%r829, [%rd72+4];
	// begin inline asm
	lop3.b32 %r828, %r829, %r536, %r537, 40;
	// end inline asm
	add.s32 	%r1090, %r828, 2021161080;
	xor.b32  	%r845, %r1090, -2139062144;
	shr.u32 	%r833, %r829, 4;
	// begin inline asm
	lop3.b32 %r832, %r833, %r536, %r537, 40;
	// end inline asm
	add.s32 	%r1091, %r832, 2021161080;
	xor.b32  	%r839, %r1091, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r836, %r837}, {%r37}, {%r839}, {%r804, %r805};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r842, %r843}, {%r33}, {%r845}, {%r810, %r811};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r848, %r849}, {%r37}, {%r845}, {%r822, %r823};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r854, %r855}, {%r33}, {%r839}, {%r848, %r849};
	// end inline asm
	ld.shared.u32 	%r861, [%rd72+8];
	// begin inline asm
	lop3.b32 %r860, %r861, %r536, %r537, 40;
	// end inline asm
	add.s32 	%r1092, %r860, 2021161080;
	xor.b32  	%r877, %r1092, -2139062144;
	shr.u32 	%r865, %r861, 4;
	// begin inline asm
	lop3.b32 %r864, %r865, %r536, %r537, 40;
	// end inline asm
	add.s32 	%r1093, %r864, 2021161080;
	xor.b32  	%r871, %r1093, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r868, %r869}, {%r45}, {%r871}, {%r836, %r837};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r874, %r875}, {%r41}, {%r877}, {%r842, %r843};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r880, %r881}, {%r45}, {%r877}, {%r854, %r855};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r886, %r887}, {%r41}, {%r871}, {%r880, %r881};
	// end inline asm
	ld.shared.u32 	%r893, [%rd72+12];
	// begin inline asm
	lop3.b32 %r892, %r893, %r536, %r537, 40;
	// end inline asm
	add.s32 	%r1094, %r892, 2021161080;
	xor.b32  	%r909, %r1094, -2139062144;
	shr.u32 	%r897, %r893, 4;
	// begin inline asm
	lop3.b32 %r896, %r897, %r536, %r537, 40;
	// end inline asm
	add.s32 	%r1095, %r896, 2021161080;
	xor.b32  	%r903, %r1095, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r900, %r901}, {%r53}, {%r903}, {%r868, %r869};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r906, %r907}, {%r49}, {%r909}, {%r874, %r875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r912, %r913}, {%r53}, {%r909}, {%r886, %r887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r918, %r919}, {%r49}, {%r903}, {%r912, %r913};
	// end inline asm
	ld.shared.u32 	%r925, [%rd72+16];
	// begin inline asm
	lop3.b32 %r924, %r925, %r536, %r537, 40;
	// end inline asm
	add.s32 	%r1096, %r924, 2021161080;
	xor.b32  	%r941, %r1096, -2139062144;
	shr.u32 	%r929, %r925, 4;
	// begin inline asm
	lop3.b32 %r928, %r929, %r536, %r537, 40;
	// end inline asm
	add.s32 	%r1097, %r928, 2021161080;
	xor.b32  	%r935, %r1097, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r932, %r933}, {%r30}, {%r935}, {%r900, %r901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r938, %r939}, {%r26}, {%r941}, {%r906, %r907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r944, %r945}, {%r30}, {%r941}, {%r918, %r919};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r950, %r951}, {%r26}, {%r935}, {%r944, %r945};
	// end inline asm
	ld.shared.u32 	%r957, [%rd72+20];
	// begin inline asm
	lop3.b32 %r956, %r957, %r536, %r537, 40;
	// end inline asm
	add.s32 	%r1098, %r956, 2021161080;
	xor.b32  	%r973, %r1098, -2139062144;
	shr.u32 	%r961, %r957, 4;
	// begin inline asm
	lop3.b32 %r960, %r961, %r536, %r537, 40;
	// end inline asm
	add.s32 	%r1099, %r960, 2021161080;
	xor.b32  	%r967, %r1099, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r964, %r965}, {%r38}, {%r967}, {%r932, %r933};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r970, %r971}, {%r34}, {%r973}, {%r938, %r939};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r976, %r977}, {%r38}, {%r973}, {%r950, %r951};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r982, %r983}, {%r34}, {%r967}, {%r976, %r977};
	// end inline asm
	ld.shared.u32 	%r989, [%rd72+24];
	// begin inline asm
	lop3.b32 %r988, %r989, %r536, %r537, 40;
	// end inline asm
	add.s32 	%r1100, %r988, 2021161080;
	xor.b32  	%r1005, %r1100, -2139062144;
	shr.u32 	%r993, %r989, 4;
	// begin inline asm
	lop3.b32 %r992, %r993, %r536, %r537, 40;
	// end inline asm
	add.s32 	%r1101, %r992, 2021161080;
	xor.b32  	%r999, %r1101, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r996, %r997}, {%r46}, {%r999}, {%r964, %r965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1002, %r1003}, {%r42}, {%r1005}, {%r970, %r971};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1008, %r1009}, {%r46}, {%r1005}, {%r982, %r983};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1014, %r1015}, {%r42}, {%r999}, {%r1008, %r1009};
	// end inline asm
	ld.shared.u32 	%r1021, [%rd72+28];
	// begin inline asm
	lop3.b32 %r1020, %r1021, %r536, %r537, 40;
	// end inline asm
	add.s32 	%r1102, %r1020, 2021161080;
	xor.b32  	%r1037, %r1102, -2139062144;
	shr.u32 	%r1025, %r1021, 4;
	// begin inline asm
	lop3.b32 %r1024, %r1025, %r536, %r537, 40;
	// end inline asm
	add.s32 	%r1103, %r1024, 2021161080;
	xor.b32  	%r1031, %r1103, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1028, %r1029}, {%r54}, {%r1031}, {%r996, %r997};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1034, %r1035}, {%r50}, {%r1037}, {%r1002, %r1003};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1040, %r1041}, {%r54}, {%r1037}, {%r1014, %r1015};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1046, %r1047}, {%r50}, {%r1031}, {%r1040, %r1041};
	// end inline asm
	add.s32 	%r1104, %r1046, 4;
	shr.s32 	%r1054, %r1104, 3;
	sub.s32 	%r1105, %r1028, %r1034;
	add.s32 	%r1106, %r1105, 4;
	shr.s32 	%r1053, %r1106, 3;
	add.s32 	%r1107, %r1047, 4;
	shr.s32 	%r1057, %r1107, 3;
	sub.s32 	%r1108, %r1029, %r1035;
	add.s32 	%r1109, %r1108, 4;
	shr.s32 	%r1056, %r1109, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1052, %r1053, %r1054;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1055, %r1056, %r1057;
	// end inline asm
	cvt.u64.u32 	%rd78, %r1084;
	cvt.u64.u32 	%rd79, %r62;
	add.s64 	%rd80, %rd79, %rd78;
	shl.b64 	%rd81, %rd80, 2;
	add.s64 	%rd82, %rd38, %rd81;
	st.shared.u32 	[%rd82+32], %r1052;
	cvt.u64.u32 	%rd83, %r1086;
	add.s64 	%rd84, %rd79, %rd83;
	shl.b64 	%rd85, %rd84, 2;
	add.s64 	%rd86, %rd38, %rd85;
	st.shared.u32 	[%rd86+32], %r1055;
	add.s32 	%r1307, %r1307, 8;
	setp.ne.s32 	%p6, %r1307, 32;
	@%p6 bra 	LBB0_7;
// %bb.8:                               // %L5102
                                        //   in Loop: Header=BB0_6 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1128, [%rd5];
	ld.shared.u32 	%r1129, [%rd6+16896];
	ld.shared.u32 	%r1130, [%rd6+33792];
	ld.shared.u32 	%r1131, [%rd6+50688];
	ld.shared.u32 	%r1132, [%rd7];
	ld.shared.u32 	%r1133, [%rd8+16896];
	ld.shared.u32 	%r1134, [%rd8+33792];
	ld.shared.u32 	%r1135, [%rd8+50688];
	ld.shared.u32 	%r1136, [%rd9];
	ld.shared.u32 	%r1137, [%rd10+16896];
	ld.shared.u32 	%r1138, [%rd10+33792];
	ld.shared.u32 	%r1139, [%rd10+50688];
	ld.shared.u32 	%r1140, [%rd11];
	ld.shared.u32 	%r1141, [%rd12+16896];
	ld.shared.u32 	%r1142, [%rd12+33792];
	ld.shared.u32 	%r1143, [%rd12+50688];
	cvt.s32.s16 	%r1144, %r1128;
	shr.s32 	%r1145, %r1128, 16;
	cvt.s32.s16 	%r1146, %r1129;
	shr.s32 	%r1147, %r1129, 16;
	cvt.s32.s16 	%r1148, %r1130;
	shr.s32 	%r1149, %r1130, 16;
	cvt.s32.s16 	%r1150, %r1131;
	shr.s32 	%r1151, %r1131, 16;
	cvt.s32.s16 	%r1152, %r1132;
	shr.s32 	%r1153, %r1132, 16;
	cvt.s32.s16 	%r1154, %r1133;
	shr.s32 	%r1155, %r1133, 16;
	cvt.s32.s16 	%r1156, %r1134;
	shr.s32 	%r1157, %r1134, 16;
	cvt.s32.s16 	%r1158, %r1135;
	shr.s32 	%r1159, %r1135, 16;
	cvt.s32.s16 	%r1160, %r1136;
	shr.s32 	%r1161, %r1136, 16;
	cvt.s32.s16 	%r1162, %r1137;
	shr.s32 	%r1163, %r1137, 16;
	cvt.s32.s16 	%r1164, %r1138;
	shr.s32 	%r1165, %r1138, 16;
	cvt.s32.s16 	%r1166, %r1139;
	shr.s32 	%r1167, %r1139, 16;
	cvt.s32.s16 	%r1168, %r1140;
	shr.s32 	%r1169, %r1140, 16;
	cvt.s32.s16 	%r1170, %r1141;
	shr.s32 	%r1171, %r1141, 16;
	cvt.s32.s16 	%r1172, %r1142;
	shr.s32 	%r1173, %r1142, 16;
	cvt.s32.s16 	%r1174, %r1143;
	shr.s32 	%r1175, %r1143, 16;
	add.s32 	%r1176, %r1144, %r63;
	add.s32 	%r1177, %r1176, %r1146;
	add.s32 	%r1178, %r1177, %r1148;
	add.s32 	%r1179, %r1178, %r1150;
	shr.s32 	%r1180, %r1179, %r64;
	add.s32 	%r1181, %r1145, %r63;
	add.s32 	%r1182, %r1181, %r1147;
	add.s32 	%r1183, %r1182, %r1149;
	add.s32 	%r1184, %r1183, %r1151;
	shr.s32 	%r1185, %r1184, %r64;
	add.s32 	%r1186, %r1152, %r63;
	add.s32 	%r1187, %r1186, %r1154;
	add.s32 	%r1188, %r1187, %r1156;
	add.s32 	%r1189, %r1188, %r1158;
	shr.s32 	%r1190, %r1189, %r64;
	add.s32 	%r1191, %r1153, %r63;
	add.s32 	%r1192, %r1191, %r1155;
	add.s32 	%r1193, %r1192, %r1157;
	add.s32 	%r1194, %r1193, %r1159;
	shr.s32 	%r1195, %r1194, %r64;
	add.s32 	%r1196, %r1160, %r63;
	add.s32 	%r1197, %r1196, %r1162;
	add.s32 	%r1198, %r1197, %r1164;
	add.s32 	%r1199, %r1198, %r1166;
	shr.s32 	%r1200, %r1199, %r64;
	add.s32 	%r1201, %r1161, %r63;
	add.s32 	%r1202, %r1201, %r1163;
	add.s32 	%r1203, %r1202, %r1165;
	add.s32 	%r1204, %r1203, %r1167;
	shr.s32 	%r1205, %r1204, %r64;
	add.s32 	%r1206, %r1168, %r63;
	add.s32 	%r1207, %r1206, %r1170;
	add.s32 	%r1208, %r1207, %r1172;
	add.s32 	%r1209, %r1208, %r1174;
	shr.s32 	%r1210, %r1209, %r64;
	add.s32 	%r1211, %r1169, %r63;
	add.s32 	%r1212, %r1211, %r1171;
	add.s32 	%r1213, %r1212, %r1173;
	add.s32 	%r1214, %r1213, %r1175;
	shr.s32 	%r1215, %r1214, %r64;
	max.s32 	%r1216, %r1180, -7;
	min.s32 	%r1115, %r1216, 7;
	max.s32 	%r1217, %r1185, -7;
	min.s32 	%r1122, %r1217, 7;
	max.s32 	%r1218, %r1190, -7;
	min.s32 	%r1114, %r1218, 7;
	max.s32 	%r1219, %r1195, -7;
	min.s32 	%r1121, %r1219, 7;
	max.s32 	%r1220, %r1200, -7;
	min.s32 	%r1112, %r1220, 7;
	max.s32 	%r1221, %r1205, -7;
	min.s32 	%r1119, %r1221, 7;
	max.s32 	%r1222, %r1210, -7;
	min.s32 	%r1111, %r1222, 7;
	max.s32 	%r1223, %r1215, -7;
	min.s32 	%r1118, %r1223, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1110, %r1111, %r1112, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1113, %r1114, %r1115, %r1110;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1117, %r1118, %r1119, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1120, %r1121, %r1122, %r1117;
	// end inline asm
	shl.b32 	%r1127, %r1120, 4;
	// begin inline asm
	lop3.b32 %r1234, %r537, %r1113, %r1127, 202;
	// end inline asm
	setp.eq.s32 	%p7, %r1300, 0;
	selp.b32 	%r1305, %r1234, %r1305, %p7;
	selp.b32 	%r1306, %r1234, %r1306, %p7;
	setp.eq.s32 	%p8, %r1300, 32;
	selp.b32 	%r1301, %r1234, %r1301, %p8;
	selp.b32 	%r1302, %r1234, %r1302, %p8;
	setp.eq.s32 	%p9, %r1300, 64;
	selp.b32 	%r1303, %r1234, %r1303, %p9;
	selp.b32 	%r1304, %r1234, %r1304, %p9;
	add.s32 	%r18, %r1300, 32;
	setp.ne.s32 	%p10, %r1300, 96;
	mov.u32 	%r1300, %r18;
	@%p10 bra 	LBB0_6;
// %bb.9:                               // %L6625
                                        //   in Loop: Header=BB0_5 Depth=1
	setp.eq.s32 	%p11, %r65, 0;
	// begin inline asm
	prmt.b32 %r1224, %r1305, %r1301, %r322;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1228, %r1306, %r1302, %r326;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1232, %r1303, %r1234, %r322;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1236, %r1304, %r1234, %r326;
	// end inline asm
	selp.b32 	%r1272, %r1228, %r1224, %p11;
	shfl.sync.bfly.b32	%r1273, %r1272, 1, 31, -1;
	selp.b32 	%r1241, %r1224, %r1273, %p11;
	selp.b32 	%r1242, %r1273, %r1228, %p11;
	selp.b32 	%r1274, %r1236, %r1232, %p11;
	shfl.sync.bfly.b32	%r1275, %r1274, 1, 31, -1;
	selp.b32 	%r1249, %r1232, %r1275, %p11;
	selp.b32 	%r1250, %r1275, %r1236, %p11;
	// begin inline asm
	prmt.b32 %r1240, %r1241, %r1242, %r322;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1244, %r1241, %r1242, %r326;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1248, %r1249, %r1250, %r322;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1252, %r1249, %r1250, %r326;
	// end inline asm
	selp.b32 	%r1276, %r1248, %r1240, %p3;
	shfl.sync.bfly.b32	%r1277, %r1276, 2, 31, -1;
	selp.b32 	%r1257, %r1240, %r1277, %p3;
	selp.b32 	%r1258, %r1277, %r1248, %p3;
	selp.b32 	%r1278, %r1252, %r1244, %p3;
	shfl.sync.bfly.b32	%r1279, %r1278, 2, 31, -1;
	selp.b32 	%r1265, %r1244, %r1279, %p3;
	selp.b32 	%r1266, %r1279, %r1252, %p3;
	// begin inline asm
	prmt.b32 %r1256, %r1257, %r1258, %r194;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1260, %r1257, %r1258, %r198;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1264, %r1265, %r1266, %r194;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1268, %r1265, %r1266, %r198;
	// end inline asm
	selp.b32 	%r1280, %r1264, %r1256, %p4;
	shfl.sync.bfly.b32	%r1281, %r1280, 4, 31, -1;
	selp.b32 	%r1282, %r1256, %r1281, %p4;
	selp.b32 	%r1283, %r1281, %r1264, %p4;
	selp.b32 	%r1284, %r1268, %r1260, %p4;
	shfl.sync.bfly.b32	%r1285, %r1284, 4, 31, -1;
	selp.b32 	%r1286, %r1260, %r1285, %p4;
	selp.b32 	%r1287, %r1285, %r1268, %p4;
	selp.b32 	%r1288, %r1286, %r1282, %p11;
	shfl.sync.bfly.b32	%r1289, %r1288, 1, 31, -1;
	selp.b32 	%r1290, %r1282, %r1289, %p11;
	selp.b32 	%r1291, %r1289, %r1286, %p11;
	selp.b32 	%r1292, %r1287, %r1283, %p11;
	shfl.sync.bfly.b32	%r1293, %r1292, 1, 31, -1;
	selp.b32 	%r1294, %r1283, %r1293, %p11;
	selp.b32 	%r1295, %r1293, %r1287, %p11;
	or.b32  	%r1296, %r66, %r1299;
	or.b32  	%r1297, %r1296, %r67;
	add.s32 	%r1298, %r68, %r1297;
	cvt.u64.u32 	%rd87, %r1298;
	add.s64 	%rd88, %rd4, %rd87;
	st.global.v4.u32 	[%rd88+-4], {%r1290, %r1294, %r1291, %r1295};
	add.s32 	%r19, %r1299, 128;
	setp.ne.s32 	%p14, %r1299, 32640;
	mov.u32 	%r1299, %r19;
	@%p14 bra 	LBB0_5;
// %bb.10:                              // %L6966
	ret;
LBB0_1:                                 // %L9
	mov.u64 	%rd14, exception1667;
	cvta.global.u64 	%rd15, %rd14;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd15;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd13;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	// begin inline asm
	exit;
	// end inline asm
LBB0_3:                                 // %L28
	mov.u64 	%rd16, exception1667;
	cvta.global.u64 	%rd17, %rd16;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd17;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd13;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
