// PTX CompilerJob of kernel #bb(CuDeviceVector{Int8x4, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Int32, 1}, CuDeviceVector{Int4x8, 1}) for sm_86, minthreads=1024, blocks_per_sm=1, always_inline=false

//
// Generated by LLVM NVPTX Back-End
//

.version 7.1
.target sm_86
.address_size 64

	// .globl	_Z13julia_bb_451513CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EE // -- Begin function _Z13julia_bb_451513CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[8]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z13julia_bb_451513CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EE
.visible .entry _Z13julia_bb_451513CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EE(
	.param .align 8 .b8 _Z13julia_bb_451513CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EE_param_0[8],
	.param .align 8 .b8 _Z13julia_bb_451513CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z13julia_bb_451513CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z13julia_bb_451513CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z13julia_bb_451513CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EE_param_4[32]
)
.reqntid 1024, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<16>;
	.reg .b32 	%r<1292>;
	.reg .b64 	%rd<87>;

// %bb.0:                               // %conversion
	ld.param.u64 	%rd13, [_Z13julia_bb_451513CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r72, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r72, 16511;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L11
	// begin inline asm
	mov.u32 %r73, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r73, 84095;
	@%p2 bra 	LBB0_4;
	bra.uni 	LBB0_3;
LBB0_4:                                 // %pass16
	ld.param.u64 	%rd1, [_Z13julia_bb_451513CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EE_param_1];
	ld.param.u64 	%rd2, [_Z13julia_bb_451513CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EE_param_2];
	ld.param.u64 	%rd3, [_Z13julia_bb_451513CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z13julia_bb_451513CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EE_param_4];
	mov.u32 	%r331, %tid.x;
	mov.u32 	%r21, %tid.y;
	shl.b32 	%r332, %r21, 2;
	mov.u32 	%r333, %ctaid.x;
	shl.b32 	%r334, %r333, 7;
	and.b32  	%r335, %r334, 3840;
	bfe.u32 	%r22, %r331, 3, 2;
	and.b32  	%r336, %r332, 124;
	or.b32  	%r337, %r336, %r22;
	or.b32  	%r338, %r337, %r335;
	and.b32  	%r339, %r334, 128;
	or.b32  	%r340, %r338, %r339;
	mul.wide.u32 	%rd18, %r340, 4;
	add.s64 	%rd19, %rd3, %rd18;
	ld.global.u32 	%r341, [%rd19];
	add.s32 	%r342, %r341, -3;
	shl.b32 	%r343, %r333, 17;
	and.b32  	%r344, %r332, 112;
	shr.u32 	%r345, %r331, 2;
	and.b32  	%r346, %r345, 6;
	or.b32  	%r347, %r344, %r346;
	shl.b32 	%r348, %r347, 10;
	shl.b32 	%r349, %r331, 6;
	and.b32  	%r350, %r349, 64;
	shl.b32 	%r351, %r21, 8;
	shl.b32 	%r352, %r331, 3;
	and.b32  	%r353, %r352, 48;
	and.b32  	%r354, %r351, 768;
	and.b32  	%r355, %r343, 4063232;
	or.b32  	%r356, %r355, %r348;
	or.b32  	%r357, %r356, %r350;
	or.b32  	%r358, %r357, %r354;
	or.b32  	%r359, %r358, %r353;
	cvt.u64.u32 	%rd20, %r359;
	add.s64 	%rd21, %rd1, %rd20;
	ld.global.v4.u32 	{%r75, %r76, %r91, %r92}, [%rd21];
	shl.b32 	%r360, %r333, 15;
	shl.b32 	%r361, %r347, 8;
	shl.b32 	%r362, %r331, 4;
	and.b32  	%r23, %r362, 16;
	shl.b32 	%r363, %r21, 6;
	shl.b32 	%r364, %r331, 1;
	and.b32  	%r365, %r364, 12;
	and.b32  	%r366, %r363, 192;
	or.b32  	%r367, %r360, %r362;
	and.b32  	%r368, %r367, 1015824;
	or.b32  	%r369, %r368, %r361;
	or.b32  	%r370, %r369, %r366;
	or.b32  	%r371, %r370, %r365;
	or.b32  	%r372, %r371, 2048;
	mul.wide.u32 	%rd22, %r372, 4;
	add.s64 	%rd23, %rd1, %rd22;
	ld.global.v4.u32 	{%r83, %r84, %r99, %r100}, [%rd23];
	ld.global.v4.u32 	{%r107, %r108, %r123, %r124}, [%rd21+128];
	or.b32  	%r373, %r371, 2080;
	mul.wide.u32 	%rd24, %r373, 4;
	add.s64 	%rd25, %rd1, %rd24;
	ld.global.v4.u32 	{%r115, %r116, %r131, %r132}, [%rd25];
	or.b32  	%r374, %r371, 256;
	mul.wide.u32 	%rd26, %r374, 4;
	add.s64 	%rd27, %rd1, %rd26;
	ld.global.v4.u32 	{%r139, %r140, %r155, %r156}, [%rd27];
	or.b32  	%r375, %r371, 2304;
	mul.wide.u32 	%rd28, %r375, 4;
	add.s64 	%rd29, %rd1, %rd28;
	ld.global.v4.u32 	{%r147, %r148, %r163, %r164}, [%rd29];
	or.b32  	%r376, %r371, 288;
	mul.wide.u32 	%rd30, %r376, 4;
	add.s64 	%rd31, %rd1, %rd30;
	ld.global.v4.u32 	{%r171, %r172, %r187, %r188}, [%rd31];
	or.b32  	%r377, %r371, 2336;
	mul.wide.u32 	%rd32, %r377, 4;
	add.s64 	%rd33, %rd1, %rd32;
	ld.global.v4.u32 	{%r179, %r180, %r195, %r196}, [%rd33];
	mov.u32 	%r197, 21520;
	// begin inline asm
	prmt.b32 %r203, %r75, %r76, %r197;
	// end inline asm
	mov.u32 	%r201, 30258;
	// begin inline asm
	prmt.b32 %r204, %r75, %r76, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r211, %r83, %r84, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r212, %r83, %r84, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r219, %r91, %r92, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r220, %r91, %r92, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r227, %r99, %r100, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r228, %r99, %r100, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r235, %r107, %r108, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r236, %r107, %r108, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r243, %r115, %r116, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r244, %r115, %r116, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r251, %r123, %r124, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r252, %r123, %r124, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r259, %r131, %r132, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r260, %r131, %r132, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r267, %r139, %r140, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r268, %r139, %r140, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r275, %r147, %r148, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r276, %r147, %r148, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r283, %r155, %r156, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r284, %r155, %r156, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r291, %r163, %r164, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r292, %r163, %r164, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r299, %r171, %r172, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r300, %r171, %r172, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r307, %r179, %r180, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r308, %r179, %r180, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r315, %r187, %r188, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r316, %r187, %r188, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r323, %r195, %r196, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r324, %r195, %r196, %r201;
	// end inline asm
	mov.u32 	%r325, 25152;
	// begin inline asm
	prmt.b32 %r202, %r203, %r204, %r325;
	// end inline asm
	mov.u32 	%r329, 29521;
	// begin inline asm
	prmt.b32 %r206, %r203, %r204, %r329;
	// end inline asm
	// begin inline asm
	prmt.b32 %r210, %r211, %r212, %r325;
	// end inline asm
	// begin inline asm
	prmt.b32 %r214, %r211, %r212, %r329;
	// end inline asm
	// begin inline asm
	prmt.b32 %r218, %r219, %r220, %r325;
	// end inline asm
	// begin inline asm
	prmt.b32 %r222, %r219, %r220, %r329;
	// end inline asm
	// begin inline asm
	prmt.b32 %r226, %r227, %r228, %r325;
	// end inline asm
	// begin inline asm
	prmt.b32 %r230, %r227, %r228, %r329;
	// end inline asm
	// begin inline asm
	prmt.b32 %r234, %r235, %r236, %r325;
	// end inline asm
	// begin inline asm
	prmt.b32 %r238, %r235, %r236, %r329;
	// end inline asm
	// begin inline asm
	prmt.b32 %r242, %r243, %r244, %r325;
	// end inline asm
	// begin inline asm
	prmt.b32 %r246, %r243, %r244, %r329;
	// end inline asm
	// begin inline asm
	prmt.b32 %r250, %r251, %r252, %r325;
	// end inline asm
	// begin inline asm
	prmt.b32 %r254, %r251, %r252, %r329;
	// end inline asm
	// begin inline asm
	prmt.b32 %r258, %r259, %r260, %r325;
	// end inline asm
	// begin inline asm
	prmt.b32 %r262, %r259, %r260, %r329;
	// end inline asm
	// begin inline asm
	prmt.b32 %r266, %r267, %r268, %r325;
	// end inline asm
	// begin inline asm
	prmt.b32 %r270, %r267, %r268, %r329;
	// end inline asm
	// begin inline asm
	prmt.b32 %r274, %r275, %r276, %r325;
	// end inline asm
	// begin inline asm
	prmt.b32 %r278, %r275, %r276, %r329;
	// end inline asm
	// begin inline asm
	prmt.b32 %r282, %r283, %r284, %r325;
	// end inline asm
	// begin inline asm
	prmt.b32 %r286, %r283, %r284, %r329;
	// end inline asm
	// begin inline asm
	prmt.b32 %r290, %r291, %r292, %r325;
	// end inline asm
	// begin inline asm
	prmt.b32 %r294, %r291, %r292, %r329;
	// end inline asm
	// begin inline asm
	prmt.b32 %r298, %r299, %r300, %r325;
	// end inline asm
	// begin inline asm
	prmt.b32 %r302, %r299, %r300, %r329;
	// end inline asm
	// begin inline asm
	prmt.b32 %r306, %r307, %r308, %r325;
	// end inline asm
	// begin inline asm
	prmt.b32 %r310, %r307, %r308, %r329;
	// end inline asm
	// begin inline asm
	prmt.b32 %r314, %r315, %r316, %r325;
	// end inline asm
	// begin inline asm
	prmt.b32 %r318, %r315, %r316, %r329;
	// end inline asm
	// begin inline asm
	prmt.b32 %r322, %r323, %r324, %r325;
	// end inline asm
	// begin inline asm
	prmt.b32 %r326, %r323, %r324, %r329;
	// end inline asm
	and.b32  	%r24, %r331, 2;
	setp.eq.s32 	%p3, %r24, 0;
	selp.b32 	%r378, %r234, %r202, %p3;
	shfl.sync.bfly.b32	%r379, %r378, 2, 31, -1;
	selp.b32 	%r380, %r202, %r379, %p3;
	selp.b32 	%r381, %r379, %r234, %p3;
	selp.b32 	%r382, %r242, %r210, %p3;
	shfl.sync.bfly.b32	%r383, %r382, 2, 31, -1;
	selp.b32 	%r384, %r210, %r383, %p3;
	selp.b32 	%r385, %r383, %r242, %p3;
	selp.b32 	%r386, %r238, %r206, %p3;
	shfl.sync.bfly.b32	%r387, %r386, 2, 31, -1;
	selp.b32 	%r388, %r206, %r387, %p3;
	selp.b32 	%r389, %r387, %r238, %p3;
	selp.b32 	%r390, %r246, %r214, %p3;
	shfl.sync.bfly.b32	%r391, %r390, 2, 31, -1;
	selp.b32 	%r392, %r214, %r391, %p3;
	selp.b32 	%r393, %r391, %r246, %p3;
	selp.b32 	%r394, %r250, %r218, %p3;
	shfl.sync.bfly.b32	%r395, %r394, 2, 31, -1;
	selp.b32 	%r396, %r218, %r395, %p3;
	selp.b32 	%r397, %r395, %r250, %p3;
	selp.b32 	%r398, %r258, %r226, %p3;
	shfl.sync.bfly.b32	%r399, %r398, 2, 31, -1;
	selp.b32 	%r400, %r226, %r399, %p3;
	selp.b32 	%r401, %r399, %r258, %p3;
	selp.b32 	%r402, %r254, %r222, %p3;
	shfl.sync.bfly.b32	%r403, %r402, 2, 31, -1;
	selp.b32 	%r404, %r222, %r403, %p3;
	selp.b32 	%r405, %r403, %r254, %p3;
	selp.b32 	%r406, %r262, %r230, %p3;
	shfl.sync.bfly.b32	%r407, %r406, 2, 31, -1;
	selp.b32 	%r408, %r230, %r407, %p3;
	selp.b32 	%r409, %r407, %r262, %p3;
	selp.b32 	%r410, %r298, %r266, %p3;
	shfl.sync.bfly.b32	%r411, %r410, 2, 31, -1;
	selp.b32 	%r412, %r266, %r411, %p3;
	selp.b32 	%r413, %r411, %r298, %p3;
	selp.b32 	%r414, %r306, %r274, %p3;
	shfl.sync.bfly.b32	%r415, %r414, 2, 31, -1;
	selp.b32 	%r416, %r274, %r415, %p3;
	selp.b32 	%r417, %r415, %r306, %p3;
	selp.b32 	%r418, %r302, %r270, %p3;
	shfl.sync.bfly.b32	%r419, %r418, 2, 31, -1;
	selp.b32 	%r420, %r270, %r419, %p3;
	selp.b32 	%r421, %r419, %r302, %p3;
	selp.b32 	%r422, %r310, %r278, %p3;
	shfl.sync.bfly.b32	%r423, %r422, 2, 31, -1;
	selp.b32 	%r424, %r278, %r423, %p3;
	selp.b32 	%r425, %r423, %r310, %p3;
	selp.b32 	%r426, %r314, %r282, %p3;
	shfl.sync.bfly.b32	%r427, %r426, 2, 31, -1;
	selp.b32 	%r428, %r282, %r427, %p3;
	selp.b32 	%r429, %r427, %r314, %p3;
	selp.b32 	%r430, %r322, %r290, %p3;
	shfl.sync.bfly.b32	%r431, %r430, 2, 31, -1;
	selp.b32 	%r432, %r290, %r431, %p3;
	selp.b32 	%r433, %r431, %r322, %p3;
	selp.b32 	%r434, %r318, %r286, %p3;
	shfl.sync.bfly.b32	%r435, %r434, 2, 31, -1;
	selp.b32 	%r436, %r286, %r435, %p3;
	selp.b32 	%r437, %r435, %r318, %p3;
	selp.b32 	%r438, %r326, %r294, %p3;
	shfl.sync.bfly.b32	%r439, %r438, 2, 31, -1;
	selp.b32 	%r440, %r294, %r439, %p3;
	selp.b32 	%r441, %r439, %r326, %p3;
	and.b32  	%r25, %r331, 4;
	setp.eq.s32 	%p4, %r25, 0;
	selp.b32 	%r442, %r412, %r380, %p4;
	shfl.sync.bfly.b32	%r443, %r442, 4, 31, -1;
	selp.b32 	%r26, %r380, %r443, %p4;
	selp.b32 	%r27, %r443, %r412, %p4;
	selp.b32 	%r444, %r416, %r384, %p4;
	shfl.sync.bfly.b32	%r445, %r444, 4, 31, -1;
	selp.b32 	%r28, %r384, %r445, %p4;
	selp.b32 	%r29, %r445, %r416, %p4;
	selp.b32 	%r446, %r420, %r388, %p4;
	shfl.sync.bfly.b32	%r447, %r446, 4, 31, -1;
	selp.b32 	%r30, %r388, %r447, %p4;
	selp.b32 	%r31, %r447, %r420, %p4;
	selp.b32 	%r448, %r424, %r392, %p4;
	shfl.sync.bfly.b32	%r449, %r448, 4, 31, -1;
	selp.b32 	%r32, %r392, %r449, %p4;
	selp.b32 	%r33, %r449, %r424, %p4;
	selp.b32 	%r450, %r428, %r396, %p4;
	shfl.sync.bfly.b32	%r451, %r450, 4, 31, -1;
	selp.b32 	%r34, %r396, %r451, %p4;
	selp.b32 	%r35, %r451, %r428, %p4;
	selp.b32 	%r452, %r432, %r400, %p4;
	shfl.sync.bfly.b32	%r453, %r452, 4, 31, -1;
	selp.b32 	%r36, %r400, %r453, %p4;
	selp.b32 	%r37, %r453, %r432, %p4;
	selp.b32 	%r454, %r436, %r404, %p4;
	shfl.sync.bfly.b32	%r455, %r454, 4, 31, -1;
	selp.b32 	%r38, %r404, %r455, %p4;
	selp.b32 	%r39, %r455, %r436, %p4;
	selp.b32 	%r456, %r440, %r408, %p4;
	shfl.sync.bfly.b32	%r457, %r456, 4, 31, -1;
	selp.b32 	%r40, %r408, %r457, %p4;
	selp.b32 	%r41, %r457, %r440, %p4;
	selp.b32 	%r458, %r413, %r381, %p4;
	shfl.sync.bfly.b32	%r459, %r458, 4, 31, -1;
	selp.b32 	%r42, %r381, %r459, %p4;
	selp.b32 	%r43, %r459, %r413, %p4;
	selp.b32 	%r460, %r417, %r385, %p4;
	shfl.sync.bfly.b32	%r461, %r460, 4, 31, -1;
	selp.b32 	%r44, %r385, %r461, %p4;
	selp.b32 	%r45, %r461, %r417, %p4;
	selp.b32 	%r462, %r421, %r389, %p4;
	shfl.sync.bfly.b32	%r463, %r462, 4, 31, -1;
	selp.b32 	%r46, %r389, %r463, %p4;
	selp.b32 	%r47, %r463, %r421, %p4;
	selp.b32 	%r464, %r425, %r393, %p4;
	shfl.sync.bfly.b32	%r465, %r464, 4, 31, -1;
	selp.b32 	%r48, %r393, %r465, %p4;
	selp.b32 	%r49, %r465, %r425, %p4;
	selp.b32 	%r466, %r429, %r397, %p4;
	shfl.sync.bfly.b32	%r467, %r466, 4, 31, -1;
	selp.b32 	%r50, %r397, %r467, %p4;
	selp.b32 	%r51, %r467, %r429, %p4;
	selp.b32 	%r468, %r433, %r401, %p4;
	shfl.sync.bfly.b32	%r469, %r468, 4, 31, -1;
	selp.b32 	%r52, %r401, %r469, %p4;
	selp.b32 	%r53, %r469, %r433, %p4;
	selp.b32 	%r470, %r437, %r405, %p4;
	shfl.sync.bfly.b32	%r471, %r470, 4, 31, -1;
	selp.b32 	%r54, %r405, %r471, %p4;
	selp.b32 	%r55, %r471, %r437, %p4;
	selp.b32 	%r472, %r441, %r409, %p4;
	shfl.sync.bfly.b32	%r473, %r472, 4, 31, -1;
	selp.b32 	%r56, %r409, %r473, %p4;
	selp.b32 	%r57, %r473, %r441, %p4;
	shl.b32 	%r474, %r21, 5;
	shl.b32 	%r475, %r331, 2;
	and.b32  	%r476, %r475, 28;
	shl.b32 	%r477, %r333, 6;
	and.b32  	%r478, %r477, 1920;
	and.b32  	%r479, %r474, 96;
	or.b32  	%r58, %r476, %r479;
	or.b32  	%r480, %r58, %r478;
	and.b32  	%r59, %r21, 28;
	shl.b32 	%r481, %r333, 11;
	and.b32  	%r482, %r481, 2048;
	or.b32  	%r60, %r480, %r482;
	and.b32  	%r483, %r352, 24;
	or.b32  	%r61, %r479, %r483;
	bfe.u32 	%r62, %r331, 2, 3;
	and.b32  	%r484, %r21, 3;
	or.b32  	%r485, %r344, %r62;
	mul.lo.s32 	%r486, %r484, 4224;
	or.b32  	%r63, %r485, %r486;
	and.b32  	%r64, %r364, 6;
	and.b32  	%r487, %r331, 7;
	add.s32 	%r488, %r341, -4;
	mov.u32 	%r489, 1;
	shl.b32 	%r490, %r489, %r488;
	setp.gt.u32 	%p5, %r488, 31;
	selp.b32 	%r65, 0, %r490, %p5;
	min.u32 	%r66, %r342, 31;
	and.b32  	%r67, %r331, 1;
	shl.b32 	%r491, %r333, 13;
	and.b32  	%r68, %r352, 32;
	shl.b32 	%r492, %r331, 5;
	and.b32  	%r69, %r492, 64;
	and.b32  	%r70, %r491, 253952;
	mul.lo.s32 	%r493, %r487, 132;
	add.s32 	%r494, %r337, %r493;
	mul.wide.u32 	%rd34, %r494, 4;
	mov.u64 	%rd35, shmem;
	add.s64 	%rd36, %rd35, 16512;
	add.s64 	%rd5, %rd36, %rd34;
	cvt.u64.u32 	%rd37, %r493;
	cvt.u64.u32 	%rd38, %r337;
	add.s64 	%rd39, %rd38, %rd37;
	shl.b64 	%rd40, %rd39, 2;
	add.s64 	%rd6, %rd36, %rd40;
	add.s32 	%r495, %r493, 1056;
	add.s32 	%r496, %r337, %r495;
	mul.wide.u32 	%rd41, %r496, 4;
	add.s64 	%rd7, %rd36, %rd41;
	cvt.u64.u32 	%rd42, %r495;
	add.s64 	%rd43, %rd38, %rd42;
	shl.b64 	%rd44, %rd43, 2;
	add.s64 	%rd8, %rd36, %rd44;
	add.s32 	%r497, %r493, 2112;
	add.s32 	%r498, %r337, %r497;
	mul.wide.u32 	%rd45, %r498, 4;
	add.s64 	%rd9, %rd36, %rd45;
	cvt.u64.u32 	%rd46, %r497;
	add.s64 	%rd47, %rd38, %rd46;
	shl.b64 	%rd48, %rd47, 2;
	add.s64 	%rd10, %rd36, %rd48;
	add.s32 	%r499, %r493, 3168;
	add.s32 	%r500, %r337, %r499;
	mul.wide.u32 	%rd49, %r500, 4;
	add.s64 	%rd11, %rd36, %rd49;
	cvt.u64.u32 	%rd50, %r499;
	add.s64 	%rd51, %rd38, %rd50;
	shl.b64 	%rd52, %rd51, 2;
	add.s64 	%rd12, %rd36, %rd52;
	shl.b32 	%r71, %r337, 18;
	mov.u32 	%r330, 0;
	setp.lt.u32 	%p6, %r21, 32;
	mov.u32 	%r1283, %r330;
LBB0_5:                                 // %L1804
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_6 Depth 2
                                        //       Child Loop BB0_8 Depth 3
	mov.u32 	%r1284, %r330;
	mov.u32 	%r1285, %r330;
	mov.u32 	%r1286, %r330;
	mov.u32 	%r1287, %r330;
	mov.u32 	%r1288, %r330;
	mov.u32 	%r1289, %r330;
	mov.u32 	%r1290, %r330;
LBB0_6:                                 // %L1807
                                        //   Parent Loop BB0_5 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_8 Depth 3
	@%p6 bra 	LBB0_12;
	bra.uni 	LBB0_7;
LBB0_12:                                // %pass783
                                        //   in Loop: Header=BB0_6 Depth=2
	add.s32 	%r9, %r1284, %r1283;
	or.b32  	%r502, %r9, %r59;
	or.b32  	%r503, %r502, %r22;
	shl.b32 	%r504, %r503, 12;
	or.b32  	%r505, %r60, %r504;
	mul.wide.u32 	%rd53, %r505, 4;
	add.s64 	%rd54, %rd2, %rd53;
	ld.global.v4.u32 	{%r506, %r507, %r508, %r509}, [%rd54];
	and.b32  	%r510, %r503, 31;
	mul.lo.s32 	%r511, %r510, 129;
	add.s32 	%r512, %r58, %r511;
	mul.wide.u32 	%rd55, %r512, 4;
	add.s64 	%rd57, %rd35, %rd55;
	st.shared.u32 	[%rd57], %r506;
	cvt.u64.u32 	%rd58, %r511;
	cvt.u64.u32 	%rd59, %r58;
	add.s64 	%rd60, %rd59, %rd58;
	shl.b64 	%rd61, %rd60, 2;
	add.s64 	%rd62, %rd35, %rd61;
	st.shared.u32 	[%rd62+4], %r507;
	st.shared.u32 	[%rd62+8], %r508;
	st.shared.u32 	[%rd62+12], %r509;
LBB0_7:                                 // %L2326
                                        //   in Loop: Header=BB0_6 Depth=2
	bar.sync 	0;
	mov.u32 	%r526, 0;
	mov.u32 	%r1291, %r526;
LBB0_8:                                 // %L2328
                                        //   Parent Loop BB0_5 Depth=1
                                        //     Parent Loop BB0_6 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r1038, %r1291, %r62;
	mul.lo.s32 	%r1039, %r1038, 129;
	add.s32 	%r1040, %r61, %r1039;
	mul.wide.u32 	%rd63, %r1040, 4;
	add.s64 	%rd65, %rd35, %rd63;
	ld.shared.u32 	%r515, [%rd65];
	mov.u32 	%r516, 134744072;
	mov.u32 	%r517, 252645135;
	// begin inline asm
	lop3.b32 %r514, %r515, %r516, %r517, 40;
	// end inline asm
	add.s32 	%r1041, %r514, 2021161080;
	xor.b32  	%r531, %r1041, -2139062144;
	shr.u32 	%r519, %r515, 4;
	// begin inline asm
	lop3.b32 %r518, %r519, %r516, %r517, 40;
	// end inline asm
	add.s32 	%r1042, %r518, 2021161080;
	xor.b32  	%r525, %r1042, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r522, %r523}, {%r30}, {%r525}, {%r526, %r526};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r528, %r529}, {%r26}, {%r531}, {%r526, %r526};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r534, %r535}, {%r30}, {%r531}, {%r526, %r526};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r540, %r541}, {%r26}, {%r525}, {%r534, %r535};
	// end inline asm
	cvt.u64.u32 	%rd66, %r1039;
	cvt.u64.u32 	%rd67, %r61;
	add.s64 	%rd68, %rd67, %rd66;
	shl.b64 	%rd69, %rd68, 2;
	add.s64 	%rd70, %rd35, %rd69;
	ld.shared.u32 	%r547, [%rd70+4];
	// begin inline asm
	lop3.b32 %r546, %r547, %r516, %r517, 40;
	// end inline asm
	add.s32 	%r1043, %r546, 2021161080;
	xor.b32  	%r563, %r1043, -2139062144;
	shr.u32 	%r551, %r547, 4;
	// begin inline asm
	lop3.b32 %r550, %r551, %r516, %r517, 40;
	// end inline asm
	add.s32 	%r1044, %r550, 2021161080;
	xor.b32  	%r557, %r1044, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r554, %r555}, {%r38}, {%r557}, {%r522, %r523};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r560, %r561}, {%r34}, {%r563}, {%r528, %r529};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r566, %r567}, {%r38}, {%r563}, {%r540, %r541};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r572, %r573}, {%r34}, {%r557}, {%r566, %r567};
	// end inline asm
	ld.shared.u32 	%r579, [%rd70+8];
	// begin inline asm
	lop3.b32 %r578, %r579, %r516, %r517, 40;
	// end inline asm
	add.s32 	%r1045, %r578, 2021161080;
	xor.b32  	%r595, %r1045, -2139062144;
	shr.u32 	%r583, %r579, 4;
	// begin inline asm
	lop3.b32 %r582, %r583, %r516, %r517, 40;
	// end inline asm
	add.s32 	%r1046, %r582, 2021161080;
	xor.b32  	%r589, %r1046, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r586, %r587}, {%r46}, {%r589}, {%r554, %r555};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r592, %r593}, {%r42}, {%r595}, {%r560, %r561};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r598, %r599}, {%r46}, {%r595}, {%r572, %r573};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r604, %r605}, {%r42}, {%r589}, {%r598, %r599};
	// end inline asm
	ld.shared.u32 	%r611, [%rd70+12];
	// begin inline asm
	lop3.b32 %r610, %r611, %r516, %r517, 40;
	// end inline asm
	add.s32 	%r1047, %r610, 2021161080;
	xor.b32  	%r627, %r1047, -2139062144;
	shr.u32 	%r615, %r611, 4;
	// begin inline asm
	lop3.b32 %r614, %r615, %r516, %r517, 40;
	// end inline asm
	add.s32 	%r1048, %r614, 2021161080;
	xor.b32  	%r621, %r1048, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r618, %r619}, {%r54}, {%r621}, {%r586, %r587};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r624, %r625}, {%r50}, {%r627}, {%r592, %r593};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r630, %r631}, {%r54}, {%r627}, {%r604, %r605};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r636, %r637}, {%r50}, {%r621}, {%r630, %r631};
	// end inline asm
	ld.shared.u32 	%r643, [%rd70+16];
	// begin inline asm
	lop3.b32 %r642, %r643, %r516, %r517, 40;
	// end inline asm
	add.s32 	%r1049, %r642, 2021161080;
	xor.b32  	%r659, %r1049, -2139062144;
	shr.u32 	%r647, %r643, 4;
	// begin inline asm
	lop3.b32 %r646, %r647, %r516, %r517, 40;
	// end inline asm
	add.s32 	%r1050, %r646, 2021161080;
	xor.b32  	%r653, %r1050, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r650, %r651}, {%r31}, {%r653}, {%r618, %r619};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r656, %r657}, {%r27}, {%r659}, {%r624, %r625};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r662, %r663}, {%r31}, {%r659}, {%r636, %r637};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r668, %r669}, {%r27}, {%r653}, {%r662, %r663};
	// end inline asm
	ld.shared.u32 	%r675, [%rd70+20];
	// begin inline asm
	lop3.b32 %r674, %r675, %r516, %r517, 40;
	// end inline asm
	add.s32 	%r1051, %r674, 2021161080;
	xor.b32  	%r691, %r1051, -2139062144;
	shr.u32 	%r679, %r675, 4;
	// begin inline asm
	lop3.b32 %r678, %r679, %r516, %r517, 40;
	// end inline asm
	add.s32 	%r1052, %r678, 2021161080;
	xor.b32  	%r685, %r1052, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r682, %r683}, {%r39}, {%r685}, {%r650, %r651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r688, %r689}, {%r35}, {%r691}, {%r656, %r657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r694, %r695}, {%r39}, {%r691}, {%r668, %r669};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r700, %r701}, {%r35}, {%r685}, {%r694, %r695};
	// end inline asm
	ld.shared.u32 	%r707, [%rd70+24];
	// begin inline asm
	lop3.b32 %r706, %r707, %r516, %r517, 40;
	// end inline asm
	add.s32 	%r1053, %r706, 2021161080;
	xor.b32  	%r723, %r1053, -2139062144;
	shr.u32 	%r711, %r707, 4;
	// begin inline asm
	lop3.b32 %r710, %r711, %r516, %r517, 40;
	// end inline asm
	add.s32 	%r1054, %r710, 2021161080;
	xor.b32  	%r717, %r1054, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r714, %r715}, {%r47}, {%r717}, {%r682, %r683};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r720, %r721}, {%r43}, {%r723}, {%r688, %r689};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r726, %r727}, {%r47}, {%r723}, {%r700, %r701};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r732, %r733}, {%r43}, {%r717}, {%r726, %r727};
	// end inline asm
	ld.shared.u32 	%r739, [%rd70+28];
	// begin inline asm
	lop3.b32 %r738, %r739, %r516, %r517, 40;
	// end inline asm
	add.s32 	%r1055, %r738, 2021161080;
	xor.b32  	%r755, %r1055, -2139062144;
	shr.u32 	%r743, %r739, 4;
	// begin inline asm
	lop3.b32 %r742, %r743, %r516, %r517, 40;
	// end inline asm
	add.s32 	%r1056, %r742, 2021161080;
	xor.b32  	%r749, %r1056, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r746, %r747}, {%r55}, {%r749}, {%r714, %r715};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r752, %r753}, {%r51}, {%r755}, {%r720, %r721};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r758, %r759}, {%r55}, {%r755}, {%r732, %r733};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r764, %r765}, {%r51}, {%r749}, {%r758, %r759};
	// end inline asm
	add.s32 	%r1057, %r764, 4;
	shr.s32 	%r772, %r1057, 3;
	sub.s32 	%r1058, %r746, %r752;
	add.s32 	%r1059, %r1058, 4;
	shr.s32 	%r771, %r1059, 3;
	add.s32 	%r1060, %r765, 4;
	shr.s32 	%r775, %r1060, 3;
	sub.s32 	%r1061, %r747, %r753;
	add.s32 	%r1062, %r1061, 4;
	shr.s32 	%r774, %r1062, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r770, %r771, %r772;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r773, %r774, %r775;
	// end inline asm
	or.b32  	%r1063, %r1291, %r64;
	mul.lo.s32 	%r1064, %r1063, 132;
	add.s32 	%r1065, %r63, %r1064;
	mul.wide.u32 	%rd71, %r1065, 4;
	add.s64 	%rd73, %rd36, %rd71;
	st.shared.u32 	[%rd73], %r770;
	or.b32  	%r1066, %r1063, 1;
	mul.lo.s32 	%r1067, %r1066, 132;
	add.s32 	%r1068, %r63, %r1067;
	mul.wide.u32 	%rd74, %r1068, 4;
	add.s64 	%rd75, %rd36, %rd74;
	st.shared.u32 	[%rd75], %r773;
	ld.shared.u32 	%r777, [%rd65];
	// begin inline asm
	lop3.b32 %r776, %r777, %r516, %r517, 40;
	// end inline asm
	add.s32 	%r1069, %r776, 2021161080;
	xor.b32  	%r793, %r1069, -2139062144;
	shr.u32 	%r781, %r777, 4;
	// begin inline asm
	lop3.b32 %r780, %r781, %r516, %r517, 40;
	// end inline asm
	add.s32 	%r1070, %r780, 2021161080;
	xor.b32  	%r787, %r1070, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r784, %r785}, {%r32}, {%r787}, {%r526, %r526};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r790, %r791}, {%r28}, {%r793}, {%r526, %r526};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r796, %r797}, {%r32}, {%r793}, {%r526, %r526};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r802, %r803}, {%r28}, {%r787}, {%r796, %r797};
	// end inline asm
	ld.shared.u32 	%r809, [%rd70+4];
	// begin inline asm
	lop3.b32 %r808, %r809, %r516, %r517, 40;
	// end inline asm
	add.s32 	%r1071, %r808, 2021161080;
	xor.b32  	%r825, %r1071, -2139062144;
	shr.u32 	%r813, %r809, 4;
	// begin inline asm
	lop3.b32 %r812, %r813, %r516, %r517, 40;
	// end inline asm
	add.s32 	%r1072, %r812, 2021161080;
	xor.b32  	%r819, %r1072, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r816, %r817}, {%r40}, {%r819}, {%r784, %r785};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r822, %r823}, {%r36}, {%r825}, {%r790, %r791};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r828, %r829}, {%r40}, {%r825}, {%r802, %r803};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r834, %r835}, {%r36}, {%r819}, {%r828, %r829};
	// end inline asm
	ld.shared.u32 	%r841, [%rd70+8];
	// begin inline asm
	lop3.b32 %r840, %r841, %r516, %r517, 40;
	// end inline asm
	add.s32 	%r1073, %r840, 2021161080;
	xor.b32  	%r857, %r1073, -2139062144;
	shr.u32 	%r845, %r841, 4;
	// begin inline asm
	lop3.b32 %r844, %r845, %r516, %r517, 40;
	// end inline asm
	add.s32 	%r1074, %r844, 2021161080;
	xor.b32  	%r851, %r1074, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r848, %r849}, {%r48}, {%r851}, {%r816, %r817};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r854, %r855}, {%r44}, {%r857}, {%r822, %r823};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r860, %r861}, {%r48}, {%r857}, {%r834, %r835};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r866, %r867}, {%r44}, {%r851}, {%r860, %r861};
	// end inline asm
	ld.shared.u32 	%r873, [%rd70+12];
	// begin inline asm
	lop3.b32 %r872, %r873, %r516, %r517, 40;
	// end inline asm
	add.s32 	%r1075, %r872, 2021161080;
	xor.b32  	%r889, %r1075, -2139062144;
	shr.u32 	%r877, %r873, 4;
	// begin inline asm
	lop3.b32 %r876, %r877, %r516, %r517, 40;
	// end inline asm
	add.s32 	%r1076, %r876, 2021161080;
	xor.b32  	%r883, %r1076, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r880, %r881}, {%r56}, {%r883}, {%r848, %r849};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r886, %r887}, {%r52}, {%r889}, {%r854, %r855};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r892, %r893}, {%r56}, {%r889}, {%r866, %r867};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r898, %r899}, {%r52}, {%r883}, {%r892, %r893};
	// end inline asm
	ld.shared.u32 	%r905, [%rd70+16];
	// begin inline asm
	lop3.b32 %r904, %r905, %r516, %r517, 40;
	// end inline asm
	add.s32 	%r1077, %r904, 2021161080;
	xor.b32  	%r921, %r1077, -2139062144;
	shr.u32 	%r909, %r905, 4;
	// begin inline asm
	lop3.b32 %r908, %r909, %r516, %r517, 40;
	// end inline asm
	add.s32 	%r1078, %r908, 2021161080;
	xor.b32  	%r915, %r1078, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r912, %r913}, {%r33}, {%r915}, {%r880, %r881};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r918, %r919}, {%r29}, {%r921}, {%r886, %r887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r924, %r925}, {%r33}, {%r921}, {%r898, %r899};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r930, %r931}, {%r29}, {%r915}, {%r924, %r925};
	// end inline asm
	ld.shared.u32 	%r937, [%rd70+20];
	// begin inline asm
	lop3.b32 %r936, %r937, %r516, %r517, 40;
	// end inline asm
	add.s32 	%r1079, %r936, 2021161080;
	xor.b32  	%r953, %r1079, -2139062144;
	shr.u32 	%r941, %r937, 4;
	// begin inline asm
	lop3.b32 %r940, %r941, %r516, %r517, 40;
	// end inline asm
	add.s32 	%r1080, %r940, 2021161080;
	xor.b32  	%r947, %r1080, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r944, %r945}, {%r41}, {%r947}, {%r912, %r913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r950, %r951}, {%r37}, {%r953}, {%r918, %r919};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r956, %r957}, {%r41}, {%r953}, {%r930, %r931};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r962, %r963}, {%r37}, {%r947}, {%r956, %r957};
	// end inline asm
	ld.shared.u32 	%r969, [%rd70+24];
	// begin inline asm
	lop3.b32 %r968, %r969, %r516, %r517, 40;
	// end inline asm
	add.s32 	%r1081, %r968, 2021161080;
	xor.b32  	%r985, %r1081, -2139062144;
	shr.u32 	%r973, %r969, 4;
	// begin inline asm
	lop3.b32 %r972, %r973, %r516, %r517, 40;
	// end inline asm
	add.s32 	%r1082, %r972, 2021161080;
	xor.b32  	%r979, %r1082, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r976, %r977}, {%r49}, {%r979}, {%r944, %r945};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r982, %r983}, {%r45}, {%r985}, {%r950, %r951};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r988, %r989}, {%r49}, {%r985}, {%r962, %r963};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r994, %r995}, {%r45}, {%r979}, {%r988, %r989};
	// end inline asm
	ld.shared.u32 	%r1001, [%rd70+28];
	// begin inline asm
	lop3.b32 %r1000, %r1001, %r516, %r517, 40;
	// end inline asm
	add.s32 	%r1083, %r1000, 2021161080;
	xor.b32  	%r1017, %r1083, -2139062144;
	shr.u32 	%r1005, %r1001, 4;
	// begin inline asm
	lop3.b32 %r1004, %r1005, %r516, %r517, 40;
	// end inline asm
	add.s32 	%r1084, %r1004, 2021161080;
	xor.b32  	%r1011, %r1084, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1008, %r1009}, {%r57}, {%r1011}, {%r976, %r977};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1014, %r1015}, {%r53}, {%r1017}, {%r982, %r983};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1020, %r1021}, {%r57}, {%r1017}, {%r994, %r995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1026, %r1027}, {%r53}, {%r1011}, {%r1020, %r1021};
	// end inline asm
	add.s32 	%r1085, %r1026, 4;
	shr.s32 	%r1034, %r1085, 3;
	sub.s32 	%r1086, %r1008, %r1014;
	add.s32 	%r1087, %r1086, 4;
	shr.s32 	%r1033, %r1087, 3;
	add.s32 	%r1088, %r1027, 4;
	shr.s32 	%r1037, %r1088, 3;
	sub.s32 	%r1089, %r1009, %r1015;
	add.s32 	%r1090, %r1089, 4;
	shr.s32 	%r1036, %r1090, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1032, %r1033, %r1034;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1035, %r1036, %r1037;
	// end inline asm
	cvt.u64.u32 	%rd76, %r1064;
	cvt.u64.u32 	%rd77, %r63;
	add.s64 	%rd78, %rd77, %rd76;
	shl.b64 	%rd79, %rd78, 2;
	add.s64 	%rd80, %rd36, %rd79;
	st.shared.u32 	[%rd80+32], %r1032;
	cvt.u64.u32 	%rd81, %r1067;
	add.s64 	%rd82, %rd77, %rd81;
	shl.b64 	%rd83, %rd82, 2;
	add.s64 	%rd84, %rd36, %rd83;
	st.shared.u32 	[%rd84+32], %r1035;
	add.s32 	%r1291, %r1291, 8;
	setp.ne.s32 	%p7, %r1291, 32;
	@%p7 bra 	LBB0_8;
// %bb.9:                               // %L5118
                                        //   in Loop: Header=BB0_6 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1109, [%rd5];
	ld.shared.u32 	%r1110, [%rd6+16896];
	ld.shared.u32 	%r1111, [%rd6+33792];
	ld.shared.u32 	%r1112, [%rd6+50688];
	ld.shared.u32 	%r1113, [%rd7];
	ld.shared.u32 	%r1114, [%rd8+16896];
	ld.shared.u32 	%r1115, [%rd8+33792];
	ld.shared.u32 	%r1116, [%rd8+50688];
	ld.shared.u32 	%r1117, [%rd9];
	ld.shared.u32 	%r1118, [%rd10+16896];
	ld.shared.u32 	%r1119, [%rd10+33792];
	ld.shared.u32 	%r1120, [%rd10+50688];
	ld.shared.u32 	%r1121, [%rd11];
	ld.shared.u32 	%r1122, [%rd12+16896];
	ld.shared.u32 	%r1123, [%rd12+33792];
	ld.shared.u32 	%r1124, [%rd12+50688];
	cvt.s32.s16 	%r1125, %r1109;
	shr.s32 	%r1126, %r1109, 16;
	cvt.s32.s16 	%r1127, %r1110;
	shr.s32 	%r1128, %r1110, 16;
	cvt.s32.s16 	%r1129, %r1111;
	shr.s32 	%r1130, %r1111, 16;
	cvt.s32.s16 	%r1131, %r1112;
	shr.s32 	%r1132, %r1112, 16;
	cvt.s32.s16 	%r1133, %r1113;
	shr.s32 	%r1134, %r1113, 16;
	cvt.s32.s16 	%r1135, %r1114;
	shr.s32 	%r1136, %r1114, 16;
	cvt.s32.s16 	%r1137, %r1115;
	shr.s32 	%r1138, %r1115, 16;
	cvt.s32.s16 	%r1139, %r1116;
	shr.s32 	%r1140, %r1116, 16;
	cvt.s32.s16 	%r1141, %r1117;
	shr.s32 	%r1142, %r1117, 16;
	cvt.s32.s16 	%r1143, %r1118;
	shr.s32 	%r1144, %r1118, 16;
	cvt.s32.s16 	%r1145, %r1119;
	shr.s32 	%r1146, %r1119, 16;
	cvt.s32.s16 	%r1147, %r1120;
	shr.s32 	%r1148, %r1120, 16;
	cvt.s32.s16 	%r1149, %r1121;
	shr.s32 	%r1150, %r1121, 16;
	cvt.s32.s16 	%r1151, %r1122;
	shr.s32 	%r1152, %r1122, 16;
	cvt.s32.s16 	%r1153, %r1123;
	shr.s32 	%r1154, %r1123, 16;
	cvt.s32.s16 	%r1155, %r1124;
	shr.s32 	%r1156, %r1124, 16;
	add.s32 	%r1157, %r1125, %r65;
	add.s32 	%r1158, %r1157, %r1127;
	add.s32 	%r1159, %r1158, %r1129;
	add.s32 	%r1160, %r1159, %r1131;
	shr.s32 	%r1161, %r1160, %r66;
	add.s32 	%r1162, %r1126, %r65;
	add.s32 	%r1163, %r1162, %r1128;
	add.s32 	%r1164, %r1163, %r1130;
	add.s32 	%r1165, %r1164, %r1132;
	shr.s32 	%r1166, %r1165, %r66;
	add.s32 	%r1167, %r1133, %r65;
	add.s32 	%r1168, %r1167, %r1135;
	add.s32 	%r1169, %r1168, %r1137;
	add.s32 	%r1170, %r1169, %r1139;
	shr.s32 	%r1171, %r1170, %r66;
	add.s32 	%r1172, %r1134, %r65;
	add.s32 	%r1173, %r1172, %r1136;
	add.s32 	%r1174, %r1173, %r1138;
	add.s32 	%r1175, %r1174, %r1140;
	shr.s32 	%r1176, %r1175, %r66;
	add.s32 	%r1177, %r1141, %r65;
	add.s32 	%r1178, %r1177, %r1143;
	add.s32 	%r1179, %r1178, %r1145;
	add.s32 	%r1180, %r1179, %r1147;
	shr.s32 	%r1181, %r1180, %r66;
	add.s32 	%r1182, %r1142, %r65;
	add.s32 	%r1183, %r1182, %r1144;
	add.s32 	%r1184, %r1183, %r1146;
	add.s32 	%r1185, %r1184, %r1148;
	shr.s32 	%r1186, %r1185, %r66;
	add.s32 	%r1187, %r1149, %r65;
	add.s32 	%r1188, %r1187, %r1151;
	add.s32 	%r1189, %r1188, %r1153;
	add.s32 	%r1190, %r1189, %r1155;
	shr.s32 	%r1191, %r1190, %r66;
	add.s32 	%r1192, %r1150, %r65;
	add.s32 	%r1193, %r1192, %r1152;
	add.s32 	%r1194, %r1193, %r1154;
	add.s32 	%r1195, %r1194, %r1156;
	shr.s32 	%r1196, %r1195, %r66;
	max.s32 	%r1197, %r1161, -7;
	min.s32 	%r1096, %r1197, 7;
	max.s32 	%r1198, %r1166, -7;
	min.s32 	%r1103, %r1198, 7;
	max.s32 	%r1199, %r1171, -7;
	min.s32 	%r1095, %r1199, 7;
	max.s32 	%r1200, %r1176, -7;
	min.s32 	%r1102, %r1200, 7;
	max.s32 	%r1201, %r1181, -7;
	min.s32 	%r1093, %r1201, 7;
	max.s32 	%r1202, %r1186, -7;
	min.s32 	%r1100, %r1202, 7;
	max.s32 	%r1203, %r1191, -7;
	min.s32 	%r1092, %r1203, 7;
	max.s32 	%r1204, %r1196, -7;
	min.s32 	%r1099, %r1204, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1091, %r1092, %r1093, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1094, %r1095, %r1096, %r1091;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1098, %r1099, %r1100, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1101, %r1102, %r1103, %r1098;
	// end inline asm
	shl.b32 	%r1108, %r1101, 4;
	// begin inline asm
	lop3.b32 %r1215, %r517, %r1094, %r1108, 202;
	// end inline asm
	setp.eq.s32 	%p8, %r1284, 0;
	selp.b32 	%r1289, %r1215, %r1289, %p8;
	selp.b32 	%r1290, %r1215, %r1290, %p8;
	setp.eq.s32 	%p9, %r1284, 32;
	selp.b32 	%r1285, %r1215, %r1285, %p9;
	selp.b32 	%r1286, %r1215, %r1286, %p9;
	setp.eq.s32 	%p10, %r1284, 64;
	selp.b32 	%r1287, %r1215, %r1287, %p10;
	selp.b32 	%r1288, %r1215, %r1288, %p10;
	add.s32 	%r19, %r1284, 32;
	setp.ne.s32 	%p11, %r1284, 96;
	mov.u32 	%r1284, %r19;
	@%p11 bra 	LBB0_6;
// %bb.10:                              // %L6641
                                        //   in Loop: Header=BB0_5 Depth=1
	setp.eq.s32 	%p12, %r67, 0;
	// begin inline asm
	prmt.b32 %r1205, %r1289, %r1285, %r325;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1209, %r1290, %r1286, %r329;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1213, %r1287, %r1215, %r325;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1217, %r1288, %r1215, %r329;
	// end inline asm
	selp.b32 	%r1253, %r1209, %r1205, %p12;
	shfl.sync.bfly.b32	%r1254, %r1253, 1, 31, -1;
	selp.b32 	%r1222, %r1205, %r1254, %p12;
	selp.b32 	%r1223, %r1254, %r1209, %p12;
	selp.b32 	%r1255, %r1217, %r1213, %p12;
	shfl.sync.bfly.b32	%r1256, %r1255, 1, 31, -1;
	selp.b32 	%r1230, %r1213, %r1256, %p12;
	selp.b32 	%r1231, %r1256, %r1217, %p12;
	// begin inline asm
	prmt.b32 %r1221, %r1222, %r1223, %r325;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1225, %r1222, %r1223, %r329;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1229, %r1230, %r1231, %r325;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1233, %r1230, %r1231, %r329;
	// end inline asm
	selp.b32 	%r1257, %r1229, %r1221, %p3;
	shfl.sync.bfly.b32	%r1258, %r1257, 2, 31, -1;
	selp.b32 	%r1238, %r1221, %r1258, %p3;
	selp.b32 	%r1239, %r1258, %r1229, %p3;
	selp.b32 	%r1259, %r1233, %r1225, %p3;
	shfl.sync.bfly.b32	%r1260, %r1259, 2, 31, -1;
	selp.b32 	%r1246, %r1225, %r1260, %p3;
	selp.b32 	%r1247, %r1260, %r1233, %p3;
	// begin inline asm
	prmt.b32 %r1237, %r1238, %r1239, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1241, %r1238, %r1239, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1245, %r1246, %r1247, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1249, %r1246, %r1247, %r201;
	// end inline asm
	selp.b32 	%r1261, %r1245, %r1237, %p4;
	shfl.sync.bfly.b32	%r1262, %r1261, 4, 31, -1;
	selp.b32 	%r1263, %r1237, %r1262, %p4;
	selp.b32 	%r1264, %r1262, %r1245, %p4;
	selp.b32 	%r1265, %r1249, %r1241, %p4;
	shfl.sync.bfly.b32	%r1266, %r1265, 4, 31, -1;
	selp.b32 	%r1267, %r1241, %r1266, %p4;
	selp.b32 	%r1268, %r1266, %r1249, %p4;
	selp.b32 	%r1269, %r1267, %r1263, %p12;
	shfl.sync.bfly.b32	%r1270, %r1269, 1, 31, -1;
	selp.b32 	%r1271, %r1263, %r1270, %p12;
	selp.b32 	%r1272, %r1270, %r1267, %p12;
	selp.b32 	%r1273, %r1268, %r1264, %p12;
	shfl.sync.bfly.b32	%r1274, %r1273, 1, 31, -1;
	selp.b32 	%r1275, %r1264, %r1274, %p12;
	selp.b32 	%r1276, %r1274, %r1268, %p12;
	or.b32  	%r1277, %r23, %r1283;
	or.b32  	%r1278, %r1277, %r68;
	or.b32  	%r1279, %r1278, %r69;
	shr.u32 	%r1280, %r1279, 2;
	add.s32 	%r1281, %r70, %r1280;
	add.s32 	%r1282, %r1281, %r71;
	mul.wide.u32 	%rd85, %r1282, 4;
	add.s64 	%rd86, %rd4, %rd85;
	st.global.v4.u32 	[%rd86], {%r1271, %r1275, %r1272, %r1276};
	add.s32 	%r20, %r1283, 128;
	setp.ne.s32 	%p15, %r1283, 32640;
	mov.u32 	%r1283, %r20;
	@%p15 bra 	LBB0_5;
// %bb.11:                              // %L6982
	ret;
LBB0_1:                                 // %L9
	mov.u64 	%rd14, exception1;
	cvta.global.u64 	%rd15, %rd14;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd15;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd13;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	// begin inline asm
	exit;
	// end inline asm
LBB0_3:                                 // %L28
	mov.u64 	%rd16, exception1;
	cvta.global.u64 	%rd17, %rd16;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd17;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd13;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
