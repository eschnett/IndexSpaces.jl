// PTX CompilerJob of kernel #bb(CuDeviceVector{Int8x4, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Int32, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 7.1
.target sm_86
.address_size 64

	// .globl	_Z13julia_bb_774113CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE // -- Begin function _Z13julia_bb_774113CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.extern .func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
;
.extern .func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[8]
)
;
.extern .func julia_unreachable_9098
(
	.param .align 8 .b8 julia_unreachable_9098_param_0[8]
)
;
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception867[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1873[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z13julia_bb_774113CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.visible .entry _Z13julia_bb_774113CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE(
	.param .align 8 .b8 _Z13julia_bb_774113CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0[8],
	.param .align 8 .b8 _Z13julia_bb_774113CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z13julia_bb_774113CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z13julia_bb_774113CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z13julia_bb_774113CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z13julia_bb_774113CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<19>;
	.reg .b16 	%rs<38>;
	.reg .b32 	%r<1330>;
	.reg .b64 	%rd<97>;

// %bb.0:                               // %conversion
	ld.param.u64 	%rd15, [_Z13julia_bb_774113CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r84, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r84, 16511;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L11
	// begin inline asm
	mov.u32 %r85, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r85, 67711;
	@%p2 bra 	LBB0_4;
	bra.uni 	LBB0_3;
LBB0_4:                                 // %L30
	mov.u32 	%r1, %tid.y;
	setp.lt.u32 	%p3, %r1, 24;
	@%p3 bra 	LBB0_16;
	bra.uni 	LBB0_5;
LBB0_16:                                // %oksrem
	mov.u32 	%r22, %tid.x;
	setp.gt.u32 	%p4, %r22, 31;
	@%p4 bra 	LBB0_6;
// %bb.17:                              // %oksrem12
	mov.u32 	%r23, %ctaid.x;
	setp.gt.u32 	%p5, %r23, 31;
	@%p5 bra 	LBB0_7;
// %bb.18:                              // %oksrem23
	ld.param.u64 	%rd3, [_Z13julia_bb_774113CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3];
	ld.param.u64 	%rd5, [_Z13julia_bb_774113CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5];
	cvt.u16.u32 	%rs1, %r1;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 12;
	mul.lo.s16 	%rs5, %rs4, 24;
	sub.s16 	%rs6, %rs1, %rs5;
	and.b16  	%rs7, %rs6, 255;
	mul.wide.u16 	%r86, %rs7, 32;
	or.b32  	%r87, %r22, %r86;
	mad.lo.s32 	%r88, %r23, 768, %r87;
	mul.wide.u32 	%rd20, %r88, 4;
	add.s64 	%rd6, %rd5, %rd20;
	mov.u32 	%r89, 1;
	st.global.u32 	[%rd6], %r89;
	shr.u32 	%r24, %r23, 1;
	mul.lo.s32 	%r90, %r24, 192;
	and.b32  	%r25, %r23, 1;
	mad.lo.s32 	%r91, %r25, 96, %r90;
	mul.wide.u16 	%r92, %rs7, 4;
	shr.u32 	%r26, %r22, 3;
	or.b32  	%r93, %r26, %r92;
	mul.hi.u32 	%r94, %r93, -1431655765;
	shr.u32 	%r95, %r94, 6;
	mul.lo.s32 	%r96, %r95, 96;
	sub.s32 	%r27, %r93, %r96;
	add.s32 	%r97, %r91, %r27;
	mul.wide.u32 	%rd21, %r97, 4;
	add.s64 	%rd22, %rd3, %rd21;
	ld.global.u32 	%r98, [%rd22];
	add.s32 	%r29, %r98, -4;
	setp.lt.u32 	%p6, %r29, 31;
	@%p6 bra 	LBB0_8;
	bra.uni 	LBB0_19;
LBB0_8:                                 // %oksrem118
	ld.param.u64 	%rd1, [_Z13julia_bb_774113CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1];
	ld.param.u64 	%rd2, [_Z13julia_bb_774113CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2];
	ld.param.u64 	%rd4, [_Z13julia_bb_774113CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4];
	add.s32 	%r28, %r98, -3;
	shl.b32 	%r357, %r22, 4;
	and.b32  	%r30, %r357, 16;
	shl.b32 	%r358, %r1, 6;
	shl.b32 	%r359, %r22, 1;
	and.b32  	%r360, %r359, 12;
	and.b32  	%r361, %r358, 192;
	or.b32  	%r362, %r30, %r361;
	or.b32  	%r363, %r362, %r360;
	mul.lo.s32 	%r364, %r24, 49152;
	or.b32  	%r365, %r364, %r363;
	mad.lo.s32 	%r366, %r25, 24576, %r365;
	shr.u32 	%r367, %r1, 2;
	cvt.u16.u32 	%rs8, %r367;
	mul.lo.s16 	%rs9, %rs8, 171;
	shr.u16 	%rs10, %rs9, 10;
	mul.lo.s16 	%rs11, %rs10, 6;
	sub.s16 	%rs12, %rs8, %rs11;
	shl.b16 	%rs13, %rs12, 4;
	cvt.u32.u16 	%r368, %rs13;
	and.b32  	%r369, %r368, 240;
	shr.u32 	%r31, %r22, 2;
	and.b32  	%r370, %r31, 6;
	or.b32  	%r371, %r370, %r369;
	cvt.u16.u32 	%rs14, %r371;
	mul.lo.s16 	%rs15, %rs14, 171;
	shr.u16 	%rs16, %rs15, 14;
	mul.lo.s16 	%rs17, %rs16, 96;
	sub.s16 	%rs18, %rs14, %rs17;
	and.b16  	%rs19, %rs18, 246;
	mul.wide.u16 	%r372, %rs19, 256;
	add.s32 	%r373, %r366, %r372;
	shl.b32 	%r374, %r373, 2;
	cvt.u64.u32 	%rd25, %r374;
	add.s64 	%rd26, %rd1, %rd25;
	ld.global.v4.u32 	{%r101, %r102, %r117, %r118}, [%rd26];
	or.b16  	%rs20, %rs14, 8;
	mul.lo.s16 	%rs21, %rs20, 171;
	shr.u16 	%rs22, %rs21, 14;
	mul.lo.s16 	%rs23, %rs22, 96;
	sub.s16 	%rs24, %rs20, %rs23;
	and.b16  	%rs25, %rs24, 254;
	mul.wide.u16 	%r375, %rs25, 256;
	add.s32 	%r376, %r366, %r375;
	shl.b32 	%r377, %r376, 2;
	cvt.u64.u32 	%rd27, %r377;
	add.s64 	%rd28, %rd1, %rd27;
	ld.global.v4.u32 	{%r109, %r110, %r125, %r126}, [%rd28];
	or.b32  	%r378, %r366, 33;
	add.s32 	%r379, %r378, %r372;
	mul.wide.s32 	%rd29, %r379, 4;
	add.s64 	%rd30, %rd1, %rd29;
	ld.global.v4.u32 	{%r133, %r134, %r149, %r150}, [%rd30+-4];
	add.s32 	%r380, %r378, %r375;
	mul.wide.s32 	%rd31, %r380, 4;
	add.s64 	%rd32, %rd1, %rd31;
	ld.global.v4.u32 	{%r141, %r142, %r157, %r158}, [%rd32+-4];
	or.b16  	%rs26, %rs14, 1;
	mul.lo.s16 	%rs27, %rs26, 171;
	shr.u16 	%rs28, %rs27, 14;
	mul.lo.s16 	%rs29, %rs28, 96;
	sub.s16 	%rs30, %rs26, %rs29;
	and.b16  	%rs31, %rs30, 247;
	mul.wide.u16 	%r381, %rs31, 256;
	add.s32 	%r382, %r366, %r381;
	shl.b32 	%r383, %r382, 2;
	cvt.u64.u32 	%rd33, %r383;
	add.s64 	%rd34, %rd1, %rd33;
	ld.global.v4.u32 	{%r165, %r166, %r181, %r182}, [%rd34];
	or.b16  	%rs32, %rs14, 9;
	mul.lo.s16 	%rs33, %rs32, 171;
	shr.u16 	%rs34, %rs33, 14;
	mul.lo.s16 	%rs35, %rs34, 96;
	sub.s16 	%rs36, %rs32, %rs35;
	and.b16  	%rs37, %rs36, 255;
	mul.wide.u16 	%r384, %rs37, 256;
	add.s32 	%r385, %r366, %r384;
	shl.b32 	%r386, %r385, 2;
	cvt.u64.u32 	%rd35, %r386;
	add.s64 	%rd36, %rd1, %rd35;
	ld.global.v4.u32 	{%r173, %r174, %r189, %r190}, [%rd36];
	add.s32 	%r387, %r378, %r381;
	mul.wide.s32 	%rd37, %r387, 4;
	add.s64 	%rd38, %rd1, %rd37;
	ld.global.v4.u32 	{%r197, %r198, %r213, %r214}, [%rd38+-4];
	add.s32 	%r388, %r378, %r384;
	mul.wide.s32 	%rd39, %r388, 4;
	add.s64 	%rd40, %rd1, %rd39;
	ld.global.v4.u32 	{%r205, %r206, %r221, %r222}, [%rd40+-4];
	mov.u32 	%r223, 21520;
	// begin inline asm
	prmt.b32 %r229, %r101, %r102, %r223;
	// end inline asm
	mov.u32 	%r227, 30258;
	// begin inline asm
	prmt.b32 %r230, %r101, %r102, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r237, %r109, %r110, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r238, %r109, %r110, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r245, %r117, %r118, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r246, %r117, %r118, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r253, %r125, %r126, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r254, %r125, %r126, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r261, %r133, %r134, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r262, %r133, %r134, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r269, %r141, %r142, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r270, %r141, %r142, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r277, %r149, %r150, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r278, %r149, %r150, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r285, %r157, %r158, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r286, %r157, %r158, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r293, %r165, %r166, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r294, %r165, %r166, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r301, %r173, %r174, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r302, %r173, %r174, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r309, %r181, %r182, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r310, %r181, %r182, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r317, %r189, %r190, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r318, %r189, %r190, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r325, %r197, %r198, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r326, %r197, %r198, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r333, %r205, %r206, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r334, %r205, %r206, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r341, %r213, %r214, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r342, %r213, %r214, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r349, %r221, %r222, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r350, %r221, %r222, %r227;
	// end inline asm
	mov.u32 	%r351, 25152;
	// begin inline asm
	prmt.b32 %r228, %r229, %r230, %r351;
	// end inline asm
	mov.u32 	%r355, 29521;
	// begin inline asm
	prmt.b32 %r232, %r229, %r230, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r236, %r237, %r238, %r351;
	// end inline asm
	// begin inline asm
	prmt.b32 %r240, %r237, %r238, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r244, %r245, %r246, %r351;
	// end inline asm
	// begin inline asm
	prmt.b32 %r248, %r245, %r246, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r252, %r253, %r254, %r351;
	// end inline asm
	// begin inline asm
	prmt.b32 %r256, %r253, %r254, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r260, %r261, %r262, %r351;
	// end inline asm
	// begin inline asm
	prmt.b32 %r264, %r261, %r262, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r268, %r269, %r270, %r351;
	// end inline asm
	// begin inline asm
	prmt.b32 %r272, %r269, %r270, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r276, %r277, %r278, %r351;
	// end inline asm
	// begin inline asm
	prmt.b32 %r280, %r277, %r278, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r284, %r285, %r286, %r351;
	// end inline asm
	// begin inline asm
	prmt.b32 %r288, %r285, %r286, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r292, %r293, %r294, %r351;
	// end inline asm
	// begin inline asm
	prmt.b32 %r296, %r293, %r294, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r300, %r301, %r302, %r351;
	// end inline asm
	// begin inline asm
	prmt.b32 %r304, %r301, %r302, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r308, %r309, %r310, %r351;
	// end inline asm
	// begin inline asm
	prmt.b32 %r312, %r309, %r310, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r316, %r317, %r318, %r351;
	// end inline asm
	// begin inline asm
	prmt.b32 %r320, %r317, %r318, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r324, %r325, %r326, %r351;
	// end inline asm
	// begin inline asm
	prmt.b32 %r328, %r325, %r326, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r332, %r333, %r334, %r351;
	// end inline asm
	// begin inline asm
	prmt.b32 %r336, %r333, %r334, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r340, %r341, %r342, %r351;
	// end inline asm
	// begin inline asm
	prmt.b32 %r344, %r341, %r342, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r348, %r349, %r350, %r351;
	// end inline asm
	// begin inline asm
	prmt.b32 %r352, %r349, %r350, %r355;
	// end inline asm
	and.b32  	%r32, %r22, 2;
	setp.eq.s32 	%p7, %r32, 0;
	selp.b32 	%r389, %r260, %r228, %p7;
	shfl.sync.bfly.b32	%r390, %r389, 2, 31, -1;
	selp.b32 	%r391, %r228, %r390, %p7;
	selp.b32 	%r392, %r390, %r260, %p7;
	selp.b32 	%r393, %r268, %r236, %p7;
	shfl.sync.bfly.b32	%r394, %r393, 2, 31, -1;
	selp.b32 	%r395, %r236, %r394, %p7;
	selp.b32 	%r396, %r394, %r268, %p7;
	selp.b32 	%r397, %r264, %r232, %p7;
	shfl.sync.bfly.b32	%r398, %r397, 2, 31, -1;
	selp.b32 	%r399, %r232, %r398, %p7;
	selp.b32 	%r400, %r398, %r264, %p7;
	selp.b32 	%r401, %r272, %r240, %p7;
	shfl.sync.bfly.b32	%r402, %r401, 2, 31, -1;
	selp.b32 	%r403, %r240, %r402, %p7;
	selp.b32 	%r404, %r402, %r272, %p7;
	selp.b32 	%r405, %r276, %r244, %p7;
	shfl.sync.bfly.b32	%r406, %r405, 2, 31, -1;
	selp.b32 	%r407, %r244, %r406, %p7;
	selp.b32 	%r408, %r406, %r276, %p7;
	selp.b32 	%r409, %r284, %r252, %p7;
	shfl.sync.bfly.b32	%r410, %r409, 2, 31, -1;
	selp.b32 	%r411, %r252, %r410, %p7;
	selp.b32 	%r412, %r410, %r284, %p7;
	selp.b32 	%r413, %r280, %r248, %p7;
	shfl.sync.bfly.b32	%r414, %r413, 2, 31, -1;
	selp.b32 	%r415, %r248, %r414, %p7;
	selp.b32 	%r416, %r414, %r280, %p7;
	selp.b32 	%r417, %r288, %r256, %p7;
	shfl.sync.bfly.b32	%r418, %r417, 2, 31, -1;
	selp.b32 	%r419, %r256, %r418, %p7;
	selp.b32 	%r420, %r418, %r288, %p7;
	selp.b32 	%r421, %r324, %r292, %p7;
	shfl.sync.bfly.b32	%r422, %r421, 2, 31, -1;
	selp.b32 	%r423, %r292, %r422, %p7;
	selp.b32 	%r424, %r422, %r324, %p7;
	selp.b32 	%r425, %r332, %r300, %p7;
	shfl.sync.bfly.b32	%r426, %r425, 2, 31, -1;
	selp.b32 	%r427, %r300, %r426, %p7;
	selp.b32 	%r428, %r426, %r332, %p7;
	selp.b32 	%r429, %r328, %r296, %p7;
	shfl.sync.bfly.b32	%r430, %r429, 2, 31, -1;
	selp.b32 	%r431, %r296, %r430, %p7;
	selp.b32 	%r432, %r430, %r328, %p7;
	selp.b32 	%r433, %r336, %r304, %p7;
	shfl.sync.bfly.b32	%r434, %r433, 2, 31, -1;
	selp.b32 	%r435, %r304, %r434, %p7;
	selp.b32 	%r436, %r434, %r336, %p7;
	selp.b32 	%r437, %r340, %r308, %p7;
	shfl.sync.bfly.b32	%r438, %r437, 2, 31, -1;
	selp.b32 	%r439, %r308, %r438, %p7;
	selp.b32 	%r440, %r438, %r340, %p7;
	selp.b32 	%r441, %r348, %r316, %p7;
	shfl.sync.bfly.b32	%r442, %r441, 2, 31, -1;
	selp.b32 	%r443, %r316, %r442, %p7;
	selp.b32 	%r444, %r442, %r348, %p7;
	selp.b32 	%r445, %r344, %r312, %p7;
	shfl.sync.bfly.b32	%r446, %r445, 2, 31, -1;
	selp.b32 	%r447, %r312, %r446, %p7;
	selp.b32 	%r448, %r446, %r344, %p7;
	selp.b32 	%r449, %r352, %r320, %p7;
	shfl.sync.bfly.b32	%r450, %r449, 2, 31, -1;
	selp.b32 	%r451, %r320, %r450, %p7;
	selp.b32 	%r452, %r450, %r352, %p7;
	and.b32  	%r33, %r22, 4;
	setp.eq.s32 	%p8, %r33, 0;
	selp.b32 	%r453, %r423, %r391, %p8;
	shfl.sync.bfly.b32	%r454, %r453, 4, 31, -1;
	selp.b32 	%r34, %r391, %r454, %p8;
	selp.b32 	%r35, %r454, %r423, %p8;
	selp.b32 	%r455, %r427, %r395, %p8;
	shfl.sync.bfly.b32	%r456, %r455, 4, 31, -1;
	selp.b32 	%r36, %r395, %r456, %p8;
	selp.b32 	%r37, %r456, %r427, %p8;
	selp.b32 	%r457, %r431, %r399, %p8;
	shfl.sync.bfly.b32	%r458, %r457, 4, 31, -1;
	selp.b32 	%r38, %r399, %r458, %p8;
	selp.b32 	%r39, %r458, %r431, %p8;
	selp.b32 	%r459, %r435, %r403, %p8;
	shfl.sync.bfly.b32	%r460, %r459, 4, 31, -1;
	selp.b32 	%r40, %r403, %r460, %p8;
	selp.b32 	%r41, %r460, %r435, %p8;
	selp.b32 	%r461, %r439, %r407, %p8;
	shfl.sync.bfly.b32	%r462, %r461, 4, 31, -1;
	selp.b32 	%r42, %r407, %r462, %p8;
	selp.b32 	%r43, %r462, %r439, %p8;
	selp.b32 	%r463, %r443, %r411, %p8;
	shfl.sync.bfly.b32	%r464, %r463, 4, 31, -1;
	selp.b32 	%r44, %r411, %r464, %p8;
	selp.b32 	%r45, %r464, %r443, %p8;
	selp.b32 	%r465, %r447, %r415, %p8;
	shfl.sync.bfly.b32	%r466, %r465, 4, 31, -1;
	selp.b32 	%r46, %r415, %r466, %p8;
	selp.b32 	%r47, %r466, %r447, %p8;
	selp.b32 	%r467, %r451, %r419, %p8;
	shfl.sync.bfly.b32	%r468, %r467, 4, 31, -1;
	selp.b32 	%r48, %r419, %r468, %p8;
	selp.b32 	%r49, %r468, %r451, %p8;
	selp.b32 	%r469, %r424, %r392, %p8;
	shfl.sync.bfly.b32	%r470, %r469, 4, 31, -1;
	selp.b32 	%r50, %r392, %r470, %p8;
	selp.b32 	%r51, %r470, %r424, %p8;
	selp.b32 	%r471, %r428, %r396, %p8;
	shfl.sync.bfly.b32	%r472, %r471, 4, 31, -1;
	selp.b32 	%r52, %r396, %r472, %p8;
	selp.b32 	%r53, %r472, %r428, %p8;
	selp.b32 	%r473, %r432, %r400, %p8;
	shfl.sync.bfly.b32	%r474, %r473, 4, 31, -1;
	selp.b32 	%r54, %r400, %r474, %p8;
	selp.b32 	%r55, %r474, %r432, %p8;
	selp.b32 	%r475, %r436, %r404, %p8;
	shfl.sync.bfly.b32	%r476, %r475, 4, 31, -1;
	selp.b32 	%r56, %r404, %r476, %p8;
	selp.b32 	%r57, %r476, %r436, %p8;
	selp.b32 	%r477, %r440, %r408, %p8;
	shfl.sync.bfly.b32	%r478, %r477, 4, 31, -1;
	selp.b32 	%r58, %r408, %r478, %p8;
	selp.b32 	%r59, %r478, %r440, %p8;
	selp.b32 	%r479, %r444, %r412, %p8;
	shfl.sync.bfly.b32	%r480, %r479, 4, 31, -1;
	selp.b32 	%r60, %r412, %r480, %p8;
	selp.b32 	%r61, %r480, %r444, %p8;
	selp.b32 	%r481, %r448, %r416, %p8;
	shfl.sync.bfly.b32	%r482, %r481, 4, 31, -1;
	selp.b32 	%r62, %r416, %r482, %p8;
	selp.b32 	%r63, %r482, %r448, %p8;
	selp.b32 	%r483, %r452, %r420, %p8;
	shfl.sync.bfly.b32	%r484, %r483, 4, 31, -1;
	selp.b32 	%r64, %r420, %r484, %p8;
	selp.b32 	%r65, %r484, %r452, %p8;
	shl.b32 	%r485, %r23, 6;
	and.b32  	%r66, %r485, 1920;
	and.b32  	%r67, %r1, 12;
	shl.b32 	%r486, %r23, 11;
	and.b32  	%r68, %r486, 2048;
	shl.b32 	%r487, %r1, 5;
	shl.b32 	%r488, %r22, 2;
	and.b32  	%r69, %r488, 28;
	and.b32  	%r70, %r487, 96;
	or.b32  	%r71, %r70, %r69;
	shl.b32 	%r489, %r22, 3;
	and.b32  	%r72, %r489, 24;
	or.b32  	%r73, %r72, %r70;
	or.b32  	%r490, %r31, %r369;
	mul.hi.u32 	%r491, %r490, -1431655765;
	shr.u32 	%r492, %r491, 6;
	mul.lo.s32 	%r493, %r492, 96;
	sub.s32 	%r74, %r490, %r493;
	and.b32  	%r75, %r359, 6;
	and.b32  	%r494, %r1, 3;
	mul.lo.s32 	%r76, %r494, 3200;
	or.b32  	%r495, %r490, 8;
	mul.hi.u32 	%r496, %r495, -1431655765;
	shr.u32 	%r497, %r496, 6;
	mul.lo.s32 	%r498, %r497, 96;
	sub.s32 	%r77, %r495, %r498;
	and.b32  	%r499, %r22, 7;
	shl.b32 	%r78, %r89, %r29;
	min.u32 	%r79, %r28, 31;
	and.b32  	%r80, %r22, 1;
	shl.b32 	%r501, %r23, 15;
	and.b32  	%r502, %r501, 1015808;
	shl.b32 	%r503, %r27, 20;
	or.b32  	%r81, %r503, %r502;
	shl.b32 	%r504, %r22, 5;
	and.b32  	%r82, %r504, 64;
	mul.lo.s32 	%r505, %r499, 100;
	add.s32 	%r506, %r505, %r27;
	mul.wide.u32 	%rd41, %r506, 4;
	mov.u64 	%rd42, shmem;
	add.s64 	%rd43, %rd42, 16512;
	add.s64 	%rd7, %rd43, %rd41;
	cvt.u64.u32 	%rd44, %r505;
	cvt.u64.u32 	%rd45, %r27;
	add.s64 	%rd46, %rd45, %rd44;
	shl.b64 	%rd47, %rd46, 2;
	add.s64 	%rd8, %rd43, %rd47;
	add.s32 	%r507, %r505, 800;
	add.s32 	%r508, %r507, %r27;
	mul.wide.u32 	%rd48, %r508, 4;
	add.s64 	%rd9, %rd43, %rd48;
	cvt.u64.u32 	%rd49, %r507;
	add.s64 	%rd50, %rd45, %rd49;
	shl.b64 	%rd51, %rd50, 2;
	add.s64 	%rd10, %rd43, %rd51;
	add.s32 	%r509, %r505, 1600;
	add.s32 	%r510, %r509, %r27;
	mul.wide.u32 	%rd52, %r510, 4;
	add.s64 	%rd11, %rd43, %rd52;
	cvt.u64.u32 	%rd53, %r509;
	add.s64 	%rd54, %rd45, %rd53;
	shl.b64 	%rd55, %rd54, 2;
	add.s64 	%rd12, %rd43, %rd55;
	add.s32 	%r511, %r505, 2400;
	add.s32 	%r512, %r511, %r27;
	mul.wide.u32 	%rd56, %r512, 4;
	add.s64 	%rd13, %rd43, %rd56;
	cvt.u64.u32 	%rd57, %r511;
	add.s64 	%rd58, %rd45, %rd57;
	shl.b64 	%rd59, %rd58, 2;
	add.s64 	%rd14, %rd43, %rd59;
	and.b32  	%r83, %r489, 32;
	mov.u32 	%r356, 0;
	setp.lt.u32 	%p9, %r1, 16;
	mov.u32 	%r1321, %r356;
LBB0_9:                                 // %L2742
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_10 Depth 2
                                        //       Child Loop BB0_12 Depth 3
	mov.u32 	%r1322, %r356;
	mov.u32 	%r1323, %r356;
	mov.u32 	%r1324, %r356;
	mov.u32 	%r1325, %r356;
	mov.u32 	%r1326, %r356;
	mov.u32 	%r1327, %r356;
	mov.u32 	%r1328, %r356;
LBB0_10:                                // %L2745
                                        //   Parent Loop BB0_9 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_12 Depth 3
	@%p9 bra 	LBB0_20;
	bra.uni 	LBB0_11;
LBB0_20:                                // %pass923
                                        //   in Loop: Header=BB0_10 Depth=2
	add.s32 	%r10, %r1322, %r1321;
	or.b32  	%r514, %r26, %r10;
	or.b32  	%r515, %r514, %r67;
	shl.b32 	%r516, %r515, 12;
	and.b32  	%r517, %r516, 134213632;
	or.b32  	%r518, %r517, %r66;
	or.b32  	%r519, %r68, %r518;
	or.b32  	%r520, %r71, %r519;
	shl.b32 	%r521, %r520, 2;
	cvt.u64.u32 	%rd60, %r521;
	add.s64 	%rd61, %rd2, %rd60;
	ld.global.v4.u32 	{%r522, %r523, %r524, %r525}, [%rd61];
	or.b32  	%r526, %r515, 16;
	shl.b32 	%r527, %r526, 12;
	and.b32  	%r528, %r527, 134213632;
	or.b32  	%r529, %r528, %r66;
	or.b32  	%r530, %r68, %r529;
	or.b32  	%r531, %r71, %r530;
	shl.b32 	%r532, %r531, 2;
	cvt.u64.u32 	%rd62, %r532;
	add.s64 	%rd63, %rd2, %rd62;
	ld.global.v4.u32 	{%r533, %r534, %r535, %r536}, [%rd63];
	and.b32  	%r537, %r515, 31;
	mul.lo.s32 	%r538, %r537, 129;
	add.s32 	%r539, %r70, %r538;
	add.s32 	%r540, %r539, %r69;
	mul.wide.u32 	%rd64, %r540, 4;
	add.s64 	%rd66, %rd42, %rd64;
	st.shared.u32 	[%rd66], %r522;
	cvt.u64.u32 	%rd67, %r71;
	cvt.u64.u32 	%rd68, %r538;
	add.s64 	%rd69, %rd68, %rd67;
	shl.b64 	%rd70, %rd69, 2;
	add.s64 	%rd71, %rd42, %rd70;
	st.shared.u32 	[%rd71+4], %r523;
	st.shared.u32 	[%rd71+8], %r524;
	st.shared.u32 	[%rd71+12], %r525;
	and.b32  	%r541, %r526, 31;
	mul.lo.s32 	%r542, %r541, 129;
	add.s32 	%r543, %r70, %r542;
	add.s32 	%r544, %r543, %r69;
	mul.wide.u32 	%rd72, %r544, 4;
	add.s64 	%rd73, %rd42, %rd72;
	st.shared.u32 	[%rd73], %r533;
	cvt.u64.u32 	%rd74, %r542;
	add.s64 	%rd75, %rd74, %rd67;
	shl.b64 	%rd76, %rd75, 2;
	add.s64 	%rd77, %rd42, %rd76;
	st.shared.u32 	[%rd77+4], %r534;
	st.shared.u32 	[%rd77+8], %r535;
	st.shared.u32 	[%rd77+12], %r536;
LBB0_11:                                // %L4664
                                        //   in Loop: Header=BB0_10 Depth=2
	bar.sync 	0;
	mov.u32 	%r558, 0;
	mov.u32 	%r1329, %r558;
LBB0_12:                                // %L4666
                                        //   Parent Loop BB0_9 Depth=1
                                        //     Parent Loop BB0_10 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add.s32 	%r1070, %r31, %r1329;
	and.b32  	%r1071, %r1070, 31;
	mul.lo.s32 	%r1072, %r1071, 129;
	add.s32 	%r1073, %r72, %r1072;
	add.s32 	%r1074, %r1073, %r70;
	mul.wide.u32 	%rd78, %r1074, 4;
	add.s64 	%rd80, %rd42, %rd78;
	ld.shared.u32 	%r547, [%rd80];
	mov.u32 	%r548, 134744072;
	mov.u32 	%r549, 252645135;
	// begin inline asm
	lop3.b32 %r546, %r547, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1075, %r546, 2021161080;
	xor.b32  	%r563, %r1075, -2139062144;
	shr.u32 	%r551, %r547, 4;
	// begin inline asm
	lop3.b32 %r550, %r551, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1076, %r550, 2021161080;
	xor.b32  	%r557, %r1076, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r554, %r555}, {%r38}, {%r557}, {%r558, %r558};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r560, %r561}, {%r34}, {%r563}, {%r558, %r558};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r566, %r567}, {%r38}, {%r563}, {%r558, %r558};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r572, %r573}, {%r34}, {%r557}, {%r566, %r567};
	// end inline asm
	cvt.u64.u32 	%rd81, %r73;
	cvt.u64.u32 	%rd82, %r1072;
	add.s64 	%rd83, %rd82, %rd81;
	shl.b64 	%rd84, %rd83, 2;
	add.s64 	%rd85, %rd42, %rd84;
	ld.shared.u32 	%r579, [%rd85+4];
	// begin inline asm
	lop3.b32 %r578, %r579, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1077, %r578, 2021161080;
	xor.b32  	%r595, %r1077, -2139062144;
	shr.u32 	%r583, %r579, 4;
	// begin inline asm
	lop3.b32 %r582, %r583, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1078, %r582, 2021161080;
	xor.b32  	%r589, %r1078, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r586, %r587}, {%r46}, {%r589}, {%r554, %r555};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r592, %r593}, {%r42}, {%r595}, {%r560, %r561};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r598, %r599}, {%r46}, {%r595}, {%r572, %r573};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r604, %r605}, {%r42}, {%r589}, {%r598, %r599};
	// end inline asm
	ld.shared.u32 	%r611, [%rd85+8];
	// begin inline asm
	lop3.b32 %r610, %r611, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1079, %r610, 2021161080;
	xor.b32  	%r627, %r1079, -2139062144;
	shr.u32 	%r615, %r611, 4;
	// begin inline asm
	lop3.b32 %r614, %r615, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1080, %r614, 2021161080;
	xor.b32  	%r621, %r1080, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r618, %r619}, {%r54}, {%r621}, {%r586, %r587};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r624, %r625}, {%r50}, {%r627}, {%r592, %r593};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r630, %r631}, {%r54}, {%r627}, {%r604, %r605};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r636, %r637}, {%r50}, {%r621}, {%r630, %r631};
	// end inline asm
	ld.shared.u32 	%r643, [%rd85+12];
	// begin inline asm
	lop3.b32 %r642, %r643, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1081, %r642, 2021161080;
	xor.b32  	%r659, %r1081, -2139062144;
	shr.u32 	%r647, %r643, 4;
	// begin inline asm
	lop3.b32 %r646, %r647, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1082, %r646, 2021161080;
	xor.b32  	%r653, %r1082, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r650, %r651}, {%r62}, {%r653}, {%r618, %r619};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r656, %r657}, {%r58}, {%r659}, {%r624, %r625};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r662, %r663}, {%r62}, {%r659}, {%r636, %r637};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r668, %r669}, {%r58}, {%r653}, {%r662, %r663};
	// end inline asm
	ld.shared.u32 	%r675, [%rd85+16];
	// begin inline asm
	lop3.b32 %r674, %r675, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1083, %r674, 2021161080;
	xor.b32  	%r691, %r1083, -2139062144;
	shr.u32 	%r679, %r675, 4;
	// begin inline asm
	lop3.b32 %r678, %r679, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1084, %r678, 2021161080;
	xor.b32  	%r685, %r1084, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r682, %r683}, {%r39}, {%r685}, {%r650, %r651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r688, %r689}, {%r35}, {%r691}, {%r656, %r657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r694, %r695}, {%r39}, {%r691}, {%r668, %r669};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r700, %r701}, {%r35}, {%r685}, {%r694, %r695};
	// end inline asm
	ld.shared.u32 	%r707, [%rd85+20];
	// begin inline asm
	lop3.b32 %r706, %r707, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1085, %r706, 2021161080;
	xor.b32  	%r723, %r1085, -2139062144;
	shr.u32 	%r711, %r707, 4;
	// begin inline asm
	lop3.b32 %r710, %r711, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1086, %r710, 2021161080;
	xor.b32  	%r717, %r1086, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r714, %r715}, {%r47}, {%r717}, {%r682, %r683};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r720, %r721}, {%r43}, {%r723}, {%r688, %r689};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r726, %r727}, {%r47}, {%r723}, {%r700, %r701};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r732, %r733}, {%r43}, {%r717}, {%r726, %r727};
	// end inline asm
	ld.shared.u32 	%r739, [%rd85+24];
	// begin inline asm
	lop3.b32 %r738, %r739, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1087, %r738, 2021161080;
	xor.b32  	%r755, %r1087, -2139062144;
	shr.u32 	%r743, %r739, 4;
	// begin inline asm
	lop3.b32 %r742, %r743, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1088, %r742, 2021161080;
	xor.b32  	%r749, %r1088, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r746, %r747}, {%r55}, {%r749}, {%r714, %r715};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r752, %r753}, {%r51}, {%r755}, {%r720, %r721};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r758, %r759}, {%r55}, {%r755}, {%r732, %r733};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r764, %r765}, {%r51}, {%r749}, {%r758, %r759};
	// end inline asm
	ld.shared.u32 	%r771, [%rd85+28];
	// begin inline asm
	lop3.b32 %r770, %r771, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1089, %r770, 2021161080;
	xor.b32  	%r787, %r1089, -2139062144;
	shr.u32 	%r775, %r771, 4;
	// begin inline asm
	lop3.b32 %r774, %r775, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1090, %r774, 2021161080;
	xor.b32  	%r781, %r1090, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r778, %r779}, {%r63}, {%r781}, {%r746, %r747};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r784, %r785}, {%r59}, {%r787}, {%r752, %r753};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r790, %r791}, {%r63}, {%r787}, {%r764, %r765};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r796, %r797}, {%r59}, {%r781}, {%r790, %r791};
	// end inline asm
	add.s32 	%r1091, %r796, 4;
	shr.s32 	%r804, %r1091, 3;
	sub.s32 	%r1092, %r778, %r784;
	add.s32 	%r1093, %r1092, 4;
	shr.s32 	%r803, %r1093, 3;
	add.s32 	%r1094, %r797, 4;
	shr.s32 	%r807, %r1094, 3;
	sub.s32 	%r1095, %r779, %r785;
	add.s32 	%r1096, %r1095, 4;
	shr.s32 	%r806, %r1096, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r802, %r803, %r804;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r805, %r806, %r807;
	// end inline asm
	or.b32  	%r1097, %r1329, %r75;
	mul.lo.s32 	%r1098, %r1097, 100;
	add.s32 	%r1099, %r1098, %r74;
	add.s32 	%r1100, %r1099, %r76;
	mul.wide.u32 	%rd86, %r1100, 4;
	add.s64 	%rd88, %rd43, %rd86;
	st.shared.u32 	[%rd88], %r802;
	add.s32 	%r1101, %r1098, 100;
	add.s32 	%r1102, %r1101, %r74;
	add.s32 	%r1103, %r1102, %r76;
	mul.wide.u32 	%rd89, %r1103, 4;
	add.s64 	%rd90, %rd43, %rd89;
	st.shared.u32 	[%rd90], %r805;
	ld.shared.u32 	%r809, [%rd80];
	// begin inline asm
	lop3.b32 %r808, %r809, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1104, %r808, 2021161080;
	xor.b32  	%r825, %r1104, -2139062144;
	shr.u32 	%r813, %r809, 4;
	// begin inline asm
	lop3.b32 %r812, %r813, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1105, %r812, 2021161080;
	xor.b32  	%r819, %r1105, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r816, %r817}, {%r40}, {%r819}, {%r558, %r558};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r822, %r823}, {%r36}, {%r825}, {%r558, %r558};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r828, %r829}, {%r40}, {%r825}, {%r558, %r558};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r834, %r835}, {%r36}, {%r819}, {%r828, %r829};
	// end inline asm
	ld.shared.u32 	%r841, [%rd85+4];
	// begin inline asm
	lop3.b32 %r840, %r841, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1106, %r840, 2021161080;
	xor.b32  	%r857, %r1106, -2139062144;
	shr.u32 	%r845, %r841, 4;
	// begin inline asm
	lop3.b32 %r844, %r845, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1107, %r844, 2021161080;
	xor.b32  	%r851, %r1107, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r848, %r849}, {%r48}, {%r851}, {%r816, %r817};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r854, %r855}, {%r44}, {%r857}, {%r822, %r823};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r860, %r861}, {%r48}, {%r857}, {%r834, %r835};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r866, %r867}, {%r44}, {%r851}, {%r860, %r861};
	// end inline asm
	ld.shared.u32 	%r873, [%rd85+8];
	// begin inline asm
	lop3.b32 %r872, %r873, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1108, %r872, 2021161080;
	xor.b32  	%r889, %r1108, -2139062144;
	shr.u32 	%r877, %r873, 4;
	// begin inline asm
	lop3.b32 %r876, %r877, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1109, %r876, 2021161080;
	xor.b32  	%r883, %r1109, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r880, %r881}, {%r56}, {%r883}, {%r848, %r849};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r886, %r887}, {%r52}, {%r889}, {%r854, %r855};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r892, %r893}, {%r56}, {%r889}, {%r866, %r867};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r898, %r899}, {%r52}, {%r883}, {%r892, %r893};
	// end inline asm
	ld.shared.u32 	%r905, [%rd85+12];
	// begin inline asm
	lop3.b32 %r904, %r905, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1110, %r904, 2021161080;
	xor.b32  	%r921, %r1110, -2139062144;
	shr.u32 	%r909, %r905, 4;
	// begin inline asm
	lop3.b32 %r908, %r909, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1111, %r908, 2021161080;
	xor.b32  	%r915, %r1111, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r912, %r913}, {%r64}, {%r915}, {%r880, %r881};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r918, %r919}, {%r60}, {%r921}, {%r886, %r887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r924, %r925}, {%r64}, {%r921}, {%r898, %r899};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r930, %r931}, {%r60}, {%r915}, {%r924, %r925};
	// end inline asm
	ld.shared.u32 	%r937, [%rd85+16];
	// begin inline asm
	lop3.b32 %r936, %r937, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1112, %r936, 2021161080;
	xor.b32  	%r953, %r1112, -2139062144;
	shr.u32 	%r941, %r937, 4;
	// begin inline asm
	lop3.b32 %r940, %r941, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1113, %r940, 2021161080;
	xor.b32  	%r947, %r1113, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r944, %r945}, {%r41}, {%r947}, {%r912, %r913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r950, %r951}, {%r37}, {%r953}, {%r918, %r919};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r956, %r957}, {%r41}, {%r953}, {%r930, %r931};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r962, %r963}, {%r37}, {%r947}, {%r956, %r957};
	// end inline asm
	ld.shared.u32 	%r969, [%rd85+20];
	// begin inline asm
	lop3.b32 %r968, %r969, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1114, %r968, 2021161080;
	xor.b32  	%r985, %r1114, -2139062144;
	shr.u32 	%r973, %r969, 4;
	// begin inline asm
	lop3.b32 %r972, %r973, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1115, %r972, 2021161080;
	xor.b32  	%r979, %r1115, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r976, %r977}, {%r49}, {%r979}, {%r944, %r945};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r982, %r983}, {%r45}, {%r985}, {%r950, %r951};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r988, %r989}, {%r49}, {%r985}, {%r962, %r963};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r994, %r995}, {%r45}, {%r979}, {%r988, %r989};
	// end inline asm
	ld.shared.u32 	%r1001, [%rd85+24];
	// begin inline asm
	lop3.b32 %r1000, %r1001, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1116, %r1000, 2021161080;
	xor.b32  	%r1017, %r1116, -2139062144;
	shr.u32 	%r1005, %r1001, 4;
	// begin inline asm
	lop3.b32 %r1004, %r1005, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1117, %r1004, 2021161080;
	xor.b32  	%r1011, %r1117, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1008, %r1009}, {%r57}, {%r1011}, {%r976, %r977};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1014, %r1015}, {%r53}, {%r1017}, {%r982, %r983};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1020, %r1021}, {%r57}, {%r1017}, {%r994, %r995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1026, %r1027}, {%r53}, {%r1011}, {%r1020, %r1021};
	// end inline asm
	ld.shared.u32 	%r1033, [%rd85+28];
	// begin inline asm
	lop3.b32 %r1032, %r1033, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1118, %r1032, 2021161080;
	xor.b32  	%r1049, %r1118, -2139062144;
	shr.u32 	%r1037, %r1033, 4;
	// begin inline asm
	lop3.b32 %r1036, %r1037, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1119, %r1036, 2021161080;
	xor.b32  	%r1043, %r1119, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1040, %r1041}, {%r65}, {%r1043}, {%r1008, %r1009};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1046, %r1047}, {%r61}, {%r1049}, {%r1014, %r1015};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1052, %r1053}, {%r65}, {%r1049}, {%r1026, %r1027};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1058, %r1059}, {%r61}, {%r1043}, {%r1052, %r1053};
	// end inline asm
	add.s32 	%r1120, %r1058, 4;
	shr.s32 	%r1066, %r1120, 3;
	sub.s32 	%r1121, %r1040, %r1046;
	add.s32 	%r1122, %r1121, 4;
	shr.s32 	%r1065, %r1122, 3;
	add.s32 	%r1123, %r1059, 4;
	shr.s32 	%r1069, %r1123, 3;
	sub.s32 	%r1124, %r1041, %r1047;
	add.s32 	%r1125, %r1124, 4;
	shr.s32 	%r1068, %r1125, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1064, %r1065, %r1066;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1067, %r1068, %r1069;
	// end inline asm
	add.s32 	%r1126, %r1098, %r77;
	add.s32 	%r1127, %r1126, %r76;
	mul.wide.u32 	%rd91, %r1127, 4;
	add.s64 	%rd92, %rd43, %rd91;
	st.shared.u32 	[%rd92], %r1064;
	add.s32 	%r1128, %r1101, %r77;
	add.s32 	%r1129, %r1128, %r76;
	mul.wide.u32 	%rd93, %r1129, 4;
	add.s64 	%rd94, %rd43, %rd93;
	st.shared.u32 	[%rd94], %r1067;
	add.s32 	%r1329, %r1329, 8;
	setp.ne.s32 	%p10, %r1329, 32;
	@%p10 bra 	LBB0_12;
// %bb.13:                              // %L9360
                                        //   in Loop: Header=BB0_10 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1148, [%rd7];
	ld.shared.u32 	%r1149, [%rd8+12800];
	ld.shared.u32 	%r1150, [%rd8+25600];
	ld.shared.u32 	%r1151, [%rd8+38400];
	ld.shared.u32 	%r1152, [%rd9];
	ld.shared.u32 	%r1153, [%rd10+12800];
	ld.shared.u32 	%r1154, [%rd10+25600];
	ld.shared.u32 	%r1155, [%rd10+38400];
	ld.shared.u32 	%r1156, [%rd11];
	ld.shared.u32 	%r1157, [%rd12+12800];
	ld.shared.u32 	%r1158, [%rd12+25600];
	ld.shared.u32 	%r1159, [%rd12+38400];
	ld.shared.u32 	%r1160, [%rd13];
	ld.shared.u32 	%r1161, [%rd14+12800];
	ld.shared.u32 	%r1162, [%rd14+25600];
	ld.shared.u32 	%r1163, [%rd14+38400];
	cvt.s32.s16 	%r1164, %r1148;
	shr.s32 	%r1165, %r1148, 16;
	cvt.s32.s16 	%r1166, %r1149;
	shr.s32 	%r1167, %r1149, 16;
	cvt.s32.s16 	%r1168, %r1150;
	shr.s32 	%r1169, %r1150, 16;
	cvt.s32.s16 	%r1170, %r1151;
	shr.s32 	%r1171, %r1151, 16;
	cvt.s32.s16 	%r1172, %r1152;
	shr.s32 	%r1173, %r1152, 16;
	cvt.s32.s16 	%r1174, %r1153;
	shr.s32 	%r1175, %r1153, 16;
	cvt.s32.s16 	%r1176, %r1154;
	shr.s32 	%r1177, %r1154, 16;
	cvt.s32.s16 	%r1178, %r1155;
	shr.s32 	%r1179, %r1155, 16;
	cvt.s32.s16 	%r1180, %r1156;
	shr.s32 	%r1181, %r1156, 16;
	cvt.s32.s16 	%r1182, %r1157;
	shr.s32 	%r1183, %r1157, 16;
	cvt.s32.s16 	%r1184, %r1158;
	shr.s32 	%r1185, %r1158, 16;
	cvt.s32.s16 	%r1186, %r1159;
	shr.s32 	%r1187, %r1159, 16;
	cvt.s32.s16 	%r1188, %r1160;
	shr.s32 	%r1189, %r1160, 16;
	cvt.s32.s16 	%r1190, %r1161;
	shr.s32 	%r1191, %r1161, 16;
	cvt.s32.s16 	%r1192, %r1162;
	shr.s32 	%r1193, %r1162, 16;
	cvt.s32.s16 	%r1194, %r1163;
	shr.s32 	%r1195, %r1163, 16;
	add.s32 	%r1196, %r1164, %r78;
	add.s32 	%r1197, %r1196, %r1166;
	add.s32 	%r1198, %r1197, %r1168;
	add.s32 	%r1199, %r1198, %r1170;
	shr.s32 	%r1200, %r1199, %r79;
	add.s32 	%r1201, %r1165, %r78;
	add.s32 	%r1202, %r1201, %r1167;
	add.s32 	%r1203, %r1202, %r1169;
	add.s32 	%r1204, %r1203, %r1171;
	shr.s32 	%r1205, %r1204, %r79;
	add.s32 	%r1206, %r1172, %r78;
	add.s32 	%r1207, %r1206, %r1174;
	add.s32 	%r1208, %r1207, %r1176;
	add.s32 	%r1209, %r1208, %r1178;
	shr.s32 	%r1210, %r1209, %r79;
	add.s32 	%r1211, %r1173, %r78;
	add.s32 	%r1212, %r1211, %r1175;
	add.s32 	%r1213, %r1212, %r1177;
	add.s32 	%r1214, %r1213, %r1179;
	shr.s32 	%r1215, %r1214, %r79;
	add.s32 	%r1216, %r1180, %r78;
	add.s32 	%r1217, %r1216, %r1182;
	add.s32 	%r1218, %r1217, %r1184;
	add.s32 	%r1219, %r1218, %r1186;
	shr.s32 	%r1220, %r1219, %r79;
	add.s32 	%r1221, %r1181, %r78;
	add.s32 	%r1222, %r1221, %r1183;
	add.s32 	%r1223, %r1222, %r1185;
	add.s32 	%r1224, %r1223, %r1187;
	shr.s32 	%r1225, %r1224, %r79;
	add.s32 	%r1226, %r1188, %r78;
	add.s32 	%r1227, %r1226, %r1190;
	add.s32 	%r1228, %r1227, %r1192;
	add.s32 	%r1229, %r1228, %r1194;
	shr.s32 	%r1230, %r1229, %r79;
	add.s32 	%r1231, %r1189, %r78;
	add.s32 	%r1232, %r1231, %r1191;
	add.s32 	%r1233, %r1232, %r1193;
	add.s32 	%r1234, %r1233, %r1195;
	shr.s32 	%r1235, %r1234, %r79;
	max.s32 	%r1236, %r1200, -7;
	min.s32 	%r1135, %r1236, 7;
	max.s32 	%r1237, %r1205, -7;
	min.s32 	%r1142, %r1237, 7;
	max.s32 	%r1238, %r1210, -7;
	min.s32 	%r1134, %r1238, 7;
	max.s32 	%r1239, %r1215, -7;
	min.s32 	%r1141, %r1239, 7;
	max.s32 	%r1240, %r1220, -7;
	min.s32 	%r1132, %r1240, 7;
	max.s32 	%r1241, %r1225, -7;
	min.s32 	%r1139, %r1241, 7;
	max.s32 	%r1242, %r1230, -7;
	min.s32 	%r1131, %r1242, 7;
	max.s32 	%r1243, %r1235, -7;
	min.s32 	%r1138, %r1243, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1130, %r1131, %r1132, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1133, %r1134, %r1135, %r1130;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1137, %r1138, %r1139, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1140, %r1141, %r1142, %r1137;
	// end inline asm
	shl.b32 	%r1147, %r1140, 4;
	// begin inline asm
	lop3.b32 %r1254, %r549, %r1133, %r1147, 202;
	// end inline asm
	setp.eq.s32 	%p11, %r1322, 0;
	selp.b32 	%r1327, %r1254, %r1327, %p11;
	selp.b32 	%r1328, %r1254, %r1328, %p11;
	setp.eq.s32 	%p12, %r1322, 32;
	selp.b32 	%r1323, %r1254, %r1323, %p12;
	selp.b32 	%r1324, %r1254, %r1324, %p12;
	setp.eq.s32 	%p13, %r1322, 64;
	selp.b32 	%r1325, %r1254, %r1325, %p13;
	selp.b32 	%r1326, %r1254, %r1326, %p13;
	add.s32 	%r20, %r1322, 32;
	setp.ne.s32 	%p14, %r1322, 96;
	mov.u32 	%r1322, %r20;
	@%p14 bra 	LBB0_10;
// %bb.14:                              // %L12083
                                        //   in Loop: Header=BB0_9 Depth=1
	setp.eq.s32 	%p15, %r80, 0;
	// begin inline asm
	prmt.b32 %r1244, %r1327, %r1323, %r351;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1248, %r1328, %r1324, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1252, %r1325, %r1254, %r351;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1256, %r1326, %r1254, %r355;
	// end inline asm
	selp.b32 	%r1292, %r1248, %r1244, %p15;
	shfl.sync.bfly.b32	%r1293, %r1292, 1, 31, -1;
	selp.b32 	%r1261, %r1244, %r1293, %p15;
	selp.b32 	%r1262, %r1293, %r1248, %p15;
	selp.b32 	%r1294, %r1256, %r1252, %p15;
	shfl.sync.bfly.b32	%r1295, %r1294, 1, 31, -1;
	selp.b32 	%r1269, %r1252, %r1295, %p15;
	selp.b32 	%r1270, %r1295, %r1256, %p15;
	// begin inline asm
	prmt.b32 %r1260, %r1261, %r1262, %r351;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1264, %r1261, %r1262, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1268, %r1269, %r1270, %r351;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1272, %r1269, %r1270, %r355;
	// end inline asm
	selp.b32 	%r1296, %r1268, %r1260, %p7;
	shfl.sync.bfly.b32	%r1297, %r1296, 2, 31, -1;
	selp.b32 	%r1277, %r1260, %r1297, %p7;
	selp.b32 	%r1278, %r1297, %r1268, %p7;
	selp.b32 	%r1298, %r1272, %r1264, %p7;
	shfl.sync.bfly.b32	%r1299, %r1298, 2, 31, -1;
	selp.b32 	%r1285, %r1264, %r1299, %p7;
	selp.b32 	%r1286, %r1299, %r1272, %p7;
	// begin inline asm
	prmt.b32 %r1276, %r1277, %r1278, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1280, %r1277, %r1278, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1284, %r1285, %r1286, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1288, %r1285, %r1286, %r227;
	// end inline asm
	selp.b32 	%r1300, %r1284, %r1276, %p8;
	shfl.sync.bfly.b32	%r1301, %r1300, 4, 31, -1;
	selp.b32 	%r1302, %r1276, %r1301, %p8;
	selp.b32 	%r1303, %r1301, %r1284, %p8;
	selp.b32 	%r1304, %r1288, %r1280, %p8;
	shfl.sync.bfly.b32	%r1305, %r1304, 4, 31, -1;
	selp.b32 	%r1306, %r1280, %r1305, %p8;
	selp.b32 	%r1307, %r1305, %r1288, %p8;
	selp.b32 	%r1308, %r1306, %r1302, %p15;
	shfl.sync.bfly.b32	%r1309, %r1308, 1, 31, -1;
	selp.b32 	%r1310, %r1302, %r1309, %p15;
	selp.b32 	%r1311, %r1309, %r1306, %p15;
	selp.b32 	%r1312, %r1307, %r1303, %p15;
	shfl.sync.bfly.b32	%r1313, %r1312, 1, 31, -1;
	selp.b32 	%r1314, %r1303, %r1313, %p15;
	selp.b32 	%r1315, %r1313, %r1307, %p15;
	or.b32  	%r1316, %r30, %r1321;
	or.b32  	%r1317, %r83, %r1316;
	or.b32  	%r1318, %r82, %r1317;
	add.s32 	%r1319, %r81, %r1318;
	cvt.u64.u32 	%rd95, %r1319;
	add.s64 	%rd96, %rd4, %rd95;
	st.global.v4.u32 	[%rd96], {%r1310, %r1314, %r1311, %r1315};
	add.s32 	%r21, %r1321, 128;
	setp.eq.s32 	%p18, %r1321, 32640;
	mov.u32 	%r1321, %r21;
	@%p18 bra 	LBB0_15;
	bra.uni 	LBB0_9;
LBB0_15:                                // %oksrem4379
	mov.u32 	%r1320, 0;
	st.global.u32 	[%rd6], %r1320;
	ret;
LBB0_1:                                 // %L9
	mov.u64 	%rd16, exception1873;
	cvta.global.u64 	%rd17, %rd16;
	{ // callseq 13, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd17;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 13
	{ // callseq 14, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd15;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 14
	// begin inline asm
	exit;
	// end inline asm
LBB0_3:                                 // %L28
	mov.u64 	%rd18, exception1873;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 15, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 15
	{ // callseq 16, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd15;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 16
	// begin inline asm
	exit;
	// end inline asm
LBB0_5:                                 // %L60
	{ // callseq 21, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd15;
	call.uni 
	julia_unreachable_9098, 
	(
	param0
	);
	} // callseq 21
LBB0_6:                                 // %L86
	{ // callseq 20, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd15;
	call.uni 
	julia_unreachable_9098, 
	(
	param0
	);
	} // callseq 20
LBB0_7:                                 // %L112
	{ // callseq 19, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd15;
	call.uni 
	julia_unreachable_9098, 
	(
	param0
	);
	} // callseq 19
LBB0_19:                                // %oksrem100
	mov.u32 	%r99, 2;
	st.global.u32 	[%rd6], %r99;
	mov.u64 	%rd23, exception867;
	cvta.global.u64 	%rd24, %rd23;
	{ // callseq 17, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd24;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 17
	{ // callseq 18, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd15;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 18
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
