// PTX CompilerJob of kernel #bb(CuDeviceVector{Int8x4, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Int32, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 7.1
.target sm_86
.address_size 64

	// .globl	_Z13julia_bb_487313CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE // -- Begin function _Z13julia_bb_487313CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[8]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception866[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1872[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z13julia_bb_487313CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.visible .entry _Z13julia_bb_487313CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE(
	.param .align 8 .b8 _Z13julia_bb_487313CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0[8],
	.param .align 8 .b8 _Z13julia_bb_487313CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z13julia_bb_487313CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z13julia_bb_487313CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z13julia_bb_487313CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z13julia_bb_487313CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<16>;
	.reg .b16 	%rs<19>;
	.reg .b32 	%r<1355>;
	.reg .b64 	%rd<97>;

// %bb.0:                               // %conversion
	ld.param.u64 	%rd15, [_Z13julia_bb_487313CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r83, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r83, 16511;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L11
	// begin inline asm
	mov.u32 %r84, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r84, 67711;
	@%p2 bra 	LBB0_4;
	bra.uni 	LBB0_3;
LBB0_4:                                 // %L30
	ld.param.u64 	%rd3, [_Z13julia_bb_487313CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3];
	ld.param.u64 	%rd5, [_Z13julia_bb_487313CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	or.b32  	%r85, %r3, %r1;
	mov.u32 	%r4, %ctaid.x;
	mad.lo.s32 	%r86, %r4, 768, %r85;
	mul.wide.u32 	%rd20, %r86, 4;
	add.s64 	%rd6, %rd5, %rd20;
	mov.u32 	%r87, 1;
	st.global.u32 	[%rd6], %r87;
	and.b32  	%r5, %r4, 1;
	shl.b32 	%r88, %r2, 2;
	shr.u32 	%r6, %r1, 3;
	or.b32  	%r89, %r6, %r88;
	mul.hi.u32 	%r90, %r89, -1431655765;
	shr.u32 	%r91, %r90, 6;
	mul.lo.s32 	%r92, %r91, 96;
	sub.s32 	%r7, %r89, %r92;
	mad.lo.s32 	%r93, %r5, 96, %r7;
	shr.u32 	%r8, %r4, 1;
	mad.lo.s32 	%r94, %r8, 192, %r93;
	mul.wide.u32 	%rd21, %r94, 4;
	add.s64 	%rd22, %rd3, %rd21;
	ld.global.u32 	%r9, [%rd22];
	add.s32 	%r10, %r9, -4;
	setp.lt.u32 	%p3, %r10, 31;
	@%p3 bra 	LBB0_6;
	bra.uni 	LBB0_5;
LBB0_6:                                 // %L387
	ld.param.u64 	%rd1, [_Z13julia_bb_487313CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1];
	ld.param.u64 	%rd2, [_Z13julia_bb_487313CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2];
	ld.param.u64 	%rd4, [_Z13julia_bb_487313CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4];
	add.s32 	%r353, %r9, -3;
	mul.lo.s32 	%r354, %r5, 24576;
	shr.u32 	%r355, %r2, 2;
	cvt.u16.u32 	%rs1, %r355;
	mul.lo.s16 	%rs2, %rs1, 171;
	shr.u16 	%rs3, %rs2, 10;
	mul.lo.s16 	%rs4, %rs3, 6;
	sub.s16 	%rs5, %rs1, %rs4;
	shl.b16 	%rs6, %rs5, 4;
	cvt.u32.u16 	%r356, %rs6;
	and.b32  	%r357, %r356, 240;
	shr.u32 	%r11, %r1, 2;
	and.b32  	%r358, %r11, 6;
	or.b32  	%r359, %r358, %r357;
	cvt.u16.u32 	%rs7, %r359;
	mul.lo.s16 	%rs8, %rs7, 171;
	shr.u16 	%rs9, %rs8, 14;
	mul.lo.s16 	%rs10, %rs9, 96;
	sub.s16 	%rs11, %rs7, %rs10;
	and.b16  	%rs12, %rs11, 246;
	mul.wide.u16 	%r360, %rs12, 256;
	add.s32 	%r361, %r360, %r354;
	shl.b32 	%r362, %r2, 6;
	shl.b32 	%r363, %r1, 1;
	or.b32  	%r364, %r363, %r362;
	and.b32  	%r365, %r364, 204;
	shl.b32 	%r366, %r1, 4;
	and.b32  	%r12, %r366, 16;
	or.b32  	%r367, %r365, %r12;
	or.b32  	%r368, %r361, %r367;
	mul.lo.s32 	%r369, %r8, 49152;
	add.s32 	%r370, %r368, %r369;
	shl.b32 	%r371, %r370, 2;
	cvt.u64.u32 	%rd25, %r371;
	add.s64 	%rd26, %rd25, %rd1;
	ld.global.v4.u32 	{%r97, %r98, %r113, %r114}, [%rd26];
	or.b16  	%rs13, %rs7, 8;
	mul.lo.s16 	%rs14, %rs13, 171;
	shr.u16 	%rs15, %rs14, 14;
	mul.lo.s16 	%rs16, %rs15, 96;
	sub.s16 	%rs17, %rs13, %rs16;
	and.b16  	%rs18, %rs17, 254;
	mul.wide.u16 	%r372, %rs18, 256;
	add.s32 	%r373, %r372, %r354;
	or.b32  	%r374, %r373, %r367;
	add.s32 	%r375, %r374, %r369;
	shl.b32 	%r376, %r375, 2;
	cvt.u64.u32 	%rd27, %r376;
	add.s64 	%rd28, %rd27, %rd1;
	ld.global.v4.u32 	{%r105, %r106, %r121, %r122}, [%rd28];
	or.b32  	%r377, %r354, 32;
	add.s32 	%r378, %r377, %r360;
	or.b32  	%r379, %r378, %r365;
	or.b32  	%r380, %r379, %r12;
	add.s32 	%r381, %r380, %r369;
	shl.b32 	%r382, %r381, 2;
	cvt.u64.u32 	%rd29, %r382;
	add.s64 	%rd30, %rd29, %rd1;
	ld.global.v4.u32 	{%r129, %r130, %r145, %r146}, [%rd30];
	add.s32 	%r383, %r377, %r372;
	or.b32  	%r384, %r383, %r365;
	or.b32  	%r385, %r384, %r12;
	add.s32 	%r386, %r385, %r369;
	shl.b32 	%r387, %r386, 2;
	cvt.u64.u32 	%rd31, %r387;
	add.s64 	%rd32, %rd31, %rd1;
	ld.global.v4.u32 	{%r137, %r138, %r153, %r154}, [%rd32];
	or.b32  	%r388, %r11, %r357;
	or.b32  	%r389, %r388, 1;
	mul.hi.u32 	%r390, %r389, -1431655765;
	shr.u32 	%r391, %r390, 6;
	mul.lo.s32 	%r392, %r391, 96;
	sub.s32 	%r393, %r389, %r392;
	shl.b32 	%r394, %r393, 8;
	add.s32 	%r395, %r394, %r354;
	or.b32  	%r396, %r395, %r367;
	add.s32 	%r397, %r396, %r369;
	shl.b32 	%r398, %r397, 2;
	cvt.u64.u32 	%rd33, %r398;
	add.s64 	%rd34, %rd33, %rd1;
	ld.global.v4.u32 	{%r161, %r162, %r177, %r178}, [%rd34];
	or.b32  	%r399, %r388, 9;
	mul.hi.u32 	%r400, %r399, -1431655765;
	shr.u32 	%r401, %r400, 6;
	mul.lo.s32 	%r402, %r401, 96;
	sub.s32 	%r403, %r399, %r402;
	shl.b32 	%r404, %r403, 8;
	add.s32 	%r405, %r404, %r354;
	or.b32  	%r406, %r405, %r367;
	add.s32 	%r407, %r406, %r369;
	shl.b32 	%r408, %r407, 2;
	cvt.u64.u32 	%rd35, %r408;
	add.s64 	%rd36, %rd35, %rd1;
	ld.global.v4.u32 	{%r169, %r170, %r185, %r186}, [%rd36];
	add.s32 	%r409, %r377, %r394;
	or.b32  	%r410, %r409, %r365;
	or.b32  	%r411, %r410, %r12;
	add.s32 	%r412, %r411, %r369;
	shl.b32 	%r413, %r412, 2;
	cvt.u64.u32 	%rd37, %r413;
	add.s64 	%rd38, %rd37, %rd1;
	ld.global.v4.u32 	{%r193, %r194, %r209, %r210}, [%rd38];
	add.s32 	%r414, %r377, %r404;
	or.b32  	%r415, %r414, %r365;
	or.b32  	%r416, %r415, %r12;
	add.s32 	%r417, %r416, %r369;
	shl.b32 	%r418, %r417, 2;
	cvt.u64.u32 	%rd39, %r418;
	add.s64 	%rd40, %rd39, %rd1;
	ld.global.v4.u32 	{%r201, %r202, %r217, %r218}, [%rd40];
	mov.u32 	%r99, 21520;
	// begin inline asm
	prmt.b32 %r225, %r97, %r98, %r99;
	// end inline asm
	mov.u32 	%r103, 30258;
	// begin inline asm
	prmt.b32 %r226, %r97, %r98, %r103;
	// end inline asm
	// begin inline asm
	prmt.b32 %r233, %r105, %r106, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r234, %r105, %r106, %r103;
	// end inline asm
	// begin inline asm
	prmt.b32 %r241, %r113, %r114, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r242, %r113, %r114, %r103;
	// end inline asm
	// begin inline asm
	prmt.b32 %r249, %r121, %r122, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r250, %r121, %r122, %r103;
	// end inline asm
	// begin inline asm
	prmt.b32 %r257, %r129, %r130, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r258, %r129, %r130, %r103;
	// end inline asm
	// begin inline asm
	prmt.b32 %r265, %r137, %r138, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r266, %r137, %r138, %r103;
	// end inline asm
	// begin inline asm
	prmt.b32 %r273, %r145, %r146, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r274, %r145, %r146, %r103;
	// end inline asm
	// begin inline asm
	prmt.b32 %r281, %r153, %r154, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r282, %r153, %r154, %r103;
	// end inline asm
	// begin inline asm
	prmt.b32 %r289, %r161, %r162, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r290, %r161, %r162, %r103;
	// end inline asm
	// begin inline asm
	prmt.b32 %r297, %r169, %r170, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r298, %r169, %r170, %r103;
	// end inline asm
	// begin inline asm
	prmt.b32 %r305, %r177, %r178, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r306, %r177, %r178, %r103;
	// end inline asm
	// begin inline asm
	prmt.b32 %r313, %r185, %r186, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r314, %r185, %r186, %r103;
	// end inline asm
	// begin inline asm
	prmt.b32 %r321, %r193, %r194, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r322, %r193, %r194, %r103;
	// end inline asm
	// begin inline asm
	prmt.b32 %r329, %r201, %r202, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r330, %r201, %r202, %r103;
	// end inline asm
	// begin inline asm
	prmt.b32 %r337, %r209, %r210, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r338, %r209, %r210, %r103;
	// end inline asm
	// begin inline asm
	prmt.b32 %r345, %r217, %r218, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r346, %r217, %r218, %r103;
	// end inline asm
	mov.u32 	%r227, 25152;
	// begin inline asm
	prmt.b32 %r224, %r225, %r226, %r227;
	// end inline asm
	mov.u32 	%r231, 29521;
	// begin inline asm
	prmt.b32 %r228, %r225, %r226, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r232, %r233, %r234, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r236, %r233, %r234, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r240, %r241, %r242, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r244, %r241, %r242, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r248, %r249, %r250, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r252, %r249, %r250, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r256, %r257, %r258, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r260, %r257, %r258, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r264, %r265, %r266, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r268, %r265, %r266, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r272, %r273, %r274, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r276, %r273, %r274, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r280, %r281, %r282, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r284, %r281, %r282, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r288, %r289, %r290, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r292, %r289, %r290, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r296, %r297, %r298, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r300, %r297, %r298, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r304, %r305, %r306, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r308, %r305, %r306, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r312, %r313, %r314, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r316, %r313, %r314, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r320, %r321, %r322, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r324, %r321, %r322, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r328, %r329, %r330, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r332, %r329, %r330, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r336, %r337, %r338, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r340, %r337, %r338, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r344, %r345, %r346, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r348, %r345, %r346, %r231;
	// end inline asm
	and.b32  	%r13, %r1, 2;
	setp.eq.s32 	%p4, %r13, 0;
	selp.b32 	%r419, %r256, %r224, %p4;
	shfl.sync.bfly.b32	%r420, %r419, 2, 31, -1;
	selp.b32 	%r421, %r224, %r420, %p4;
	selp.b32 	%r422, %r420, %r256, %p4;
	selp.b32 	%r423, %r264, %r232, %p4;
	shfl.sync.bfly.b32	%r424, %r423, 2, 31, -1;
	selp.b32 	%r425, %r232, %r424, %p4;
	selp.b32 	%r426, %r424, %r264, %p4;
	selp.b32 	%r427, %r260, %r228, %p4;
	shfl.sync.bfly.b32	%r428, %r427, 2, 31, -1;
	selp.b32 	%r429, %r228, %r428, %p4;
	selp.b32 	%r430, %r428, %r260, %p4;
	selp.b32 	%r431, %r268, %r236, %p4;
	shfl.sync.bfly.b32	%r432, %r431, 2, 31, -1;
	selp.b32 	%r433, %r236, %r432, %p4;
	selp.b32 	%r434, %r432, %r268, %p4;
	selp.b32 	%r435, %r272, %r240, %p4;
	shfl.sync.bfly.b32	%r436, %r435, 2, 31, -1;
	selp.b32 	%r437, %r240, %r436, %p4;
	selp.b32 	%r438, %r436, %r272, %p4;
	selp.b32 	%r439, %r280, %r248, %p4;
	shfl.sync.bfly.b32	%r440, %r439, 2, 31, -1;
	selp.b32 	%r441, %r248, %r440, %p4;
	selp.b32 	%r442, %r440, %r280, %p4;
	selp.b32 	%r443, %r276, %r244, %p4;
	shfl.sync.bfly.b32	%r444, %r443, 2, 31, -1;
	selp.b32 	%r445, %r244, %r444, %p4;
	selp.b32 	%r446, %r444, %r276, %p4;
	selp.b32 	%r447, %r284, %r252, %p4;
	shfl.sync.bfly.b32	%r448, %r447, 2, 31, -1;
	selp.b32 	%r449, %r252, %r448, %p4;
	selp.b32 	%r450, %r448, %r284, %p4;
	selp.b32 	%r451, %r320, %r288, %p4;
	shfl.sync.bfly.b32	%r452, %r451, 2, 31, -1;
	selp.b32 	%r453, %r288, %r452, %p4;
	selp.b32 	%r454, %r452, %r320, %p4;
	selp.b32 	%r455, %r328, %r296, %p4;
	shfl.sync.bfly.b32	%r456, %r455, 2, 31, -1;
	selp.b32 	%r457, %r296, %r456, %p4;
	selp.b32 	%r458, %r456, %r328, %p4;
	selp.b32 	%r459, %r324, %r292, %p4;
	shfl.sync.bfly.b32	%r460, %r459, 2, 31, -1;
	selp.b32 	%r461, %r292, %r460, %p4;
	selp.b32 	%r462, %r460, %r324, %p4;
	selp.b32 	%r463, %r332, %r300, %p4;
	shfl.sync.bfly.b32	%r464, %r463, 2, 31, -1;
	selp.b32 	%r465, %r300, %r464, %p4;
	selp.b32 	%r466, %r464, %r332, %p4;
	selp.b32 	%r467, %r336, %r304, %p4;
	shfl.sync.bfly.b32	%r468, %r467, 2, 31, -1;
	selp.b32 	%r469, %r304, %r468, %p4;
	selp.b32 	%r470, %r468, %r336, %p4;
	selp.b32 	%r471, %r344, %r312, %p4;
	shfl.sync.bfly.b32	%r472, %r471, 2, 31, -1;
	selp.b32 	%r473, %r312, %r472, %p4;
	selp.b32 	%r474, %r472, %r344, %p4;
	selp.b32 	%r475, %r340, %r308, %p4;
	shfl.sync.bfly.b32	%r476, %r475, 2, 31, -1;
	selp.b32 	%r477, %r308, %r476, %p4;
	selp.b32 	%r478, %r476, %r340, %p4;
	selp.b32 	%r479, %r348, %r316, %p4;
	shfl.sync.bfly.b32	%r480, %r479, 2, 31, -1;
	selp.b32 	%r481, %r316, %r480, %p4;
	selp.b32 	%r482, %r480, %r348, %p4;
	and.b32  	%r14, %r1, 4;
	setp.eq.s32 	%p5, %r14, 0;
	selp.b32 	%r483, %r453, %r421, %p5;
	shfl.sync.bfly.b32	%r484, %r483, 4, 31, -1;
	selp.b32 	%r592, %r421, %r484, %p5;
	selp.b32 	%r720, %r484, %r453, %p5;
	selp.b32 	%r485, %r457, %r425, %p5;
	shfl.sync.bfly.b32	%r486, %r485, 4, 31, -1;
	selp.b32 	%r854, %r425, %r486, %p5;
	selp.b32 	%r982, %r486, %r457, %p5;
	selp.b32 	%r487, %r461, %r429, %p5;
	shfl.sync.bfly.b32	%r488, %r487, 4, 31, -1;
	selp.b32 	%r586, %r429, %r488, %p5;
	selp.b32 	%r714, %r488, %r461, %p5;
	selp.b32 	%r489, %r465, %r433, %p5;
	shfl.sync.bfly.b32	%r490, %r489, 4, 31, -1;
	selp.b32 	%r848, %r433, %r490, %p5;
	selp.b32 	%r976, %r490, %r465, %p5;
	selp.b32 	%r491, %r469, %r437, %p5;
	shfl.sync.bfly.b32	%r492, %r491, 4, 31, -1;
	selp.b32 	%r624, %r437, %r492, %p5;
	selp.b32 	%r752, %r492, %r469, %p5;
	selp.b32 	%r493, %r473, %r441, %p5;
	shfl.sync.bfly.b32	%r494, %r493, 4, 31, -1;
	selp.b32 	%r886, %r441, %r494, %p5;
	selp.b32 	%r1014, %r494, %r473, %p5;
	selp.b32 	%r495, %r477, %r445, %p5;
	shfl.sync.bfly.b32	%r496, %r495, 4, 31, -1;
	selp.b32 	%r618, %r445, %r496, %p5;
	selp.b32 	%r746, %r496, %r477, %p5;
	selp.b32 	%r497, %r481, %r449, %p5;
	shfl.sync.bfly.b32	%r498, %r497, 4, 31, -1;
	selp.b32 	%r880, %r449, %r498, %p5;
	selp.b32 	%r1008, %r498, %r481, %p5;
	selp.b32 	%r499, %r454, %r422, %p5;
	shfl.sync.bfly.b32	%r500, %r499, 4, 31, -1;
	selp.b32 	%r656, %r422, %r500, %p5;
	selp.b32 	%r784, %r500, %r454, %p5;
	selp.b32 	%r501, %r458, %r426, %p5;
	shfl.sync.bfly.b32	%r502, %r501, 4, 31, -1;
	selp.b32 	%r918, %r426, %r502, %p5;
	selp.b32 	%r1046, %r502, %r458, %p5;
	selp.b32 	%r503, %r462, %r430, %p5;
	shfl.sync.bfly.b32	%r504, %r503, 4, 31, -1;
	selp.b32 	%r650, %r430, %r504, %p5;
	selp.b32 	%r778, %r504, %r462, %p5;
	selp.b32 	%r505, %r466, %r434, %p5;
	shfl.sync.bfly.b32	%r506, %r505, 4, 31, -1;
	selp.b32 	%r912, %r434, %r506, %p5;
	selp.b32 	%r1040, %r506, %r466, %p5;
	selp.b32 	%r507, %r470, %r438, %p5;
	shfl.sync.bfly.b32	%r508, %r507, 4, 31, -1;
	selp.b32 	%r688, %r438, %r508, %p5;
	selp.b32 	%r816, %r508, %r470, %p5;
	selp.b32 	%r509, %r474, %r442, %p5;
	shfl.sync.bfly.b32	%r510, %r509, 4, 31, -1;
	selp.b32 	%r950, %r442, %r510, %p5;
	selp.b32 	%r1078, %r510, %r474, %p5;
	selp.b32 	%r511, %r478, %r446, %p5;
	shfl.sync.bfly.b32	%r512, %r511, 4, 31, -1;
	selp.b32 	%r682, %r446, %r512, %p5;
	selp.b32 	%r810, %r512, %r478, %p5;
	selp.b32 	%r513, %r482, %r450, %p5;
	shfl.sync.bfly.b32	%r514, %r513, 4, 31, -1;
	selp.b32 	%r944, %r450, %r514, %p5;
	selp.b32 	%r1072, %r514, %r482, %p5;
	shl.b32 	%r515, %r4, 11;
	and.b32  	%r516, %r515, 2048;
	shl.b32 	%r517, %r4, 6;
	and.b32  	%r518, %r517, 1920;
	or.b32  	%r47, %r516, %r518;
	and.b32  	%r48, %r2, 12;
	shl.b32 	%r519, %r1, 2;
	and.b32  	%r49, %r519, 28;
	and.b32  	%r50, %r3, 96;
	or.b32  	%r51, %r49, %r50;
	shl.b32 	%r520, %r1, 3;
	and.b32  	%r52, %r520, 24;
	or.b32  	%r53, %r52, %r50;
	and.b32  	%r54, %r363, 6;
	and.b32  	%r521, %r2, 3;
	mul.hi.u32 	%r522, %r388, -1431655765;
	shr.u32 	%r523, %r522, 6;
	mul.lo.s32 	%r524, %r523, 96;
	sub.s32 	%r55, %r388, %r524;
	mul.lo.s32 	%r56, %r521, 3200;
	or.b32  	%r525, %r388, 8;
	mul.hi.u32 	%r526, %r525, -1431655765;
	shr.u32 	%r527, %r526, 6;
	mul.lo.s32 	%r528, %r527, 96;
	sub.s32 	%r57, %r525, %r528;
	and.b32  	%r529, %r1, 7;
	shl.b32 	%r58, %r87, %r10;
	min.u32 	%r59, %r353, 31;
	and.b32  	%r60, %r1, 1;
	shl.b32 	%r531, %r4, 15;
	shl.b32 	%r532, %r7, 20;
	or.b32  	%r61, %r532, %r531;
	shl.b32 	%r533, %r1, 5;
	and.b32  	%r62, %r533, 64;
	mul.lo.s32 	%r534, %r529, 100;
	add.s32 	%r535, %r7, %r534;
	mul.wide.u32 	%rd41, %r535, 4;
	mov.u64 	%rd42, shmem;
	add.s64 	%rd43, %rd42, 16512;
	add.s64 	%rd7, %rd43, %rd41;
	cvt.u64.u32 	%rd44, %r7;
	cvt.u64.u32 	%rd45, %r534;
	add.s64 	%rd46, %rd45, %rd44;
	shl.b64 	%rd47, %rd46, 2;
	add.s64 	%rd8, %rd43, %rd47;
	add.s32 	%r536, %r534, 800;
	add.s32 	%r537, %r7, %r536;
	mul.wide.u32 	%rd48, %r537, 4;
	add.s64 	%rd9, %rd43, %rd48;
	cvt.u64.u32 	%rd49, %r536;
	add.s64 	%rd50, %rd49, %rd44;
	shl.b64 	%rd51, %rd50, 2;
	add.s64 	%rd10, %rd43, %rd51;
	add.s32 	%r538, %r534, 1600;
	add.s32 	%r539, %r7, %r538;
	mul.wide.u32 	%rd52, %r539, 4;
	add.s64 	%rd11, %rd43, %rd52;
	cvt.u64.u32 	%rd53, %r538;
	add.s64 	%rd54, %rd53, %rd44;
	shl.b64 	%rd55, %rd54, 2;
	add.s64 	%rd12, %rd43, %rd55;
	or.b32  	%r540, %r1, 24;
	mul.lo.s32 	%r541, %r540, 100;
	add.s32 	%r542, %r7, %r541;
	mul.wide.u32 	%rd56, %r542, 4;
	add.s64 	%rd13, %rd43, %rd56;
	cvt.u64.u32 	%rd57, %r541;
	add.s64 	%rd58, %rd57, %rd44;
	shl.b64 	%rd59, %rd58, 2;
	add.s64 	%rd14, %rd43, %rd59;
	and.b32  	%r63, %r520, 32;
	mov.u32 	%r352, 0;
	setp.gt.u32 	%p6, %r2, 15;
	mov.u32 	%r1346, %r352;
LBB0_7:                                 // %L2674
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_8 Depth 2
                                        //       Child Loop BB0_11 Depth 3
	mov.u32 	%r1347, %r352;
	mov.u32 	%r1348, %r352;
	mov.u32 	%r1349, %r352;
	mov.u32 	%r1350, %r352;
	mov.u32 	%r1351, %r352;
	mov.u32 	%r1352, %r352;
	mov.u32 	%r1353, %r352;
LBB0_8:                                 // %L2677
                                        //   Parent Loop BB0_7 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_11 Depth 3
	@%p6 bra 	LBB0_10;
// %bb.9:                               // %L2700
                                        //   in Loop: Header=BB0_8 Depth=2
	or.b32  	%r544, %r6, %r1347;
	or.b32  	%r545, %r544, %r48;
	add.s32 	%r546, %r545, %r1346;
	shl.b32 	%r547, %r546, 12;
	and.b32  	%r548, %r547, 134148096;
	or.b32  	%r549, %r548, %r47;
	or.b32  	%r550, %r51, %r549;
	shl.b32 	%r551, %r550, 2;
	cvt.u64.u32 	%rd60, %r551;
	add.s64 	%rd61, %rd2, %rd60;
	ld.global.v4.u32 	{%r552, %r553, %r554, %r555}, [%rd61];
	or.b32  	%r556, %r545, 16;
	add.s32 	%r557, %r556, %r1346;
	shl.b32 	%r558, %r557, 12;
	and.b32  	%r559, %r558, 134213632;
	or.b32  	%r560, %r559, %r47;
	or.b32  	%r561, %r51, %r560;
	shl.b32 	%r562, %r561, 2;
	cvt.u64.u32 	%rd62, %r562;
	add.s64 	%rd63, %rd2, %rd62;
	ld.global.v4.u32 	{%r563, %r564, %r565, %r566}, [%rd63];
	and.b32  	%r567, %r546, 15;
	mul.lo.s32 	%r568, %r567, 129;
	add.s32 	%r569, %r568, %r49;
	add.s32 	%r570, %r569, %r50;
	mul.wide.u32 	%rd64, %r570, 4;
	add.s64 	%rd66, %rd42, %rd64;
	st.shared.u32 	[%rd66], %r552;
	cvt.u64.u32 	%rd67, %r51;
	cvt.u64.u32 	%rd68, %r568;
	add.s64 	%rd69, %rd68, %rd67;
	shl.b64 	%rd70, %rd69, 2;
	add.s64 	%rd71, %rd42, %rd70;
	st.shared.u32 	[%rd71+4], %r553;
	st.shared.u32 	[%rd71+8], %r554;
	st.shared.u32 	[%rd71+12], %r555;
	and.b32  	%r571, %r557, 31;
	mul.lo.s32 	%r572, %r571, 129;
	add.s32 	%r573, %r572, %r49;
	add.s32 	%r574, %r573, %r50;
	mul.wide.u32 	%rd72, %r574, 4;
	add.s64 	%rd73, %rd42, %rd72;
	st.shared.u32 	[%rd73], %r563;
	cvt.u64.u32 	%rd74, %r572;
	add.s64 	%rd75, %rd74, %rd67;
	shl.b64 	%rd76, %rd75, 2;
	add.s64 	%rd77, %rd42, %rd76;
	st.shared.u32 	[%rd77+4], %r564;
	st.shared.u32 	[%rd77+8], %r565;
	st.shared.u32 	[%rd77+12], %r566;
LBB0_10:                                // %L4532
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	mov.u32 	%r588, 0;
	mov.u32 	%r1354, %r588;
LBB0_11:                                // %L4534
                                        //   Parent Loop BB0_7 Depth=1
                                        //     Parent Loop BB0_8 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r1100, %r1354, %r11;
	mul.lo.s32 	%r1101, %r1100, 129;
	add.s32 	%r1102, %r1101, %r52;
	add.s32 	%r1103, %r1102, %r50;
	mul.wide.u32 	%rd78, %r1103, 4;
	add.s64 	%rd80, %rd42, %rd78;
	ld.shared.u32 	%r577, [%rd80];
	mov.u32 	%r578, 134744072;
	mov.u32 	%r579, 252645135;
	// begin inline asm
	lop3.b32 %r576, %r577, %r578, %r579, 40;
	// end inline asm
	add.s32 	%r1104, %r576, 2021161080;
	xor.b32  	%r593, %r1104, -2139062144;
	shr.u32 	%r581, %r577, 4;
	// begin inline asm
	lop3.b32 %r580, %r581, %r578, %r579, 40;
	// end inline asm
	add.s32 	%r1105, %r580, 2021161080;
	xor.b32  	%r587, %r1105, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r584, %r585}, {%r586}, {%r587}, {%r588, %r588};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r590, %r591}, {%r592}, {%r593}, {%r588, %r588};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r596, %r597}, {%r586}, {%r593}, {%r588, %r588};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r602, %r603}, {%r592}, {%r587}, {%r596, %r597};
	// end inline asm
	cvt.u64.u32 	%rd81, %r53;
	cvt.u64.u32 	%rd82, %r1101;
	add.s64 	%rd83, %rd82, %rd81;
	shl.b64 	%rd84, %rd83, 2;
	add.s64 	%rd85, %rd42, %rd84;
	ld.shared.u32 	%r609, [%rd85+4];
	// begin inline asm
	lop3.b32 %r608, %r609, %r578, %r579, 40;
	// end inline asm
	add.s32 	%r1106, %r608, 2021161080;
	xor.b32  	%r625, %r1106, -2139062144;
	shr.u32 	%r613, %r609, 4;
	// begin inline asm
	lop3.b32 %r612, %r613, %r578, %r579, 40;
	// end inline asm
	add.s32 	%r1107, %r612, 2021161080;
	xor.b32  	%r619, %r1107, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r616, %r617}, {%r618}, {%r619}, {%r584, %r585};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r622, %r623}, {%r624}, {%r625}, {%r590, %r591};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r628, %r629}, {%r618}, {%r625}, {%r602, %r603};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r634, %r635}, {%r624}, {%r619}, {%r628, %r629};
	// end inline asm
	ld.shared.u32 	%r641, [%rd85+8];
	// begin inline asm
	lop3.b32 %r640, %r641, %r578, %r579, 40;
	// end inline asm
	add.s32 	%r1108, %r640, 2021161080;
	xor.b32  	%r657, %r1108, -2139062144;
	shr.u32 	%r645, %r641, 4;
	// begin inline asm
	lop3.b32 %r644, %r645, %r578, %r579, 40;
	// end inline asm
	add.s32 	%r1109, %r644, 2021161080;
	xor.b32  	%r651, %r1109, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r648, %r649}, {%r650}, {%r651}, {%r616, %r617};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r654, %r655}, {%r656}, {%r657}, {%r622, %r623};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r660, %r661}, {%r650}, {%r657}, {%r634, %r635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r666, %r667}, {%r656}, {%r651}, {%r660, %r661};
	// end inline asm
	ld.shared.u32 	%r673, [%rd85+12];
	// begin inline asm
	lop3.b32 %r672, %r673, %r578, %r579, 40;
	// end inline asm
	add.s32 	%r1110, %r672, 2021161080;
	xor.b32  	%r689, %r1110, -2139062144;
	shr.u32 	%r677, %r673, 4;
	// begin inline asm
	lop3.b32 %r676, %r677, %r578, %r579, 40;
	// end inline asm
	add.s32 	%r1111, %r676, 2021161080;
	xor.b32  	%r683, %r1111, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r680, %r681}, {%r682}, {%r683}, {%r648, %r649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r686, %r687}, {%r688}, {%r689}, {%r654, %r655};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r692, %r693}, {%r682}, {%r689}, {%r666, %r667};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r698, %r699}, {%r688}, {%r683}, {%r692, %r693};
	// end inline asm
	ld.shared.u32 	%r705, [%rd85+16];
	// begin inline asm
	lop3.b32 %r704, %r705, %r578, %r579, 40;
	// end inline asm
	add.s32 	%r1112, %r704, 2021161080;
	xor.b32  	%r721, %r1112, -2139062144;
	shr.u32 	%r709, %r705, 4;
	// begin inline asm
	lop3.b32 %r708, %r709, %r578, %r579, 40;
	// end inline asm
	add.s32 	%r1113, %r708, 2021161080;
	xor.b32  	%r715, %r1113, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r712, %r713}, {%r714}, {%r715}, {%r680, %r681};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r718, %r719}, {%r720}, {%r721}, {%r686, %r687};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r724, %r725}, {%r714}, {%r721}, {%r698, %r699};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r730, %r731}, {%r720}, {%r715}, {%r724, %r725};
	// end inline asm
	ld.shared.u32 	%r737, [%rd85+20];
	// begin inline asm
	lop3.b32 %r736, %r737, %r578, %r579, 40;
	// end inline asm
	add.s32 	%r1114, %r736, 2021161080;
	xor.b32  	%r753, %r1114, -2139062144;
	shr.u32 	%r741, %r737, 4;
	// begin inline asm
	lop3.b32 %r740, %r741, %r578, %r579, 40;
	// end inline asm
	add.s32 	%r1115, %r740, 2021161080;
	xor.b32  	%r747, %r1115, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r744, %r745}, {%r746}, {%r747}, {%r712, %r713};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r750, %r751}, {%r752}, {%r753}, {%r718, %r719};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r756, %r757}, {%r746}, {%r753}, {%r730, %r731};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r762, %r763}, {%r752}, {%r747}, {%r756, %r757};
	// end inline asm
	ld.shared.u32 	%r769, [%rd85+24];
	// begin inline asm
	lop3.b32 %r768, %r769, %r578, %r579, 40;
	// end inline asm
	add.s32 	%r1116, %r768, 2021161080;
	xor.b32  	%r785, %r1116, -2139062144;
	shr.u32 	%r773, %r769, 4;
	// begin inline asm
	lop3.b32 %r772, %r773, %r578, %r579, 40;
	// end inline asm
	add.s32 	%r1117, %r772, 2021161080;
	xor.b32  	%r779, %r1117, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r776, %r777}, {%r778}, {%r779}, {%r744, %r745};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r782, %r783}, {%r784}, {%r785}, {%r750, %r751};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r788, %r789}, {%r778}, {%r785}, {%r762, %r763};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r794, %r795}, {%r784}, {%r779}, {%r788, %r789};
	// end inline asm
	ld.shared.u32 	%r801, [%rd85+28];
	// begin inline asm
	lop3.b32 %r800, %r801, %r578, %r579, 40;
	// end inline asm
	add.s32 	%r1118, %r800, 2021161080;
	xor.b32  	%r817, %r1118, -2139062144;
	shr.u32 	%r805, %r801, 4;
	// begin inline asm
	lop3.b32 %r804, %r805, %r578, %r579, 40;
	// end inline asm
	add.s32 	%r1119, %r804, 2021161080;
	xor.b32  	%r811, %r1119, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r808, %r809}, {%r810}, {%r811}, {%r776, %r777};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r814, %r815}, {%r816}, {%r817}, {%r782, %r783};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r820, %r821}, {%r810}, {%r817}, {%r794, %r795};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r826, %r827}, {%r816}, {%r811}, {%r820, %r821};
	// end inline asm
	add.s32 	%r1120, %r826, 4;
	shr.s32 	%r834, %r1120, 3;
	sub.s32 	%r1121, %r808, %r814;
	add.s32 	%r1122, %r1121, 4;
	shr.s32 	%r833, %r1122, 3;
	add.s32 	%r1123, %r827, 4;
	shr.s32 	%r837, %r1123, 3;
	sub.s32 	%r1124, %r809, %r815;
	add.s32 	%r1125, %r1124, 4;
	shr.s32 	%r836, %r1125, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r832, %r833, %r834;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r835, %r836, %r837;
	// end inline asm
	or.b32  	%r1126, %r1354, %r54;
	mad.lo.s32 	%r1127, %r1126, 100, %r56;
	add.s32 	%r1128, %r1127, %r55;
	mul.wide.u32 	%rd86, %r1128, 4;
	add.s64 	%rd88, %rd43, %rd86;
	st.shared.u32 	[%rd88], %r832;
	add.s32 	%r1129, %r1127, 100;
	add.s32 	%r1130, %r1129, %r55;
	mul.wide.u32 	%rd89, %r1130, 4;
	add.s64 	%rd90, %rd43, %rd89;
	st.shared.u32 	[%rd90], %r835;
	ld.shared.u32 	%r839, [%rd80];
	// begin inline asm
	lop3.b32 %r838, %r839, %r578, %r579, 40;
	// end inline asm
	add.s32 	%r1131, %r838, 2021161080;
	xor.b32  	%r855, %r1131, -2139062144;
	shr.u32 	%r843, %r839, 4;
	// begin inline asm
	lop3.b32 %r842, %r843, %r578, %r579, 40;
	// end inline asm
	add.s32 	%r1132, %r842, 2021161080;
	xor.b32  	%r849, %r1132, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r846, %r847}, {%r848}, {%r849}, {%r588, %r588};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r852, %r853}, {%r854}, {%r855}, {%r588, %r588};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r858, %r859}, {%r848}, {%r855}, {%r588, %r588};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r864, %r865}, {%r854}, {%r849}, {%r858, %r859};
	// end inline asm
	ld.shared.u32 	%r871, [%rd85+4];
	// begin inline asm
	lop3.b32 %r870, %r871, %r578, %r579, 40;
	// end inline asm
	add.s32 	%r1133, %r870, 2021161080;
	xor.b32  	%r887, %r1133, -2139062144;
	shr.u32 	%r875, %r871, 4;
	// begin inline asm
	lop3.b32 %r874, %r875, %r578, %r579, 40;
	// end inline asm
	add.s32 	%r1134, %r874, 2021161080;
	xor.b32  	%r881, %r1134, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r878, %r879}, {%r880}, {%r881}, {%r846, %r847};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r884, %r885}, {%r886}, {%r887}, {%r852, %r853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r890, %r891}, {%r880}, {%r887}, {%r864, %r865};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r896, %r897}, {%r886}, {%r881}, {%r890, %r891};
	// end inline asm
	ld.shared.u32 	%r903, [%rd85+8];
	// begin inline asm
	lop3.b32 %r902, %r903, %r578, %r579, 40;
	// end inline asm
	add.s32 	%r1135, %r902, 2021161080;
	xor.b32  	%r919, %r1135, -2139062144;
	shr.u32 	%r907, %r903, 4;
	// begin inline asm
	lop3.b32 %r906, %r907, %r578, %r579, 40;
	// end inline asm
	add.s32 	%r1136, %r906, 2021161080;
	xor.b32  	%r913, %r1136, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r910, %r911}, {%r912}, {%r913}, {%r878, %r879};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r916, %r917}, {%r918}, {%r919}, {%r884, %r885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r922, %r923}, {%r912}, {%r919}, {%r896, %r897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r928, %r929}, {%r918}, {%r913}, {%r922, %r923};
	// end inline asm
	ld.shared.u32 	%r935, [%rd85+12];
	// begin inline asm
	lop3.b32 %r934, %r935, %r578, %r579, 40;
	// end inline asm
	add.s32 	%r1137, %r934, 2021161080;
	xor.b32  	%r951, %r1137, -2139062144;
	shr.u32 	%r939, %r935, 4;
	// begin inline asm
	lop3.b32 %r938, %r939, %r578, %r579, 40;
	// end inline asm
	add.s32 	%r1138, %r938, 2021161080;
	xor.b32  	%r945, %r1138, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r942, %r943}, {%r944}, {%r945}, {%r910, %r911};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r948, %r949}, {%r950}, {%r951}, {%r916, %r917};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r954, %r955}, {%r944}, {%r951}, {%r928, %r929};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r960, %r961}, {%r950}, {%r945}, {%r954, %r955};
	// end inline asm
	ld.shared.u32 	%r967, [%rd85+16];
	// begin inline asm
	lop3.b32 %r966, %r967, %r578, %r579, 40;
	// end inline asm
	add.s32 	%r1139, %r966, 2021161080;
	xor.b32  	%r983, %r1139, -2139062144;
	shr.u32 	%r971, %r967, 4;
	// begin inline asm
	lop3.b32 %r970, %r971, %r578, %r579, 40;
	// end inline asm
	add.s32 	%r1140, %r970, 2021161080;
	xor.b32  	%r977, %r1140, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r974, %r975}, {%r976}, {%r977}, {%r942, %r943};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r980, %r981}, {%r982}, {%r983}, {%r948, %r949};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r986, %r987}, {%r976}, {%r983}, {%r960, %r961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r992, %r993}, {%r982}, {%r977}, {%r986, %r987};
	// end inline asm
	ld.shared.u32 	%r999, [%rd85+20];
	// begin inline asm
	lop3.b32 %r998, %r999, %r578, %r579, 40;
	// end inline asm
	add.s32 	%r1141, %r998, 2021161080;
	xor.b32  	%r1015, %r1141, -2139062144;
	shr.u32 	%r1003, %r999, 4;
	// begin inline asm
	lop3.b32 %r1002, %r1003, %r578, %r579, 40;
	// end inline asm
	add.s32 	%r1142, %r1002, 2021161080;
	xor.b32  	%r1009, %r1142, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1006, %r1007}, {%r1008}, {%r1009}, {%r974, %r975};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1012, %r1013}, {%r1014}, {%r1015}, {%r980, %r981};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1018, %r1019}, {%r1008}, {%r1015}, {%r992, %r993};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1024, %r1025}, {%r1014}, {%r1009}, {%r1018, %r1019};
	// end inline asm
	ld.shared.u32 	%r1031, [%rd85+24];
	// begin inline asm
	lop3.b32 %r1030, %r1031, %r578, %r579, 40;
	// end inline asm
	add.s32 	%r1143, %r1030, 2021161080;
	xor.b32  	%r1047, %r1143, -2139062144;
	shr.u32 	%r1035, %r1031, 4;
	// begin inline asm
	lop3.b32 %r1034, %r1035, %r578, %r579, 40;
	// end inline asm
	add.s32 	%r1144, %r1034, 2021161080;
	xor.b32  	%r1041, %r1144, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1038, %r1039}, {%r1040}, {%r1041}, {%r1006, %r1007};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1044, %r1045}, {%r1046}, {%r1047}, {%r1012, %r1013};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1050, %r1051}, {%r1040}, {%r1047}, {%r1024, %r1025};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1056, %r1057}, {%r1046}, {%r1041}, {%r1050, %r1051};
	// end inline asm
	ld.shared.u32 	%r1063, [%rd85+28];
	// begin inline asm
	lop3.b32 %r1062, %r1063, %r578, %r579, 40;
	// end inline asm
	add.s32 	%r1145, %r1062, 2021161080;
	xor.b32  	%r1079, %r1145, -2139062144;
	shr.u32 	%r1067, %r1063, 4;
	// begin inline asm
	lop3.b32 %r1066, %r1067, %r578, %r579, 40;
	// end inline asm
	add.s32 	%r1146, %r1066, 2021161080;
	xor.b32  	%r1073, %r1146, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1070, %r1071}, {%r1072}, {%r1073}, {%r1038, %r1039};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1076, %r1077}, {%r1078}, {%r1079}, {%r1044, %r1045};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1082, %r1083}, {%r1072}, {%r1079}, {%r1056, %r1057};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1088, %r1089}, {%r1078}, {%r1073}, {%r1082, %r1083};
	// end inline asm
	add.s32 	%r1147, %r1088, 4;
	shr.s32 	%r1096, %r1147, 3;
	sub.s32 	%r1148, %r1070, %r1076;
	add.s32 	%r1149, %r1148, 4;
	shr.s32 	%r1095, %r1149, 3;
	add.s32 	%r1150, %r1089, 4;
	shr.s32 	%r1099, %r1150, 3;
	sub.s32 	%r1151, %r1071, %r1077;
	add.s32 	%r1152, %r1151, 4;
	shr.s32 	%r1098, %r1152, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1094, %r1095, %r1096;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1097, %r1098, %r1099;
	// end inline asm
	add.s32 	%r1153, %r1127, %r57;
	mul.wide.u32 	%rd91, %r1153, 4;
	add.s64 	%rd92, %rd43, %rd91;
	st.shared.u32 	[%rd92], %r1094;
	add.s32 	%r1154, %r1129, %r57;
	mul.wide.u32 	%rd93, %r1154, 4;
	add.s64 	%rd94, %rd43, %rd93;
	st.shared.u32 	[%rd94], %r1097;
	add.s32 	%r1354, %r1354, 8;
	setp.ne.s32 	%p7, %r1354, 32;
	@%p7 bra 	LBB0_11;
// %bb.12:                              // %L9104
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1173, [%rd7];
	ld.shared.u32 	%r1174, [%rd8+12800];
	ld.shared.u32 	%r1175, [%rd8+25600];
	ld.shared.u32 	%r1176, [%rd8+38400];
	ld.shared.u32 	%r1177, [%rd9];
	ld.shared.u32 	%r1178, [%rd10+12800];
	ld.shared.u32 	%r1179, [%rd10+25600];
	ld.shared.u32 	%r1180, [%rd10+38400];
	ld.shared.u32 	%r1181, [%rd11];
	ld.shared.u32 	%r1182, [%rd12+12800];
	ld.shared.u32 	%r1183, [%rd12+25600];
	ld.shared.u32 	%r1184, [%rd12+38400];
	ld.shared.u32 	%r1185, [%rd13];
	ld.shared.u32 	%r1186, [%rd14+12800];
	ld.shared.u32 	%r1187, [%rd14+25600];
	ld.shared.u32 	%r1188, [%rd14+38400];
	cvt.s32.s16 	%r1189, %r1173;
	shr.s32 	%r1190, %r1173, 16;
	cvt.s32.s16 	%r1191, %r1174;
	shr.s32 	%r1192, %r1174, 16;
	cvt.s32.s16 	%r1193, %r1175;
	shr.s32 	%r1194, %r1175, 16;
	cvt.s32.s16 	%r1195, %r1176;
	shr.s32 	%r1196, %r1176, 16;
	cvt.s32.s16 	%r1197, %r1177;
	shr.s32 	%r1198, %r1177, 16;
	cvt.s32.s16 	%r1199, %r1178;
	shr.s32 	%r1200, %r1178, 16;
	cvt.s32.s16 	%r1201, %r1179;
	shr.s32 	%r1202, %r1179, 16;
	cvt.s32.s16 	%r1203, %r1180;
	shr.s32 	%r1204, %r1180, 16;
	cvt.s32.s16 	%r1205, %r1181;
	shr.s32 	%r1206, %r1181, 16;
	cvt.s32.s16 	%r1207, %r1182;
	shr.s32 	%r1208, %r1182, 16;
	cvt.s32.s16 	%r1209, %r1183;
	shr.s32 	%r1210, %r1183, 16;
	cvt.s32.s16 	%r1211, %r1184;
	shr.s32 	%r1212, %r1184, 16;
	cvt.s32.s16 	%r1213, %r1185;
	shr.s32 	%r1214, %r1185, 16;
	cvt.s32.s16 	%r1215, %r1186;
	shr.s32 	%r1216, %r1186, 16;
	cvt.s32.s16 	%r1217, %r1187;
	shr.s32 	%r1218, %r1187, 16;
	cvt.s32.s16 	%r1219, %r1188;
	shr.s32 	%r1220, %r1188, 16;
	add.s32 	%r1221, %r1189, %r58;
	add.s32 	%r1222, %r1221, %r1191;
	add.s32 	%r1223, %r1222, %r1193;
	add.s32 	%r1224, %r1223, %r1195;
	shr.s32 	%r1225, %r1224, %r59;
	add.s32 	%r1226, %r1190, %r58;
	add.s32 	%r1227, %r1226, %r1192;
	add.s32 	%r1228, %r1227, %r1194;
	add.s32 	%r1229, %r1228, %r1196;
	shr.s32 	%r1230, %r1229, %r59;
	add.s32 	%r1231, %r1197, %r58;
	add.s32 	%r1232, %r1231, %r1199;
	add.s32 	%r1233, %r1232, %r1201;
	add.s32 	%r1234, %r1233, %r1203;
	shr.s32 	%r1235, %r1234, %r59;
	add.s32 	%r1236, %r1198, %r58;
	add.s32 	%r1237, %r1236, %r1200;
	add.s32 	%r1238, %r1237, %r1202;
	add.s32 	%r1239, %r1238, %r1204;
	shr.s32 	%r1240, %r1239, %r59;
	add.s32 	%r1241, %r1205, %r58;
	add.s32 	%r1242, %r1241, %r1207;
	add.s32 	%r1243, %r1242, %r1209;
	add.s32 	%r1244, %r1243, %r1211;
	shr.s32 	%r1245, %r1244, %r59;
	add.s32 	%r1246, %r1206, %r58;
	add.s32 	%r1247, %r1246, %r1208;
	add.s32 	%r1248, %r1247, %r1210;
	add.s32 	%r1249, %r1248, %r1212;
	shr.s32 	%r1250, %r1249, %r59;
	add.s32 	%r1251, %r1213, %r58;
	add.s32 	%r1252, %r1251, %r1215;
	add.s32 	%r1253, %r1252, %r1217;
	add.s32 	%r1254, %r1253, %r1219;
	shr.s32 	%r1255, %r1254, %r59;
	add.s32 	%r1256, %r1214, %r58;
	add.s32 	%r1257, %r1256, %r1216;
	add.s32 	%r1258, %r1257, %r1218;
	add.s32 	%r1259, %r1258, %r1220;
	shr.s32 	%r1260, %r1259, %r59;
	max.s32 	%r1261, %r1225, -7;
	min.s32 	%r1160, %r1261, 7;
	max.s32 	%r1262, %r1230, -7;
	min.s32 	%r1167, %r1262, 7;
	max.s32 	%r1263, %r1235, -7;
	min.s32 	%r1159, %r1263, 7;
	max.s32 	%r1264, %r1240, -7;
	min.s32 	%r1166, %r1264, 7;
	max.s32 	%r1265, %r1245, -7;
	min.s32 	%r1157, %r1265, 7;
	max.s32 	%r1266, %r1250, -7;
	min.s32 	%r1164, %r1266, 7;
	max.s32 	%r1267, %r1255, -7;
	min.s32 	%r1156, %r1267, 7;
	max.s32 	%r1268, %r1260, -7;
	min.s32 	%r1163, %r1268, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1155, %r1156, %r1157, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1158, %r1159, %r1160, %r1155;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1162, %r1163, %r1164, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1165, %r1166, %r1167, %r1162;
	// end inline asm
	shl.b32 	%r1172, %r1165, 4;
	// begin inline asm
	lop3.b32 %r1279, %r579, %r1158, %r1172, 202;
	// end inline asm
	setp.eq.s32 	%p8, %r1347, 0;
	selp.b32 	%r1352, %r1279, %r1352, %p8;
	selp.b32 	%r1353, %r1279, %r1353, %p8;
	setp.eq.s32 	%p9, %r1347, 32;
	selp.b32 	%r1348, %r1279, %r1348, %p9;
	selp.b32 	%r1349, %r1279, %r1349, %p9;
	setp.eq.s32 	%p10, %r1347, 64;
	selp.b32 	%r1350, %r1279, %r1350, %p10;
	selp.b32 	%r1351, %r1279, %r1351, %p10;
	add.s32 	%r81, %r1347, 32;
	setp.ne.s32 	%p11, %r1347, 96;
	mov.u32 	%r1347, %r81;
	@%p11 bra 	LBB0_8;
// %bb.13:                              // %L11747
                                        //   in Loop: Header=BB0_7 Depth=1
	setp.eq.s32 	%p12, %r60, 0;
	// begin inline asm
	prmt.b32 %r1269, %r1352, %r1348, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1273, %r1353, %r1349, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1277, %r1350, %r1279, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1281, %r1351, %r1279, %r231;
	// end inline asm
	selp.b32 	%r1317, %r1273, %r1269, %p12;
	shfl.sync.bfly.b32	%r1318, %r1317, 1, 31, -1;
	selp.b32 	%r1286, %r1269, %r1318, %p12;
	selp.b32 	%r1287, %r1318, %r1273, %p12;
	selp.b32 	%r1319, %r1281, %r1277, %p12;
	shfl.sync.bfly.b32	%r1320, %r1319, 1, 31, -1;
	selp.b32 	%r1294, %r1277, %r1320, %p12;
	selp.b32 	%r1295, %r1320, %r1281, %p12;
	// begin inline asm
	prmt.b32 %r1285, %r1286, %r1287, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1289, %r1286, %r1287, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1293, %r1294, %r1295, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1297, %r1294, %r1295, %r231;
	// end inline asm
	selp.b32 	%r1321, %r1293, %r1285, %p4;
	shfl.sync.bfly.b32	%r1322, %r1321, 2, 31, -1;
	selp.b32 	%r1302, %r1285, %r1322, %p4;
	selp.b32 	%r1303, %r1322, %r1293, %p4;
	selp.b32 	%r1323, %r1297, %r1289, %p4;
	shfl.sync.bfly.b32	%r1324, %r1323, 2, 31, -1;
	selp.b32 	%r1310, %r1289, %r1324, %p4;
	selp.b32 	%r1311, %r1324, %r1297, %p4;
	// begin inline asm
	prmt.b32 %r1301, %r1302, %r1303, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1305, %r1302, %r1303, %r103;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1309, %r1310, %r1311, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1313, %r1310, %r1311, %r103;
	// end inline asm
	selp.b32 	%r1325, %r1309, %r1301, %p5;
	shfl.sync.bfly.b32	%r1326, %r1325, 4, 31, -1;
	selp.b32 	%r1327, %r1301, %r1326, %p5;
	selp.b32 	%r1328, %r1326, %r1309, %p5;
	selp.b32 	%r1329, %r1313, %r1305, %p5;
	shfl.sync.bfly.b32	%r1330, %r1329, 4, 31, -1;
	selp.b32 	%r1331, %r1305, %r1330, %p5;
	selp.b32 	%r1332, %r1330, %r1313, %p5;
	selp.b32 	%r1333, %r1331, %r1327, %p12;
	shfl.sync.bfly.b32	%r1334, %r1333, 1, 31, -1;
	selp.b32 	%r1335, %r1327, %r1334, %p12;
	selp.b32 	%r1336, %r1334, %r1331, %p12;
	selp.b32 	%r1337, %r1332, %r1328, %p12;
	shfl.sync.bfly.b32	%r1338, %r1337, 1, 31, -1;
	selp.b32 	%r1339, %r1328, %r1338, %p12;
	selp.b32 	%r1340, %r1338, %r1332, %p12;
	or.b32  	%r1341, %r63, %r1346;
	or.b32  	%r1342, %r1341, %r12;
	or.b32  	%r1343, %r1342, %r62;
	add.s32 	%r1344, %r61, %r1343;
	cvt.u64.u32 	%rd95, %r1344;
	add.s64 	%rd96, %rd4, %rd95;
	st.global.v4.u32 	[%rd96], {%r1335, %r1339, %r1336, %r1340};
	add.s32 	%r82, %r1346, 128;
	setp.ne.s32 	%p15, %r1346, 32640;
	mov.u32 	%r1346, %r82;
	@%p15 bra 	LBB0_7;
// %bb.14:                              // %L12176
	mov.u32 	%r1345, 0;
	st.global.u32 	[%rd6], %r1345;
	ret;
LBB0_1:                                 // %L9
	mov.u64 	%rd16, exception1872;
	cvta.global.u64 	%rd17, %rd16;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd17;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd15;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	// begin inline asm
	exit;
	// end inline asm
LBB0_3:                                 // %L28
	mov.u64 	%rd18, exception1872;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd15;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	// begin inline asm
	exit;
	// end inline asm
LBB0_5:                                 // %L282
	mov.u32 	%r95, 2;
	st.global.u32 	[%rd6], %r95;
	mov.u64 	%rd23, exception866;
	cvta.global.u64 	%rd24, %rd23;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd24;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd15;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
