// PTX CompilerJob of kernel #upchan(CuDeviceVector{Float16x2, 1}, CuDeviceVector{Float16x2, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 7.1
.target sm_86
.address_size 64

	// .globl	_Z17julia_upchan_351213CuDeviceArrayI9Float16x2Li1ELi1EES_IS0_Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE // -- Begin function _Z17julia_upchan_351213CuDeviceArrayI9Float16x2Li1ELi1EES_IS0_Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[8]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z17julia_upchan_351213CuDeviceArrayI9Float16x2Li1ELi1EES_IS0_Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.visible .entry _Z17julia_upchan_351213CuDeviceArrayI9Float16x2Li1ELi1EES_IS0_Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE(
	.param .align 8 .b8 _Z17julia_upchan_351213CuDeviceArrayI9Float16x2Li1ELi1EES_IS0_Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0[8],
	.param .align 8 .b8 _Z17julia_upchan_351213CuDeviceArrayI9Float16x2Li1ELi1EES_IS0_Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z17julia_upchan_351213CuDeviceArrayI9Float16x2Li1ELi1EES_IS0_Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z17julia_upchan_351213CuDeviceArrayI9Float16x2Li1ELi1EES_IS0_Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z17julia_upchan_351213CuDeviceArrayI9Float16x2Li1ELi1EES_IS0_Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z17julia_upchan_351213CuDeviceArrayI9Float16x2Li1ELi1EES_IS0_Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<63>;
	.reg .b16 	%rs<93>;
	.reg .b32 	%r<855>;
	.reg .f32 	%f<281>;
	.reg .b64 	%rd<92>;

// %bb.0:                               // %conversion
	// begin inline asm
	mov.u32 %r23, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r23, 69887;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L10
	ld.param.u64 	%rd35, [_Z17julia_upchan_351213CuDeviceArrayI9Float16x2Li1ELi1EES_IS0_Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5];
	ld.param.u64 	%rd31, [_Z17julia_upchan_351213CuDeviceArrayI9Float16x2Li1ELi1EES_IS0_Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2];
	ld.param.u64 	%rd27, [_Z17julia_upchan_351213CuDeviceArrayI9Float16x2Li1ELi1EES_IS0_Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1];
	ld.param.u64 	%rd1, [_Z17julia_upchan_351213CuDeviceArrayI9Float16x2Li1ELi1EES_IS0_Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3];
	ld.param.u64 	%rd2, [_Z17julia_upchan_351213CuDeviceArrayI9Float16x2Li1ELi1EES_IS0_Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4];
	mov.u32 	%r61, %ctaid.x;
	shl.b32 	%r62, %r61, 9;
	mov.u32 	%r63, %tid.y;
	shl.b32 	%r64, %r63, 5;
	mov.u32 	%r65, %tid.x;
	or.b32  	%r66, %r64, %r65;
	or.b32  	%r67, %r66, %r62;
	mul.wide.u32 	%rd41, %r67, 4;
	add.s64 	%rd3, %rd35, %rd41;
	mov.u32 	%r68, 1;
	st.global.u32 	[%rd3], %r68;
	shl.b32 	%r69, %r65, 1;
	and.b32  	%r70, %r69, 8;
	and.b32  	%r71, %r65, 2;
	or.b32  	%r72, %r70, %r71;
	shl.b32 	%r73, %r65, 2;
	and.b32  	%r74, %r73, 4;
	or.b32  	%r75, %r72, %r74;
	shr.u32 	%r76, %r75, 1;
	mul.wide.u32 	%rd42, %r76, 4;
	add.s64 	%rd43, %rd27, %rd42;
	ld.global.u32 	%r670, [%rd43];
	shr.u32 	%r77, %r65, 2;
	bfe.u32 	%r78, %r65, 2, 1;
	and.b32  	%r79, %r69, 6;
	or.b32  	%r80, %r78, %r79;
	mul.wide.u32 	%rd44, %r80, 4;
	add.s64 	%rd45, %rd31, %rd44;
	ld.global.u32 	%r426, [%rd45];
	ld.global.u32 	%r488, [%rd45+32];
	ld.global.u32 	%r550, [%rd45+64];
	ld.global.u32 	%r368, [%rd45+96];
	and.b32  	%r81, %r69, 2;
	and.b32  	%r82, %r69, 4;
	or.b32  	%r83, %r78, %r81;
	or.b32  	%r84, %r83, %r82;
	mul.lo.s32 	%r85, %r84, 15;
	cvt.rn.f32.u32 	%f1, %r85;
	mov.f32 	%f2, 0f41800000;
	div.approx.f32 	%f3, %f1, %f2;
	add.f32 	%f4, %f3, %f3;
	mov.b32 	%r86, %f4;
	and.b32  	%r87, %r86, -2147483648;
	or.b32  	%r88, %r87, 1056964608;
	mov.b32 	%f5, %r88;
	add.f32 	%f6, %f4, %f5;
	cvt.rzi.f32.f32 	%f7, %f6;
	abs.f32 	%f8, %f4;
	setp.gt.f32 	%p2, %f8, 0f4B000000;
	selp.f32 	%f9, %f4, %f7, %p2;
	cvt.rzi.f32.f32 	%f10, %f4;
	setp.lt.f32 	%p3, %f8, 0f3F000000;
	selp.f32 	%f11, %f10, %f9, %p3;
	cvt.rzi.s32.f32 	%r89, %f11;
	fma.rn.f32 	%f12, %f11, 0fBF000000, %f3;
	mul.f32 	%f13, %f12, 0f34222169;
	fma.rn.f32 	%f14, %f12, 0f40490FDA, %f13;
	mul.f32 	%f15, %f14, %f14;
	fma.rn.f32 	%f16, %f15, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f17, %f16, %f15, 0f3D2AAABB;
	fma.rn.f32 	%f18, %f17, %f15, 0fBEFFFFFF;
	fma.rn.f32 	%f19, %f18, %f15, 0f3F800000;
	fma.rn.f32 	%f20, %f15, %f14, 0f00000000;
	fma.rn.f32 	%f21, %f15, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f22, %f21, %f15, 0fBE2AAAA8;
	fma.rn.f32 	%f23, %f22, %f20, %f14;
	and.b32  	%r90, %r89, 1;
	setp.eq.b32 	%p4, %r90, 1;
	selp.f32 	%f24, %f19, %f23, %p4;
	selp.f32 	%f25, %f23, %f19, %p4;
	and.b32  	%r91, %r89, 2;
	setp.eq.s32 	%p5, %r91, 0;
	neg.f32 	%f26, %f24;
	selp.f32 	%f27, %f24, %f26, %p5;
	add.s32 	%r92, %r89, 1;
	and.b32  	%r93, %r92, 2;
	setp.eq.s32 	%p6, %r93, 0;
	mov.f32 	%f28, 0f00000000;
	sub.f32 	%f29, %f28, %f25;
	selp.f32 	%f30, %f25, %f29, %p6;
	cvt.rzi.f32.f32 	%f31, %f3;
	setp.eq.f32 	%p7, %f31, %f3;
	mul.f32 	%f32, %f3, 0f00000000;
	selp.f32 	%f33, %f32, %f27, %p7;
	abs.f32 	%f34, %f3;
	setp.gt.f32 	%p8, %f34, 0f4B800000;
	add.f32 	%f35, %f33, 0f3F800000;
	selp.f32 	%f36, %f35, %f30, %p8;
	add.s32 	%r94, %r85, 120;
	cvt.rn.f32.u32 	%f37, %r94;
	div.approx.f32 	%f38, %f37, %f2;
	add.f32 	%f39, %f38, %f38;
	mov.b32 	%r95, %f39;
	and.b32  	%r96, %r95, -2147483648;
	or.b32  	%r97, %r96, 1056964608;
	mov.b32 	%f40, %r97;
	add.f32 	%f41, %f39, %f40;
	cvt.rzi.f32.f32 	%f42, %f41;
	abs.f32 	%f43, %f39;
	setp.gt.f32 	%p9, %f43, 0f4B000000;
	selp.f32 	%f44, %f39, %f42, %p9;
	cvt.rzi.f32.f32 	%f45, %f39;
	setp.lt.f32 	%p10, %f43, 0f3F000000;
	selp.f32 	%f46, %f45, %f44, %p10;
	cvt.rzi.s32.f32 	%r98, %f46;
	fma.rn.f32 	%f47, %f46, 0fBF000000, %f38;
	mul.f32 	%f48, %f47, 0f34222169;
	fma.rn.f32 	%f49, %f47, 0f40490FDA, %f48;
	mul.f32 	%f50, %f49, %f49;
	fma.rn.f32 	%f51, %f50, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f52, %f51, %f50, 0f3D2AAABB;
	fma.rn.f32 	%f53, %f52, %f50, 0fBEFFFFFF;
	fma.rn.f32 	%f54, %f53, %f50, 0f3F800000;
	fma.rn.f32 	%f55, %f50, %f49, 0f00000000;
	fma.rn.f32 	%f56, %f50, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f57, %f56, %f50, 0fBE2AAAA8;
	fma.rn.f32 	%f58, %f57, %f55, %f49;
	and.b32  	%r99, %r98, 1;
	setp.eq.b32 	%p11, %r99, 1;
	selp.f32 	%f59, %f54, %f58, %p11;
	selp.f32 	%f60, %f58, %f54, %p11;
	and.b32  	%r100, %r98, 2;
	setp.eq.s32 	%p12, %r100, 0;
	neg.f32 	%f61, %f59;
	selp.f32 	%f62, %f59, %f61, %p12;
	add.s32 	%r101, %r98, 1;
	and.b32  	%r102, %r101, 2;
	setp.eq.s32 	%p13, %r102, 0;
	sub.f32 	%f63, %f28, %f60;
	selp.f32 	%f64, %f60, %f63, %p13;
	cvt.rzi.f32.f32 	%f65, %f38;
	setp.eq.f32 	%p14, %f65, %f38;
	mul.f32 	%f66, %f38, 0f00000000;
	selp.f32 	%f67, %f66, %f62, %p14;
	abs.f32 	%f68, %f38;
	setp.gt.f32 	%p15, %f68, 0f4B800000;
	add.f32 	%f69, %f67, 0f3F800000;
	selp.f32 	%f70, %f69, %f64, %p15;
	mov.b32 	%r25, %f36;
	mov.b32 	%r26, %f70;
	// begin inline asm
	cvt.rn.f16x2.f32 %r572, %r26, %r25;
	// end inline asm
	mov.b32 	%r28, %f33;
	mov.b32 	%r29, %f67;
	// begin inline asm
	cvt.rn.f16x2.f32 %r566, %r29, %r28;
	// end inline asm
	and.b32  	%r103, %r65, 3;
	and.b32  	%r104, %r77, 2;
	or.b32  	%r105, %r103, 4;
	and.b32  	%r106, %r77, 4;
	mul.wide.u32 	%rd46, %r103, %r77;
	shl.b64 	%rd47, %rd46, 1;
	neg.s64 	%rd48, %rd47;
	cvt.rn.f32.s64 	%f71, %rd48;
	mov.f32 	%f72, 0f43800000;
	div.approx.f32 	%f73, %f71, %f72;
	add.f32 	%f74, %f73, %f73;
	mov.b32 	%r107, %f74;
	and.b32  	%r108, %r107, -2147483648;
	or.b32  	%r109, %r108, 1056964608;
	mov.b32 	%f75, %r109;
	add.f32 	%f76, %f74, %f75;
	cvt.rzi.f32.f32 	%f77, %f76;
	abs.f32 	%f78, %f74;
	setp.gt.f32 	%p16, %f78, 0f4B000000;
	selp.f32 	%f79, %f74, %f77, %p16;
	cvt.rzi.f32.f32 	%f80, %f74;
	setp.lt.f32 	%p17, %f78, 0f3F000000;
	selp.f32 	%f81, %f80, %f79, %p17;
	cvt.rzi.s32.f32 	%r110, %f81;
	fma.rn.f32 	%f82, %f81, 0fBF000000, %f73;
	mul.f32 	%f83, %f82, 0f34222169;
	fma.rn.f32 	%f84, %f82, 0f40490FDA, %f83;
	mul.f32 	%f85, %f84, %f84;
	fma.rn.f32 	%f86, %f85, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f87, %f86, %f85, 0f3D2AAABB;
	fma.rn.f32 	%f88, %f87, %f85, 0fBEFFFFFF;
	fma.rn.f32 	%f89, %f88, %f85, 0f3F800000;
	fma.rn.f32 	%f90, %f85, %f84, 0f00000000;
	fma.rn.f32 	%f91, %f85, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f92, %f91, %f85, 0fBE2AAAA8;
	fma.rn.f32 	%f93, %f92, %f90, %f84;
	and.b32  	%r111, %r110, 1;
	setp.eq.b32 	%p18, %r111, 1;
	selp.f32 	%f94, %f89, %f93, %p18;
	selp.f32 	%f95, %f93, %f89, %p18;
	and.b32  	%r112, %r110, 2;
	setp.eq.s32 	%p19, %r112, 0;
	neg.f32 	%f96, %f94;
	selp.f32 	%f97, %f94, %f96, %p19;
	add.s32 	%r113, %r110, 1;
	and.b32  	%r114, %r113, 2;
	setp.eq.s32 	%p20, %r114, 0;
	sub.f32 	%f98, %f28, %f95;
	selp.f32 	%f99, %f95, %f98, %p20;
	cvt.rzi.f32.f32 	%f100, %f73;
	setp.eq.f32 	%p21, %f100, %f73;
	mul.f32 	%f101, %f73, 0f00000000;
	selp.f32 	%f102, %f101, %f97, %p21;
	abs.f32 	%f103, %f73;
	setp.gt.f32 	%p22, %f103, 0f4B800000;
	add.f32 	%f104, %f102, 0f3F800000;
	selp.f32 	%f105, %f104, %f99, %p22;
	mul.wide.u32 	%rd49, %r105, %r77;
	shl.b64 	%rd50, %rd49, 1;
	neg.s64 	%rd51, %rd50;
	cvt.rn.f32.s64 	%f106, %rd51;
	div.approx.f32 	%f107, %f106, %f72;
	add.f32 	%f108, %f107, %f107;
	mov.b32 	%r115, %f108;
	and.b32  	%r116, %r115, -2147483648;
	or.b32  	%r117, %r116, 1056964608;
	mov.b32 	%f109, %r117;
	add.f32 	%f110, %f108, %f109;
	cvt.rzi.f32.f32 	%f111, %f110;
	abs.f32 	%f112, %f108;
	setp.gt.f32 	%p23, %f112, 0f4B000000;
	selp.f32 	%f113, %f108, %f111, %p23;
	cvt.rzi.f32.f32 	%f114, %f108;
	setp.lt.f32 	%p24, %f112, 0f3F000000;
	selp.f32 	%f115, %f114, %f113, %p24;
	cvt.rzi.s32.f32 	%r118, %f115;
	fma.rn.f32 	%f116, %f115, 0fBF000000, %f107;
	mul.f32 	%f117, %f116, 0f34222169;
	fma.rn.f32 	%f118, %f116, 0f40490FDA, %f117;
	mul.f32 	%f119, %f118, %f118;
	fma.rn.f32 	%f120, %f119, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f121, %f120, %f119, 0f3D2AAABB;
	fma.rn.f32 	%f122, %f121, %f119, 0fBEFFFFFF;
	fma.rn.f32 	%f123, %f122, %f119, 0f3F800000;
	fma.rn.f32 	%f124, %f119, %f118, 0f00000000;
	fma.rn.f32 	%f125, %f119, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f126, %f125, %f119, 0fBE2AAAA8;
	fma.rn.f32 	%f127, %f126, %f124, %f118;
	and.b32  	%r119, %r118, 1;
	setp.eq.b32 	%p25, %r119, 1;
	selp.f32 	%f128, %f123, %f127, %p25;
	selp.f32 	%f129, %f127, %f123, %p25;
	and.b32  	%r120, %r118, 2;
	setp.eq.s32 	%p26, %r120, 0;
	neg.f32 	%f130, %f128;
	selp.f32 	%f131, %f128, %f130, %p26;
	add.s32 	%r121, %r118, 1;
	and.b32  	%r122, %r121, 2;
	setp.eq.s32 	%p27, %r122, 0;
	sub.f32 	%f132, %f28, %f129;
	selp.f32 	%f133, %f129, %f132, %p27;
	cvt.rzi.f32.f32 	%f134, %f107;
	setp.eq.f32 	%p28, %f134, %f107;
	mul.f32 	%f135, %f107, 0f00000000;
	selp.f32 	%f136, %f135, %f131, %p28;
	abs.f32 	%f137, %f107;
	setp.gt.f32 	%p29, %f137, 0f4B800000;
	add.f32 	%f138, %f136, 0f3F800000;
	selp.f32 	%f139, %f138, %f133, %p29;
	mov.b32 	%r31, %f105;
	mov.b32 	%r32, %f139;
	// begin inline asm
	cvt.rn.f16x2.f32 %r602, %r32, %r31;
	// end inline asm
	mov.b32 	%r37, %f102;
	xor.b32  	%r34, %r37, -2147483648;
	mov.b32 	%r38, %f136;
	xor.b32  	%r35, %r38, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r600, %r35, %r34;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r601, %r38, %r37;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r599, %r32, %r31;
	// end inline asm
	mov.f32 	%f140, 0f47800000;
	div.approx.f32 	%f141, %f28, %f140;
	add.f32 	%f142, %f141, %f141;
	mov.b32 	%r123, %f142;
	and.b32  	%r124, %r123, -2147483648;
	or.b32  	%r125, %r124, 1056964608;
	mov.b32 	%f143, %r125;
	add.f32 	%f144, %f142, %f143;
	cvt.rzi.f32.f32 	%f145, %f144;
	abs.f32 	%f146, %f142;
	setp.gt.f32 	%p30, %f146, 0f4B000000;
	selp.f32 	%f147, %f142, %f145, %p30;
	cvt.rzi.f32.f32 	%f148, %f142;
	setp.lt.f32 	%p31, %f146, 0f3F000000;
	selp.f32 	%f149, %f148, %f147, %p31;
	cvt.rzi.s32.f32 	%r126, %f149;
	fma.rn.f32 	%f150, %f149, 0fBF000000, %f141;
	mul.f32 	%f151, %f150, 0f34222169;
	fma.rn.f32 	%f152, %f150, 0f40490FDA, %f151;
	mul.f32 	%f153, %f152, %f152;
	fma.rn.f32 	%f154, %f153, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f155, %f154, %f153, 0f3D2AAABB;
	fma.rn.f32 	%f156, %f155, %f153, 0fBEFFFFFF;
	fma.rn.f32 	%f157, %f156, %f153, 0f3F800000;
	fma.rn.f32 	%f158, %f153, %f152, 0f00000000;
	fma.rn.f32 	%f159, %f153, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f160, %f159, %f153, 0fBE2AAAA8;
	fma.rn.f32 	%f161, %f160, %f158, %f152;
	and.b32  	%r127, %r126, 1;
	setp.eq.b32 	%p32, %r127, 1;
	selp.f32 	%f162, %f157, %f161, %p32;
	selp.f32 	%f163, %f161, %f157, %p32;
	and.b32  	%r128, %r126, 2;
	setp.eq.s32 	%p33, %r128, 0;
	neg.f32 	%f164, %f162;
	selp.f32 	%f165, %f162, %f164, %p33;
	add.s32 	%r129, %r126, 1;
	and.b32  	%r130, %r129, 2;
	setp.eq.s32 	%p34, %r130, 0;
	sub.f32 	%f166, %f28, %f163;
	selp.f32 	%f167, %f163, %f166, %p34;
	cvt.rzi.f32.f32 	%f168, %f141;
	setp.eq.f32 	%p35, %f168, %f141;
	mul.f32 	%f169, %f141, 0f00000000;
	selp.f32 	%f170, %f169, %f165, %p35;
	abs.f32 	%f171, %f141;
	setp.gt.f32 	%p36, %f171, 0f4B800000;
	add.f32 	%f172, %f170, 0f3F800000;
	selp.f32 	%f173, %f172, %f167, %p36;
	mul.wide.u32 	%rd52, %r77, 2;
	neg.s64 	%rd53, %rd52;
	cvt.rn.f32.s64 	%f174, %rd53;
	div.approx.f32 	%f175, %f174, %f140;
	add.f32 	%f176, %f175, %f175;
	mov.b32 	%r131, %f176;
	and.b32  	%r132, %r131, -2147483648;
	or.b32  	%r133, %r132, 1056964608;
	mov.b32 	%f177, %r133;
	add.f32 	%f178, %f176, %f177;
	cvt.rzi.f32.f32 	%f179, %f178;
	abs.f32 	%f180, %f176;
	setp.gt.f32 	%p37, %f180, 0f4B000000;
	selp.f32 	%f181, %f176, %f179, %p37;
	cvt.rzi.f32.f32 	%f182, %f176;
	setp.lt.f32 	%p38, %f180, 0f3F000000;
	selp.f32 	%f183, %f182, %f181, %p38;
	cvt.rzi.s32.f32 	%r134, %f183;
	fma.rn.f32 	%f184, %f183, 0fBF000000, %f175;
	mul.f32 	%f185, %f184, 0f34222169;
	fma.rn.f32 	%f186, %f184, 0f40490FDA, %f185;
	mul.f32 	%f187, %f186, %f186;
	fma.rn.f32 	%f188, %f187, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f189, %f188, %f187, 0f3D2AAABB;
	fma.rn.f32 	%f190, %f189, %f187, 0fBEFFFFFF;
	fma.rn.f32 	%f191, %f190, %f187, 0f3F800000;
	fma.rn.f32 	%f192, %f187, %f186, 0f00000000;
	fma.rn.f32 	%f193, %f187, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f194, %f193, %f187, 0fBE2AAAA8;
	fma.rn.f32 	%f195, %f194, %f192, %f186;
	and.b32  	%r135, %r134, 1;
	setp.eq.b32 	%p39, %r135, 1;
	selp.f32 	%f196, %f191, %f195, %p39;
	selp.f32 	%f197, %f195, %f191, %p39;
	and.b32  	%r136, %r134, 2;
	setp.eq.s32 	%p40, %r136, 0;
	neg.f32 	%f198, %f196;
	selp.f32 	%f199, %f196, %f198, %p40;
	add.s32 	%r137, %r134, 1;
	and.b32  	%r138, %r137, 2;
	setp.eq.s32 	%p41, %r138, 0;
	sub.f32 	%f200, %f28, %f197;
	selp.f32 	%f201, %f197, %f200, %p41;
	cvt.rzi.f32.f32 	%f202, %f175;
	setp.eq.f32 	%p42, %f202, %f175;
	mul.f32 	%f203, %f175, 0f00000000;
	selp.f32 	%f204, %f203, %f199, %p42;
	abs.f32 	%f205, %f175;
	setp.gt.f32 	%p43, %f205, 0f4B800000;
	add.f32 	%f206, %f204, 0f3F800000;
	selp.f32 	%f207, %f206, %f201, %p43;
	mov.b32 	%r43, %f173;
	mov.b32 	%r44, %f207;
	// begin inline asm
	cvt.rn.f16x2.f32 %r624, %r44, %r43;
	// end inline asm
	mov.b32 	%r46, %f170;
	mov.b32 	%r47, %f204;
	// begin inline asm
	cvt.rn.f16x2.f32 %r618, %r47, %r46;
	// end inline asm
	shr.u32 	%r139, %r65, 4;
	cvt.u16.u32 	%rs1, %r65;
	shr.u16 	%rs2, %rs1, 8;
	shl.b16 	%rs3, %rs1, 8;
	or.b16  	%rs4, %rs3, %rs2;
	shl.b16 	%rs5, %rs4, 4;
	shr.u16 	%rs6, %rs4, 4;
	and.b16  	%rs7, %rs6, 3840;
	or.b16  	%rs8, %rs7, %rs5;
	and.b16  	%rs9, %rs8, 13107;
	shl.b16 	%rs10, %rs9, 2;
	shr.u16 	%rs11, %rs8, 2;
	and.b16  	%rs12, %rs11, 13107;
	or.b16  	%rs13, %rs12, %rs10;
	shr.u16 	%rs14, %rs13, 1;
	and.b16  	%rs15, %rs13, 16384;
	shl.b16 	%rs16, %rs15, 1;
	or.b16  	%rs17, %rs14, %rs16;
	shr.u16 	%rs18, %rs17, 14;
	cvt.u32.u16 	%r140, %rs18;
	or.b32  	%r141, %r104, %r139;
	setp.eq.s32 	%p44, %r141, %r140;
	mov.f32 	%f208, 0f40000000;
	div.approx.f32 	%f209, %f28, %f208;
	add.f32 	%f210, %f209, %f209;
	mov.b32 	%r142, %f210;
	and.b32  	%r143, %r142, -2147483648;
	or.b32  	%r144, %r143, 1056964608;
	mov.b32 	%f211, %r144;
	add.f32 	%f212, %f210, %f211;
	cvt.rzi.f32.f32 	%f213, %f212;
	abs.f32 	%f214, %f210;
	setp.gt.f32 	%p45, %f214, 0f4B000000;
	selp.f32 	%f215, %f210, %f213, %p45;
	cvt.rzi.f32.f32 	%f216, %f210;
	setp.lt.f32 	%p46, %f214, 0f3F000000;
	selp.f32 	%f217, %f216, %f215, %p46;
	cvt.rzi.s32.f32 	%r145, %f217;
	fma.rn.f32 	%f218, %f217, 0fBF000000, %f209;
	mul.f32 	%f219, %f218, 0f34222169;
	fma.rn.f32 	%f220, %f218, 0f40490FDA, %f219;
	mul.f32 	%f221, %f220, %f220;
	fma.rn.f32 	%f222, %f221, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f223, %f222, %f221, 0f3D2AAABB;
	fma.rn.f32 	%f224, %f223, %f221, 0fBEFFFFFF;
	fma.rn.f32 	%f225, %f224, %f221, 0f3F800000;
	fma.rn.f32 	%f226, %f221, %f220, 0f00000000;
	fma.rn.f32 	%f227, %f221, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f228, %f227, %f221, 0fBE2AAAA8;
	fma.rn.f32 	%f229, %f228, %f226, %f220;
	and.b32  	%r146, %r145, 1;
	setp.eq.b32 	%p47, %r146, 1;
	selp.f32 	%f230, %f225, %f229, %p47;
	selp.f32 	%f231, %f229, %f225, %p47;
	and.b32  	%r147, %r145, 2;
	setp.eq.s32 	%p48, %r147, 0;
	neg.f32 	%f232, %f230;
	selp.f32 	%f233, %f230, %f232, %p48;
	add.s32 	%r148, %r145, 1;
	and.b32  	%r149, %r148, 2;
	setp.eq.s32 	%p49, %r149, 0;
	sub.f32 	%f234, %f28, %f231;
	selp.f32 	%f235, %f231, %f234, %p49;
	cvt.rzi.f32.f32 	%f236, %f209;
	setp.eq.f32 	%p50, %f236, %f209;
	mul.f32 	%f237, %f209, 0f00000000;
	selp.f32 	%f238, %f237, %f233, %p50;
	abs.f32 	%f239, %f209;
	setp.gt.f32 	%p51, %f239, 0f4B800000;
	add.f32 	%f240, %f238, 0f3F800000;
	selp.f32 	%f241, %f240, %f235, %p51;
	selp.f32 	%f242, 0f3F800000, 0f00000000, %p44;
	mul.f32 	%f243, %f241, %f242;
	mul.f32 	%f244, %f238, %f242;
	mul.wide.u32 	%rd54, %r78, 2;
	neg.s64 	%rd55, %rd54;
	cvt.rn.f32.s64 	%f245, %rd55;
	div.approx.f32 	%f246, %f245, %f208;
	add.f32 	%f247, %f246, %f246;
	mov.b32 	%r150, %f247;
	and.b32  	%r151, %r150, -2147483648;
	or.b32  	%r152, %r151, 1056964608;
	mov.b32 	%f248, %r152;
	add.f32 	%f249, %f247, %f248;
	cvt.rzi.f32.f32 	%f250, %f249;
	abs.f32 	%f251, %f247;
	setp.gt.f32 	%p52, %f251, 0f4B000000;
	selp.f32 	%f252, %f247, %f250, %p52;
	cvt.rzi.f32.f32 	%f253, %f247;
	setp.lt.f32 	%p53, %f251, 0f3F000000;
	selp.f32 	%f254, %f253, %f252, %p53;
	cvt.rzi.s32.f32 	%r153, %f254;
	fma.rn.f32 	%f255, %f254, 0fBF000000, %f246;
	mul.f32 	%f256, %f255, 0f34222169;
	fma.rn.f32 	%f257, %f255, 0f40490FDA, %f256;
	mul.f32 	%f258, %f257, %f257;
	fma.rn.f32 	%f259, %f258, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f260, %f259, %f258, 0f3D2AAABB;
	fma.rn.f32 	%f261, %f260, %f258, 0fBEFFFFFF;
	fma.rn.f32 	%f262, %f261, %f258, 0f3F800000;
	fma.rn.f32 	%f263, %f258, %f257, 0f00000000;
	fma.rn.f32 	%f264, %f258, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f265, %f264, %f258, 0fBE2AAAA8;
	fma.rn.f32 	%f266, %f265, %f263, %f257;
	and.b32  	%r154, %r153, 1;
	setp.eq.b32 	%p54, %r154, 1;
	selp.f32 	%f267, %f262, %f266, %p54;
	selp.f32 	%f268, %f266, %f262, %p54;
	and.b32  	%r155, %r153, 2;
	setp.eq.s32 	%p55, %r155, 0;
	neg.f32 	%f269, %f267;
	selp.f32 	%f270, %f267, %f269, %p55;
	add.s32 	%r156, %r153, 1;
	and.b32  	%r157, %r156, 2;
	setp.eq.s32 	%p56, %r157, 0;
	sub.f32 	%f271, %f28, %f268;
	selp.f32 	%f272, %f268, %f271, %p56;
	cvt.rzi.f32.f32 	%f273, %f246;
	setp.eq.f32 	%p57, %f273, %f246;
	mul.f32 	%f274, %f246, 0f00000000;
	selp.f32 	%f275, %f274, %f270, %p57;
	abs.f32 	%f276, %f246;
	setp.gt.f32 	%p58, %f276, 0f4B800000;
	add.f32 	%f277, %f275, 0f3F800000;
	selp.f32 	%f278, %f277, %f272, %p58;
	mul.f32 	%f279, %f278, %f242;
	mul.f32 	%f280, %f275, %f242;
	mov.b32 	%r49, %f243;
	mov.b32 	%r50, %f279;
	// begin inline asm
	cvt.rn.f16x2.f32 %r654, %r50, %r49;
	// end inline asm
	mov.b32 	%r55, %f244;
	xor.b32  	%r52, %r55, -2147483648;
	mov.b32 	%r56, %f280;
	xor.b32  	%r53, %r56, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r652, %r53, %r52;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r653, %r56, %r55;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r651, %r50, %r49;
	// end inline asm
	shl.b32 	%r158, %r61, 6;
	and.b32  	%r159, %r158, 7680;
	shl.b32 	%r160, %r61, 7;
	shl.b32 	%r161, %r65, 4;
	and.b32  	%r162, %r161, 112;
	and.b32  	%r163, %r160, 384;
	shl.b32 	%r164, %r61, 11;
	and.b32  	%r165, %r164, 8192;
	and.b32  	%r18, %r65, 8;
	or.b32  	%r166, %r106, %r18;
	shl.b32 	%r167, %r63, 18;
	shl.b32 	%r168, %r166, 14;
	or.b32  	%r169, %r167, %r162;
	or.b32  	%r170, %r169, %r163;
	or.b32  	%r171, %r170, %r159;
	or.b32  	%r172, %r171, %r165;
	or.b32  	%r173, %r172, %r168;
	cvt.u64.u32 	%rd56, %r173;
	add.s64 	%rd5, %rd1, %rd56;
	add.s64 	%rd4, %rd5, -4;
	mul.lo.s32 	%r174, %r139, 65;
	or.b32  	%r175, %r18, %r161;
	shr.u32 	%r176, %r175, 2;
	and.b32  	%r177, %r176, 30;
	mul.lo.s32 	%r178, %r63, 545;
	add.s32 	%r179, %r174, %r178;
	add.s32 	%r180, %r179, %r177;
	mul.wide.u32 	%rd57, %r180, 4;
	mov.u64 	%rd58, shmem;
	add.s64 	%rd6, %rd58, %rd57;
	cvt.u64.u32 	%rd59, %r177;
	cvt.u64.u32 	%rd60, %r174;
	cvt.u64.u32 	%rd61, %r178;
	add.s64 	%rd62, %rd61, %rd60;
	add.s64 	%rd63, %rd62, %rd59;
	shl.b64 	%rd64, %rd63, 2;
	add.s64 	%rd7, %rd58, %rd64;
	bfe.u32 	%r181, %r65, 1, 1;
	shl.b32 	%r182, %r63, 2;
	and.b32  	%r183, %r182, 28;
	and.b32  	%r184, %r69, 32;
	or.b32  	%r185, %r183, %r184;
	shl.b32 	%r186, %r65, 3;
	and.b32  	%r187, %r186, 64;
	or.b32  	%r188, %r185, %r187;
	shr.u32 	%r189, %r188, 2;
	and.b32  	%r190, %r182, 32;
	and.b32  	%r191, %r65, 1;
	mad.lo.s32 	%r192, %r191, 130, %r190;
	mad.lo.s32 	%r193, %r78, 260, %r192;
	mad.lo.s32 	%r194, %r181, 65, %r193;
	add.s32 	%r195, %r194, %r189;
	or.b32  	%r196, %r189, %r190;
	mad.lo.s32 	%r197, %r76, 65, %r196;
	or.b32  	%r198, %r139, 2;
	mul.lo.s32 	%r199, %r198, 65;
	add.s32 	%r200, %r199, %r178;
	add.s32 	%r201, %r200, %r177;
	mul.wide.u32 	%rd65, %r201, 4;
	add.s64 	%rd8, %rd58, %rd65;
	cvt.u64.u32 	%rd66, %r199;
	add.s64 	%rd67, %rd61, %rd66;
	add.s64 	%rd68, %rd67, %rd59;
	shl.b64 	%rd69, %rd68, 2;
	add.s64 	%rd9, %rd58, %rd69;
	or.b32  	%r202, %r139, 4;
	mul.lo.s32 	%r203, %r202, 65;
	add.s32 	%r204, %r203, %r178;
	add.s32 	%r205, %r204, %r177;
	mul.wide.u32 	%rd70, %r205, 4;
	add.s64 	%rd10, %rd58, %rd70;
	cvt.u64.u32 	%rd71, %r203;
	add.s64 	%rd72, %rd61, %rd71;
	add.s64 	%rd73, %rd72, %rd59;
	shl.b64 	%rd74, %rd73, 2;
	add.s64 	%rd11, %rd58, %rd74;
	or.b32  	%r206, %r139, 6;
	mul.lo.s32 	%r207, %r206, 65;
	add.s32 	%r208, %r207, %r178;
	add.s32 	%r209, %r208, %r177;
	mul.wide.u32 	%rd75, %r209, 4;
	add.s64 	%rd12, %rd58, %rd75;
	cvt.u64.u32 	%rd76, %r207;
	add.s64 	%rd77, %rd61, %rd76;
	add.s64 	%rd78, %rd77, %rd59;
	shl.b64 	%rd79, %rd78, 2;
	add.s64 	%rd13, %rd58, %rd79;
	or.b32  	%r210, %r163, %r162;
	or.b32  	%r211, %r210, %r167;
	shl.b32 	%r212, %r61, 15;
	and.b32  	%r213, %r212, 131072;
	or.b32  	%r214, %r211, %r213;
	shr.u32 	%r215, %r65, 3;
	shl.b32 	%r216, %r61, 1;
	and.b32  	%r217, %r216, 240;
	or.b32  	%r218, %r217, %r215;
	shl.b32 	%r219, %r218, 9;
	or.b32  	%r220, %r214, %r219;
	cvt.u64.u32 	%rd80, %r220;
	add.s64 	%rd81, %rd80, %rd2;
	add.s64 	%rd14, %rd81, -4;
	or.b32  	%r221, %r220, 2048;
	cvt.u64.u32 	%rd82, %r221;
	add.s64 	%rd83, %rd82, %rd2;
	add.s64 	%rd15, %rd83, -4;
	or.b32  	%r222, %r220, 4096;
	cvt.u64.u32 	%rd84, %r222;
	add.s64 	%rd85, %rd84, %rd2;
	add.s64 	%rd16, %rd85, -4;
	or.b32  	%r223, %r220, 6144;
	cvt.u64.u32 	%rd86, %r223;
	add.s64 	%rd87, %rd86, %rd2;
	add.s64 	%rd17, %rd87, -4;
	mul.wide.u32 	%rd88, %r197, 4;
	add.s64 	%rd21, %rd58, %rd88;
	mul.wide.u32 	%rd89, %r195, 4;
	add.s64 	%rd20, %rd58, %rd89;
	mov.u32 	%r853, 0;
LBB0_3:                                 // %L833
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_4 Depth 2
	setp.eq.s32 	%p59, %r18, 0;
	ld.global.v4.u32 	{%r289, %r290, %r291, %r292}, [%rd4+4];
	ld.global.v4.u32 	{%r293, %r294, %r295, %r296}, [%rd5+16384];
	ld.global.v4.u32 	{%r297, %r298, %r299, %r300}, [%rd5+32768];
	ld.global.v4.u32 	{%r301, %r302, %r303, %r304}, [%rd5+49152];
	selp.b32 	%r305, %r291, %r289, %p59;
	shfl.sync.bfly.b32	%r306, %r305, 8, 31, -1;
	selp.b32 	%r225, %r289, %r306, %p59;
	selp.b32 	%r226, %r306, %r291, %p59;
	selp.b32 	%r307, %r292, %r290, %p59;
	shfl.sync.bfly.b32	%r308, %r307, 8, 31, -1;
	selp.b32 	%r233, %r290, %r308, %p59;
	selp.b32 	%r234, %r308, %r292, %p59;
	selp.b32 	%r309, %r295, %r293, %p59;
	shfl.sync.bfly.b32	%r310, %r309, 8, 31, -1;
	selp.b32 	%r241, %r293, %r310, %p59;
	selp.b32 	%r242, %r310, %r295, %p59;
	selp.b32 	%r311, %r296, %r294, %p59;
	shfl.sync.bfly.b32	%r312, %r311, 8, 31, -1;
	selp.b32 	%r249, %r294, %r312, %p59;
	selp.b32 	%r250, %r312, %r296, %p59;
	selp.b32 	%r313, %r299, %r297, %p59;
	shfl.sync.bfly.b32	%r314, %r313, 8, 31, -1;
	selp.b32 	%r257, %r297, %r314, %p59;
	selp.b32 	%r258, %r314, %r299, %p59;
	selp.b32 	%r315, %r300, %r298, %p59;
	shfl.sync.bfly.b32	%r316, %r315, 8, 31, -1;
	selp.b32 	%r265, %r298, %r316, %p59;
	selp.b32 	%r266, %r316, %r300, %p59;
	selp.b32 	%r317, %r303, %r301, %p59;
	shfl.sync.bfly.b32	%r318, %r317, 8, 31, -1;
	selp.b32 	%r273, %r301, %r318, %p59;
	selp.b32 	%r274, %r318, %r303, %p59;
	selp.b32 	%r319, %r304, %r302, %p59;
	shfl.sync.bfly.b32	%r320, %r319, 8, 31, -1;
	selp.b32 	%r281, %r302, %r320, %p59;
	selp.b32 	%r282, %r320, %r304, %p59;
	mov.u32 	%r759, 21520;
	// begin inline asm
	prmt.b32 %r224, %r225, %r226, %r759;
	// end inline asm
	mov.u32 	%r763, 30258;
	// begin inline asm
	prmt.b32 %r228, %r225, %r226, %r763;
	// end inline asm
	// begin inline asm
	prmt.b32 %r232, %r233, %r234, %r759;
	// end inline asm
	// begin inline asm
	prmt.b32 %r236, %r233, %r234, %r763;
	// end inline asm
	// begin inline asm
	prmt.b32 %r240, %r241, %r242, %r759;
	// end inline asm
	// begin inline asm
	prmt.b32 %r244, %r241, %r242, %r763;
	// end inline asm
	// begin inline asm
	prmt.b32 %r248, %r249, %r250, %r759;
	// end inline asm
	// begin inline asm
	prmt.b32 %r252, %r249, %r250, %r763;
	// end inline asm
	// begin inline asm
	prmt.b32 %r256, %r257, %r258, %r759;
	// end inline asm
	// begin inline asm
	prmt.b32 %r260, %r257, %r258, %r763;
	// end inline asm
	// begin inline asm
	prmt.b32 %r264, %r265, %r266, %r759;
	// end inline asm
	// begin inline asm
	prmt.b32 %r268, %r265, %r266, %r763;
	// end inline asm
	// begin inline asm
	prmt.b32 %r272, %r273, %r274, %r759;
	// end inline asm
	// begin inline asm
	prmt.b32 %r276, %r273, %r274, %r763;
	// end inline asm
	// begin inline asm
	prmt.b32 %r280, %r281, %r282, %r759;
	// end inline asm
	// begin inline asm
	prmt.b32 %r284, %r281, %r282, %r763;
	// end inline asm
	st.shared.u32 	[%rd6], %r224;
	st.shared.u32 	[%rd7+128], %r228;
	st.shared.u32 	[%rd7+4], %r232;
	st.shared.u32 	[%rd7+132], %r236;
	st.shared.u32 	[%rd7+1040], %r240;
	st.shared.u32 	[%rd7+1168], %r244;
	st.shared.u32 	[%rd7+1044], %r248;
	st.shared.u32 	[%rd7+1172], %r252;
	st.shared.u32 	[%rd7+520], %r256;
	st.shared.u32 	[%rd7+648], %r260;
	st.shared.u32 	[%rd7+524], %r264;
	st.shared.u32 	[%rd7+652], %r268;
	st.shared.u32 	[%rd7+1560], %r272;
	st.shared.u32 	[%rd7+1688], %r276;
	st.shared.u32 	[%rd7+1564], %r280;
	st.shared.u32 	[%rd7+1692], %r284;
	bar.sync 	0;
	mov.u32 	%r854, 256;
	mov.u64 	%rd90, %rd20;
	mov.u64 	%rd91, %rd21;
LBB0_4:                                 // %L7354
                                        //   Parent Loop BB0_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ld.shared.u32 	%r754, [%rd90];
	mov.u16 	%rs19, 25600;
	// begin inline asm
	mov.b32 %r326, {%rs19, %rs19};
	// end inline asm
	mov.u16 	%rs21, 21504;
	// begin inline asm
	mov.b32 %r337, {%rs21, %rs21};
	// end inline asm
	xor.b32  	%r325, %r754, -2004318072;
	mov.u32 	%r324, 983055;
	// begin inline asm
	lop3.b32 %r323, %r324, %r325, %r326, 202;
	// end inline asm
	mov.u16 	%rs23, 18432;
	// begin inline asm
	mov.b32 %r327, {%rs23, %rs23};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r328, %r326, %r327;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r331, %r323, %r328;
	// end inline asm
	mov.u32 	%r335, 15728880;
	// begin inline asm
	lop3.b32 %r334, %r335, %r325, %r337, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r338, {%rs23, %rs23};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r339, %r337, %r338;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r342, %r334, %r339;
	// end inline asm
	shr.u32 	%r347, %r325, 8;
	// begin inline asm
	lop3.b32 %r345, %r324, %r347, %r326, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r349, {%rs23, %rs23};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r350, %r326, %r349;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r353, %r345, %r350;
	// end inline asm
	// begin inline asm
	lop3.b32 %r356, %r335, %r347, %r337, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r360, {%rs23, %rs23};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r361, %r337, %r360;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r364, %r356, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r367, %r368, %r331;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r370, %r368, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r373, %r368, %r353;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r376, %r368, %r364;
	// end inline asm
	// begin inline asm
	mov.b32 %r384, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	mov.b32 %r395, {%rs21, %rs21};
	// end inline asm
	mov.u32 	%r383, -2004318072;
	// begin inline asm
	lop3.b32 %r381, %r324, %r383, %r384, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r385, {%rs23, %rs23};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r386, %r384, %r385;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r389, %r381, %r386;
	// end inline asm
	// begin inline asm
	lop3.b32 %r392, %r335, %r383, %r395, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r396, {%rs23, %rs23};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r397, %r395, %r396;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r400, %r392, %r397;
	// end inline asm
	mov.u32 	%r405, 8947848;
	// begin inline asm
	lop3.b32 %r403, %r324, %r405, %r384, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r407, {%rs23, %rs23};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r408, %r384, %r407;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r411, %r403, %r408;
	// end inline asm
	// begin inline asm
	lop3.b32 %r414, %r335, %r405, %r395, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r418, {%rs23, %rs23};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r419, %r395, %r418;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r422, %r414, %r419;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r425, %r426, %r389, %r367;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r429, %r426, %r400, %r370;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r433, %r426, %r411, %r373;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r437, %r426, %r422, %r376;
	// end inline asm
	// begin inline asm
	mov.b32 %r446, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	mov.b32 %r457, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	lop3.b32 %r443, %r324, %r383, %r446, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r447, {%rs23, %rs23};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r448, %r446, %r447;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r451, %r443, %r448;
	// end inline asm
	// begin inline asm
	lop3.b32 %r454, %r335, %r383, %r457, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r458, {%rs23, %rs23};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r459, %r457, %r458;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r462, %r454, %r459;
	// end inline asm
	// begin inline asm
	lop3.b32 %r465, %r324, %r405, %r446, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r469, {%rs23, %rs23};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r470, %r446, %r469;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r473, %r465, %r470;
	// end inline asm
	// begin inline asm
	lop3.b32 %r476, %r335, %r405, %r457, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r480, {%rs23, %rs23};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r481, %r457, %r480;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r484, %r476, %r481;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r487, %r488, %r451, %r425;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r491, %r488, %r462, %r429;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r495, %r488, %r473, %r433;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r499, %r488, %r484, %r437;
	// end inline asm
	// begin inline asm
	mov.b32 %r508, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	mov.b32 %r519, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	lop3.b32 %r505, %r324, %r383, %r508, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r509, {%rs23, %rs23};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r510, %r508, %r509;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r513, %r505, %r510;
	// end inline asm
	// begin inline asm
	lop3.b32 %r516, %r335, %r383, %r519, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r520, {%rs23, %rs23};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r521, %r519, %r520;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r524, %r516, %r521;
	// end inline asm
	// begin inline asm
	lop3.b32 %r527, %r324, %r405, %r508, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r531, {%rs23, %rs23};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r532, %r508, %r531;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r535, %r527, %r532;
	// end inline asm
	// begin inline asm
	lop3.b32 %r538, %r335, %r405, %r519, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r542, {%rs23, %rs23};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r543, %r519, %r542;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r546, %r538, %r543;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r569, %r550, %r513, %r487;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r573, %r550, %r524, %r491;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r578, %r550, %r535, %r495;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r582, %r550, %r546, %r499;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r565, %r566;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r567, %r565, %r569;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r570, %r567, %r572, %r573;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r574, %r566;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r576, %r574, %r578;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r579, %r576, %r572, %r582;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r583, %r566, %r573;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r586, %r583, %r572, %r569;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r590, %r566, %r582;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r593, %r590, %r572, %r578;
	// end inline asm
	mov.u32 	%r605, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r621, %r625}, {%r599, %r600, %r601, %r602}, {%r586, %r570}, {%r605, %r605};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r630, %r634}, {%r599, %r600, %r601, %r602}, {%r593, %r579}, {%r605, %r605};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r617, %r618;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r619, %r617, %r621;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r622, %r619, %r624, %r625;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r626, %r618;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r628, %r626, %r630;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r631, %r628, %r624, %r634;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r635, %r618, %r625;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r638, %r635, %r624, %r621;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r642, %r618, %r634;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r645, %r642, %r624, %r630;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r649, %r650}, {%r651, %r652, %r653, %r654}, {%r638, %r622}, {%r605, %r605};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r659, %r660}, {%r651, %r652, %r653, %r654}, {%r645, %r631}, {%r605, %r605};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r669, %r670, %r649;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r672, %r670, %r650;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r675, %r670, %r659;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r678, %r670, %r660;
	// end inline asm
	mov.u16 	%rs67, -14592;
	// begin inline asm
	mov.b32 %r681, {%rs67, %rs67};
	// end inline asm
	mov.u16 	%rs69, 18176;
	// begin inline asm
	mov.b32 %r682, {%rs69, %rs69};
	// end inline asm
	// begin inline asm
	max.f16x2 %r683, %r669, %r681;
	// end inline asm
	// begin inline asm
	min.f16x2 %r686, %r683, %r682;
	// end inline asm
	// begin inline asm
	mov.b32 %r689, {%rs67, %rs67};
	// end inline asm
	// begin inline asm
	mov.b32 %r690, {%rs69, %rs69};
	// end inline asm
	// begin inline asm
	max.f16x2 %r691, %r672, %r689;
	// end inline asm
	// begin inline asm
	min.f16x2 %r694, %r691, %r690;
	// end inline asm
	// begin inline asm
	mov.b32 %r697, {%rs67, %rs67};
	// end inline asm
	// begin inline asm
	mov.b32 %r698, {%rs69, %rs69};
	// end inline asm
	// begin inline asm
	max.f16x2 %r699, %r675, %r697;
	// end inline asm
	// begin inline asm
	min.f16x2 %r702, %r699, %r698;
	// end inline asm
	// begin inline asm
	mov.b32 %r705, {%rs67, %rs67};
	// end inline asm
	// begin inline asm
	mov.b32 %r706, {%rs69, %rs69};
	// end inline asm
	// begin inline asm
	max.f16x2 %r707, %r678, %r705;
	// end inline asm
	// begin inline asm
	min.f16x2 %r710, %r707, %r706;
	// end inline asm
	// begin inline asm
	mov.b32 %r716, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	mov.b32 %r714, {%rs23, %rs23};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r715, %r716, %r714;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r718, %r686, %r715;
	// end inline asm
	// begin inline asm
	mov.b32 %r721, {%rs23, %rs23};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r722, %r716, %r721;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r725, %r694, %r722;
	// end inline asm
	// begin inline asm
	mov.b32 %r728, {%rs23, %rs23};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r729, %r716, %r728;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r732, %r702, %r729;
	// end inline asm
	// begin inline asm
	mov.b32 %r735, {%rs23, %rs23};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r736, %r716, %r735;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r739, %r710, %r736;
	// end inline asm
	mov.u32 	%r745, 25152;
	// begin inline asm
	prmt.b32 %r742, %r718, %r732, %r745;
	// end inline asm
	// begin inline asm
	prmt.b32 %r746, %r725, %r739, %r745;
	// end inline asm
	shl.b32 	%r753, %r746, 4;
	mov.u32 	%r751, 252645135;
	// begin inline asm
	lop3.b32 %r750, %r751, %r742, %r753, 202;
	// end inline asm
	xor.b32  	%r755, %r750, -2004318072;
	st.shared.u32 	[%rd91], %r755;
	add.s32 	%r854, %r854, -16;
	add.s64 	%rd91, %rd91, 2180;
	add.s64 	%rd90, %rd90, 2180;
	setp.ne.s32 	%p60, %r854, 0;
	@%p60 bra 	LBB0_4;
// %bb.5:                               // %L8620
                                        //   in Loop: Header=BB0_3 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r761, [%rd6];
	ld.shared.u32 	%r762, [%rd7+128];
	ld.shared.u32 	%r769, [%rd7+4];
	ld.shared.u32 	%r770, [%rd7+132];
	ld.shared.u32 	%r777, [%rd8];
	ld.shared.u32 	%r778, [%rd9+128];
	ld.shared.u32 	%r785, [%rd9+4];
	ld.shared.u32 	%r786, [%rd9+132];
	ld.shared.u32 	%r793, [%rd10];
	ld.shared.u32 	%r794, [%rd11+128];
	ld.shared.u32 	%r801, [%rd11+4];
	ld.shared.u32 	%r802, [%rd11+132];
	ld.shared.u32 	%r809, [%rd12];
	ld.shared.u32 	%r810, [%rd13+128];
	ld.shared.u32 	%r817, [%rd13+4];
	ld.shared.u32 	%r818, [%rd13+132];
	// begin inline asm
	prmt.b32 %r756, %r761, %r762, %r759;
	// end inline asm
	// begin inline asm
	prmt.b32 %r760, %r761, %r762, %r763;
	// end inline asm
	// begin inline asm
	prmt.b32 %r764, %r769, %r770, %r759;
	// end inline asm
	// begin inline asm
	prmt.b32 %r768, %r769, %r770, %r763;
	// end inline asm
	// begin inline asm
	prmt.b32 %r772, %r777, %r778, %r759;
	// end inline asm
	// begin inline asm
	prmt.b32 %r776, %r777, %r778, %r763;
	// end inline asm
	// begin inline asm
	prmt.b32 %r780, %r785, %r786, %r759;
	// end inline asm
	// begin inline asm
	prmt.b32 %r784, %r785, %r786, %r763;
	// end inline asm
	// begin inline asm
	prmt.b32 %r788, %r793, %r794, %r759;
	// end inline asm
	// begin inline asm
	prmt.b32 %r792, %r793, %r794, %r763;
	// end inline asm
	// begin inline asm
	prmt.b32 %r796, %r801, %r802, %r759;
	// end inline asm
	// begin inline asm
	prmt.b32 %r800, %r801, %r802, %r763;
	// end inline asm
	// begin inline asm
	prmt.b32 %r804, %r809, %r810, %r759;
	// end inline asm
	// begin inline asm
	prmt.b32 %r808, %r809, %r810, %r763;
	// end inline asm
	// begin inline asm
	prmt.b32 %r812, %r817, %r818, %r759;
	// end inline asm
	// begin inline asm
	prmt.b32 %r816, %r817, %r818, %r763;
	// end inline asm
	selp.b32 	%r820, %r760, %r756, %p59;
	shfl.sync.bfly.b32	%r821, %r820, 8, 31, -1;
	selp.b32 	%r822, %r756, %r821, %p59;
	selp.b32 	%r823, %r821, %r760, %p59;
	selp.b32 	%r824, %r768, %r764, %p59;
	shfl.sync.bfly.b32	%r825, %r824, 8, 31, -1;
	selp.b32 	%r826, %r764, %r825, %p59;
	selp.b32 	%r827, %r825, %r768, %p59;
	selp.b32 	%r828, %r776, %r772, %p59;
	shfl.sync.bfly.b32	%r829, %r828, 8, 31, -1;
	selp.b32 	%r830, %r772, %r829, %p59;
	selp.b32 	%r831, %r829, %r776, %p59;
	selp.b32 	%r832, %r784, %r780, %p59;
	shfl.sync.bfly.b32	%r833, %r832, 8, 31, -1;
	selp.b32 	%r834, %r780, %r833, %p59;
	selp.b32 	%r835, %r833, %r784, %p59;
	selp.b32 	%r836, %r792, %r788, %p59;
	shfl.sync.bfly.b32	%r837, %r836, 8, 31, -1;
	selp.b32 	%r838, %r788, %r837, %p59;
	selp.b32 	%r839, %r837, %r792, %p59;
	selp.b32 	%r840, %r800, %r796, %p59;
	shfl.sync.bfly.b32	%r841, %r840, 8, 31, -1;
	selp.b32 	%r842, %r796, %r841, %p59;
	selp.b32 	%r843, %r841, %r800, %p59;
	selp.b32 	%r844, %r808, %r804, %p59;
	shfl.sync.bfly.b32	%r845, %r844, 8, 31, -1;
	selp.b32 	%r846, %r804, %r845, %p59;
	selp.b32 	%r847, %r845, %r808, %p59;
	selp.b32 	%r848, %r816, %r812, %p59;
	shfl.sync.bfly.b32	%r849, %r848, 8, 31, -1;
	selp.b32 	%r850, %r812, %r849, %p59;
	selp.b32 	%r851, %r849, %r816, %p59;
	st.global.v4.u32 	[%rd14+4], {%r822, %r826, %r823, %r827};
	st.global.v4.u32 	[%rd15+4], {%r830, %r834, %r831, %r835};
	st.global.v4.u32 	[%rd16+4], {%r838, %r842, %r839, %r843};
	st.global.v4.u32 	[%rd17+4], {%r846, %r850, %r847, %r851};
	add.s32 	%r22, %r853, 256;
	setp.ne.s32 	%p62, %r853, 32512;
	mov.u32 	%r853, %r22;
	@%p62 bra 	LBB0_3;
// %bb.6:                               // %L13153
	st.global.u32 	[%rd3], %r605;
	ret;
LBB0_1:                                 // %L8
	ld.param.u64 	%rd26, [_Z17julia_upchan_351213CuDeviceArrayI9Float16x2Li1ELi1EES_IS0_Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0];
	mov.u64 	%rd39, exception1;
	cvta.global.u64 	%rd40, %rd39;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd40;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd26;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
